
follower_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c450  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  0800c5f0  0800c5f0  0001c5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd18  0800cd18  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd18  0800cd18  0001cd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd20  0800cd20  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd20  0800cd20  0001cd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd24  0800cd24  0001cd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800cd28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200001d4  0800cefc  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  0800cefc  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e79d  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002267  00000000  00000000  0002e9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00030c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af8  00000000  00000000  00031a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c0b  00000000  00000000  00032568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff8f  00000000  00000000  0004a173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090b4a  00000000  00000000  0005a102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005588  00000000  00000000  000eac4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000f01d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c5d8 	.word	0x0800c5d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800c5d8 	.word	0x0800c5d8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <init_Robot>:



/// initial robot parameter

void init_Robot(Robot* robot){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    robot->x = -0.3;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <init_Robot+0x7c>)
 800102c:	601a      	str	r2, [r3, #0]
    robot->y = 0.0;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
    robot->theta = 0.0;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
    robot->omega = 0;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
//    robot->v = 0.05;//60rpm = 0.2041 50 = 0.17
    robot->v = 0.0;//60rpm = 0.2041 50 = 0.17
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	60da      	str	r2, [r3, #12]

    robot->v_r = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
    robot->v_l = 0;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
    robot->v_r_rpm = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
    robot->v_l_rpm = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
    robot->v_r_PWM = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
    robot->v_l_PWM = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
    robot->S_distance = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
    strcpy(robot->cmd,"STP");
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	331c      	adds	r3, #28
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <init_Robot+0x80>)
 800108c:	6810      	ldr	r0, [r2, #0]
 800108e:	6018      	str	r0, [r3, #0]

}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	be99999a 	.word	0xbe99999a
 80010a0:	0800c5f0 	.word	0x0800c5f0
 80010a4:	00000000 	.word	0x00000000

080010a8 <update_Position>:
/// @brief calculat new posstion of Robot from encoder value
/// @param robot
/// @param encoder_Right_Value
/// @param encoder_Left_Value
void update_Position(Robot* robot, int encoder_difference_left, int encoder_difference_right,float delta_t){
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	ed2d 8b02 	vpush	{d8}
 80010b0:	b088      	sub	sp, #32
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	ed87 0a00 	vstr	s0, [r7]
		float D_r  = (float) pi*d*(encoder_difference_right)/N;
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fa48 	bl	8000554 <__aeabi_i2d>
 80010c4:	a378      	add	r3, pc, #480	; (adr r3, 80012a8 <update_Position+0x200>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff faad 	bl	8000628 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	a376      	add	r3, pc, #472	; (adr r3, 80012b0 <update_Position+0x208>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fbce 	bl	800087c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fd96 	bl	8000c18 <__aeabi_d2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	61fb      	str	r3, [r7, #28]
		float D_l = (float) pi*d*(encoder_difference_left)/N;
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	f7ff fa2f 	bl	8000554 <__aeabi_i2d>
 80010f6:	a36c      	add	r3, pc, #432	; (adr r3, 80012a8 <update_Position+0x200>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff fa94 	bl	8000628 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	a369      	add	r3, pc, #420	; (adr r3, 80012b0 <update_Position+0x208>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fbb5 	bl	800087c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd7d 	bl	8000c18 <__aeabi_d2f>
 800111e:	4603      	mov	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]
		float D_c = (D_r + D_l)/2;
 8001122:	ed97 7a07 	vldr	s14, [r7, #28]
 8001126:	edd7 7a06 	vldr	s15, [r7, #24]
 800112a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800112e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001136:	edc7 7a05 	vstr	s15, [r7, #20]

      robot->x += D_c*cos(robot->theta);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa1a 	bl	8000578 <__aeabi_f2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	4680      	mov	r8, r0
 8001150:	4689      	mov	r9, r1
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fa0e 	bl	8000578 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	ec43 2b10 	vmov	d0, r2, r3
 8001164:	f009 ff38 	bl	800afd8 <cos>
 8001168:	ec53 2b10 	vmov	r2, r3, d0
 800116c:	4640      	mov	r0, r8
 800116e:	4649      	mov	r1, r9
 8001170:	f7ff fa5a 	bl	8000628 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff f89e 	bl	80002bc <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fd46 	bl	8000c18 <__aeabi_d2f>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]
      robot->y += D_c*sin(robot->theta);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9ee 	bl	8000578 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	6978      	ldr	r0, [r7, #20]
 80011a2:	f7ff f9e9 	bl	8000578 <__aeabi_f2d>
 80011a6:	4680      	mov	r8, r0
 80011a8:	4689      	mov	r9, r1
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9e2 	bl	8000578 <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	ec43 2b10 	vmov	d0, r2, r3
 80011bc:	f009 ff60 	bl	800b080 <sin>
 80011c0:	ec53 2b10 	vmov	r2, r3, d0
 80011c4:	4640      	mov	r0, r8
 80011c6:	4649      	mov	r1, r9
 80011c8:	f7ff fa2e 	bl	8000628 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4620      	mov	r0, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	f7ff f872 	bl	80002bc <__adddf3>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fd1a 	bl	8000c18 <__aeabi_d2f>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	605a      	str	r2, [r3, #4]
      robot->theta += (D_r -D_l)/(L);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9c2 	bl	8000578 <__aeabi_f2d>
 80011f4:	4604      	mov	r4, r0
 80011f6:	460d      	mov	r5, r1
 80011f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ee17 0a90 	vmov	r0, s15
 8001208:	f7ff f9b6 	bl	8000578 <__aeabi_f2d>
 800120c:	a32a      	add	r3, pc, #168	; (adr r3, 80012b8 <update_Position+0x210>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff fb33 	bl	800087c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7ff f84d 	bl	80002bc <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fcf5 	bl	8000c18 <__aeabi_d2f>
 800122e:	4602      	mov	r2, r0
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	609a      	str	r2, [r3, #8]
//      robot->v = 0.1*robot->omega;
//      robot->theta = robot->omega* delta_t;
      robot->theta = atan2(sin(robot->theta),cos(robot->theta)) ;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f99d 	bl	8000578 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	ec43 2b10 	vmov	d0, r2, r3
 8001246:	f009 ff1b 	bl	800b080 <sin>
 800124a:	eeb0 8a40 	vmov.f32	s16, s0
 800124e:	eef0 8a60 	vmov.f32	s17, s1
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f98e 	bl	8000578 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	ec43 2b10 	vmov	d0, r2, r3
 8001264:	f009 feb8 	bl	800afd8 <cos>
 8001268:	eeb0 7a40 	vmov.f32	s14, s0
 800126c:	eef0 7a60 	vmov.f32	s15, s1
 8001270:	eeb0 1a47 	vmov.f32	s2, s14
 8001274:	eef0 1a67 	vmov.f32	s3, s15
 8001278:	eeb0 0a48 	vmov.f32	s0, s16
 800127c:	eef0 0a68 	vmov.f32	s1, s17
 8001280:	f009 fea6 	bl	800afd0 <atan2>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fcc4 	bl	8000c18 <__aeabi_d2f>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	609a      	str	r2, [r3, #8]
//      if (robot->phi > 2 * pi) robot->phi -= 2 * pi;
//      else if (robot->phi < 0) robot->phi += 2 * pi;
}
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	ecbd 8b02 	vpop	{d8}
 80012a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012a4:	f3af 8000 	nop.w
 80012a8:	c7ae147b 	.word	0xc7ae147b
 80012ac:	3fca2324 	.word	0x3fca2324
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40901800 	.word	0x40901800
 80012b8:	70a3d70a 	.word	0x70a3d70a
 80012bc:	3fc70a3d 	.word	0x3fc70a3d

080012c0 <desired_point_init>:
 *  Created on: Mar 31, 2024
 *      Author: Nghia
 */
#include "decoding_frame.h"
#include "string.h"
void desired_point_init(desired_point* my_desired_point){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	my_desired_point->x_d = 0;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
	my_desired_point->y_d = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
	my_desired_point->phi_d = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
	strcpy(my_desired_point->cmd_d, "stp");
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <desired_point_init+0x34>)
 80012e4:	6810      	ldr	r0, [r2, #0]
 80012e6:	6018      	str	r0, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	0800c5f4 	.word	0x0800c5f4

080012f8 <split_frame_vel>:
void split_frame(char *frame, desired_point* my_desired_point) {
    // Sử dụng sscanf để trích xuất giá trị từ chuỗi
    sscanf(frame, "!cmd:%[^#]#x:%f#y:%f#phi:%f#\n", my_desired_point->cmd_d, &my_desired_point->x_d, &my_desired_point->y_d, &my_desired_point->phi_d);
}

void split_frame_vel(char *frame,desired_point* my_desired_point){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	sscanf(frame,"!cmd:%[^#]#v_r:%f#v_l:%f#\n",my_desired_point->cmd_d,&my_desired_point->v_r,&my_desired_point->v_l);
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f103 0110 	add.w	r1, r3, #16
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3314      	adds	r3, #20
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	460b      	mov	r3, r1
 8001312:	4904      	ldr	r1, [pc, #16]	; (8001324 <split_frame_vel+0x2c>)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f005 fd9f 	bl	8006e58 <siscanf>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0800c618 	.word	0x0800c618

08001328 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart2.Instance){
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_UART_RxCpltCallback+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d122      	bne.n	8001382 <HAL_UART_RxCpltCallback+0x5a>
//		receive_data(Rx);
		if(Rx == '\n'){
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_UART_RxCpltCallback+0x68>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b0a      	cmp	r3, #10
 8001342:	d10e      	bne.n	8001362 <HAL_UART_RxCpltCallback+0x3a>
			uart_flag =1;
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_UART_RxCpltCallback+0x6c>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]
			uart_buff[uart_len++] = Rx;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_UART_RxCpltCallback+0x70>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	b2d1      	uxtb	r1, r2
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_UART_RxCpltCallback+0x70>)
 8001354:	7011      	strb	r1, [r2, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_UART_RxCpltCallback+0x68>)
 800135a:	7819      	ldrb	r1, [r3, #0]
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_UART_RxCpltCallback+0x74>)
 800135e:	5499      	strb	r1, [r3, r2]
 8001360:	e00a      	b.n	8001378 <HAL_UART_RxCpltCallback+0x50>
		}

		else{
			uart_buff[uart_len++]= Rx;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_UART_RxCpltCallback+0x70>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	b2d1      	uxtb	r1, r2
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_UART_RxCpltCallback+0x70>)
 800136c:	7011      	strb	r1, [r2, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_UART_RxCpltCallback+0x68>)
 8001372:	7819      	ldrb	r1, [r3, #0]
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_UART_RxCpltCallback+0x74>)
 8001376:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&huart2, &Rx, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	4905      	ldr	r1, [pc, #20]	; (8001390 <HAL_UART_RxCpltCallback+0x68>)
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <HAL_UART_RxCpltCallback+0x64>)
 800137e:	f003 fda9 	bl	8004ed4 <HAL_UART_Receive_IT>
	}
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200003d8 	.word	0x200003d8
 8001390:	200001f0 	.word	0x200001f0
 8001394:	20000228 	.word	0x20000228
 8001398:	2000022c 	.word	0x2000022c
 800139c:	200001f4 	.word	0x200001f4

080013a0 <HAL_TIM_PeriodElapsedCallback>:
// todo timer interuppt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013a4:	b088      	sub	sp, #32
 80013a6:	af06      	add	r7, sp, #24
 80013a8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d170      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0xf6>
		//doc encoder
		if(count >= 0.1 ){
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dd67      	ble.n	800148c <HAL_TIM_PeriodElapsedCallback+0xec>

			encoder_value_left = -1*__HAL_TIM_GET_COUNTER(&htim2);
 80013bc:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	425b      	negs	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80013c8:	601a      	str	r2, [r3, #0]
			encoder_value_right =__HAL_TIM_GET_COUNTER(&htim5);
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013d4:	601a      	str	r2, [r3, #0]

			encoder_difference_left = encoder_value_left - pre_encoder_value_left;
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	4a36      	ldr	r2, [pc, #216]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80013e2:	6013      	str	r3, [r2, #0]
			encoder_difference_right = encoder_value_right - pre_encoder_value_right;
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	4a35      	ldr	r2, [pc, #212]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80013f0:	6013      	str	r3, [r2, #0]
			pre_encoder_value_right = encoder_value_right ;
 80013f2:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a32      	ldr	r2, [pc, #200]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80013f8:	6013      	str	r3, [r2, #0]
			pre_encoder_value_left = encoder_value_left ;
 80013fa:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001400:	6013      	str	r3, [r2, #0]
//
			update_Position(&myRobot, encoder_difference_left, encoder_difference_right,0.1);
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80014c8 <HAL_TIM_PeriodElapsedCallback+0x128>
 800140e:	4619      	mov	r1, r3
 8001410:	482e      	ldr	r0, [pc, #184]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001412:	f7ff fe49 	bl	80010a8 <update_Position>
//			update_Position_base_velocity(&myRobot, encoder_difference_left, encoder_difference_right,0.1);//delta time is 0.1

			//ennable PID calculation
			en_PID =1;
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
			//return PWM
//			sprintf(data,"!W_L_PWM:%.2f#W_R_PWM:%.2f#\n",myRobot.v_l_PWM,myRobot.v_r_PWM);
//			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));


			if(strcmp(myRobot.cmd,"RUN")== 0 ){
 800141c:	492d      	ldr	r1, [pc, #180]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800141e:	482e      	ldr	r0, [pc, #184]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001420:	f7fe fede 	bl	80001e0 <strcmp>
				//return PWM
//				sprintf(data,"!W_L_PWM:%.2f#W_R_PWM:%.2f#\n",myRobot.v_l_PWM,myRobot.v_r_PWM);
//				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
			}
			//return x y phi; !cmd:RUN#x:0.00#y:0.00#phi:0.00#
			sprintf(data,"!cmd:%s#x:%.2f#y:%.2f#phi:%.2f#\n",myRobot.cmd,myRobot.x,myRobot.y,rad_to_degree(myRobot.theta));
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f8a5 	bl	8000578 <__aeabi_f2d>
 800142e:	4604      	mov	r4, r0
 8001430:	460d      	mov	r5, r1
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f89e 	bl	8000578 <__aeabi_f2d>
 800143c:	4680      	mov	r8, r0
 800143e:	4689      	mov	r9, r1
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001442:	edd3 7a02 	vldr	s15, [r3, #8]
 8001446:	eeb0 0a67 	vmov.f32	s0, s15
 800144a:	f000 fca1 	bl	8001d90 <rad_to_degree>
 800144e:	ee10 3a10 	vmov	r3, s0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f890 	bl	8000578 <__aeabi_f2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001460:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001464:	e9cd 4500 	strd	r4, r5, [sp]
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800146a:	491c      	ldr	r1, [pc, #112]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800146c:	481c      	ldr	r0, [pc, #112]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800146e:	f005 fcd3 	bl	8006e18 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
 8001472:	481b      	ldr	r0, [pc, #108]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001474:	f7fe ff14 	bl	80002a0 <strlen>
 8001478:	4603      	mov	r3, r0
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4918      	ldr	r1, [pc, #96]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001480:	4818      	ldr	r0, [pc, #96]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001482:	f003 fd4d 	bl	8004f20 <HAL_UART_Transmit_DMA>

//			sprintf(data,"!cmd:%s#v_r:%.2f#v_l:%.2f#\n",myRobot.cmd,myRobot.v_r,myRobot.v_l);
//			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));

			//reset count
			count=0;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
		}
		count++;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001494:	6013      	str	r3, [r2, #0]
	}
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014a0:	40000400 	.word	0x40000400
 80014a4:	200002b4 	.word	0x200002b4
 80014a8:	20000300 	.word	0x20000300
 80014ac:	20000230 	.word	0x20000230
 80014b0:	20000390 	.word	0x20000390
 80014b4:	20000234 	.word	0x20000234
 80014b8:	20000238 	.word	0x20000238
 80014bc:	20000240 	.word	0x20000240
 80014c0:	2000023c 	.word	0x2000023c
 80014c4:	20000244 	.word	0x20000244
 80014c8:	3dcccccd 	.word	0x3dcccccd
 80014cc:	20000480 	.word	0x20000480
 80014d0:	200002b0 	.word	0x200002b0
 80014d4:	0800c634 	.word	0x0800c634
 80014d8:	2000049c 	.word	0x2000049c
 80014dc:	0800c638 	.word	0x0800c638
 80014e0:	20000248 	.word	0x20000248
 80014e4:	200003d8 	.word	0x200003d8

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ec:	f000 ffc4 	bl	8002478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f994 	bl	800181c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f000 fbf4 	bl	8001ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014f8:	f000 fbd2 	bl	8001ca0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014fc:	f000 fba6 	bl	8001c4c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001500:	f000 f9ea 	bl	80018d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001504:	f000 faac 	bl	8001a60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001508:	f000 fafe 	bl	8001b08 <MX_TIM3_Init>
  MX_TIM5_Init();
 800150c:	f000 fb4a 	bl	8001ba4 <MX_TIM5_Init>


  /* USER CODE BEGIN 2 */
  //start  uart2 interupt
  // todo
  init_Robot(&myRobot);
 8001510:	48a9      	ldr	r0, [pc, #676]	; (80017b8 <main+0x2d0>)
 8001512:	f7ff fd85 	bl	8001020 <init_Robot>
  desired_point_init(&my_desired_point);
 8001516:	48a9      	ldr	r0, [pc, #676]	; (80017bc <main+0x2d4>)
 8001518:	f7ff fed2 	bl	80012c0 <desired_point_init>
  HAL_UART_Receive_IT(&huart2, &Rx, 1);
 800151c:	2201      	movs	r2, #1
 800151e:	49a8      	ldr	r1, [pc, #672]	; (80017c0 <main+0x2d8>)
 8001520:	48a8      	ldr	r0, [pc, #672]	; (80017c4 <main+0x2dc>)
 8001522:	f003 fcd7 	bl	8004ed4 <HAL_UART_Receive_IT>
  //ref KP KI KD
//  pid_set_Kp_Ki_Kd(&hpid,1.55, 0.055, 0.025,0.1);
  pid_set_Kp_Ki_Kd(&hpid, 5, 0.13, 0.025,0.1);
 8001526:	eddf 1aa8 	vldr	s3, [pc, #672]	; 80017c8 <main+0x2e0>
 800152a:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 80017cc <main+0x2e4>
 800152e:	eddf 0aa8 	vldr	s1, [pc, #672]	; 80017d0 <main+0x2e8>
 8001532:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001536:	48a7      	ldr	r0, [pc, #668]	; (80017d4 <main+0x2ec>)
 8001538:	f000 fc7a 	bl	8001e30 <pid_set_Kp_Ki_Kd>
  //start PWM TIM1; chanel 1,2 for left motor ; chanel 3,4 for right  motor
  //chanel 1 PE9 ;chanel 2 PE11; chanel 3 PE23 ; chanel 4 PE14;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800153c:	2100      	movs	r1, #0
 800153e:	48a6      	ldr	r0, [pc, #664]	; (80017d8 <main+0x2f0>)
 8001540:	f002 fc46 	bl	8003dd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001544:	2104      	movs	r1, #4
 8001546:	48a4      	ldr	r0, [pc, #656]	; (80017d8 <main+0x2f0>)
 8001548:	f002 fc42 	bl	8003dd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800154c:	2108      	movs	r1, #8
 800154e:	48a2      	ldr	r0, [pc, #648]	; (80017d8 <main+0x2f0>)
 8001550:	f002 fc3e 	bl	8003dd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001554:	210c      	movs	r1, #12
 8001556:	48a0      	ldr	r0, [pc, #640]	; (80017d8 <main+0x2f0>)
 8001558:	f002 fc3a 	bl	8003dd0 <HAL_TIM_PWM_Start>
  //start encoder Mode
  // TIM2 For encoder of left motor , TIM5 for encoder of Right motor
  // TIM2:PA5,PB3 ; TIM5 PA0,PA1
//  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
//  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1|TIM_CHANNEL_2);
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 800155c:	2104      	movs	r1, #4
 800155e:	489f      	ldr	r0, [pc, #636]	; (80017dc <main+0x2f4>)
 8001560:	f002 fd8c 	bl	800407c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8001564:	2100      	movs	r1, #0
 8001566:	489e      	ldr	r0, [pc, #632]	; (80017e0 <main+0x2f8>)
 8001568:	f002 fd88 	bl	800407c <HAL_TIM_Encoder_Start>
  //start interrupt timer 3
  HAL_TIM_Base_Start_IT(&htim3);
 800156c:	489d      	ldr	r0, [pc, #628]	; (80017e4 <main+0x2fc>)
 800156e:	f002 fb73 	bl	8003c58 <HAL_TIM_Base_Start_IT>
//	  HAL_UART_Transmit(&huart2, tx_buff, sizeof(tx_buff),100);
//	  HAL_Delay(100);
// todo pid

	  // transmit data when stm32 recieved data form PC
	  if(uart_flag == 1){
 8001572:	4b9d      	ldr	r3, [pc, #628]	; (80017e8 <main+0x300>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d12d      	bne.n	80015d6 <main+0xee>
		  //decoding frame data;
//		  split_frame((char*)uart_buff, &my_desired_point);
		  split_frame_vel((char*)uart_buff, &my_desired_point);
 800157a:	4990      	ldr	r1, [pc, #576]	; (80017bc <main+0x2d4>)
 800157c:	489b      	ldr	r0, [pc, #620]	; (80017ec <main+0x304>)
 800157e:	f7ff febb 	bl	80012f8 <split_frame_vel>
		  if(strcmp(my_desired_point.cmd_d, "RUN") == 0){
 8001582:	499b      	ldr	r1, [pc, #620]	; (80017f0 <main+0x308>)
 8001584:	488d      	ldr	r0, [pc, #564]	; (80017bc <main+0x2d4>)
 8001586:	f7fe fe2b 	bl	80001e0 <strcmp>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10d      	bne.n	80015ac <main+0xc4>
			  strcpy(myRobot.cmd,my_desired_point.cmd_d);
 8001590:	498a      	ldr	r1, [pc, #552]	; (80017bc <main+0x2d4>)
 8001592:	4898      	ldr	r0, [pc, #608]	; (80017f4 <main+0x30c>)
 8001594:	f005 fd51 	bl	800703a <strcpy>
			  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port,PE10_EN_DRIVER_Pin,SET);
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159e:	4896      	ldr	r0, [pc, #600]	; (80017f8 <main+0x310>)
 80015a0:	f001 fe98 	bl	80032d4 <HAL_GPIO_WritePin>
			  en_run = 1;
 80015a4:	4b95      	ldr	r3, [pc, #596]	; (80017fc <main+0x314>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e008      	b.n	80015be <main+0xd6>
		  }
		  else{
			  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port,PE10_EN_DRIVER_Pin,RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b2:	4891      	ldr	r0, [pc, #580]	; (80017f8 <main+0x310>)
 80015b4:	f001 fe8e 	bl	80032d4 <HAL_GPIO_WritePin>
			  en_run = 0;
 80015b8:	4b90      	ldr	r3, [pc, #576]	; (80017fc <main+0x314>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

		  //send data to check desire point: !cmd:RUN#v_r:0.00#v_l:0.00#\n
//		  sprintf(data,"!cmd:%s#v_r:%.2f#v_l:%.2f#\n",my_desired_point.cmd_d,my_desired_point.v_r,my_desired_point.v_l);
//		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));

		  HAL_Delay(100);
 80015be:	2064      	movs	r0, #100	; 0x64
 80015c0:	f000 ffcc 	bl	800255c <HAL_Delay>
		  uart_len = 0;
 80015c4:	4b8e      	ldr	r3, [pc, #568]	; (8001800 <main+0x318>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
		  uart_flag =0;
 80015ca:	4b87      	ldr	r3, [pc, #540]	; (80017e8 <main+0x300>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
		  en_PID = 1;
 80015d0:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <main+0x31c>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
	  }
		 // PID and control motor
	  	  if(en_PID ==1){
 80015d6:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <main+0x31c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d17c      	bne.n	80016d8 <main+0x1f0>
	  		  // after recieve data store desire data to robot
	  		  myRobot.v_r = my_desired_point.v_r;
 80015de:	4b77      	ldr	r3, [pc, #476]	; (80017bc <main+0x2d4>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4a75      	ldr	r2, [pc, #468]	; (80017b8 <main+0x2d0>)
 80015e4:	6153      	str	r3, [r2, #20]
	  		  myRobot.v_l = my_desired_point.v_l;
 80015e6:	4b75      	ldr	r3, [pc, #468]	; (80017bc <main+0x2d4>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a73      	ldr	r2, [pc, #460]	; (80017b8 <main+0x2d0>)
 80015ec:	6113      	str	r3, [r2, #16]
		  	  //limint vr vl
	  		  if(myRobot.v_r >= 0){
 80015ee:	4b72      	ldr	r3, [pc, #456]	; (80017b8 <main+0x2d0>)
 80015f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80015f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	db21      	blt.n	8001642 <main+0x15a>
	  			  if(myRobot.v_r > v_max){
 80015fe:	4b6e      	ldr	r3, [pc, #440]	; (80017b8 <main+0x2d0>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffb8 	bl	8000578 <__aeabi_f2d>
 8001608:	a367      	add	r3, pc, #412	; (adr r3, 80017a8 <main+0x2c0>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7ff fa9b 	bl	8000b48 <__aeabi_dcmpgt>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <main+0x138>
	  				  myRobot.v_r = v_max;
 8001618:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <main+0x2d0>)
 800161a:	4a7b      	ldr	r2, [pc, #492]	; (8001808 <main+0x320>)
 800161c:	615a      	str	r2, [r3, #20]
 800161e:	e043      	b.n	80016a8 <main+0x1c0>
	  			  }
	  			  else if(myRobot.v_r < v_min ){
 8001620:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <main+0x2d0>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ffa7 	bl	8000578 <__aeabi_f2d>
 800162a:	a361      	add	r3, pc, #388	; (adr r3, 80017b0 <main+0x2c8>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7ff fa6c 	bl	8000b0c <__aeabi_dcmplt>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d036      	beq.n	80016a8 <main+0x1c0>
	  				myRobot.v_r  = v_min;
 800163a:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <main+0x2d0>)
 800163c:	4a73      	ldr	r2, [pc, #460]	; (800180c <main+0x324>)
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	e032      	b.n	80016a8 <main+0x1c0>
	  			  }
	  		  }
	  		  else if(myRobot.v_r < 0){
 8001642:	4b5d      	ldr	r3, [pc, #372]	; (80017b8 <main+0x2d0>)
 8001644:	edd3 7a05 	vldr	s15, [r3, #20]
 8001648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d52a      	bpl.n	80016a8 <main+0x1c0>
	  			  if(-myRobot.v_r > v_max){
 8001652:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <main+0x2d0>)
 8001654:	edd3 7a05 	vldr	s15, [r3, #20]
 8001658:	eef1 7a67 	vneg.f32	s15, s15
 800165c:	ee17 3a90 	vmov	r3, s15
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff89 	bl	8000578 <__aeabi_f2d>
 8001666:	a350      	add	r3, pc, #320	; (adr r3, 80017a8 <main+0x2c0>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7ff fa6c 	bl	8000b48 <__aeabi_dcmpgt>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <main+0x196>
	  				  myRobot.v_r = -v_max;
 8001676:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <main+0x2d0>)
 8001678:	4a65      	ldr	r2, [pc, #404]	; (8001810 <main+0x328>)
 800167a:	615a      	str	r2, [r3, #20]
 800167c:	e014      	b.n	80016a8 <main+0x1c0>
	  			  }
	  			  else if(-myRobot.v_r < v_min ){
 800167e:	4b4e      	ldr	r3, [pc, #312]	; (80017b8 <main+0x2d0>)
 8001680:	edd3 7a05 	vldr	s15, [r3, #20]
 8001684:	eef1 7a67 	vneg.f32	s15, s15
 8001688:	ee17 3a90 	vmov	r3, s15
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff73 	bl	8000578 <__aeabi_f2d>
 8001692:	a347      	add	r3, pc, #284	; (adr r3, 80017b0 <main+0x2c8>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff fa38 	bl	8000b0c <__aeabi_dcmplt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <main+0x1c0>
	  				myRobot.v_r  = -v_min;
 80016a2:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <main+0x2d0>)
 80016a4:	4a5b      	ldr	r2, [pc, #364]	; (8001814 <main+0x32c>)
 80016a6:	615a      	str	r2, [r3, #20]
//		  		myRobot.v_r = my_desired_point.v_r;
//		  	  }
//		  	  sprintf(data,"!cmd:%s#v_r:%.2f#v_l:%.2f#\n",myRobot.cmd,myRobot.v_r,myRobot.v_l);
//		  	  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
		  	  // limit max min PWM for motor
		  	  myRobot.v_l_PWM = mps_to_PWM(myRobot.v_l);
 80016a8:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <main+0x2d0>)
 80016aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	f000 fb91 	bl	8001dd8 <mps_to_PWM>
 80016b6:	eef0 7a40 	vmov.f32	s15, s0
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <main+0x2d0>)
 80016bc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		  	  myRobot.v_r_PWM = mps_to_PWM(myRobot.v_r );
 80016c0:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <main+0x2d0>)
 80016c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	f000 fb85 	bl	8001dd8 <mps_to_PWM>
 80016ce:	eef0 7a40 	vmov.f32	s15, s0
 80016d2:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <main+0x2d0>)
 80016d4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
//	  		  en_PID =0;
	  	  }


		  // PWM cho 2 motor
		  if(en_run == 1){
 80016d8:	4b48      	ldr	r3, [pc, #288]	; (80017fc <main+0x314>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d14e      	bne.n	800177e <main+0x296>
			  //left motor
			  // clockwise
			  if(myRobot.v_l_PWM > 0){
 80016e0:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <main+0x2d0>)
 80016e2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	dd0e      	ble.n	800170e <main+0x226>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,(int)myRobot.v_l_PWM);//
 80016f0:	4b31      	ldr	r3, [pc, #196]	; (80017b8 <main+0x2d0>)
 80016f2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <main+0x2f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	ee17 2a90 	vmov	r2, s15
 8001702:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <main+0x2f0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2200      	movs	r2, #0
 800170a:	639a      	str	r2, [r3, #56]	; 0x38
 800170c:	e00f      	b.n	800172e <main+0x246>
			  }
			  //counter Clokwise
			  else{
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);//
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <main+0x2f0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2200      	movs	r2, #0
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,(int)-myRobot.v_l_PWM);
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <main+0x2d0>)
 8001718:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800171c:	eef1 7a67 	vneg.f32	s15, s15
 8001720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <main+0x2f0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	ee17 2a90 	vmov	r2, s15
 800172c:	639a      	str	r2, [r3, #56]	; 0x38
			  }
			  //right motor
			  // clockwise
			  if(myRobot.v_r_PWM > 0){
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <main+0x2d0>)
 8001730:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	dd0e      	ble.n	800175c <main+0x274>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,(int)myRobot.v_r_PWM);//
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <main+0x2d0>)
 8001740:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <main+0x2f0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	ee17 2a90 	vmov	r2, s15
 8001750:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <main+0x2f0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2200      	movs	r2, #0
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
 800175a:	e70a      	b.n	8001572 <main+0x8a>
			  }
			  //counter Clokwise
			  else{
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);//
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <main+0x2f0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,(int)-1*myRobot.v_r_PWM);
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <main+0x2d0>)
 8001766:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800176a:	eef1 7a67 	vneg.f32	s15, s15
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <main+0x2f0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001776:	ee17 2a90 	vmov	r2, s15
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
 800177c:	e6f9      	b.n	8001572 <main+0x8a>
			  }
		  }
		  else{
			  strcpy(myRobot.cmd,"STP");
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <main+0x30c>)
 8001780:	4a25      	ldr	r2, [pc, #148]	; (8001818 <main+0x330>)
 8001782:	601a      	str	r2, [r3, #0]
//			  myRobot.theta = 0.0;
//			  init_Robot(&myRobot);
			  //left motor
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);//
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <main+0x2f0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2200      	movs	r2, #0
 800178a:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <main+0x2f0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	639a      	str	r2, [r3, #56]	; 0x38
			  //right motor
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);//
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <main+0x2f0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2200      	movs	r2, #0
 800179a:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <main+0x2f0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
	  if(uart_flag == 1){
 80017a4:	e6e5      	b.n	8001572 <main+0x8a>
 80017a6:	bf00      	nop
 80017a8:	147ae148 	.word	0x147ae148
 80017ac:	3fd147ae 	.word	0x3fd147ae
 80017b0:	eb851eb8 	.word	0xeb851eb8
 80017b4:	3fbeb851 	.word	0x3fbeb851
 80017b8:	20000480 	.word	0x20000480
 80017bc:	200004dc 	.word	0x200004dc
 80017c0:	200001f0 	.word	0x200001f0
 80017c4:	200003d8 	.word	0x200003d8
 80017c8:	3dcccccd 	.word	0x3dcccccd
 80017cc:	3ccccccd 	.word	0x3ccccccd
 80017d0:	3e051eb8 	.word	0x3e051eb8
 80017d4:	200004b4 	.word	0x200004b4
 80017d8:	200002b8 	.word	0x200002b8
 80017dc:	20000300 	.word	0x20000300
 80017e0:	20000390 	.word	0x20000390
 80017e4:	20000348 	.word	0x20000348
 80017e8:	20000228 	.word	0x20000228
 80017ec:	200001f4 	.word	0x200001f4
 80017f0:	0800c634 	.word	0x0800c634
 80017f4:	2000049c 	.word	0x2000049c
 80017f8:	40021000 	.word	0x40021000
 80017fc:	200002ac 	.word	0x200002ac
 8001800:	2000022c 	.word	0x2000022c
 8001804:	200002b0 	.word	0x200002b0
 8001808:	3e8a3d71 	.word	0x3e8a3d71
 800180c:	3df5c28f 	.word	0x3df5c28f
 8001810:	be8a3d71 	.word	0xbe8a3d71
 8001814:	bdf5c28f 	.word	0xbdf5c28f
 8001818:	00505453 	.word	0x00505453

0800181c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	; 0x50
 8001820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	2230      	movs	r2, #48	; 0x30
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f005 fb85 	bl	8006f3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <SystemClock_Config+0xb4>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <SystemClock_Config+0xb4>)
 800184a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184e:	6413      	str	r3, [r2, #64]	; 0x40
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <SystemClock_Config+0xb4>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <SystemClock_Config+0xb8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <SystemClock_Config+0xb8>)
 8001866:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <SystemClock_Config+0xb8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001878:	2302      	movs	r3, #2
 800187a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187c:	2301      	movs	r3, #1
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001880:	2310      	movs	r3, #16
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001884:	2300      	movs	r3, #0
 8001886:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	4618      	mov	r0, r3
 800188e:	f001 fd3b 	bl	8003308 <HAL_RCC_OscConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001898:	f000 fa74 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189c:	230f      	movs	r3, #15
 800189e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 ff9e 	bl	80037f8 <HAL_RCC_ClockConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018c2:	f000 fa5f 	bl	8001d84 <Error_Handler>
  }
}
 80018c6:	bf00      	nop
 80018c8:	3750      	adds	r7, #80	; 0x50
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000

080018d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b096      	sub	sp, #88	; 0x58
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	615a      	str	r2, [r3, #20]
 8001908:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2220      	movs	r2, #32
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f005 fb12 	bl	8006f3a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001916:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <MX_TIM1_Init+0x180>)
 8001918:	4a50      	ldr	r2, [pc, #320]	; (8001a5c <MX_TIM1_Init+0x184>)
 800191a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800191c:	4b4e      	ldr	r3, [pc, #312]	; (8001a58 <MX_TIM1_Init+0x180>)
 800191e:	220f      	movs	r2, #15
 8001920:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <MX_TIM1_Init+0x180>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001928:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <MX_TIM1_Init+0x180>)
 800192a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800192e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001930:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <MX_TIM1_Init+0x180>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001936:	4b48      	ldr	r3, [pc, #288]	; (8001a58 <MX_TIM1_Init+0x180>)
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193c:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <MX_TIM1_Init+0x180>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001942:	4845      	ldr	r0, [pc, #276]	; (8001a58 <MX_TIM1_Init+0x180>)
 8001944:	f002 f938 	bl	8003bb8 <HAL_TIM_Base_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800194e:	f000 fa19 	bl	8001d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001958:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800195c:	4619      	mov	r1, r3
 800195e:	483e      	ldr	r0, [pc, #248]	; (8001a58 <MX_TIM1_Init+0x180>)
 8001960:	f002 fdcc 	bl	80044fc <HAL_TIM_ConfigClockSource>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800196a:	f000 fa0b 	bl	8001d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800196e:	483a      	ldr	r0, [pc, #232]	; (8001a58 <MX_TIM1_Init+0x180>)
 8001970:	f002 f9d4 	bl	8003d1c <HAL_TIM_PWM_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800197a:	f000 fa03 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001986:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800198a:	4619      	mov	r1, r3
 800198c:	4832      	ldr	r0, [pc, #200]	; (8001a58 <MX_TIM1_Init+0x180>)
 800198e:	f003 f97d 	bl	8004c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001998:	f000 f9f4 	bl	8001d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199c:	2360      	movs	r3, #96	; 0x60
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019bc:	2200      	movs	r2, #0
 80019be:	4619      	mov	r1, r3
 80019c0:	4825      	ldr	r0, [pc, #148]	; (8001a58 <MX_TIM1_Init+0x180>)
 80019c2:	f002 fcd9 	bl	8004378 <HAL_TIM_PWM_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019cc:	f000 f9da 	bl	8001d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	2204      	movs	r2, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	481f      	ldr	r0, [pc, #124]	; (8001a58 <MX_TIM1_Init+0x180>)
 80019da:	f002 fccd 	bl	8004378 <HAL_TIM_PWM_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80019e4:	f000 f9ce 	bl	8001d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ec:	2208      	movs	r2, #8
 80019ee:	4619      	mov	r1, r3
 80019f0:	4819      	ldr	r0, [pc, #100]	; (8001a58 <MX_TIM1_Init+0x180>)
 80019f2:	f002 fcc1 	bl	8004378 <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80019fc:	f000 f9c2 	bl	8001d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	220c      	movs	r2, #12
 8001a06:	4619      	mov	r1, r3
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <MX_TIM1_Init+0x180>)
 8001a0a:	f002 fcb5 	bl	8004378 <HAL_TIM_PWM_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001a14:	f000 f9b6 	bl	8001d84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <MX_TIM1_Init+0x180>)
 8001a3c:	f003 f994 	bl	8004d68 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001a46:	f000 f99d 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <MX_TIM1_Init+0x180>)
 8001a4c:	f000 fb0e 	bl	800206c <HAL_TIM_MspPostInit>

}
 8001a50:	bf00      	nop
 8001a52:	3758      	adds	r7, #88	; 0x58
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200002b8 	.word	0x200002b8
 8001a5c:	40010000 	.word	0x40010000

08001a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	; 0x30
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2224      	movs	r2, #36	; 0x24
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f005 fa63 	bl	8006f3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <MX_TIM2_Init+0xa4>)
 8001a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <MX_TIM2_Init+0xa4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <MX_TIM2_Init+0xa4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <MX_TIM2_Init+0xa4>)
 8001a92:	f04f 32ff 	mov.w	r2, #4294967295
 8001a96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_TIM2_Init+0xa4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_TIM2_Init+0xa4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aac:	2301      	movs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001abc:	2301      	movs	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	480d      	ldr	r0, [pc, #52]	; (8001b04 <MX_TIM2_Init+0xa4>)
 8001ad0:	f002 fa2e 	bl	8003f30 <HAL_TIM_Encoder_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ada:	f000 f953 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <MX_TIM2_Init+0xa4>)
 8001aec:	f003 f8ce 	bl	8004c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001af6:	f000 f945 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3730      	adds	r7, #48	; 0x30
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000300 	.word	0x20000300

08001b08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <MX_TIM3_Init+0x98>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b2c:	229f      	movs	r2, #159	; 0x9f
 8001b2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b38:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b4a:	4814      	ldr	r0, [pc, #80]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b4c:	f002 f834 	bl	8003bb8 <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b56:	f000 f915 	bl	8001d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	4619      	mov	r1, r3
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b68:	f002 fcc8 	bl	80044fc <HAL_TIM_ConfigClockSource>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b72:	f000 f907 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_TIM3_Init+0x94>)
 8001b84:	f003 f882 	bl	8004c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b8e:	f000 f8f9 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000348 	.word	0x20000348
 8001ba0:	40000400 	.word	0x40000400

08001ba4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2224      	movs	r2, #36	; 0x24
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f005 f9c1 	bl	8006f3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <MX_TIM5_Init+0xa0>)
 8001bc2:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <MX_TIM5_Init+0xa4>)
 8001bc4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_TIM5_Init+0xa0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <MX_TIM5_Init+0xa0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_TIM5_Init+0xa0>)
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_TIM5_Init+0xa0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <MX_TIM5_Init+0xa0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <MX_TIM5_Init+0xa0>)
 8001c12:	f002 f98d 	bl	8003f30 <HAL_TIM_Encoder_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001c1c:	f000 f8b2 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_TIM5_Init+0xa0>)
 8001c2e:	f003 f82d 	bl	8004c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001c38:	f000 f8a4 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3730      	adds	r7, #48	; 0x30
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000390 	.word	0x20000390
 8001c48:	40000c00 	.word	0x40000c00

08001c4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <MX_USART2_UART_Init+0x50>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c84:	f003 f8d6 	bl	8004e34 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c8e:	f000 f879 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200003d8 	.word	0x200003d8
 8001c9c:	40004400 	.word	0x40004400

08001ca0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_DMA_Init+0x3c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <MX_DMA_Init+0x3c>)
 8001cb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_DMA_Init+0x3c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2011      	movs	r0, #17
 8001cc8:	f000 fd47 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ccc:	2011      	movs	r0, #17
 8001cce:	f000 fd60 	bl	8002792 <HAL_NVIC_EnableIRQ>

}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800

08001ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001d1c:	f043 0310 	orr.w	r3, r3, #16
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_GPIO_Init+0x9c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port, PE10_EN_DRIVER_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d50:	480b      	ldr	r0, [pc, #44]	; (8001d80 <MX_GPIO_Init+0xa0>)
 8001d52:	f001 fabf 	bl	80032d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10_EN_DRIVER_Pin */
  GPIO_InitStruct.Pin = PE10_EN_DRIVER_Pin;
 8001d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PE10_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_GPIO_Init+0xa0>)
 8001d70:	f001 f92c 	bl	8002fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d74:	bf00      	nop
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40021000 	.word	0x40021000

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <Error_Handler+0x8>
	...

08001d90 <rad_to_degree>:
 *  Created on: Apr 1, 2024
 *      Author: Nghia
 */
#include "pid_module.h"
//convert unit
float rad_to_degree(float rad){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	ed87 0a01 	vstr	s0, [r7, #4]
	float degree = rad *(180/  3.14);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fbec 	bl	8000578 <__aeabi_f2d>
 8001da0:	a30b      	add	r3, pc, #44	; (adr r3, 8001dd0 <rad_to_degree+0x40>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fc3f 	bl	8000628 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7fe ff31 	bl	8000c18 <__aeabi_d2f>
 8001db6:	4603      	mov	r3, r0
 8001db8:	60fb      	str	r3, [r7, #12]
	return degree;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	ee07 3a90 	vmov	s15, r3
}
 8001dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	61d59ae7 	.word	0x61d59ae7
 8001dd4:	404ca994 	.word	0x404ca994

08001dd8 <mps_to_PWM>:
	return (float)rpm*pi*d/60;
}
float rpm_to_pwm(float rpm){
	return (float)rpm*1000/80.167;
}
float mps_to_PWM(float mps){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	ed87 0a01 	vstr	s0, [r7, #4]
	return (float) mps*(60/(3.14*d))*(1000/80.167);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fbc8 	bl	8000578 <__aeabi_f2d>
 8001de8:	a30d      	add	r3, pc, #52	; (adr r3, 8001e20 <mps_to_PWM+0x48>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fc1b 	bl	8000628 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	a30b      	add	r3, pc, #44	; (adr r3, 8001e28 <mps_to_PWM+0x50>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fc12 	bl	8000628 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe ff04 	bl	8000c18 <__aeabi_d2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	ee07 3a90 	vmov	s15, r3
}
 8001e16:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	a12d0766 	.word	0xa12d0766
 8001e24:	40725f93 	.word	0x40725f93
 8001e28:	f6f74f9a 	.word	0xf6f74f9a
 8001e2c:	4028f2aa 	.word	0x4028f2aa

08001e30 <pid_set_Kp_Ki_Kd>:

// initial pid
void pid_set_Kp_Ki_Kd(PID_handleTypedef* hpid,float Kp,float Ki,float Kd, float delta_t){
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6178      	str	r0, [r7, #20]
 8001e38:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e3c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e40:	ed87 1a02 	vstr	s2, [r7, #8]
 8001e44:	edc7 1a01 	vstr	s3, [r7, #4]
    hpid->Kp = Kp;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	601a      	str	r2, [r3, #0]
    hpid->Ki = Ki;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	605a      	str	r2, [r3, #4]
    hpid->Kd = Kd;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	609a      	str	r2, [r3, #8]
    hpid->delta_t = delta_t;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]
}
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_TIM_Base_MspInit+0x70>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_TIM_Base_MspInit+0x74>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <HAL_TIM_Base_MspInit+0x74>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_TIM_Base_MspInit+0x74>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eea:	e01a      	b.n	8001f22 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_TIM_Base_MspInit+0x78>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d115      	bne.n	8001f22 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_TIM_Base_MspInit+0x74>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_TIM_Base_MspInit+0x74>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_TIM_Base_MspInit+0x74>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2101      	movs	r1, #1
 8001f16:	201d      	movs	r0, #29
 8001f18:	f000 fc1f 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f1c:	201d      	movs	r0, #29
 8001f1e:	f000 fc38 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40000400 	.word	0x40000400

08001f38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	; 0x30
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d14a      	bne.n	8001ff0 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a3e      	ldr	r2, [pc, #248]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b3c      	ldr	r3, [pc, #240]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	4b38      	ldr	r3, [pc, #224]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a37      	ldr	r2, [pc, #220]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b35      	ldr	r3, [pc, #212]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a30      	ldr	r2, [pc, #192]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4825      	ldr	r0, [pc, #148]	; (8002060 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fca:	f000 ffff 	bl	8002fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fce:	2308      	movs	r3, #8
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	481e      	ldr	r0, [pc, #120]	; (8002064 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001fea:	f000 ffef 	bl	8002fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001fee:	e030      	b.n	8002052 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_TIM_Encoder_MspInit+0x130>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d12b      	bne.n	8002052 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a0f      	ldr	r2, [pc, #60]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_TIM_Encoder_MspInit+0x124>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002032:	2303      	movs	r3, #3
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002042:	2302      	movs	r3, #2
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <HAL_TIM_Encoder_MspInit+0x128>)
 800204e:	f000 ffbd 	bl	8002fcc <HAL_GPIO_Init>
}
 8002052:	bf00      	nop
 8002054:	3730      	adds	r7, #48	; 0x30
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40000c00 	.word	0x40000c00

0800206c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <HAL_TIM_MspPostInit+0x68>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d11e      	bne.n	80020cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_TIM_MspPostInit+0x6c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_TIM_MspPostInit+0x6c>)
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_TIM_MspPostInit+0x6c>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80020aa:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80020ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020bc:	2301      	movs	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	4619      	mov	r1, r3
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <HAL_TIM_MspPostInit+0x70>)
 80020c8:	f000 ff80 	bl	8002fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020cc:	bf00      	nop
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40021000 	.word	0x40021000

080020e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <HAL_UART_MspInit+0xf0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d161      	bne.n	80021c6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_UART_MspInit+0xf4>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a32      	ldr	r2, [pc, #200]	; (80021d4 <HAL_UART_MspInit+0xf4>)
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_UART_MspInit+0xf4>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <HAL_UART_MspInit+0xf4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <HAL_UART_MspInit+0xf4>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_UART_MspInit+0xf4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800213a:	230c      	movs	r3, #12
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800214a:	2307      	movs	r3, #7
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	4820      	ldr	r0, [pc, #128]	; (80021d8 <HAL_UART_MspInit+0xf8>)
 8002156:	f000 ff39 	bl	8002fcc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_UART_MspInit+0xfc>)
 800215c:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <HAL_UART_MspInit+0x100>)
 800215e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_UART_MspInit+0xfc>)
 8002162:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002166:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <HAL_UART_MspInit+0xfc>)
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_UART_MspInit+0xfc>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_UART_MspInit+0xfc>)
 8002176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_UART_MspInit+0xfc>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_UART_MspInit+0xfc>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_UART_MspInit+0xfc>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_UART_MspInit+0xfc>)
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_UART_MspInit+0xfc>)
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800219a:	4810      	ldr	r0, [pc, #64]	; (80021dc <HAL_UART_MspInit+0xfc>)
 800219c:	f000 fb14 	bl	80027c8 <HAL_DMA_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80021a6:	f7ff fded 	bl	8001d84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_UART_MspInit+0xfc>)
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <HAL_UART_MspInit+0xfc>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2026      	movs	r0, #38	; 0x26
 80021bc:	f000 facd 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021c0:	2026      	movs	r0, #38	; 0x26
 80021c2:	f000 fae6 	bl	8002792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40004400 	.word	0x40004400
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	20000420 	.word	0x20000420
 80021e0:	400260a0 	.word	0x400260a0

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021e8:	e7fe      	b.n	80021e8 <NMI_Handler+0x4>

080021ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <HardFault_Handler+0x4>

080021f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <MemManage_Handler+0x4>

080021f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <BusFault_Handler+0x4>

080021fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <UsageFault_Handler+0x4>

08002202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002230:	f000 f974 	bl	800251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <DMA1_Stream6_IRQHandler+0x10>)
 800223e:	f000 fc5b 	bl	8002af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000420 	.word	0x20000420

0800224c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <TIM3_IRQHandler+0x10>)
 8002252:	f001 ffa1 	bl	8004198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000348 	.word	0x20000348

08002260 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <USART2_IRQHandler+0x10>)
 8002266:	f002 fecb 	bl	8005000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200003d8 	.word	0x200003d8

08002274 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return 1;
 8002278:	2301      	movs	r3, #1
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_kill>:

int _kill(int pid, int sig)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800228e:	f004 fea7 	bl	8006fe0 <__errno>
 8002292:	4603      	mov	r3, r0
 8002294:	2216      	movs	r2, #22
 8002296:	601a      	str	r2, [r3, #0]
  return -1;
 8002298:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_exit>:

void _exit (int status)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ffe7 	bl	8002284 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022b6:	e7fe      	b.n	80022b6 <_exit+0x12>

080022b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e00a      	b.n	80022e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ca:	f3af 8000 	nop.w
 80022ce:	4601      	mov	r1, r0
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	60ba      	str	r2, [r7, #8]
 80022d6:	b2ca      	uxtb	r2, r1
 80022d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbf0      	blt.n	80022ca <_read+0x12>
  }

  return len;
 80022e8:	687b      	ldr	r3, [r7, #4]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e009      	b.n	8002318 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	60ba      	str	r2, [r7, #8]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	dbf1      	blt.n	8002304 <_write+0x12>
  }
  return len;
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_close>:

int _close(int file)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002352:	605a      	str	r2, [r3, #4]
  return 0;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_isatty>:

int _isatty(int file)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <_sbrk+0x5c>)
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <_sbrk+0x60>)
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <_sbrk+0x64>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <_sbrk+0x68>)
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d207      	bcs.n	80023d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c4:	f004 fe0c 	bl	8006fe0 <__errno>
 80023c8:	4603      	mov	r3, r0
 80023ca:	220c      	movs	r2, #12
 80023cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	e009      	b.n	80023e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <_sbrk+0x64>)
 80023e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023e6:	68fb      	ldr	r3, [r7, #12]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20020000 	.word	0x20020000
 80023f4:	00000400 	.word	0x00000400
 80023f8:	200004f4 	.word	0x200004f4
 80023fc:	20000648 	.word	0x20000648

08002400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <SystemInit+0x20>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <SystemInit+0x20>)
 800240c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800245c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002428:	f7ff ffea 	bl	8002400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800242e:	490d      	ldr	r1, [pc, #52]	; (8002464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002434:	e002      	b.n	800243c <LoopCopyDataInit>

08002436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243a:	3304      	adds	r3, #4

0800243c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800243c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002440:	d3f9      	bcc.n	8002436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002444:	4c0a      	ldr	r4, [pc, #40]	; (8002470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002448:	e001      	b.n	800244e <LoopFillZerobss>

0800244a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800244c:	3204      	adds	r2, #4

0800244e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002450:	d3fb      	bcc.n	800244a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002452:	f004 fdcb 	bl	8006fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002456:	f7ff f847 	bl	80014e8 <main>
  bx  lr    
 800245a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800245c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002464:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002468:	0800cd28 	.word	0x0800cd28
  ldr r2, =_sbss
 800246c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002470:	20000648 	.word	0x20000648

08002474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002474:	e7fe      	b.n	8002474 <ADC_IRQHandler>
	...

08002478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_Init+0x40>)
 8002482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_Init+0x40>)
 800248e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <HAL_Init+0x40>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a0:	2003      	movs	r0, #3
 80024a2:	f000 f94f 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a6:	200f      	movs	r0, #15
 80024a8:	f000 f808 	bl	80024bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ac:	f7ff fcde 	bl	8001e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00

080024bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_InitTick+0x54>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x58>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f967 	bl	80027ae <HAL_SYSTICK_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00e      	b.n	8002508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d80a      	bhi.n	8002506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f000 f92f 	bl	800275a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <HAL_InitTick+0x5c>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000000 	.word	0x20000000
 8002514:	20000008 	.word	0x20000008
 8002518:	20000004 	.word	0x20000004

0800251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x20>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x24>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4413      	add	r3, r2
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_IncTick+0x24>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000008 	.word	0x20000008
 8002540:	200004f8 	.word	0x200004f8

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	200004f8 	.word	0x200004f8

0800255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff ffee 	bl	8002544 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d005      	beq.n	8002582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_Delay+0x44>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002582:	bf00      	nop
 8002584:	f7ff ffde 	bl	8002544 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d8f7      	bhi.n	8002584 <HAL_Delay+0x28>
  {
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000008 	.word	0x20000008

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <__NVIC_EnableIRQ+0x38>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f7ff ff8e 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff29 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800276c:	f7ff ff3e 	bl	80025ec <__NVIC_GetPriorityGrouping>
 8002770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f7ff ff8e 	bl	8002698 <NVIC_EncodePriority>
 800277c:	4602      	mov	r2, r0
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff5d 	bl	8002644 <__NVIC_SetPriority>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff31 	bl	8002608 <__NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffa2 	bl	8002700 <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff feb6 	bl	8002544 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e099      	b.n	8002918 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002804:	e00f      	b.n	8002826 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002806:	f7ff fe9d 	bl	8002544 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b05      	cmp	r3, #5
 8002812:	d908      	bls.n	8002826 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2203      	movs	r2, #3
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e078      	b.n	8002918 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e8      	bne.n	8002806 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4b38      	ldr	r3, [pc, #224]	; (8002920 <HAL_DMA_Init+0x158>)
 8002840:	4013      	ands	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002852:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2b04      	cmp	r3, #4
 800287e:	d107      	bne.n	8002890 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	4313      	orrs	r3, r2
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 0307 	bic.w	r3, r3, #7
 80028a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d117      	bne.n	80028ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00e      	beq.n	80028ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fb01 	bl	8002ed4 <DMA_CheckFifoParam>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2240      	movs	r2, #64	; 0x40
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028e6:	2301      	movs	r3, #1
 80028e8:	e016      	b.n	8002918 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fab8 	bl	8002e68 <DMA_CalcBaseAndBitshift>
 80028f8:	4603      	mov	r3, r0
 80028fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	223f      	movs	r2, #63	; 0x3f
 8002902:	409a      	lsls	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	f010803f 	.word	0xf010803f

08002924 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_DMA_Start_IT+0x26>
 8002946:	2302      	movs	r3, #2
 8002948:	e040      	b.n	80029cc <HAL_DMA_Start_IT+0xa8>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d12f      	bne.n	80029be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fa4a 	bl	8002e0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	223f      	movs	r2, #63	; 0x3f
 800297e:	409a      	lsls	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0216 	orr.w	r2, r2, #22
 8002992:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0208 	orr.w	r2, r2, #8
 80029aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	e005      	b.n	80029ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
 80029c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029e2:	f7ff fdaf 	bl	8002544 <HAL_GetTick>
 80029e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d008      	beq.n	8002a06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e052      	b.n	8002aac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0216 	bic.w	r2, r2, #22
 8002a14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_DMA_Abort+0x62>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0208 	bic.w	r2, r2, #8
 8002a44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a56:	e013      	b.n	8002a80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a58:	f7ff fd74 	bl	8002544 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d90c      	bls.n	8002a80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e015      	b.n	8002aac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1e4      	bne.n	8002a58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	223f      	movs	r2, #63	; 0x3f
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00c      	b.n	8002aec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b04:	4b8e      	ldr	r3, [pc, #568]	; (8002d40 <HAL_DMA_IRQHandler+0x248>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a8e      	ldr	r2, [pc, #568]	; (8002d44 <HAL_DMA_IRQHandler+0x24c>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0a9b      	lsrs	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	2208      	movs	r2, #8
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01a      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0204 	bic.w	r2, r2, #4
 8002b4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2208      	movs	r2, #8
 8002b52:	409a      	lsls	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2201      	movs	r2, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2201      	movs	r2, #1
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	f043 0202 	orr.w	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0204 	orr.w	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d043      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d03c      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d018      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d108      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d024      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
 8002c26:	e01f      	b.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01b      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
 8002c38:	e016      	b.n	8002c68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0208 	bic.w	r2, r2, #8
 8002c56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 808f 	beq.w	8002d98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8087 	beq.w	8002d98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	2220      	movs	r2, #32
 8002c90:	409a      	lsls	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b05      	cmp	r3, #5
 8002ca0:	d136      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0216 	bic.w	r2, r2, #22
 8002cb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_DMA_IRQHandler+0x1da>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0208 	bic.w	r2, r2, #8
 8002ce0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	223f      	movs	r2, #63	; 0x3f
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d07e      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
        }
        return;
 8002d0e:	e079      	b.n	8002e04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01d      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10d      	bne.n	8002d48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d031      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
 8002d3c:	e02c      	b.n	8002d98 <HAL_DMA_IRQHandler+0x2a0>
 8002d3e:	bf00      	nop
 8002d40:	20000000 	.word	0x20000000
 8002d44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d023      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	4798      	blx	r3
 8002d58:	e01e      	b.n	8002d98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10f      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0210 	bic.w	r2, r2, #16
 8002d76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d032      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d022      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2205      	movs	r2, #5
 8002db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d307      	bcc.n	8002de0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f2      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x2cc>
 8002dde:	e000      	b.n	8002de2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002de0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
 8002e02:	e000      	b.n	8002e06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e04:	bf00      	nop
    }
  }
}
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d108      	bne.n	8002e4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e4a:	e007      	b.n	8002e5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	3b10      	subs	r3, #16
 8002e78:	4a14      	ldr	r2, [pc, #80]	; (8002ecc <DMA_CalcBaseAndBitshift+0x64>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e82:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <DMA_CalcBaseAndBitshift+0x68>)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d909      	bls.n	8002eaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	1d1a      	adds	r2, r3, #4
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ea8:	e007      	b.n	8002eba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eb2:	f023 0303 	bic.w	r3, r3, #3
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	aaaaaaab 	.word	0xaaaaaaab
 8002ed0:	0800c680 	.word	0x0800c680

08002ed4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11f      	bne.n	8002f2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d856      	bhi.n	8002fa2 <DMA_CheckFifoParam+0xce>
 8002ef4:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <DMA_CheckFifoParam+0x28>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f0d 	.word	0x08002f0d
 8002f00:	08002f1f 	.word	0x08002f1f
 8002f04:	08002f0d 	.word	0x08002f0d
 8002f08:	08002fa3 	.word	0x08002fa3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d046      	beq.n	8002fa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1c:	e043      	b.n	8002fa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f26:	d140      	bne.n	8002faa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2c:	e03d      	b.n	8002faa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f36:	d121      	bne.n	8002f7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d837      	bhi.n	8002fae <DMA_CheckFifoParam+0xda>
 8002f3e:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <DMA_CheckFifoParam+0x70>)
 8002f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f44:	08002f55 	.word	0x08002f55
 8002f48:	08002f5b 	.word	0x08002f5b
 8002f4c:	08002f55 	.word	0x08002f55
 8002f50:	08002f6d 	.word	0x08002f6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
      break;
 8002f58:	e030      	b.n	8002fbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d025      	beq.n	8002fb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6a:	e022      	b.n	8002fb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f74:	d11f      	bne.n	8002fb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f7a:	e01c      	b.n	8002fb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d903      	bls.n	8002f8a <DMA_CheckFifoParam+0xb6>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d003      	beq.n	8002f90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f88:	e018      	b.n	8002fbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8e:	e015      	b.n	8002fbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00e      	beq.n	8002fba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa0:	e00b      	b.n	8002fba <DMA_CheckFifoParam+0xe6>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e00a      	b.n	8002fbc <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e008      	b.n	8002fbc <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e006      	b.n	8002fbc <DMA_CheckFifoParam+0xe8>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e004      	b.n	8002fbc <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e002      	b.n	8002fbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002fb6:	bf00      	nop
 8002fb8:	e000      	b.n	8002fbc <DMA_CheckFifoParam+0xe8>
      break;
 8002fba:	bf00      	nop
    }
  } 
  
  return status; 
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop

08002fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	e159      	b.n	800329c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	429a      	cmp	r2, r3
 8003002:	f040 8148 	bne.w	8003296 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d005      	beq.n	800301e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301a:	2b02      	cmp	r3, #2
 800301c:	d130      	bne.n	8003080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	2203      	movs	r2, #3
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003054:	2201      	movs	r2, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 0201 	and.w	r2, r3, #1
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b03      	cmp	r3, #3
 800308a:	d017      	beq.n	80030bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d123      	bne.n	8003110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	08da      	lsrs	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3208      	adds	r2, #8
 80030d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	220f      	movs	r2, #15
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	08da      	lsrs	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3208      	adds	r2, #8
 800310a:	69b9      	ldr	r1, [r7, #24]
 800310c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0203 	and.w	r2, r3, #3
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80a2 	beq.w	8003296 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <HAL_GPIO_Init+0x2e8>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	4a56      	ldr	r2, [pc, #344]	; (80032b4 <HAL_GPIO_Init+0x2e8>)
 800315c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003160:	6453      	str	r3, [r2, #68]	; 0x44
 8003162:	4b54      	ldr	r3, [pc, #336]	; (80032b4 <HAL_GPIO_Init+0x2e8>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800316e:	4a52      	ldr	r2, [pc, #328]	; (80032b8 <HAL_GPIO_Init+0x2ec>)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3302      	adds	r3, #2
 8003176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	220f      	movs	r2, #15
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a49      	ldr	r2, [pc, #292]	; (80032bc <HAL_GPIO_Init+0x2f0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d019      	beq.n	80031ce <HAL_GPIO_Init+0x202>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a48      	ldr	r2, [pc, #288]	; (80032c0 <HAL_GPIO_Init+0x2f4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_Init+0x1fe>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a47      	ldr	r2, [pc, #284]	; (80032c4 <HAL_GPIO_Init+0x2f8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00d      	beq.n	80031c6 <HAL_GPIO_Init+0x1fa>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a46      	ldr	r2, [pc, #280]	; (80032c8 <HAL_GPIO_Init+0x2fc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x1f6>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a45      	ldr	r2, [pc, #276]	; (80032cc <HAL_GPIO_Init+0x300>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_GPIO_Init+0x1f2>
 80031ba:	2304      	movs	r3, #4
 80031bc:	e008      	b.n	80031d0 <HAL_GPIO_Init+0x204>
 80031be:	2307      	movs	r3, #7
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x204>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e004      	b.n	80031d0 <HAL_GPIO_Init+0x204>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e002      	b.n	80031d0 <HAL_GPIO_Init+0x204>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x204>
 80031ce:	2300      	movs	r3, #0
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	f002 0203 	and.w	r2, r2, #3
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	4093      	lsls	r3, r2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e0:	4935      	ldr	r1, [pc, #212]	; (80032b8 <HAL_GPIO_Init+0x2ec>)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ee:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <HAL_GPIO_Init+0x304>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003212:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <HAL_GPIO_Init+0x304>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003218:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <HAL_GPIO_Init+0x304>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800323c:	4a24      	ldr	r2, [pc, #144]	; (80032d0 <HAL_GPIO_Init+0x304>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003242:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <HAL_GPIO_Init+0x304>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003266:	4a1a      	ldr	r2, [pc, #104]	; (80032d0 <HAL_GPIO_Init+0x304>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <HAL_GPIO_Init+0x304>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003290:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <HAL_GPIO_Init+0x304>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3301      	adds	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	f67f aea2 	bls.w	8002fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40020800 	.word	0x40020800
 80032c8:	40020c00 	.word	0x40020c00
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40013c00 	.word	0x40013c00

080032d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
 80032e0:	4613      	mov	r3, r2
 80032e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e4:	787b      	ldrb	r3, [r7, #1]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032f0:	e003      	b.n	80032fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032f2:	887b      	ldrh	r3, [r7, #2]
 80032f4:	041a      	lsls	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	619a      	str	r2, [r3, #24]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e267      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00c      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e242      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6f      	ldr	r2, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6c      	ldr	r2, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a68      	ldr	r2, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff f8c0 	bl	8002544 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7ff f8bc 	bl	8002544 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e207      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7ff f8ac 	bl	8002544 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7ff f8a8 	bl	8002544 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1f3      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c7      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x244>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7ff f861 	bl	8002544 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7ff f85d 	bl	8002544 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a8      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x244>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7ff f840 	bl	8002544 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c8:	f7ff f83c 	bl	8002544 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e187      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d036      	beq.n	8003560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7ff f820 	bl	8002544 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003508:	f7ff f81c 	bl	8002544 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e167      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
 8003526:	e01b      	b.n	8003560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7ff f809 	bl	8002544 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00e      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7ff f805 	bl	8002544 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d907      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e150      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ea      	bne.n	8003536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8097 	beq.w	800369c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b81      	ldr	r3, [pc, #516]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b7d      	ldr	r3, [pc, #500]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fe ffc5 	bl	8002544 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fe ffc1 	bl	8002544 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e10c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ea>
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a63      	ldr	r2, [pc, #396]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x30c>
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a5b      	ldr	r2, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 8003614:	4b58      	ldr	r3, [pc, #352]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	4b55      	ldr	r3, [pc, #340]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fe ff86 	bl	8002544 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fe ff82 	bl	8002544 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0cb      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ee      	beq.n	800363c <HAL_RCC_OscConfig+0x334>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fe ff70 	bl	8002544 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe ff6c 	bl	8002544 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0b5      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a38      	ldr	r2, [pc, #224]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80a1 	beq.w	80037e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d05c      	beq.n	800376c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d141      	bne.n	800373e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe ff40 	bl	8002544 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe ff3c 	bl	8002544 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e087      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe ff15 	bl	8002544 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371e:	f7fe ff11 	bl	8002544 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e05c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x416>
 800373c:	e054      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fefe 	bl	8002544 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fefa 	bl	8002544 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e045      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x444>
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e038      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000
 8003780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d028      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d121      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d11a      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fe fe2c 	bl	8002544 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fe fe28 	bl	8002544 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f821 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	490a      	ldr	r1, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fd8c 	bl	80024bc <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	0800c668 	.word	0x0800c668
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000004 	.word	0x20000004

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c8:	b090      	sub	sp, #64	; 0x40
 80039ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
 80039d0:	2300      	movs	r3, #0
 80039d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d4:	2300      	movs	r3, #0
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d00d      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x40>
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	f200 80a1 	bhi.w	8003b30 <HAL_RCC_GetSysClockFreq+0x16c>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x34>
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x3a>
 80039f6:	e09b      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x184>)
 80039fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039fc:	e09b      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fe:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a02:	e098      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a04:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0e:	4b4d      	ldr	r3, [pc, #308]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d028      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1a:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	099b      	lsrs	r3, r3, #6
 8003a20:	2200      	movs	r2, #0
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	627a      	str	r2, [r7, #36]	; 0x24
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a30:	fb03 f201 	mul.w	r2, r3, r1
 8003a34:	2300      	movs	r3, #0
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4a43      	ldr	r2, [pc, #268]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a3e:	fba0 1202 	umull	r1, r2, r0, r2
 8003a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a44:	460a      	mov	r2, r1
 8003a46:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4a:	4413      	add	r3, r2
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	2200      	movs	r2, #0
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	61fa      	str	r2, [r7, #28]
 8003a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a5e:	f7fd f92b 	bl	8000cb8 <__aeabi_uldivmod>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4613      	mov	r3, r2
 8003a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6a:	e053      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6c:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	2200      	movs	r2, #0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	617a      	str	r2, [r7, #20]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a7e:	f04f 0b00 	mov.w	fp, #0
 8003a82:	4652      	mov	r2, sl
 8003a84:	465b      	mov	r3, fp
 8003a86:	f04f 0000 	mov.w	r0, #0
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	0159      	lsls	r1, r3, #5
 8003a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a94:	0150      	lsls	r0, r2, #5
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	ebb2 080a 	subs.w	r8, r2, sl
 8003a9e:	eb63 090b 	sbc.w	r9, r3, fp
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003aae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ab2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ab6:	ebb2 0408 	subs.w	r4, r2, r8
 8003aba:	eb63 0509 	sbc.w	r5, r3, r9
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	00eb      	lsls	r3, r5, #3
 8003ac8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003acc:	00e2      	lsls	r2, r4, #3
 8003ace:	4614      	mov	r4, r2
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	eb14 030a 	adds.w	r3, r4, sl
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	eb45 030b 	adc.w	r3, r5, fp
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aea:	4629      	mov	r1, r5
 8003aec:	028b      	lsls	r3, r1, #10
 8003aee:	4621      	mov	r1, r4
 8003af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af4:	4621      	mov	r1, r4
 8003af6:	028a      	lsls	r2, r1, #10
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afe:	2200      	movs	r2, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	60fa      	str	r2, [r7, #12]
 8003b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b08:	f7fd f8d6 	bl	8000cb8 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4613      	mov	r3, r2
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3740      	adds	r7, #64	; 0x40
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	00f42400 	.word	0x00f42400
 8003b4c:	017d7840 	.word	0x017d7840

08003b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000000 	.word	0x20000000

08003b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b6c:	f7ff fff0 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0a9b      	lsrs	r3, r3, #10
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	0800c678 	.word	0x0800c678

08003b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b94:	f7ff ffdc 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	0b5b      	lsrs	r3, r3, #13
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	0800c678 	.word	0x0800c678

08003bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e041      	b.n	8003c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe f96c 	bl	8001ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f000 fd70 	bl	80046dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d001      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e044      	b.n	8003cfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d018      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9a:	d013      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_TIM_Base_Start_IT+0xb4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <HAL_TIM_Base_Start_IT+0xb8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <HAL_TIM_Base_Start_IT+0xbc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <HAL_TIM_Base_Start_IT+0xc0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d111      	bne.n	8003ce8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d010      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce6:	e007      	b.n	8003cf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40014000 	.word	0x40014000

08003d1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e041      	b.n	8003db2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f839 	bl	8003dba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f000 fcbe 	bl	80046dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_PWM_Start+0x24>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e022      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d109      	bne.n	8003e0e <HAL_TIM_PWM_Start+0x3e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e015      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d109      	bne.n	8003e28 <HAL_TIM_PWM_Start+0x58>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e008      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	bf14      	ite	ne
 8003e34:	2301      	movne	r3, #1
 8003e36:	2300      	moveq	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e068      	b.n	8003f14 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x82>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e50:	e013      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start+0x92>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e60:	e00b      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Start+0xa2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e70:	e003      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	6839      	ldr	r1, [r7, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fedc 	bl	8004c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <HAL_TIM_PWM_Start+0x14c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d107      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_TIM_PWM_Start+0x14c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_TIM_PWM_Start+0x10e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d013      	beq.n	8003ede <HAL_TIM_PWM_Start+0x10e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <HAL_TIM_PWM_Start+0x150>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_TIM_PWM_Start+0x10e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <HAL_TIM_PWM_Start+0x154>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_TIM_PWM_Start+0x10e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <HAL_TIM_PWM_Start+0x158>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIM_PWM_Start+0x10e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <HAL_TIM_PWM_Start+0x15c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d111      	bne.n	8003f02 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b06      	cmp	r3, #6
 8003eee:	d010      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f00:	e007      	b.n	8003f12 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40014000 	.word	0x40014000

08003f30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e097      	b.n	8004074 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7fd ffed 	bl	8001f38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f74:	f023 0307 	bic.w	r3, r3, #7
 8003f78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f000 fba9 	bl	80046dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003fd0:	f023 030c 	bic.w	r3, r3, #12
 8003fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	4313      	orrs	r3, r2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	011a      	lsls	r2, r3, #4
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	031b      	lsls	r3, r3, #12
 8004000:	4313      	orrs	r3, r2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800400e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004016:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	4313      	orrs	r3, r2
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800408c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004094:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800409c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d110      	bne.n	80040ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d102      	bne.n	80040b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80040b2:	7b7b      	ldrb	r3, [r7, #13]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d001      	beq.n	80040bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e069      	b.n	8004190 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040cc:	e031      	b.n	8004132 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d110      	bne.n	80040f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040d4:	7bbb      	ldrb	r3, [r7, #14]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d102      	bne.n	80040e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040da:	7b3b      	ldrb	r3, [r7, #12]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d001      	beq.n	80040e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e055      	b.n	8004190 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f4:	e01d      	b.n	8004132 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d108      	bne.n	800410e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040fc:	7bbb      	ldrb	r3, [r7, #14]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004102:	7b7b      	ldrb	r3, [r7, #13]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d102      	bne.n	800410e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004108:	7b3b      	ldrb	r3, [r7, #12]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d001      	beq.n	8004112 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e03e      	b.n	8004190 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_TIM_Encoder_Start+0xc4>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b04      	cmp	r3, #4
 800413c:	d008      	beq.n	8004150 <HAL_TIM_Encoder_Start+0xd4>
 800413e:	e00f      	b.n	8004160 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fd79 	bl	8004c40 <TIM_CCxChannelCmd>
      break;
 800414e:	e016      	b.n	800417e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	2104      	movs	r1, #4
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fd71 	bl	8004c40 <TIM_CCxChannelCmd>
      break;
 800415e:	e00e      	b.n	800417e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fd69 	bl	8004c40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2201      	movs	r2, #1
 8004174:	2104      	movs	r1, #4
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fd62 	bl	8004c40 <TIM_CCxChannelCmd>
      break;
 800417c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d020      	beq.n	80041fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01b      	beq.n	80041fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0202 	mvn.w	r2, #2
 80041cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa5b 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa4d 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fa5e 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d020      	beq.n	8004248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01b      	beq.n	8004248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0204 	mvn.w	r2, #4
 8004218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2202      	movs	r2, #2
 800421e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa35 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 8004234:	e005      	b.n	8004242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa27 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fa38 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d020      	beq.n	8004294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01b      	beq.n	8004294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0208 	mvn.w	r2, #8
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2204      	movs	r2, #4
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa0f 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa01 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fa12 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b00      	cmp	r3, #0
 800429c:	d020      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01b      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0210 	mvn.w	r2, #16
 80042b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2208      	movs	r2, #8
 80042b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9e9 	bl	800469e <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f9db 	bl	800468a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f9ec 	bl	80046b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00c      	beq.n	8004304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0201 	mvn.w	r2, #1
 80042fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd f84e 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00c      	beq.n	8004328 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fd7c 	bl	8004e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00c      	beq.n	800434c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9bd 	bl	80046c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00c      	beq.n	8004370 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0220 	mvn.w	r2, #32
 8004368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fd4e 	bl	8004e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004392:	2302      	movs	r3, #2
 8004394:	e0ae      	b.n	80044f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	f200 809f 	bhi.w	80044e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043e1 	.word	0x080043e1
 80043b0:	080044e5 	.word	0x080044e5
 80043b4:	080044e5 	.word	0x080044e5
 80043b8:	080044e5 	.word	0x080044e5
 80043bc:	08004421 	.word	0x08004421
 80043c0:	080044e5 	.word	0x080044e5
 80043c4:	080044e5 	.word	0x080044e5
 80043c8:	080044e5 	.word	0x080044e5
 80043cc:	08004463 	.word	0x08004463
 80043d0:	080044e5 	.word	0x080044e5
 80043d4:	080044e5 	.word	0x080044e5
 80043d8:	080044e5 	.word	0x080044e5
 80043dc:	080044a3 	.word	0x080044a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fa04 	bl	80047f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0208 	orr.w	r2, r2, #8
 80043fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0204 	bic.w	r2, r2, #4
 800440a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6999      	ldr	r1, [r3, #24]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	619a      	str	r2, [r3, #24]
      break;
 800441e:	e064      	b.n	80044ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fa4a 	bl	80048c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	021a      	lsls	r2, r3, #8
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	619a      	str	r2, [r3, #24]
      break;
 8004460:	e043      	b.n	80044ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fa95 	bl	8004998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0208 	orr.w	r2, r2, #8
 800447c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0204 	bic.w	r2, r2, #4
 800448c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69d9      	ldr	r1, [r3, #28]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	61da      	str	r2, [r3, #28]
      break;
 80044a0:	e023      	b.n	80044ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fadf 	bl	8004a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	021a      	lsls	r2, r3, #8
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	61da      	str	r2, [r3, #28]
      break;
 80044e2:	e002      	b.n	80044ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	75fb      	strb	r3, [r7, #23]
      break;
 80044e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIM_ConfigClockSource+0x1c>
 8004514:	2302      	movs	r3, #2
 8004516:	e0b4      	b.n	8004682 <HAL_TIM_ConfigClockSource+0x186>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800453e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004550:	d03e      	beq.n	80045d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004556:	f200 8087 	bhi.w	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455e:	f000 8086 	beq.w	800466e <HAL_TIM_ConfigClockSource+0x172>
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	d87f      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b70      	cmp	r3, #112	; 0x70
 800456a:	d01a      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0xa6>
 800456c:	2b70      	cmp	r3, #112	; 0x70
 800456e:	d87b      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004570:	2b60      	cmp	r3, #96	; 0x60
 8004572:	d050      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x11a>
 8004574:	2b60      	cmp	r3, #96	; 0x60
 8004576:	d877      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b50      	cmp	r3, #80	; 0x50
 800457a:	d03c      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0xfa>
 800457c:	2b50      	cmp	r3, #80	; 0x50
 800457e:	d873      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d058      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x13a>
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d86f      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b30      	cmp	r3, #48	; 0x30
 800458a:	d064      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 800458c:	2b30      	cmp	r3, #48	; 0x30
 800458e:	d86b      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d060      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d867      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d05c      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 800459c:	2b10      	cmp	r3, #16
 800459e:	d05a      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 80045a0:	e062      	b.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045b2:	f000 fb25 	bl	8004c00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	609a      	str	r2, [r3, #8]
      break;
 80045ce:	e04f      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045e0:	f000 fb0e 	bl	8004c00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f2:	609a      	str	r2, [r3, #8]
      break;
 80045f4:	e03c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004602:	461a      	mov	r2, r3
 8004604:	f000 fa82 	bl	8004b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2150      	movs	r1, #80	; 0x50
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fadb 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 8004614:	e02c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004622:	461a      	mov	r2, r3
 8004624:	f000 faa1 	bl	8004b6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2160      	movs	r1, #96	; 0x60
 800462e:	4618      	mov	r0, r3
 8004630:	f000 facb 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 8004634:	e01c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	461a      	mov	r2, r3
 8004644:	f000 fa62 	bl	8004b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2140      	movs	r1, #64	; 0x40
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fabb 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 8004654:	e00c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f000 fab2 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 8004666:	e003      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e000      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800466e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a3a      	ldr	r2, [pc, #232]	; (80047d8 <TIM_Base_SetConfig+0xfc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00f      	beq.n	8004714 <TIM_Base_SetConfig+0x38>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fa:	d00b      	beq.n	8004714 <TIM_Base_SetConfig+0x38>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a37      	ldr	r2, [pc, #220]	; (80047dc <TIM_Base_SetConfig+0x100>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <TIM_Base_SetConfig+0x38>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a36      	ldr	r2, [pc, #216]	; (80047e0 <TIM_Base_SetConfig+0x104>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_Base_SetConfig+0x38>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a35      	ldr	r2, [pc, #212]	; (80047e4 <TIM_Base_SetConfig+0x108>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d108      	bne.n	8004726 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2b      	ldr	r2, [pc, #172]	; (80047d8 <TIM_Base_SetConfig+0xfc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01b      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004734:	d017      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a28      	ldr	r2, [pc, #160]	; (80047dc <TIM_Base_SetConfig+0x100>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a27      	ldr	r2, [pc, #156]	; (80047e0 <TIM_Base_SetConfig+0x104>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00f      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a26      	ldr	r2, [pc, #152]	; (80047e4 <TIM_Base_SetConfig+0x108>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00b      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a25      	ldr	r2, [pc, #148]	; (80047e8 <TIM_Base_SetConfig+0x10c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a24      	ldr	r2, [pc, #144]	; (80047ec <TIM_Base_SetConfig+0x110>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d003      	beq.n	8004766 <TIM_Base_SetConfig+0x8a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a23      	ldr	r2, [pc, #140]	; (80047f0 <TIM_Base_SetConfig+0x114>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d108      	bne.n	8004778 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <TIM_Base_SetConfig+0xfc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d103      	bne.n	80047ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	611a      	str	r2, [r3, #16]
  }
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800

080047f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f023 0201 	bic.w	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f023 0302 	bic.w	r3, r3, #2
 800483c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <TIM_OC1_SetConfig+0xc8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d10c      	bne.n	800486a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0308 	bic.w	r3, r3, #8
 8004856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f023 0304 	bic.w	r3, r3, #4
 8004868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a13      	ldr	r2, [pc, #76]	; (80048bc <TIM_OC1_SetConfig+0xc8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d111      	bne.n	8004896 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40010000 	.word	0x40010000

080048c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f023 0210 	bic.w	r2, r3, #16
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0320 	bic.w	r3, r3, #32
 800490a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <TIM_OC2_SetConfig+0xd4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10d      	bne.n	800493c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a15      	ldr	r2, [pc, #84]	; (8004994 <TIM_OC2_SetConfig+0xd4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d113      	bne.n	800496c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800494a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000

08004998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <TIM_OC3_SetConfig+0xd0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d10d      	bne.n	8004a12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a14      	ldr	r2, [pc, #80]	; (8004a68 <TIM_OC3_SetConfig+0xd0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d113      	bne.n	8004a42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	621a      	str	r2, [r3, #32]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40010000 	.word	0x40010000

08004a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	031b      	lsls	r3, r3, #12
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a10      	ldr	r2, [pc, #64]	; (8004b08 <TIM_OC4_SetConfig+0x9c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d109      	bne.n	8004ae0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	019b      	lsls	r3, r3, #6
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000

08004b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f023 0201 	bic.w	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f023 030a 	bic.w	r3, r3, #10
 8004b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b087      	sub	sp, #28
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f023 0210 	bic.w	r2, r3, #16
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	031b      	lsls	r3, r3, #12
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ba6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f043 0307 	orr.w	r3, r3, #7
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	609a      	str	r2, [r3, #8]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	021a      	lsls	r2, r3, #8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	609a      	str	r2, [r3, #8]
}
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	2201      	movs	r2, #1
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1a      	ldr	r2, [r3, #32]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	43db      	mvns	r3, r3
 8004c62:	401a      	ands	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1a      	ldr	r2, [r3, #32]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	fa01 f303 	lsl.w	r3, r1, r3
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e050      	b.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf0:	d013      	beq.n	8004d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a13      	ldr	r2, [pc, #76]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d10c      	bne.n	8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40000c00 	.word	0x40000c00
 8004d64:	40014000 	.word	0x40014000

08004d68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e03d      	b.n	8004e00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e042      	b.n	8004ecc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fd f940 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2224      	movs	r2, #36	; 0x24
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fe21 	bl	8005ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d112      	bne.n	8004f14 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_UART_Receive_IT+0x26>
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e00b      	b.n	8004f16 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	461a      	mov	r2, r3
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fbd9 	bl	80056c2 <UART_Start_Receive_IT>
 8004f10:	4603      	mov	r3, r0
 8004f12:	e000      	b.n	8004f16 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f14:	2302      	movs	r3, #2
  }
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	; 0x30
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d156      	bne.n	8004fe8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_UART_Transmit_DMA+0x26>
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e04f      	b.n	8004fea <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2221      	movs	r2, #33	; 0x21
 8004f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	4a21      	ldr	r2, [pc, #132]	; (8004ff4 <HAL_UART_Transmit_DMA+0xd4>)
 8004f70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	4a20      	ldr	r2, [pc, #128]	; (8004ff8 <HAL_UART_Transmit_DMA+0xd8>)
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <HAL_UART_Transmit_DMA+0xdc>)
 8004f80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	2200      	movs	r2, #0
 8004f88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	6819      	ldr	r1, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	f7fd fcbf 	bl	8002924 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3314      	adds	r3, #20
 8004fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd0:	627a      	str	r2, [r7, #36]	; 0x24
 8004fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6a39      	ldr	r1, [r7, #32]
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e000      	b.n	8004fea <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
  }
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3730      	adds	r7, #48	; 0x30
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	08005579 	.word	0x08005579
 8004ff8:	08005613 	.word	0x08005613
 8004ffc:	0800562f 	.word	0x0800562f

08005000 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b0ba      	sub	sp, #232	; 0xe8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800502c:	2300      	movs	r3, #0
 800502e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800503e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10f      	bne.n	8005066 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <HAL_UART_IRQHandler+0x66>
 8005052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fc70 	bl	8005944 <UART_Receive_IT>
      return;
 8005064:	e25b      	b.n	800551e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80de 	beq.w	800522c <HAL_UART_IRQHandler+0x22c>
 8005070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005080:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80d1 	beq.w	800522c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_UART_IRQHandler+0xae>
 8005096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f043 0201 	orr.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_UART_IRQHandler+0xd2>
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	f043 0202 	orr.w	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_UART_IRQHandler+0xf6>
 80050de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d011      	beq.n	8005126 <HAL_UART_IRQHandler+0x126>
 8005102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d105      	bne.n	800511a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800510e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	f043 0208 	orr.w	r2, r3, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 81f2 	beq.w	8005514 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_UART_IRQHandler+0x14e>
 800513c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fbfb 	bl	8005944 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	bf0c      	ite	eq
 800515c:	2301      	moveq	r3, #1
 800515e:	2300      	movne	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <HAL_UART_IRQHandler+0x17a>
 8005172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d04f      	beq.n	800521a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fb03 	bl	8005786 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d141      	bne.n	8005212 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3314      	adds	r3, #20
 80051b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1d9      	bne.n	800518e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d013      	beq.n	800520a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e6:	4a7e      	ldr	r2, [pc, #504]	; (80053e0 <HAL_UART_IRQHandler+0x3e0>)
 80051e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd fc60 	bl	8002ab4 <HAL_DMA_Abort_IT>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d016      	beq.n	8005228 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005204:	4610      	mov	r0, r2
 8005206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005208:	e00e      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f99e 	bl	800554c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	e00a      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f99a 	bl	800554c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	e006      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f996 	bl	800554c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005226:	e175      	b.n	8005514 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	bf00      	nop
    return;
 800522a:	e173      	b.n	8005514 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	2b01      	cmp	r3, #1
 8005232:	f040 814f 	bne.w	80054d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8148 	beq.w	80054d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8141 	beq.w	80054d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005252:	2300      	movs	r3, #0
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b40      	cmp	r3, #64	; 0x40
 8005274:	f040 80b6 	bne.w	80053e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005284:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8145 	beq.w	8005518 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005296:	429a      	cmp	r2, r3
 8005298:	f080 813e 	bcs.w	8005518 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ae:	f000 8088 	beq.w	80053c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1d9      	bne.n	80052b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3314      	adds	r3, #20
 8005304:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800530e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3314      	adds	r3, #20
 800531e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005322:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005326:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800532a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e1      	bne.n	80052fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3314      	adds	r3, #20
 8005340:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800534a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800534c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3314      	adds	r3, #20
 800535a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800535e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005360:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005364:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800536c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e3      	bne.n	800533a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005392:	f023 0310 	bic.w	r3, r3, #16
 8005396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80053a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e3      	bne.n	8005380 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fd fb09 	bl	80029d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8c1 	bl	8005560 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053de:	e09b      	b.n	8005518 <HAL_UART_IRQHandler+0x518>
 80053e0:	0800584d 	.word	0x0800584d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 808e 	beq.w	800551c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8089 	beq.w	800551c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800541a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800542e:	647a      	str	r2, [r7, #68]	; 0x44
 8005430:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800543c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e3      	bne.n	800540a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3314      	adds	r3, #20
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	623b      	str	r3, [r7, #32]
   return(result);
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3314      	adds	r3, #20
 8005462:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005466:	633a      	str	r2, [r7, #48]	; 0x30
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800546c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e3      	bne.n	8005442 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	60fb      	str	r3, [r7, #12]
   return(result);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0310 	bic.w	r3, r3, #16
 800549e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	330c      	adds	r3, #12
 80054a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054ac:	61fa      	str	r2, [r7, #28]
 80054ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	69b9      	ldr	r1, [r7, #24]
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e3      	bne.n	8005488 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f847 	bl	8005560 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054d2:	e023      	b.n	800551c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <HAL_UART_IRQHandler+0x4f4>
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9c1 	bl	8005874 <UART_Transmit_IT>
    return;
 80054f2:	e014      	b.n	800551e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00e      	beq.n	800551e <HAL_UART_IRQHandler+0x51e>
 8005500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d008      	beq.n	800551e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fa01 	bl	8005914 <UART_EndTransmit_IT>
    return;
 8005512:	e004      	b.n	800551e <HAL_UART_IRQHandler+0x51e>
    return;
 8005514:	bf00      	nop
 8005516:	e002      	b.n	800551e <HAL_UART_IRQHandler+0x51e>
      return;
 8005518:	bf00      	nop
 800551a:	e000      	b.n	800551e <HAL_UART_IRQHandler+0x51e>
      return;
 800551c:	bf00      	nop
  }
}
 800551e:	37e8      	adds	r7, #232	; 0xe8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b090      	sub	sp, #64	; 0x40
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d137      	bne.n	8005604 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005596:	2200      	movs	r2, #0
 8005598:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3314      	adds	r3, #20
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	623b      	str	r3, [r7, #32]
   return(result);
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3314      	adds	r3, #20
 80055b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ba:	633a      	str	r2, [r7, #48]	; 0x30
 80055bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	330c      	adds	r3, #12
 80055d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
 80055e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ee:	61fa      	str	r2, [r7, #28]
 80055f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	69b9      	ldr	r1, [r7, #24]
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	617b      	str	r3, [r7, #20]
   return(result);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005602:	e002      	b.n	800560a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005604:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005606:	f7ff ff8d 	bl	8005524 <HAL_UART_TxCpltCallback>
}
 800560a:	bf00      	nop
 800560c:	3740      	adds	r7, #64	; 0x40
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff ff89 	bl	8005538 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b21      	cmp	r3, #33	; 0x21
 8005660:	d108      	bne.n	8005674 <UART_DMAError+0x46>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2200      	movs	r2, #0
 800566c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800566e:	68b8      	ldr	r0, [r7, #8]
 8005670:	f000 f861 	bl	8005736 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567e:	2b40      	cmp	r3, #64	; 0x40
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b22      	cmp	r3, #34	; 0x22
 8005694:	d108      	bne.n	80056a8 <UART_DMAError+0x7a>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2200      	movs	r2, #0
 80056a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80056a2:	68b8      	ldr	r0, [r7, #8]
 80056a4:	f000 f86f 	bl	8005786 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	f043 0210 	orr.w	r2, r3, #16
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056b4:	68b8      	ldr	r0, [r7, #8]
 80056b6:	f7ff ff49 	bl	800554c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	4613      	mov	r3, r2
 80056ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	88fa      	ldrh	r2, [r7, #6]
 80056da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2222      	movs	r2, #34	; 0x22
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005706:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0220 	orr.w	r2, r2, #32
 8005726:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005736:	b480      	push	{r7}
 8005738:	b089      	sub	sp, #36	; 0x24
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	60bb      	str	r3, [r7, #8]
   return(result);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	61ba      	str	r2, [r7, #24]
 8005760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6979      	ldr	r1, [r7, #20]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	613b      	str	r3, [r7, #16]
   return(result);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800577a:	bf00      	nop
 800577c:	3724      	adds	r7, #36	; 0x24
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005786:	b480      	push	{r7}
 8005788:	b095      	sub	sp, #84	; 0x54
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057ae:	643a      	str	r2, [r7, #64]	; 0x40
 80057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3314      	adds	r3, #20
 80057c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3314      	adds	r3, #20
 80057e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e5      	bne.n	80057c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d119      	bne.n	8005832 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	60bb      	str	r3, [r7, #8]
   return(result);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f023 0310 	bic.w	r3, r3, #16
 8005814:	647b      	str	r3, [r7, #68]	; 0x44
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800581e:	61ba      	str	r2, [r7, #24]
 8005820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6979      	ldr	r1, [r7, #20]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	613b      	str	r3, [r7, #16]
   return(result);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e5      	bne.n	80057fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005840:	bf00      	nop
 8005842:	3754      	adds	r7, #84	; 0x54
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fe70 	bl	800554c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b21      	cmp	r3, #33	; 0x21
 8005886:	d13e      	bne.n	8005906 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005890:	d114      	bne.n	80058bc <UART_Transmit_IT+0x48>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d110      	bne.n	80058bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	1c9a      	adds	r2, r3, #2
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	621a      	str	r2, [r3, #32]
 80058ba:	e008      	b.n	80058ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	1c59      	adds	r1, r3, #1
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6211      	str	r1, [r2, #32]
 80058c6:	781a      	ldrb	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	4619      	mov	r1, r3
 80058dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10f      	bne.n	8005902 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005900:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005906:	2302      	movs	r3, #2
  }
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800592a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fdf5 	bl	8005524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08c      	sub	sp, #48	; 0x30
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b22      	cmp	r3, #34	; 0x22
 8005956:	f040 80ae 	bne.w	8005ab6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	d117      	bne.n	8005994 <UART_Receive_IT+0x50>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d113      	bne.n	8005994 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800596c:	2300      	movs	r3, #0
 800596e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005982:	b29a      	uxth	r2, r3
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	629a      	str	r2, [r3, #40]	; 0x28
 8005992:	e026      	b.n	80059e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a6:	d007      	beq.n	80059b8 <UART_Receive_IT+0x74>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <UART_Receive_IT+0x82>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e008      	b.n	80059d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	4619      	mov	r1, r3
 80059f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d15d      	bne.n	8005ab2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0220 	bic.w	r2, r2, #32
 8005a04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d135      	bne.n	8005aa8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	330c      	adds	r3, #12
 8005a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	613b      	str	r3, [r7, #16]
   return(result);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f023 0310 	bic.w	r3, r3, #16
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	330c      	adds	r3, #12
 8005a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a62:	623a      	str	r2, [r7, #32]
 8005a64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	69f9      	ldr	r1, [r7, #28]
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e5      	bne.n	8005a42 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d10a      	bne.n	8005a9a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fd5d 	bl	8005560 <HAL_UARTEx_RxEventCallback>
 8005aa6:	e002      	b.n	8005aae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7fb fc3d 	bl	8001328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e002      	b.n	8005ab8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
  }
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3730      	adds	r7, #48	; 0x30
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac4:	b0c0      	sub	sp, #256	; 0x100
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	68d9      	ldr	r1, [r3, #12]
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	ea40 0301 	orr.w	r3, r0, r1
 8005ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b18:	f021 010c 	bic.w	r1, r1, #12
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b26:	430b      	orrs	r3, r1
 8005b28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3a:	6999      	ldr	r1, [r3, #24]
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	ea40 0301 	orr.w	r3, r0, r1
 8005b46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b8f      	ldr	r3, [pc, #572]	; (8005d8c <UART_SetConfig+0x2cc>)
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d005      	beq.n	8005b60 <UART_SetConfig+0xa0>
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b8d      	ldr	r3, [pc, #564]	; (8005d90 <UART_SetConfig+0x2d0>)
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d104      	bne.n	8005b6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b60:	f7fe f816 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 8005b64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b68:	e003      	b.n	8005b72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b6a:	f7fd fffd 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 8005b6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7c:	f040 810c 	bne.w	8005d98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b92:	4622      	mov	r2, r4
 8005b94:	462b      	mov	r3, r5
 8005b96:	1891      	adds	r1, r2, r2
 8005b98:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b9a:	415b      	adcs	r3, r3
 8005b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	eb12 0801 	adds.w	r8, r2, r1
 8005ba8:	4629      	mov	r1, r5
 8005baa:	eb43 0901 	adc.w	r9, r3, r1
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bc2:	4690      	mov	r8, r2
 8005bc4:	4699      	mov	r9, r3
 8005bc6:	4623      	mov	r3, r4
 8005bc8:	eb18 0303 	adds.w	r3, r8, r3
 8005bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	eb49 0303 	adc.w	r3, r9, r3
 8005bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005be6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bee:	460b      	mov	r3, r1
 8005bf0:	18db      	adds	r3, r3, r3
 8005bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	eb42 0303 	adc.w	r3, r2, r3
 8005bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8005bfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c04:	f7fb f858 	bl	8000cb8 <__aeabi_uldivmod>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4b61      	ldr	r3, [pc, #388]	; (8005d94 <UART_SetConfig+0x2d4>)
 8005c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	011c      	lsls	r4, r3, #4
 8005c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c28:	4642      	mov	r2, r8
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	1891      	adds	r1, r2, r2
 8005c2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c30:	415b      	adcs	r3, r3
 8005c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c38:	4641      	mov	r1, r8
 8005c3a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c3e:	4649      	mov	r1, r9
 8005c40:	eb43 0b01 	adc.w	fp, r3, r1
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c58:	4692      	mov	sl, r2
 8005c5a:	469b      	mov	fp, r3
 8005c5c:	4643      	mov	r3, r8
 8005c5e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c66:	464b      	mov	r3, r9
 8005c68:	eb4b 0303 	adc.w	r3, fp, r3
 8005c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c84:	460b      	mov	r3, r1
 8005c86:	18db      	adds	r3, r3, r3
 8005c88:	643b      	str	r3, [r7, #64]	; 0x40
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	647b      	str	r3, [r7, #68]	; 0x44
 8005c92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c9a:	f7fb f80d 	bl	8000cb8 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	4b3b      	ldr	r3, [pc, #236]	; (8005d94 <UART_SetConfig+0x2d4>)
 8005ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	2264      	movs	r2, #100	; 0x64
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	1acb      	subs	r3, r1, r3
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cba:	4b36      	ldr	r3, [pc, #216]	; (8005d94 <UART_SetConfig+0x2d4>)
 8005cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cc8:	441c      	add	r4, r3
 8005cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005cd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cdc:	4642      	mov	r2, r8
 8005cde:	464b      	mov	r3, r9
 8005ce0:	1891      	adds	r1, r2, r2
 8005ce2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ce4:	415b      	adcs	r3, r3
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cec:	4641      	mov	r1, r8
 8005cee:	1851      	adds	r1, r2, r1
 8005cf0:	6339      	str	r1, [r7, #48]	; 0x30
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	414b      	adcs	r3, r1
 8005cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d04:	4659      	mov	r1, fp
 8005d06:	00cb      	lsls	r3, r1, #3
 8005d08:	4651      	mov	r1, sl
 8005d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d0e:	4651      	mov	r1, sl
 8005d10:	00ca      	lsls	r2, r1, #3
 8005d12:	4610      	mov	r0, r2
 8005d14:	4619      	mov	r1, r3
 8005d16:	4603      	mov	r3, r0
 8005d18:	4642      	mov	r2, r8
 8005d1a:	189b      	adds	r3, r3, r2
 8005d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d20:	464b      	mov	r3, r9
 8005d22:	460a      	mov	r2, r1
 8005d24:	eb42 0303 	adc.w	r3, r2, r3
 8005d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d40:	460b      	mov	r3, r1
 8005d42:	18db      	adds	r3, r3, r3
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d46:	4613      	mov	r3, r2
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d56:	f7fa ffaf 	bl	8000cb8 <__aeabi_uldivmod>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <UART_SetConfig+0x2d4>)
 8005d60:	fba3 1302 	umull	r1, r3, r3, r2
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	2164      	movs	r1, #100	; 0x64
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	3332      	adds	r3, #50	; 0x32
 8005d72:	4a08      	ldr	r2, [pc, #32]	; (8005d94 <UART_SetConfig+0x2d4>)
 8005d74:	fba2 2303 	umull	r2, r3, r2, r3
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	f003 0207 	and.w	r2, r3, #7
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4422      	add	r2, r4
 8005d86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d88:	e106      	b.n	8005f98 <UART_SetConfig+0x4d8>
 8005d8a:	bf00      	nop
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	40011400 	.word	0x40011400
 8005d94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005da2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005da6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005daa:	4642      	mov	r2, r8
 8005dac:	464b      	mov	r3, r9
 8005dae:	1891      	adds	r1, r2, r2
 8005db0:	6239      	str	r1, [r7, #32]
 8005db2:	415b      	adcs	r3, r3
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
 8005db6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dba:	4641      	mov	r1, r8
 8005dbc:	1854      	adds	r4, r2, r1
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	eb43 0501 	adc.w	r5, r3, r1
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	00eb      	lsls	r3, r5, #3
 8005dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dd2:	00e2      	lsls	r2, r4, #3
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	461d      	mov	r5, r3
 8005dd8:	4643      	mov	r3, r8
 8005dda:	18e3      	adds	r3, r4, r3
 8005ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005de0:	464b      	mov	r3, r9
 8005de2:	eb45 0303 	adc.w	r3, r5, r3
 8005de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005df6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e06:	4629      	mov	r1, r5
 8005e08:	008b      	lsls	r3, r1, #2
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e10:	4621      	mov	r1, r4
 8005e12:	008a      	lsls	r2, r1, #2
 8005e14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e18:	f7fa ff4e 	bl	8000cb8 <__aeabi_uldivmod>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4b60      	ldr	r3, [pc, #384]	; (8005fa4 <UART_SetConfig+0x4e4>)
 8005e22:	fba3 2302 	umull	r2, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	011c      	lsls	r4, r3, #4
 8005e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	464b      	mov	r3, r9
 8005e40:	1891      	adds	r1, r2, r2
 8005e42:	61b9      	str	r1, [r7, #24]
 8005e44:	415b      	adcs	r3, r3
 8005e46:	61fb      	str	r3, [r7, #28]
 8005e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e4c:	4641      	mov	r1, r8
 8005e4e:	1851      	adds	r1, r2, r1
 8005e50:	6139      	str	r1, [r7, #16]
 8005e52:	4649      	mov	r1, r9
 8005e54:	414b      	adcs	r3, r1
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e64:	4659      	mov	r1, fp
 8005e66:	00cb      	lsls	r3, r1, #3
 8005e68:	4651      	mov	r1, sl
 8005e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e6e:	4651      	mov	r1, sl
 8005e70:	00ca      	lsls	r2, r1, #3
 8005e72:	4610      	mov	r0, r2
 8005e74:	4619      	mov	r1, r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	4642      	mov	r2, r8
 8005e7a:	189b      	adds	r3, r3, r2
 8005e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e80:	464b      	mov	r3, r9
 8005e82:	460a      	mov	r2, r1
 8005e84:	eb42 0303 	adc.w	r3, r2, r3
 8005e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	008b      	lsls	r3, r1, #2
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eae:	4641      	mov	r1, r8
 8005eb0:	008a      	lsls	r2, r1, #2
 8005eb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005eb6:	f7fa feff 	bl	8000cb8 <__aeabi_uldivmod>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	4b38      	ldr	r3, [pc, #224]	; (8005fa4 <UART_SetConfig+0x4e4>)
 8005ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	2264      	movs	r2, #100	; 0x64
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	1acb      	subs	r3, r1, r3
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	3332      	adds	r3, #50	; 0x32
 8005ed4:	4a33      	ldr	r2, [pc, #204]	; (8005fa4 <UART_SetConfig+0x4e4>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ee0:	441c      	add	r4, r3
 8005ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	673b      	str	r3, [r7, #112]	; 0x70
 8005eea:	677a      	str	r2, [r7, #116]	; 0x74
 8005eec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	1891      	adds	r1, r2, r2
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	415b      	adcs	r3, r3
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f00:	4641      	mov	r1, r8
 8005f02:	1851      	adds	r1, r2, r1
 8005f04:	6039      	str	r1, [r7, #0]
 8005f06:	4649      	mov	r1, r9
 8005f08:	414b      	adcs	r3, r1
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f18:	4659      	mov	r1, fp
 8005f1a:	00cb      	lsls	r3, r1, #3
 8005f1c:	4651      	mov	r1, sl
 8005f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f22:	4651      	mov	r1, sl
 8005f24:	00ca      	lsls	r2, r1, #3
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	189b      	adds	r3, r3, r2
 8005f30:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f32:	464b      	mov	r3, r9
 8005f34:	460a      	mov	r2, r1
 8005f36:	eb42 0303 	adc.w	r3, r2, r3
 8005f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	663b      	str	r3, [r7, #96]	; 0x60
 8005f46:	667a      	str	r2, [r7, #100]	; 0x64
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f54:	4649      	mov	r1, r9
 8005f56:	008b      	lsls	r3, r1, #2
 8005f58:	4641      	mov	r1, r8
 8005f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f5e:	4641      	mov	r1, r8
 8005f60:	008a      	lsls	r2, r1, #2
 8005f62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f66:	f7fa fea7 	bl	8000cb8 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <UART_SetConfig+0x4e4>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	; 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	3332      	adds	r3, #50	; 0x32
 8005f82:	4a08      	ldr	r2, [pc, #32]	; (8005fa4 <UART_SetConfig+0x4e4>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f003 020f 	and.w	r2, r3, #15
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4422      	add	r2, r4
 8005f96:	609a      	str	r2, [r3, #8]
}
 8005f98:	bf00      	nop
 8005f9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fa4:	51eb851f 	.word	0x51eb851f

08005fa8 <__cvt>:
 8005fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	ec55 4b10 	vmov	r4, r5, d0
 8005fb0:	2d00      	cmp	r5, #0
 8005fb2:	460e      	mov	r6, r1
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	462b      	mov	r3, r5
 8005fb8:	bfbb      	ittet	lt
 8005fba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005fbe:	461d      	movlt	r5, r3
 8005fc0:	2300      	movge	r3, #0
 8005fc2:	232d      	movlt	r3, #45	; 0x2d
 8005fc4:	700b      	strb	r3, [r1, #0]
 8005fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005fcc:	4691      	mov	r9, r2
 8005fce:	f023 0820 	bic.w	r8, r3, #32
 8005fd2:	bfbc      	itt	lt
 8005fd4:	4622      	movlt	r2, r4
 8005fd6:	4614      	movlt	r4, r2
 8005fd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fdc:	d005      	beq.n	8005fea <__cvt+0x42>
 8005fde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005fe2:	d100      	bne.n	8005fe6 <__cvt+0x3e>
 8005fe4:	3601      	adds	r6, #1
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	e000      	b.n	8005fec <__cvt+0x44>
 8005fea:	2103      	movs	r1, #3
 8005fec:	ab03      	add	r3, sp, #12
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	ab02      	add	r3, sp, #8
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	ec45 4b10 	vmov	d0, r4, r5
 8005ff8:	4653      	mov	r3, sl
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	f001 f8b4 	bl	8007168 <_dtoa_r>
 8006000:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006004:	4607      	mov	r7, r0
 8006006:	d102      	bne.n	800600e <__cvt+0x66>
 8006008:	f019 0f01 	tst.w	r9, #1
 800600c:	d022      	beq.n	8006054 <__cvt+0xac>
 800600e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006012:	eb07 0906 	add.w	r9, r7, r6
 8006016:	d110      	bne.n	800603a <__cvt+0x92>
 8006018:	783b      	ldrb	r3, [r7, #0]
 800601a:	2b30      	cmp	r3, #48	; 0x30
 800601c:	d10a      	bne.n	8006034 <__cvt+0x8c>
 800601e:	2200      	movs	r2, #0
 8006020:	2300      	movs	r3, #0
 8006022:	4620      	mov	r0, r4
 8006024:	4629      	mov	r1, r5
 8006026:	f7fa fd67 	bl	8000af8 <__aeabi_dcmpeq>
 800602a:	b918      	cbnz	r0, 8006034 <__cvt+0x8c>
 800602c:	f1c6 0601 	rsb	r6, r6, #1
 8006030:	f8ca 6000 	str.w	r6, [sl]
 8006034:	f8da 3000 	ldr.w	r3, [sl]
 8006038:	4499      	add	r9, r3
 800603a:	2200      	movs	r2, #0
 800603c:	2300      	movs	r3, #0
 800603e:	4620      	mov	r0, r4
 8006040:	4629      	mov	r1, r5
 8006042:	f7fa fd59 	bl	8000af8 <__aeabi_dcmpeq>
 8006046:	b108      	cbz	r0, 800604c <__cvt+0xa4>
 8006048:	f8cd 900c 	str.w	r9, [sp, #12]
 800604c:	2230      	movs	r2, #48	; 0x30
 800604e:	9b03      	ldr	r3, [sp, #12]
 8006050:	454b      	cmp	r3, r9
 8006052:	d307      	bcc.n	8006064 <__cvt+0xbc>
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006058:	1bdb      	subs	r3, r3, r7
 800605a:	4638      	mov	r0, r7
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	b004      	add	sp, #16
 8006060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006064:	1c59      	adds	r1, r3, #1
 8006066:	9103      	str	r1, [sp, #12]
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e7f0      	b.n	800604e <__cvt+0xa6>

0800606c <__exponent>:
 800606c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800606e:	4603      	mov	r3, r0
 8006070:	2900      	cmp	r1, #0
 8006072:	bfb8      	it	lt
 8006074:	4249      	neglt	r1, r1
 8006076:	f803 2b02 	strb.w	r2, [r3], #2
 800607a:	bfb4      	ite	lt
 800607c:	222d      	movlt	r2, #45	; 0x2d
 800607e:	222b      	movge	r2, #43	; 0x2b
 8006080:	2909      	cmp	r1, #9
 8006082:	7042      	strb	r2, [r0, #1]
 8006084:	dd2a      	ble.n	80060dc <__exponent+0x70>
 8006086:	f10d 0207 	add.w	r2, sp, #7
 800608a:	4617      	mov	r7, r2
 800608c:	260a      	movs	r6, #10
 800608e:	4694      	mov	ip, r2
 8006090:	fb91 f5f6 	sdiv	r5, r1, r6
 8006094:	fb06 1415 	mls	r4, r6, r5, r1
 8006098:	3430      	adds	r4, #48	; 0x30
 800609a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800609e:	460c      	mov	r4, r1
 80060a0:	2c63      	cmp	r4, #99	; 0x63
 80060a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80060a6:	4629      	mov	r1, r5
 80060a8:	dcf1      	bgt.n	800608e <__exponent+0x22>
 80060aa:	3130      	adds	r1, #48	; 0x30
 80060ac:	f1ac 0402 	sub.w	r4, ip, #2
 80060b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060b4:	1c41      	adds	r1, r0, #1
 80060b6:	4622      	mov	r2, r4
 80060b8:	42ba      	cmp	r2, r7
 80060ba:	d30a      	bcc.n	80060d2 <__exponent+0x66>
 80060bc:	f10d 0209 	add.w	r2, sp, #9
 80060c0:	eba2 020c 	sub.w	r2, r2, ip
 80060c4:	42bc      	cmp	r4, r7
 80060c6:	bf88      	it	hi
 80060c8:	2200      	movhi	r2, #0
 80060ca:	4413      	add	r3, r2
 80060cc:	1a18      	subs	r0, r3, r0
 80060ce:	b003      	add	sp, #12
 80060d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80060d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80060da:	e7ed      	b.n	80060b8 <__exponent+0x4c>
 80060dc:	2330      	movs	r3, #48	; 0x30
 80060de:	3130      	adds	r1, #48	; 0x30
 80060e0:	7083      	strb	r3, [r0, #2]
 80060e2:	70c1      	strb	r1, [r0, #3]
 80060e4:	1d03      	adds	r3, r0, #4
 80060e6:	e7f1      	b.n	80060cc <__exponent+0x60>

080060e8 <_printf_float>:
 80060e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ec:	ed2d 8b02 	vpush	{d8}
 80060f0:	b08d      	sub	sp, #52	; 0x34
 80060f2:	460c      	mov	r4, r1
 80060f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060f8:	4616      	mov	r6, r2
 80060fa:	461f      	mov	r7, r3
 80060fc:	4605      	mov	r5, r0
 80060fe:	f000 ff25 	bl	8006f4c <_localeconv_r>
 8006102:	f8d0 a000 	ldr.w	sl, [r0]
 8006106:	4650      	mov	r0, sl
 8006108:	f7fa f8ca 	bl	80002a0 <strlen>
 800610c:	2300      	movs	r3, #0
 800610e:	930a      	str	r3, [sp, #40]	; 0x28
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	9305      	str	r3, [sp, #20]
 8006114:	f8d8 3000 	ldr.w	r3, [r8]
 8006118:	f894 b018 	ldrb.w	fp, [r4, #24]
 800611c:	3307      	adds	r3, #7
 800611e:	f023 0307 	bic.w	r3, r3, #7
 8006122:	f103 0208 	add.w	r2, r3, #8
 8006126:	f8c8 2000 	str.w	r2, [r8]
 800612a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800612e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006132:	9307      	str	r3, [sp, #28]
 8006134:	f8cd 8018 	str.w	r8, [sp, #24]
 8006138:	ee08 0a10 	vmov	s16, r0
 800613c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006144:	4b9e      	ldr	r3, [pc, #632]	; (80063c0 <_printf_float+0x2d8>)
 8006146:	f04f 32ff 	mov.w	r2, #4294967295
 800614a:	f7fa fd07 	bl	8000b5c <__aeabi_dcmpun>
 800614e:	bb88      	cbnz	r0, 80061b4 <_printf_float+0xcc>
 8006150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006154:	4b9a      	ldr	r3, [pc, #616]	; (80063c0 <_printf_float+0x2d8>)
 8006156:	f04f 32ff 	mov.w	r2, #4294967295
 800615a:	f7fa fce1 	bl	8000b20 <__aeabi_dcmple>
 800615e:	bb48      	cbnz	r0, 80061b4 <_printf_float+0xcc>
 8006160:	2200      	movs	r2, #0
 8006162:	2300      	movs	r3, #0
 8006164:	4640      	mov	r0, r8
 8006166:	4649      	mov	r1, r9
 8006168:	f7fa fcd0 	bl	8000b0c <__aeabi_dcmplt>
 800616c:	b110      	cbz	r0, 8006174 <_printf_float+0x8c>
 800616e:	232d      	movs	r3, #45	; 0x2d
 8006170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006174:	4a93      	ldr	r2, [pc, #588]	; (80063c4 <_printf_float+0x2dc>)
 8006176:	4b94      	ldr	r3, [pc, #592]	; (80063c8 <_printf_float+0x2e0>)
 8006178:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800617c:	bf94      	ite	ls
 800617e:	4690      	movls	r8, r2
 8006180:	4698      	movhi	r8, r3
 8006182:	2303      	movs	r3, #3
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	9b05      	ldr	r3, [sp, #20]
 8006188:	f023 0304 	bic.w	r3, r3, #4
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	f04f 0900 	mov.w	r9, #0
 8006192:	9700      	str	r7, [sp, #0]
 8006194:	4633      	mov	r3, r6
 8006196:	aa0b      	add	r2, sp, #44	; 0x2c
 8006198:	4621      	mov	r1, r4
 800619a:	4628      	mov	r0, r5
 800619c:	f000 f9da 	bl	8006554 <_printf_common>
 80061a0:	3001      	adds	r0, #1
 80061a2:	f040 8090 	bne.w	80062c6 <_printf_float+0x1de>
 80061a6:	f04f 30ff 	mov.w	r0, #4294967295
 80061aa:	b00d      	add	sp, #52	; 0x34
 80061ac:	ecbd 8b02 	vpop	{d8}
 80061b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b4:	4642      	mov	r2, r8
 80061b6:	464b      	mov	r3, r9
 80061b8:	4640      	mov	r0, r8
 80061ba:	4649      	mov	r1, r9
 80061bc:	f7fa fcce 	bl	8000b5c <__aeabi_dcmpun>
 80061c0:	b140      	cbz	r0, 80061d4 <_printf_float+0xec>
 80061c2:	464b      	mov	r3, r9
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bfbc      	itt	lt
 80061c8:	232d      	movlt	r3, #45	; 0x2d
 80061ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80061ce:	4a7f      	ldr	r2, [pc, #508]	; (80063cc <_printf_float+0x2e4>)
 80061d0:	4b7f      	ldr	r3, [pc, #508]	; (80063d0 <_printf_float+0x2e8>)
 80061d2:	e7d1      	b.n	8006178 <_printf_float+0x90>
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80061da:	9206      	str	r2, [sp, #24]
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	d13f      	bne.n	8006260 <_printf_float+0x178>
 80061e0:	2306      	movs	r3, #6
 80061e2:	6063      	str	r3, [r4, #4]
 80061e4:	9b05      	ldr	r3, [sp, #20]
 80061e6:	6861      	ldr	r1, [r4, #4]
 80061e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061ec:	2300      	movs	r3, #0
 80061ee:	9303      	str	r3, [sp, #12]
 80061f0:	ab0a      	add	r3, sp, #40	; 0x28
 80061f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061f6:	ab09      	add	r3, sp, #36	; 0x24
 80061f8:	ec49 8b10 	vmov	d0, r8, r9
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	6022      	str	r2, [r4, #0]
 8006200:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006204:	4628      	mov	r0, r5
 8006206:	f7ff fecf 	bl	8005fa8 <__cvt>
 800620a:	9b06      	ldr	r3, [sp, #24]
 800620c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800620e:	2b47      	cmp	r3, #71	; 0x47
 8006210:	4680      	mov	r8, r0
 8006212:	d108      	bne.n	8006226 <_printf_float+0x13e>
 8006214:	1cc8      	adds	r0, r1, #3
 8006216:	db02      	blt.n	800621e <_printf_float+0x136>
 8006218:	6863      	ldr	r3, [r4, #4]
 800621a:	4299      	cmp	r1, r3
 800621c:	dd41      	ble.n	80062a2 <_printf_float+0x1ba>
 800621e:	f1ab 0302 	sub.w	r3, fp, #2
 8006222:	fa5f fb83 	uxtb.w	fp, r3
 8006226:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800622a:	d820      	bhi.n	800626e <_printf_float+0x186>
 800622c:	3901      	subs	r1, #1
 800622e:	465a      	mov	r2, fp
 8006230:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006234:	9109      	str	r1, [sp, #36]	; 0x24
 8006236:	f7ff ff19 	bl	800606c <__exponent>
 800623a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800623c:	1813      	adds	r3, r2, r0
 800623e:	2a01      	cmp	r2, #1
 8006240:	4681      	mov	r9, r0
 8006242:	6123      	str	r3, [r4, #16]
 8006244:	dc02      	bgt.n	800624c <_printf_float+0x164>
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	07d2      	lsls	r2, r2, #31
 800624a:	d501      	bpl.n	8006250 <_printf_float+0x168>
 800624c:	3301      	adds	r3, #1
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006254:	2b00      	cmp	r3, #0
 8006256:	d09c      	beq.n	8006192 <_printf_float+0xaa>
 8006258:	232d      	movs	r3, #45	; 0x2d
 800625a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800625e:	e798      	b.n	8006192 <_printf_float+0xaa>
 8006260:	9a06      	ldr	r2, [sp, #24]
 8006262:	2a47      	cmp	r2, #71	; 0x47
 8006264:	d1be      	bne.n	80061e4 <_printf_float+0xfc>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1bc      	bne.n	80061e4 <_printf_float+0xfc>
 800626a:	2301      	movs	r3, #1
 800626c:	e7b9      	b.n	80061e2 <_printf_float+0xfa>
 800626e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006272:	d118      	bne.n	80062a6 <_printf_float+0x1be>
 8006274:	2900      	cmp	r1, #0
 8006276:	6863      	ldr	r3, [r4, #4]
 8006278:	dd0b      	ble.n	8006292 <_printf_float+0x1aa>
 800627a:	6121      	str	r1, [r4, #16]
 800627c:	b913      	cbnz	r3, 8006284 <_printf_float+0x19c>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	07d0      	lsls	r0, r2, #31
 8006282:	d502      	bpl.n	800628a <_printf_float+0x1a2>
 8006284:	3301      	adds	r3, #1
 8006286:	440b      	add	r3, r1
 8006288:	6123      	str	r3, [r4, #16]
 800628a:	65a1      	str	r1, [r4, #88]	; 0x58
 800628c:	f04f 0900 	mov.w	r9, #0
 8006290:	e7de      	b.n	8006250 <_printf_float+0x168>
 8006292:	b913      	cbnz	r3, 800629a <_printf_float+0x1b2>
 8006294:	6822      	ldr	r2, [r4, #0]
 8006296:	07d2      	lsls	r2, r2, #31
 8006298:	d501      	bpl.n	800629e <_printf_float+0x1b6>
 800629a:	3302      	adds	r3, #2
 800629c:	e7f4      	b.n	8006288 <_printf_float+0x1a0>
 800629e:	2301      	movs	r3, #1
 80062a0:	e7f2      	b.n	8006288 <_printf_float+0x1a0>
 80062a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80062a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a8:	4299      	cmp	r1, r3
 80062aa:	db05      	blt.n	80062b8 <_printf_float+0x1d0>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	6121      	str	r1, [r4, #16]
 80062b0:	07d8      	lsls	r0, r3, #31
 80062b2:	d5ea      	bpl.n	800628a <_printf_float+0x1a2>
 80062b4:	1c4b      	adds	r3, r1, #1
 80062b6:	e7e7      	b.n	8006288 <_printf_float+0x1a0>
 80062b8:	2900      	cmp	r1, #0
 80062ba:	bfd4      	ite	le
 80062bc:	f1c1 0202 	rsble	r2, r1, #2
 80062c0:	2201      	movgt	r2, #1
 80062c2:	4413      	add	r3, r2
 80062c4:	e7e0      	b.n	8006288 <_printf_float+0x1a0>
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	055a      	lsls	r2, r3, #21
 80062ca:	d407      	bmi.n	80062dc <_printf_float+0x1f4>
 80062cc:	6923      	ldr	r3, [r4, #16]
 80062ce:	4642      	mov	r2, r8
 80062d0:	4631      	mov	r1, r6
 80062d2:	4628      	mov	r0, r5
 80062d4:	47b8      	blx	r7
 80062d6:	3001      	adds	r0, #1
 80062d8:	d12c      	bne.n	8006334 <_printf_float+0x24c>
 80062da:	e764      	b.n	80061a6 <_printf_float+0xbe>
 80062dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062e0:	f240 80e0 	bls.w	80064a4 <_printf_float+0x3bc>
 80062e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062e8:	2200      	movs	r2, #0
 80062ea:	2300      	movs	r3, #0
 80062ec:	f7fa fc04 	bl	8000af8 <__aeabi_dcmpeq>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d034      	beq.n	800635e <_printf_float+0x276>
 80062f4:	4a37      	ldr	r2, [pc, #220]	; (80063d4 <_printf_float+0x2ec>)
 80062f6:	2301      	movs	r3, #1
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f af51 	beq.w	80061a6 <_printf_float+0xbe>
 8006304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006308:	429a      	cmp	r2, r3
 800630a:	db02      	blt.n	8006312 <_printf_float+0x22a>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	07d8      	lsls	r0, r3, #31
 8006310:	d510      	bpl.n	8006334 <_printf_float+0x24c>
 8006312:	ee18 3a10 	vmov	r3, s16
 8006316:	4652      	mov	r2, sl
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	f43f af41 	beq.w	80061a6 <_printf_float+0xbe>
 8006324:	f04f 0800 	mov.w	r8, #0
 8006328:	f104 091a 	add.w	r9, r4, #26
 800632c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800632e:	3b01      	subs	r3, #1
 8006330:	4543      	cmp	r3, r8
 8006332:	dc09      	bgt.n	8006348 <_printf_float+0x260>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	079b      	lsls	r3, r3, #30
 8006338:	f100 8107 	bmi.w	800654a <_printf_float+0x462>
 800633c:	68e0      	ldr	r0, [r4, #12]
 800633e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006340:	4298      	cmp	r0, r3
 8006342:	bfb8      	it	lt
 8006344:	4618      	movlt	r0, r3
 8006346:	e730      	b.n	80061aa <_printf_float+0xc2>
 8006348:	2301      	movs	r3, #1
 800634a:	464a      	mov	r2, r9
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	f43f af27 	beq.w	80061a6 <_printf_float+0xbe>
 8006358:	f108 0801 	add.w	r8, r8, #1
 800635c:	e7e6      	b.n	800632c <_printf_float+0x244>
 800635e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	dc39      	bgt.n	80063d8 <_printf_float+0x2f0>
 8006364:	4a1b      	ldr	r2, [pc, #108]	; (80063d4 <_printf_float+0x2ec>)
 8006366:	2301      	movs	r3, #1
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f af19 	beq.w	80061a6 <_printf_float+0xbe>
 8006374:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006378:	4313      	orrs	r3, r2
 800637a:	d102      	bne.n	8006382 <_printf_float+0x29a>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	07d9      	lsls	r1, r3, #31
 8006380:	d5d8      	bpl.n	8006334 <_printf_float+0x24c>
 8006382:	ee18 3a10 	vmov	r3, s16
 8006386:	4652      	mov	r2, sl
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f af09 	beq.w	80061a6 <_printf_float+0xbe>
 8006394:	f04f 0900 	mov.w	r9, #0
 8006398:	f104 0a1a 	add.w	sl, r4, #26
 800639c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639e:	425b      	negs	r3, r3
 80063a0:	454b      	cmp	r3, r9
 80063a2:	dc01      	bgt.n	80063a8 <_printf_float+0x2c0>
 80063a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a6:	e792      	b.n	80062ce <_printf_float+0x1e6>
 80063a8:	2301      	movs	r3, #1
 80063aa:	4652      	mov	r2, sl
 80063ac:	4631      	mov	r1, r6
 80063ae:	4628      	mov	r0, r5
 80063b0:	47b8      	blx	r7
 80063b2:	3001      	adds	r0, #1
 80063b4:	f43f aef7 	beq.w	80061a6 <_printf_float+0xbe>
 80063b8:	f109 0901 	add.w	r9, r9, #1
 80063bc:	e7ee      	b.n	800639c <_printf_float+0x2b4>
 80063be:	bf00      	nop
 80063c0:	7fefffff 	.word	0x7fefffff
 80063c4:	0800c688 	.word	0x0800c688
 80063c8:	0800c68c 	.word	0x0800c68c
 80063cc:	0800c690 	.word	0x0800c690
 80063d0:	0800c694 	.word	0x0800c694
 80063d4:	0800ca20 	.word	0x0800ca20
 80063d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063dc:	429a      	cmp	r2, r3
 80063de:	bfa8      	it	ge
 80063e0:	461a      	movge	r2, r3
 80063e2:	2a00      	cmp	r2, #0
 80063e4:	4691      	mov	r9, r2
 80063e6:	dc37      	bgt.n	8006458 <_printf_float+0x370>
 80063e8:	f04f 0b00 	mov.w	fp, #0
 80063ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063f0:	f104 021a 	add.w	r2, r4, #26
 80063f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063f6:	9305      	str	r3, [sp, #20]
 80063f8:	eba3 0309 	sub.w	r3, r3, r9
 80063fc:	455b      	cmp	r3, fp
 80063fe:	dc33      	bgt.n	8006468 <_printf_float+0x380>
 8006400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006404:	429a      	cmp	r2, r3
 8006406:	db3b      	blt.n	8006480 <_printf_float+0x398>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	07da      	lsls	r2, r3, #31
 800640c:	d438      	bmi.n	8006480 <_printf_float+0x398>
 800640e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006412:	eba2 0903 	sub.w	r9, r2, r3
 8006416:	9b05      	ldr	r3, [sp, #20]
 8006418:	1ad2      	subs	r2, r2, r3
 800641a:	4591      	cmp	r9, r2
 800641c:	bfa8      	it	ge
 800641e:	4691      	movge	r9, r2
 8006420:	f1b9 0f00 	cmp.w	r9, #0
 8006424:	dc35      	bgt.n	8006492 <_printf_float+0x3aa>
 8006426:	f04f 0800 	mov.w	r8, #0
 800642a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800642e:	f104 0a1a 	add.w	sl, r4, #26
 8006432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006436:	1a9b      	subs	r3, r3, r2
 8006438:	eba3 0309 	sub.w	r3, r3, r9
 800643c:	4543      	cmp	r3, r8
 800643e:	f77f af79 	ble.w	8006334 <_printf_float+0x24c>
 8006442:	2301      	movs	r3, #1
 8006444:	4652      	mov	r2, sl
 8006446:	4631      	mov	r1, r6
 8006448:	4628      	mov	r0, r5
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	f43f aeaa 	beq.w	80061a6 <_printf_float+0xbe>
 8006452:	f108 0801 	add.w	r8, r8, #1
 8006456:	e7ec      	b.n	8006432 <_printf_float+0x34a>
 8006458:	4613      	mov	r3, r2
 800645a:	4631      	mov	r1, r6
 800645c:	4642      	mov	r2, r8
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	d1c0      	bne.n	80063e8 <_printf_float+0x300>
 8006466:	e69e      	b.n	80061a6 <_printf_float+0xbe>
 8006468:	2301      	movs	r3, #1
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	9205      	str	r2, [sp, #20]
 8006470:	47b8      	blx	r7
 8006472:	3001      	adds	r0, #1
 8006474:	f43f ae97 	beq.w	80061a6 <_printf_float+0xbe>
 8006478:	9a05      	ldr	r2, [sp, #20]
 800647a:	f10b 0b01 	add.w	fp, fp, #1
 800647e:	e7b9      	b.n	80063f4 <_printf_float+0x30c>
 8006480:	ee18 3a10 	vmov	r3, s16
 8006484:	4652      	mov	r2, sl
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	d1be      	bne.n	800640e <_printf_float+0x326>
 8006490:	e689      	b.n	80061a6 <_printf_float+0xbe>
 8006492:	9a05      	ldr	r2, [sp, #20]
 8006494:	464b      	mov	r3, r9
 8006496:	4442      	add	r2, r8
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	d1c1      	bne.n	8006426 <_printf_float+0x33e>
 80064a2:	e680      	b.n	80061a6 <_printf_float+0xbe>
 80064a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064a6:	2a01      	cmp	r2, #1
 80064a8:	dc01      	bgt.n	80064ae <_printf_float+0x3c6>
 80064aa:	07db      	lsls	r3, r3, #31
 80064ac:	d53a      	bpl.n	8006524 <_printf_float+0x43c>
 80064ae:	2301      	movs	r3, #1
 80064b0:	4642      	mov	r2, r8
 80064b2:	4631      	mov	r1, r6
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b8      	blx	r7
 80064b8:	3001      	adds	r0, #1
 80064ba:	f43f ae74 	beq.w	80061a6 <_printf_float+0xbe>
 80064be:	ee18 3a10 	vmov	r3, s16
 80064c2:	4652      	mov	r2, sl
 80064c4:	4631      	mov	r1, r6
 80064c6:	4628      	mov	r0, r5
 80064c8:	47b8      	blx	r7
 80064ca:	3001      	adds	r0, #1
 80064cc:	f43f ae6b 	beq.w	80061a6 <_printf_float+0xbe>
 80064d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064d4:	2200      	movs	r2, #0
 80064d6:	2300      	movs	r3, #0
 80064d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80064dc:	f7fa fb0c 	bl	8000af8 <__aeabi_dcmpeq>
 80064e0:	b9d8      	cbnz	r0, 800651a <_printf_float+0x432>
 80064e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80064e6:	f108 0201 	add.w	r2, r8, #1
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	d10e      	bne.n	8006512 <_printf_float+0x42a>
 80064f4:	e657      	b.n	80061a6 <_printf_float+0xbe>
 80064f6:	2301      	movs	r3, #1
 80064f8:	4652      	mov	r2, sl
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	f43f ae50 	beq.w	80061a6 <_printf_float+0xbe>
 8006506:	f108 0801 	add.w	r8, r8, #1
 800650a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650c:	3b01      	subs	r3, #1
 800650e:	4543      	cmp	r3, r8
 8006510:	dcf1      	bgt.n	80064f6 <_printf_float+0x40e>
 8006512:	464b      	mov	r3, r9
 8006514:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006518:	e6da      	b.n	80062d0 <_printf_float+0x1e8>
 800651a:	f04f 0800 	mov.w	r8, #0
 800651e:	f104 0a1a 	add.w	sl, r4, #26
 8006522:	e7f2      	b.n	800650a <_printf_float+0x422>
 8006524:	2301      	movs	r3, #1
 8006526:	4642      	mov	r2, r8
 8006528:	e7df      	b.n	80064ea <_printf_float+0x402>
 800652a:	2301      	movs	r3, #1
 800652c:	464a      	mov	r2, r9
 800652e:	4631      	mov	r1, r6
 8006530:	4628      	mov	r0, r5
 8006532:	47b8      	blx	r7
 8006534:	3001      	adds	r0, #1
 8006536:	f43f ae36 	beq.w	80061a6 <_printf_float+0xbe>
 800653a:	f108 0801 	add.w	r8, r8, #1
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006542:	1a5b      	subs	r3, r3, r1
 8006544:	4543      	cmp	r3, r8
 8006546:	dcf0      	bgt.n	800652a <_printf_float+0x442>
 8006548:	e6f8      	b.n	800633c <_printf_float+0x254>
 800654a:	f04f 0800 	mov.w	r8, #0
 800654e:	f104 0919 	add.w	r9, r4, #25
 8006552:	e7f4      	b.n	800653e <_printf_float+0x456>

08006554 <_printf_common>:
 8006554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	4616      	mov	r6, r2
 800655a:	4699      	mov	r9, r3
 800655c:	688a      	ldr	r2, [r1, #8]
 800655e:	690b      	ldr	r3, [r1, #16]
 8006560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006564:	4293      	cmp	r3, r2
 8006566:	bfb8      	it	lt
 8006568:	4613      	movlt	r3, r2
 800656a:	6033      	str	r3, [r6, #0]
 800656c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006570:	4607      	mov	r7, r0
 8006572:	460c      	mov	r4, r1
 8006574:	b10a      	cbz	r2, 800657a <_printf_common+0x26>
 8006576:	3301      	adds	r3, #1
 8006578:	6033      	str	r3, [r6, #0]
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	0699      	lsls	r1, r3, #26
 800657e:	bf42      	ittt	mi
 8006580:	6833      	ldrmi	r3, [r6, #0]
 8006582:	3302      	addmi	r3, #2
 8006584:	6033      	strmi	r3, [r6, #0]
 8006586:	6825      	ldr	r5, [r4, #0]
 8006588:	f015 0506 	ands.w	r5, r5, #6
 800658c:	d106      	bne.n	800659c <_printf_common+0x48>
 800658e:	f104 0a19 	add.w	sl, r4, #25
 8006592:	68e3      	ldr	r3, [r4, #12]
 8006594:	6832      	ldr	r2, [r6, #0]
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	42ab      	cmp	r3, r5
 800659a:	dc26      	bgt.n	80065ea <_printf_common+0x96>
 800659c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065a0:	1e13      	subs	r3, r2, #0
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	bf18      	it	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	0692      	lsls	r2, r2, #26
 80065aa:	d42b      	bmi.n	8006604 <_printf_common+0xb0>
 80065ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065b0:	4649      	mov	r1, r9
 80065b2:	4638      	mov	r0, r7
 80065b4:	47c0      	blx	r8
 80065b6:	3001      	adds	r0, #1
 80065b8:	d01e      	beq.n	80065f8 <_printf_common+0xa4>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	6922      	ldr	r2, [r4, #16]
 80065be:	f003 0306 	and.w	r3, r3, #6
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	bf02      	ittt	eq
 80065c6:	68e5      	ldreq	r5, [r4, #12]
 80065c8:	6833      	ldreq	r3, [r6, #0]
 80065ca:	1aed      	subeq	r5, r5, r3
 80065cc:	68a3      	ldr	r3, [r4, #8]
 80065ce:	bf0c      	ite	eq
 80065d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d4:	2500      	movne	r5, #0
 80065d6:	4293      	cmp	r3, r2
 80065d8:	bfc4      	itt	gt
 80065da:	1a9b      	subgt	r3, r3, r2
 80065dc:	18ed      	addgt	r5, r5, r3
 80065de:	2600      	movs	r6, #0
 80065e0:	341a      	adds	r4, #26
 80065e2:	42b5      	cmp	r5, r6
 80065e4:	d11a      	bne.n	800661c <_printf_common+0xc8>
 80065e6:	2000      	movs	r0, #0
 80065e8:	e008      	b.n	80065fc <_printf_common+0xa8>
 80065ea:	2301      	movs	r3, #1
 80065ec:	4652      	mov	r2, sl
 80065ee:	4649      	mov	r1, r9
 80065f0:	4638      	mov	r0, r7
 80065f2:	47c0      	blx	r8
 80065f4:	3001      	adds	r0, #1
 80065f6:	d103      	bne.n	8006600 <_printf_common+0xac>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006600:	3501      	adds	r5, #1
 8006602:	e7c6      	b.n	8006592 <_printf_common+0x3e>
 8006604:	18e1      	adds	r1, r4, r3
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	2030      	movs	r0, #48	; 0x30
 800660a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800660e:	4422      	add	r2, r4
 8006610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006618:	3302      	adds	r3, #2
 800661a:	e7c7      	b.n	80065ac <_printf_common+0x58>
 800661c:	2301      	movs	r3, #1
 800661e:	4622      	mov	r2, r4
 8006620:	4649      	mov	r1, r9
 8006622:	4638      	mov	r0, r7
 8006624:	47c0      	blx	r8
 8006626:	3001      	adds	r0, #1
 8006628:	d0e6      	beq.n	80065f8 <_printf_common+0xa4>
 800662a:	3601      	adds	r6, #1
 800662c:	e7d9      	b.n	80065e2 <_printf_common+0x8e>
	...

08006630 <_printf_i>:
 8006630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	7e0f      	ldrb	r7, [r1, #24]
 8006636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006638:	2f78      	cmp	r7, #120	; 0x78
 800663a:	4691      	mov	r9, r2
 800663c:	4680      	mov	r8, r0
 800663e:	460c      	mov	r4, r1
 8006640:	469a      	mov	sl, r3
 8006642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006646:	d807      	bhi.n	8006658 <_printf_i+0x28>
 8006648:	2f62      	cmp	r7, #98	; 0x62
 800664a:	d80a      	bhi.n	8006662 <_printf_i+0x32>
 800664c:	2f00      	cmp	r7, #0
 800664e:	f000 80d4 	beq.w	80067fa <_printf_i+0x1ca>
 8006652:	2f58      	cmp	r7, #88	; 0x58
 8006654:	f000 80c0 	beq.w	80067d8 <_printf_i+0x1a8>
 8006658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800665c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006660:	e03a      	b.n	80066d8 <_printf_i+0xa8>
 8006662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006666:	2b15      	cmp	r3, #21
 8006668:	d8f6      	bhi.n	8006658 <_printf_i+0x28>
 800666a:	a101      	add	r1, pc, #4	; (adr r1, 8006670 <_printf_i+0x40>)
 800666c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006670:	080066c9 	.word	0x080066c9
 8006674:	080066dd 	.word	0x080066dd
 8006678:	08006659 	.word	0x08006659
 800667c:	08006659 	.word	0x08006659
 8006680:	08006659 	.word	0x08006659
 8006684:	08006659 	.word	0x08006659
 8006688:	080066dd 	.word	0x080066dd
 800668c:	08006659 	.word	0x08006659
 8006690:	08006659 	.word	0x08006659
 8006694:	08006659 	.word	0x08006659
 8006698:	08006659 	.word	0x08006659
 800669c:	080067e1 	.word	0x080067e1
 80066a0:	08006709 	.word	0x08006709
 80066a4:	0800679b 	.word	0x0800679b
 80066a8:	08006659 	.word	0x08006659
 80066ac:	08006659 	.word	0x08006659
 80066b0:	08006803 	.word	0x08006803
 80066b4:	08006659 	.word	0x08006659
 80066b8:	08006709 	.word	0x08006709
 80066bc:	08006659 	.word	0x08006659
 80066c0:	08006659 	.word	0x08006659
 80066c4:	080067a3 	.word	0x080067a3
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	1d1a      	adds	r2, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	602a      	str	r2, [r5, #0]
 80066d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066d8:	2301      	movs	r3, #1
 80066da:	e09f      	b.n	800681c <_printf_i+0x1ec>
 80066dc:	6820      	ldr	r0, [r4, #0]
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	0607      	lsls	r7, r0, #24
 80066e2:	f103 0104 	add.w	r1, r3, #4
 80066e6:	6029      	str	r1, [r5, #0]
 80066e8:	d501      	bpl.n	80066ee <_printf_i+0xbe>
 80066ea:	681e      	ldr	r6, [r3, #0]
 80066ec:	e003      	b.n	80066f6 <_printf_i+0xc6>
 80066ee:	0646      	lsls	r6, r0, #25
 80066f0:	d5fb      	bpl.n	80066ea <_printf_i+0xba>
 80066f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80066f6:	2e00      	cmp	r6, #0
 80066f8:	da03      	bge.n	8006702 <_printf_i+0xd2>
 80066fa:	232d      	movs	r3, #45	; 0x2d
 80066fc:	4276      	negs	r6, r6
 80066fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006702:	485a      	ldr	r0, [pc, #360]	; (800686c <_printf_i+0x23c>)
 8006704:	230a      	movs	r3, #10
 8006706:	e012      	b.n	800672e <_printf_i+0xfe>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	6820      	ldr	r0, [r4, #0]
 800670c:	1d19      	adds	r1, r3, #4
 800670e:	6029      	str	r1, [r5, #0]
 8006710:	0605      	lsls	r5, r0, #24
 8006712:	d501      	bpl.n	8006718 <_printf_i+0xe8>
 8006714:	681e      	ldr	r6, [r3, #0]
 8006716:	e002      	b.n	800671e <_printf_i+0xee>
 8006718:	0641      	lsls	r1, r0, #25
 800671a:	d5fb      	bpl.n	8006714 <_printf_i+0xe4>
 800671c:	881e      	ldrh	r6, [r3, #0]
 800671e:	4853      	ldr	r0, [pc, #332]	; (800686c <_printf_i+0x23c>)
 8006720:	2f6f      	cmp	r7, #111	; 0x6f
 8006722:	bf0c      	ite	eq
 8006724:	2308      	moveq	r3, #8
 8006726:	230a      	movne	r3, #10
 8006728:	2100      	movs	r1, #0
 800672a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800672e:	6865      	ldr	r5, [r4, #4]
 8006730:	60a5      	str	r5, [r4, #8]
 8006732:	2d00      	cmp	r5, #0
 8006734:	bfa2      	ittt	ge
 8006736:	6821      	ldrge	r1, [r4, #0]
 8006738:	f021 0104 	bicge.w	r1, r1, #4
 800673c:	6021      	strge	r1, [r4, #0]
 800673e:	b90e      	cbnz	r6, 8006744 <_printf_i+0x114>
 8006740:	2d00      	cmp	r5, #0
 8006742:	d04b      	beq.n	80067dc <_printf_i+0x1ac>
 8006744:	4615      	mov	r5, r2
 8006746:	fbb6 f1f3 	udiv	r1, r6, r3
 800674a:	fb03 6711 	mls	r7, r3, r1, r6
 800674e:	5dc7      	ldrb	r7, [r0, r7]
 8006750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006754:	4637      	mov	r7, r6
 8006756:	42bb      	cmp	r3, r7
 8006758:	460e      	mov	r6, r1
 800675a:	d9f4      	bls.n	8006746 <_printf_i+0x116>
 800675c:	2b08      	cmp	r3, #8
 800675e:	d10b      	bne.n	8006778 <_printf_i+0x148>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	07de      	lsls	r6, r3, #31
 8006764:	d508      	bpl.n	8006778 <_printf_i+0x148>
 8006766:	6923      	ldr	r3, [r4, #16]
 8006768:	6861      	ldr	r1, [r4, #4]
 800676a:	4299      	cmp	r1, r3
 800676c:	bfde      	ittt	le
 800676e:	2330      	movle	r3, #48	; 0x30
 8006770:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006774:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006778:	1b52      	subs	r2, r2, r5
 800677a:	6122      	str	r2, [r4, #16]
 800677c:	f8cd a000 	str.w	sl, [sp]
 8006780:	464b      	mov	r3, r9
 8006782:	aa03      	add	r2, sp, #12
 8006784:	4621      	mov	r1, r4
 8006786:	4640      	mov	r0, r8
 8006788:	f7ff fee4 	bl	8006554 <_printf_common>
 800678c:	3001      	adds	r0, #1
 800678e:	d14a      	bne.n	8006826 <_printf_i+0x1f6>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	b004      	add	sp, #16
 8006796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	f043 0320 	orr.w	r3, r3, #32
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	4833      	ldr	r0, [pc, #204]	; (8006870 <_printf_i+0x240>)
 80067a4:	2778      	movs	r7, #120	; 0x78
 80067a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	6829      	ldr	r1, [r5, #0]
 80067ae:	061f      	lsls	r7, r3, #24
 80067b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80067b4:	d402      	bmi.n	80067bc <_printf_i+0x18c>
 80067b6:	065f      	lsls	r7, r3, #25
 80067b8:	bf48      	it	mi
 80067ba:	b2b6      	uxthmi	r6, r6
 80067bc:	07df      	lsls	r7, r3, #31
 80067be:	bf48      	it	mi
 80067c0:	f043 0320 	orrmi.w	r3, r3, #32
 80067c4:	6029      	str	r1, [r5, #0]
 80067c6:	bf48      	it	mi
 80067c8:	6023      	strmi	r3, [r4, #0]
 80067ca:	b91e      	cbnz	r6, 80067d4 <_printf_i+0x1a4>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	f023 0320 	bic.w	r3, r3, #32
 80067d2:	6023      	str	r3, [r4, #0]
 80067d4:	2310      	movs	r3, #16
 80067d6:	e7a7      	b.n	8006728 <_printf_i+0xf8>
 80067d8:	4824      	ldr	r0, [pc, #144]	; (800686c <_printf_i+0x23c>)
 80067da:	e7e4      	b.n	80067a6 <_printf_i+0x176>
 80067dc:	4615      	mov	r5, r2
 80067de:	e7bd      	b.n	800675c <_printf_i+0x12c>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	6826      	ldr	r6, [r4, #0]
 80067e4:	6961      	ldr	r1, [r4, #20]
 80067e6:	1d18      	adds	r0, r3, #4
 80067e8:	6028      	str	r0, [r5, #0]
 80067ea:	0635      	lsls	r5, r6, #24
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	d501      	bpl.n	80067f4 <_printf_i+0x1c4>
 80067f0:	6019      	str	r1, [r3, #0]
 80067f2:	e002      	b.n	80067fa <_printf_i+0x1ca>
 80067f4:	0670      	lsls	r0, r6, #25
 80067f6:	d5fb      	bpl.n	80067f0 <_printf_i+0x1c0>
 80067f8:	8019      	strh	r1, [r3, #0]
 80067fa:	2300      	movs	r3, #0
 80067fc:	6123      	str	r3, [r4, #16]
 80067fe:	4615      	mov	r5, r2
 8006800:	e7bc      	b.n	800677c <_printf_i+0x14c>
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	1d1a      	adds	r2, r3, #4
 8006806:	602a      	str	r2, [r5, #0]
 8006808:	681d      	ldr	r5, [r3, #0]
 800680a:	6862      	ldr	r2, [r4, #4]
 800680c:	2100      	movs	r1, #0
 800680e:	4628      	mov	r0, r5
 8006810:	f7f9 fcf6 	bl	8000200 <memchr>
 8006814:	b108      	cbz	r0, 800681a <_printf_i+0x1ea>
 8006816:	1b40      	subs	r0, r0, r5
 8006818:	6060      	str	r0, [r4, #4]
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	6123      	str	r3, [r4, #16]
 800681e:	2300      	movs	r3, #0
 8006820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006824:	e7aa      	b.n	800677c <_printf_i+0x14c>
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	462a      	mov	r2, r5
 800682a:	4649      	mov	r1, r9
 800682c:	4640      	mov	r0, r8
 800682e:	47d0      	blx	sl
 8006830:	3001      	adds	r0, #1
 8006832:	d0ad      	beq.n	8006790 <_printf_i+0x160>
 8006834:	6823      	ldr	r3, [r4, #0]
 8006836:	079b      	lsls	r3, r3, #30
 8006838:	d413      	bmi.n	8006862 <_printf_i+0x232>
 800683a:	68e0      	ldr	r0, [r4, #12]
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	4298      	cmp	r0, r3
 8006840:	bfb8      	it	lt
 8006842:	4618      	movlt	r0, r3
 8006844:	e7a6      	b.n	8006794 <_printf_i+0x164>
 8006846:	2301      	movs	r3, #1
 8006848:	4632      	mov	r2, r6
 800684a:	4649      	mov	r1, r9
 800684c:	4640      	mov	r0, r8
 800684e:	47d0      	blx	sl
 8006850:	3001      	adds	r0, #1
 8006852:	d09d      	beq.n	8006790 <_printf_i+0x160>
 8006854:	3501      	adds	r5, #1
 8006856:	68e3      	ldr	r3, [r4, #12]
 8006858:	9903      	ldr	r1, [sp, #12]
 800685a:	1a5b      	subs	r3, r3, r1
 800685c:	42ab      	cmp	r3, r5
 800685e:	dcf2      	bgt.n	8006846 <_printf_i+0x216>
 8006860:	e7eb      	b.n	800683a <_printf_i+0x20a>
 8006862:	2500      	movs	r5, #0
 8006864:	f104 0619 	add.w	r6, r4, #25
 8006868:	e7f5      	b.n	8006856 <_printf_i+0x226>
 800686a:	bf00      	nop
 800686c:	0800c698 	.word	0x0800c698
 8006870:	0800c6a9 	.word	0x0800c6a9

08006874 <_scanf_float>:
 8006874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006878:	b087      	sub	sp, #28
 800687a:	4617      	mov	r7, r2
 800687c:	9303      	str	r3, [sp, #12]
 800687e:	688b      	ldr	r3, [r1, #8]
 8006880:	1e5a      	subs	r2, r3, #1
 8006882:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006886:	bf83      	ittte	hi
 8006888:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800688c:	195b      	addhi	r3, r3, r5
 800688e:	9302      	strhi	r3, [sp, #8]
 8006890:	2300      	movls	r3, #0
 8006892:	bf86      	itte	hi
 8006894:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006898:	608b      	strhi	r3, [r1, #8]
 800689a:	9302      	strls	r3, [sp, #8]
 800689c:	680b      	ldr	r3, [r1, #0]
 800689e:	468b      	mov	fp, r1
 80068a0:	2500      	movs	r5, #0
 80068a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80068a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80068aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80068ae:	4680      	mov	r8, r0
 80068b0:	460c      	mov	r4, r1
 80068b2:	465e      	mov	r6, fp
 80068b4:	46aa      	mov	sl, r5
 80068b6:	46a9      	mov	r9, r5
 80068b8:	9501      	str	r5, [sp, #4]
 80068ba:	68a2      	ldr	r2, [r4, #8]
 80068bc:	b152      	cbz	r2, 80068d4 <_scanf_float+0x60>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b4e      	cmp	r3, #78	; 0x4e
 80068c4:	d864      	bhi.n	8006990 <_scanf_float+0x11c>
 80068c6:	2b40      	cmp	r3, #64	; 0x40
 80068c8:	d83c      	bhi.n	8006944 <_scanf_float+0xd0>
 80068ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80068ce:	b2c8      	uxtb	r0, r1
 80068d0:	280e      	cmp	r0, #14
 80068d2:	d93a      	bls.n	800694a <_scanf_float+0xd6>
 80068d4:	f1b9 0f00 	cmp.w	r9, #0
 80068d8:	d003      	beq.n	80068e2 <_scanf_float+0x6e>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068e6:	f1ba 0f01 	cmp.w	sl, #1
 80068ea:	f200 8113 	bhi.w	8006b14 <_scanf_float+0x2a0>
 80068ee:	455e      	cmp	r6, fp
 80068f0:	f200 8105 	bhi.w	8006afe <_scanf_float+0x28a>
 80068f4:	2501      	movs	r5, #1
 80068f6:	4628      	mov	r0, r5
 80068f8:	b007      	add	sp, #28
 80068fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006902:	2a0d      	cmp	r2, #13
 8006904:	d8e6      	bhi.n	80068d4 <_scanf_float+0x60>
 8006906:	a101      	add	r1, pc, #4	; (adr r1, 800690c <_scanf_float+0x98>)
 8006908:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800690c:	08006a4b 	.word	0x08006a4b
 8006910:	080068d5 	.word	0x080068d5
 8006914:	080068d5 	.word	0x080068d5
 8006918:	080068d5 	.word	0x080068d5
 800691c:	08006aab 	.word	0x08006aab
 8006920:	08006a83 	.word	0x08006a83
 8006924:	080068d5 	.word	0x080068d5
 8006928:	080068d5 	.word	0x080068d5
 800692c:	08006a59 	.word	0x08006a59
 8006930:	080068d5 	.word	0x080068d5
 8006934:	080068d5 	.word	0x080068d5
 8006938:	080068d5 	.word	0x080068d5
 800693c:	080068d5 	.word	0x080068d5
 8006940:	08006a11 	.word	0x08006a11
 8006944:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006948:	e7db      	b.n	8006902 <_scanf_float+0x8e>
 800694a:	290e      	cmp	r1, #14
 800694c:	d8c2      	bhi.n	80068d4 <_scanf_float+0x60>
 800694e:	a001      	add	r0, pc, #4	; (adr r0, 8006954 <_scanf_float+0xe0>)
 8006950:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006954:	08006a03 	.word	0x08006a03
 8006958:	080068d5 	.word	0x080068d5
 800695c:	08006a03 	.word	0x08006a03
 8006960:	08006a97 	.word	0x08006a97
 8006964:	080068d5 	.word	0x080068d5
 8006968:	080069b1 	.word	0x080069b1
 800696c:	080069ed 	.word	0x080069ed
 8006970:	080069ed 	.word	0x080069ed
 8006974:	080069ed 	.word	0x080069ed
 8006978:	080069ed 	.word	0x080069ed
 800697c:	080069ed 	.word	0x080069ed
 8006980:	080069ed 	.word	0x080069ed
 8006984:	080069ed 	.word	0x080069ed
 8006988:	080069ed 	.word	0x080069ed
 800698c:	080069ed 	.word	0x080069ed
 8006990:	2b6e      	cmp	r3, #110	; 0x6e
 8006992:	d809      	bhi.n	80069a8 <_scanf_float+0x134>
 8006994:	2b60      	cmp	r3, #96	; 0x60
 8006996:	d8b2      	bhi.n	80068fe <_scanf_float+0x8a>
 8006998:	2b54      	cmp	r3, #84	; 0x54
 800699a:	d077      	beq.n	8006a8c <_scanf_float+0x218>
 800699c:	2b59      	cmp	r3, #89	; 0x59
 800699e:	d199      	bne.n	80068d4 <_scanf_float+0x60>
 80069a0:	2d07      	cmp	r5, #7
 80069a2:	d197      	bne.n	80068d4 <_scanf_float+0x60>
 80069a4:	2508      	movs	r5, #8
 80069a6:	e029      	b.n	80069fc <_scanf_float+0x188>
 80069a8:	2b74      	cmp	r3, #116	; 0x74
 80069aa:	d06f      	beq.n	8006a8c <_scanf_float+0x218>
 80069ac:	2b79      	cmp	r3, #121	; 0x79
 80069ae:	e7f6      	b.n	800699e <_scanf_float+0x12a>
 80069b0:	6821      	ldr	r1, [r4, #0]
 80069b2:	05c8      	lsls	r0, r1, #23
 80069b4:	d51a      	bpl.n	80069ec <_scanf_float+0x178>
 80069b6:	9b02      	ldr	r3, [sp, #8]
 80069b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80069bc:	6021      	str	r1, [r4, #0]
 80069be:	f109 0901 	add.w	r9, r9, #1
 80069c2:	b11b      	cbz	r3, 80069cc <_scanf_float+0x158>
 80069c4:	3b01      	subs	r3, #1
 80069c6:	3201      	adds	r2, #1
 80069c8:	9302      	str	r3, [sp, #8]
 80069ca:	60a2      	str	r2, [r4, #8]
 80069cc:	68a3      	ldr	r3, [r4, #8]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	60a3      	str	r3, [r4, #8]
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	3301      	adds	r3, #1
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3b01      	subs	r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	607b      	str	r3, [r7, #4]
 80069e0:	f340 8084 	ble.w	8006aec <_scanf_float+0x278>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	3301      	adds	r3, #1
 80069e8:	603b      	str	r3, [r7, #0]
 80069ea:	e766      	b.n	80068ba <_scanf_float+0x46>
 80069ec:	eb1a 0f05 	cmn.w	sl, r5
 80069f0:	f47f af70 	bne.w	80068d4 <_scanf_float+0x60>
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80069fa:	6022      	str	r2, [r4, #0]
 80069fc:	f806 3b01 	strb.w	r3, [r6], #1
 8006a00:	e7e4      	b.n	80069cc <_scanf_float+0x158>
 8006a02:	6822      	ldr	r2, [r4, #0]
 8006a04:	0610      	lsls	r0, r2, #24
 8006a06:	f57f af65 	bpl.w	80068d4 <_scanf_float+0x60>
 8006a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a0e:	e7f4      	b.n	80069fa <_scanf_float+0x186>
 8006a10:	f1ba 0f00 	cmp.w	sl, #0
 8006a14:	d10e      	bne.n	8006a34 <_scanf_float+0x1c0>
 8006a16:	f1b9 0f00 	cmp.w	r9, #0
 8006a1a:	d10e      	bne.n	8006a3a <_scanf_float+0x1c6>
 8006a1c:	6822      	ldr	r2, [r4, #0]
 8006a1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a26:	d108      	bne.n	8006a3a <_scanf_float+0x1c6>
 8006a28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a2c:	6022      	str	r2, [r4, #0]
 8006a2e:	f04f 0a01 	mov.w	sl, #1
 8006a32:	e7e3      	b.n	80069fc <_scanf_float+0x188>
 8006a34:	f1ba 0f02 	cmp.w	sl, #2
 8006a38:	d055      	beq.n	8006ae6 <_scanf_float+0x272>
 8006a3a:	2d01      	cmp	r5, #1
 8006a3c:	d002      	beq.n	8006a44 <_scanf_float+0x1d0>
 8006a3e:	2d04      	cmp	r5, #4
 8006a40:	f47f af48 	bne.w	80068d4 <_scanf_float+0x60>
 8006a44:	3501      	adds	r5, #1
 8006a46:	b2ed      	uxtb	r5, r5
 8006a48:	e7d8      	b.n	80069fc <_scanf_float+0x188>
 8006a4a:	f1ba 0f01 	cmp.w	sl, #1
 8006a4e:	f47f af41 	bne.w	80068d4 <_scanf_float+0x60>
 8006a52:	f04f 0a02 	mov.w	sl, #2
 8006a56:	e7d1      	b.n	80069fc <_scanf_float+0x188>
 8006a58:	b97d      	cbnz	r5, 8006a7a <_scanf_float+0x206>
 8006a5a:	f1b9 0f00 	cmp.w	r9, #0
 8006a5e:	f47f af3c 	bne.w	80068da <_scanf_float+0x66>
 8006a62:	6822      	ldr	r2, [r4, #0]
 8006a64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a6c:	f47f af39 	bne.w	80068e2 <_scanf_float+0x6e>
 8006a70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a74:	6022      	str	r2, [r4, #0]
 8006a76:	2501      	movs	r5, #1
 8006a78:	e7c0      	b.n	80069fc <_scanf_float+0x188>
 8006a7a:	2d03      	cmp	r5, #3
 8006a7c:	d0e2      	beq.n	8006a44 <_scanf_float+0x1d0>
 8006a7e:	2d05      	cmp	r5, #5
 8006a80:	e7de      	b.n	8006a40 <_scanf_float+0x1cc>
 8006a82:	2d02      	cmp	r5, #2
 8006a84:	f47f af26 	bne.w	80068d4 <_scanf_float+0x60>
 8006a88:	2503      	movs	r5, #3
 8006a8a:	e7b7      	b.n	80069fc <_scanf_float+0x188>
 8006a8c:	2d06      	cmp	r5, #6
 8006a8e:	f47f af21 	bne.w	80068d4 <_scanf_float+0x60>
 8006a92:	2507      	movs	r5, #7
 8006a94:	e7b2      	b.n	80069fc <_scanf_float+0x188>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	0591      	lsls	r1, r2, #22
 8006a9a:	f57f af1b 	bpl.w	80068d4 <_scanf_float+0x60>
 8006a9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006aa2:	6022      	str	r2, [r4, #0]
 8006aa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006aa8:	e7a8      	b.n	80069fc <_scanf_float+0x188>
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006ab0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ab4:	d006      	beq.n	8006ac4 <_scanf_float+0x250>
 8006ab6:	0550      	lsls	r0, r2, #21
 8006ab8:	f57f af0c 	bpl.w	80068d4 <_scanf_float+0x60>
 8006abc:	f1b9 0f00 	cmp.w	r9, #0
 8006ac0:	f43f af0f 	beq.w	80068e2 <_scanf_float+0x6e>
 8006ac4:	0591      	lsls	r1, r2, #22
 8006ac6:	bf58      	it	pl
 8006ac8:	9901      	ldrpl	r1, [sp, #4]
 8006aca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ace:	bf58      	it	pl
 8006ad0:	eba9 0101 	subpl.w	r1, r9, r1
 8006ad4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006ad8:	bf58      	it	pl
 8006ada:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ade:	6022      	str	r2, [r4, #0]
 8006ae0:	f04f 0900 	mov.w	r9, #0
 8006ae4:	e78a      	b.n	80069fc <_scanf_float+0x188>
 8006ae6:	f04f 0a03 	mov.w	sl, #3
 8006aea:	e787      	b.n	80069fc <_scanf_float+0x188>
 8006aec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006af0:	4639      	mov	r1, r7
 8006af2:	4640      	mov	r0, r8
 8006af4:	4798      	blx	r3
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f43f aedf 	beq.w	80068ba <_scanf_float+0x46>
 8006afc:	e6ea      	b.n	80068d4 <_scanf_float+0x60>
 8006afe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b06:	463a      	mov	r2, r7
 8006b08:	4640      	mov	r0, r8
 8006b0a:	4798      	blx	r3
 8006b0c:	6923      	ldr	r3, [r4, #16]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	6123      	str	r3, [r4, #16]
 8006b12:	e6ec      	b.n	80068ee <_scanf_float+0x7a>
 8006b14:	1e6b      	subs	r3, r5, #1
 8006b16:	2b06      	cmp	r3, #6
 8006b18:	d825      	bhi.n	8006b66 <_scanf_float+0x2f2>
 8006b1a:	2d02      	cmp	r5, #2
 8006b1c:	d836      	bhi.n	8006b8c <_scanf_float+0x318>
 8006b1e:	455e      	cmp	r6, fp
 8006b20:	f67f aee8 	bls.w	80068f4 <_scanf_float+0x80>
 8006b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b2c:	463a      	mov	r2, r7
 8006b2e:	4640      	mov	r0, r8
 8006b30:	4798      	blx	r3
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	e7f1      	b.n	8006b1e <_scanf_float+0x2aa>
 8006b3a:	9802      	ldr	r0, [sp, #8]
 8006b3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b44:	9002      	str	r0, [sp, #8]
 8006b46:	463a      	mov	r2, r7
 8006b48:	4640      	mov	r0, r8
 8006b4a:	4798      	blx	r3
 8006b4c:	6923      	ldr	r3, [r4, #16]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	6123      	str	r3, [r4, #16]
 8006b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b56:	fa5f fa8a 	uxtb.w	sl, sl
 8006b5a:	f1ba 0f02 	cmp.w	sl, #2
 8006b5e:	d1ec      	bne.n	8006b3a <_scanf_float+0x2c6>
 8006b60:	3d03      	subs	r5, #3
 8006b62:	b2ed      	uxtb	r5, r5
 8006b64:	1b76      	subs	r6, r6, r5
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	05da      	lsls	r2, r3, #23
 8006b6a:	d52f      	bpl.n	8006bcc <_scanf_float+0x358>
 8006b6c:	055b      	lsls	r3, r3, #21
 8006b6e:	d510      	bpl.n	8006b92 <_scanf_float+0x31e>
 8006b70:	455e      	cmp	r6, fp
 8006b72:	f67f aebf 	bls.w	80068f4 <_scanf_float+0x80>
 8006b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b7e:	463a      	mov	r2, r7
 8006b80:	4640      	mov	r0, r8
 8006b82:	4798      	blx	r3
 8006b84:	6923      	ldr	r3, [r4, #16]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	6123      	str	r3, [r4, #16]
 8006b8a:	e7f1      	b.n	8006b70 <_scanf_float+0x2fc>
 8006b8c:	46aa      	mov	sl, r5
 8006b8e:	9602      	str	r6, [sp, #8]
 8006b90:	e7df      	b.n	8006b52 <_scanf_float+0x2de>
 8006b92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	2965      	cmp	r1, #101	; 0x65
 8006b9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b9e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	d00c      	beq.n	8006bc0 <_scanf_float+0x34c>
 8006ba6:	2945      	cmp	r1, #69	; 0x45
 8006ba8:	d00a      	beq.n	8006bc0 <_scanf_float+0x34c>
 8006baa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bae:	463a      	mov	r2, r7
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4798      	blx	r3
 8006bb4:	6923      	ldr	r3, [r4, #16]
 8006bb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	1eb5      	subs	r5, r6, #2
 8006bbe:	6123      	str	r3, [r4, #16]
 8006bc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bc4:	463a      	mov	r2, r7
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	4798      	blx	r3
 8006bca:	462e      	mov	r6, r5
 8006bcc:	6825      	ldr	r5, [r4, #0]
 8006bce:	f015 0510 	ands.w	r5, r5, #16
 8006bd2:	d158      	bne.n	8006c86 <_scanf_float+0x412>
 8006bd4:	7035      	strb	r5, [r6, #0]
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be0:	d11c      	bne.n	8006c1c <_scanf_float+0x3a8>
 8006be2:	9b01      	ldr	r3, [sp, #4]
 8006be4:	454b      	cmp	r3, r9
 8006be6:	eba3 0209 	sub.w	r2, r3, r9
 8006bea:	d124      	bne.n	8006c36 <_scanf_float+0x3c2>
 8006bec:	2200      	movs	r2, #0
 8006bee:	4659      	mov	r1, fp
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	f002 fc65 	bl	80094c0 <_strtod_r>
 8006bf6:	9b03      	ldr	r3, [sp, #12]
 8006bf8:	6821      	ldr	r1, [r4, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f011 0f02 	tst.w	r1, #2
 8006c00:	ec57 6b10 	vmov	r6, r7, d0
 8006c04:	f103 0204 	add.w	r2, r3, #4
 8006c08:	d020      	beq.n	8006c4c <_scanf_float+0x3d8>
 8006c0a:	9903      	ldr	r1, [sp, #12]
 8006c0c:	600a      	str	r2, [r1, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	e9c3 6700 	strd	r6, r7, [r3]
 8006c14:	68e3      	ldr	r3, [r4, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	60e3      	str	r3, [r4, #12]
 8006c1a:	e66c      	b.n	80068f6 <_scanf_float+0x82>
 8006c1c:	9b04      	ldr	r3, [sp, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0e4      	beq.n	8006bec <_scanf_float+0x378>
 8006c22:	9905      	ldr	r1, [sp, #20]
 8006c24:	230a      	movs	r3, #10
 8006c26:	462a      	mov	r2, r5
 8006c28:	3101      	adds	r1, #1
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	f002 fcd0 	bl	80095d0 <_strtol_r>
 8006c30:	9b04      	ldr	r3, [sp, #16]
 8006c32:	9e05      	ldr	r6, [sp, #20]
 8006c34:	1ac2      	subs	r2, r0, r3
 8006c36:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c3a:	429e      	cmp	r6, r3
 8006c3c:	bf28      	it	cs
 8006c3e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c42:	4912      	ldr	r1, [pc, #72]	; (8006c8c <_scanf_float+0x418>)
 8006c44:	4630      	mov	r0, r6
 8006c46:	f000 f8e7 	bl	8006e18 <siprintf>
 8006c4a:	e7cf      	b.n	8006bec <_scanf_float+0x378>
 8006c4c:	f011 0f04 	tst.w	r1, #4
 8006c50:	9903      	ldr	r1, [sp, #12]
 8006c52:	600a      	str	r2, [r1, #0]
 8006c54:	d1db      	bne.n	8006c0e <_scanf_float+0x39a>
 8006c56:	f8d3 8000 	ldr.w	r8, [r3]
 8006c5a:	ee10 2a10 	vmov	r2, s0
 8006c5e:	ee10 0a10 	vmov	r0, s0
 8006c62:	463b      	mov	r3, r7
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 ff79 	bl	8000b5c <__aeabi_dcmpun>
 8006c6a:	b128      	cbz	r0, 8006c78 <_scanf_float+0x404>
 8006c6c:	4808      	ldr	r0, [pc, #32]	; (8006c90 <_scanf_float+0x41c>)
 8006c6e:	f000 f9ed 	bl	800704c <nanf>
 8006c72:	ed88 0a00 	vstr	s0, [r8]
 8006c76:	e7cd      	b.n	8006c14 <_scanf_float+0x3a0>
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	f7f9 ffcc 	bl	8000c18 <__aeabi_d2f>
 8006c80:	f8c8 0000 	str.w	r0, [r8]
 8006c84:	e7c6      	b.n	8006c14 <_scanf_float+0x3a0>
 8006c86:	2500      	movs	r5, #0
 8006c88:	e635      	b.n	80068f6 <_scanf_float+0x82>
 8006c8a:	bf00      	nop
 8006c8c:	0800c6ba 	.word	0x0800c6ba
 8006c90:	0800ca68 	.word	0x0800ca68

08006c94 <std>:
 8006c94:	2300      	movs	r3, #0
 8006c96:	b510      	push	{r4, lr}
 8006c98:	4604      	mov	r4, r0
 8006c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ca2:	6083      	str	r3, [r0, #8]
 8006ca4:	8181      	strh	r1, [r0, #12]
 8006ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ca8:	81c2      	strh	r2, [r0, #14]
 8006caa:	6183      	str	r3, [r0, #24]
 8006cac:	4619      	mov	r1, r3
 8006cae:	2208      	movs	r2, #8
 8006cb0:	305c      	adds	r0, #92	; 0x5c
 8006cb2:	f000 f942 	bl	8006f3a <memset>
 8006cb6:	4b0d      	ldr	r3, [pc, #52]	; (8006cec <std+0x58>)
 8006cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8006cba:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <std+0x5c>)
 8006cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <std+0x60>)
 8006cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <std+0x64>)
 8006cc4:	6323      	str	r3, [r4, #48]	; 0x30
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <std+0x68>)
 8006cc8:	6224      	str	r4, [r4, #32]
 8006cca:	429c      	cmp	r4, r3
 8006ccc:	d006      	beq.n	8006cdc <std+0x48>
 8006cce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006cd2:	4294      	cmp	r4, r2
 8006cd4:	d002      	beq.n	8006cdc <std+0x48>
 8006cd6:	33d0      	adds	r3, #208	; 0xd0
 8006cd8:	429c      	cmp	r4, r3
 8006cda:	d105      	bne.n	8006ce8 <std+0x54>
 8006cdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce4:	f000 b9a6 	b.w	8007034 <__retarget_lock_init_recursive>
 8006ce8:	bd10      	pop	{r4, pc}
 8006cea:	bf00      	nop
 8006cec:	08006eb1 	.word	0x08006eb1
 8006cf0:	08006ed7 	.word	0x08006ed7
 8006cf4:	08006f0f 	.word	0x08006f0f
 8006cf8:	08006f33 	.word	0x08006f33
 8006cfc:	200004fc 	.word	0x200004fc

08006d00 <stdio_exit_handler>:
 8006d00:	4a02      	ldr	r2, [pc, #8]	; (8006d0c <stdio_exit_handler+0xc>)
 8006d02:	4903      	ldr	r1, [pc, #12]	; (8006d10 <stdio_exit_handler+0x10>)
 8006d04:	4803      	ldr	r0, [pc, #12]	; (8006d14 <stdio_exit_handler+0x14>)
 8006d06:	f000 b869 	b.w	8006ddc <_fwalk_sglue>
 8006d0a:	bf00      	nop
 8006d0c:	2000000c 	.word	0x2000000c
 8006d10:	08009fd1 	.word	0x08009fd1
 8006d14:	20000018 	.word	0x20000018

08006d18 <cleanup_stdio>:
 8006d18:	6841      	ldr	r1, [r0, #4]
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <cleanup_stdio+0x34>)
 8006d1c:	4299      	cmp	r1, r3
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4604      	mov	r4, r0
 8006d22:	d001      	beq.n	8006d28 <cleanup_stdio+0x10>
 8006d24:	f003 f954 	bl	8009fd0 <_fflush_r>
 8006d28:	68a1      	ldr	r1, [r4, #8]
 8006d2a:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <cleanup_stdio+0x38>)
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	d002      	beq.n	8006d36 <cleanup_stdio+0x1e>
 8006d30:	4620      	mov	r0, r4
 8006d32:	f003 f94d 	bl	8009fd0 <_fflush_r>
 8006d36:	68e1      	ldr	r1, [r4, #12]
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <cleanup_stdio+0x3c>)
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	d004      	beq.n	8006d48 <cleanup_stdio+0x30>
 8006d3e:	4620      	mov	r0, r4
 8006d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d44:	f003 b944 	b.w	8009fd0 <_fflush_r>
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	bf00      	nop
 8006d4c:	200004fc 	.word	0x200004fc
 8006d50:	20000564 	.word	0x20000564
 8006d54:	200005cc 	.word	0x200005cc

08006d58 <global_stdio_init.part.0>:
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <global_stdio_init.part.0+0x30>)
 8006d5c:	4c0b      	ldr	r4, [pc, #44]	; (8006d8c <global_stdio_init.part.0+0x34>)
 8006d5e:	4a0c      	ldr	r2, [pc, #48]	; (8006d90 <global_stdio_init.part.0+0x38>)
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	4620      	mov	r0, r4
 8006d64:	2200      	movs	r2, #0
 8006d66:	2104      	movs	r1, #4
 8006d68:	f7ff ff94 	bl	8006c94 <std>
 8006d6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d70:	2201      	movs	r2, #1
 8006d72:	2109      	movs	r1, #9
 8006d74:	f7ff ff8e 	bl	8006c94 <std>
 8006d78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d82:	2112      	movs	r1, #18
 8006d84:	f7ff bf86 	b.w	8006c94 <std>
 8006d88:	20000634 	.word	0x20000634
 8006d8c:	200004fc 	.word	0x200004fc
 8006d90:	08006d01 	.word	0x08006d01

08006d94 <__sfp_lock_acquire>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__sfp_lock_acquire+0x8>)
 8006d96:	f000 b94e 	b.w	8007036 <__retarget_lock_acquire_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	2000063d 	.word	0x2000063d

08006da0 <__sfp_lock_release>:
 8006da0:	4801      	ldr	r0, [pc, #4]	; (8006da8 <__sfp_lock_release+0x8>)
 8006da2:	f000 b949 	b.w	8007038 <__retarget_lock_release_recursive>
 8006da6:	bf00      	nop
 8006da8:	2000063d 	.word	0x2000063d

08006dac <__sinit>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	4604      	mov	r4, r0
 8006db0:	f7ff fff0 	bl	8006d94 <__sfp_lock_acquire>
 8006db4:	6a23      	ldr	r3, [r4, #32]
 8006db6:	b11b      	cbz	r3, 8006dc0 <__sinit+0x14>
 8006db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dbc:	f7ff bff0 	b.w	8006da0 <__sfp_lock_release>
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <__sinit+0x28>)
 8006dc2:	6223      	str	r3, [r4, #32]
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <__sinit+0x2c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1f5      	bne.n	8006db8 <__sinit+0xc>
 8006dcc:	f7ff ffc4 	bl	8006d58 <global_stdio_init.part.0>
 8006dd0:	e7f2      	b.n	8006db8 <__sinit+0xc>
 8006dd2:	bf00      	nop
 8006dd4:	08006d19 	.word	0x08006d19
 8006dd8:	20000634 	.word	0x20000634

08006ddc <_fwalk_sglue>:
 8006ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de0:	4607      	mov	r7, r0
 8006de2:	4688      	mov	r8, r1
 8006de4:	4614      	mov	r4, r2
 8006de6:	2600      	movs	r6, #0
 8006de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dec:	f1b9 0901 	subs.w	r9, r9, #1
 8006df0:	d505      	bpl.n	8006dfe <_fwalk_sglue+0x22>
 8006df2:	6824      	ldr	r4, [r4, #0]
 8006df4:	2c00      	cmp	r4, #0
 8006df6:	d1f7      	bne.n	8006de8 <_fwalk_sglue+0xc>
 8006df8:	4630      	mov	r0, r6
 8006dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dfe:	89ab      	ldrh	r3, [r5, #12]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d907      	bls.n	8006e14 <_fwalk_sglue+0x38>
 8006e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	d003      	beq.n	8006e14 <_fwalk_sglue+0x38>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4638      	mov	r0, r7
 8006e10:	47c0      	blx	r8
 8006e12:	4306      	orrs	r6, r0
 8006e14:	3568      	adds	r5, #104	; 0x68
 8006e16:	e7e9      	b.n	8006dec <_fwalk_sglue+0x10>

08006e18 <siprintf>:
 8006e18:	b40e      	push	{r1, r2, r3}
 8006e1a:	b500      	push	{lr}
 8006e1c:	b09c      	sub	sp, #112	; 0x70
 8006e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8006e20:	9002      	str	r0, [sp, #8]
 8006e22:	9006      	str	r0, [sp, #24]
 8006e24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e28:	4809      	ldr	r0, [pc, #36]	; (8006e50 <siprintf+0x38>)
 8006e2a:	9107      	str	r1, [sp, #28]
 8006e2c:	9104      	str	r1, [sp, #16]
 8006e2e:	4909      	ldr	r1, [pc, #36]	; (8006e54 <siprintf+0x3c>)
 8006e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e34:	9105      	str	r1, [sp, #20]
 8006e36:	6800      	ldr	r0, [r0, #0]
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	a902      	add	r1, sp, #8
 8006e3c:	f002 fc24 	bl	8009688 <_svfiprintf_r>
 8006e40:	9b02      	ldr	r3, [sp, #8]
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	b01c      	add	sp, #112	; 0x70
 8006e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e4c:	b003      	add	sp, #12
 8006e4e:	4770      	bx	lr
 8006e50:	20000064 	.word	0x20000064
 8006e54:	ffff0208 	.word	0xffff0208

08006e58 <siscanf>:
 8006e58:	b40e      	push	{r1, r2, r3}
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	b09f      	sub	sp, #124	; 0x7c
 8006e5e:	ac21      	add	r4, sp, #132	; 0x84
 8006e60:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006e64:	f854 2b04 	ldr.w	r2, [r4], #4
 8006e68:	9201      	str	r2, [sp, #4]
 8006e6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006e6e:	9004      	str	r0, [sp, #16]
 8006e70:	9008      	str	r0, [sp, #32]
 8006e72:	f7f9 fa15 	bl	80002a0 <strlen>
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <siscanf+0x50>)
 8006e78:	9005      	str	r0, [sp, #20]
 8006e7a:	9009      	str	r0, [sp, #36]	; 0x24
 8006e7c:	930d      	str	r3, [sp, #52]	; 0x34
 8006e7e:	480b      	ldr	r0, [pc, #44]	; (8006eac <siscanf+0x54>)
 8006e80:	9a01      	ldr	r2, [sp, #4]
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	9403      	str	r4, [sp, #12]
 8006e86:	2300      	movs	r3, #0
 8006e88:	9311      	str	r3, [sp, #68]	; 0x44
 8006e8a:	9316      	str	r3, [sp, #88]	; 0x58
 8006e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006e94:	a904      	add	r1, sp, #16
 8006e96:	4623      	mov	r3, r4
 8006e98:	f002 fd4e 	bl	8009938 <__ssvfiscanf_r>
 8006e9c:	b01f      	add	sp, #124	; 0x7c
 8006e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea2:	b003      	add	sp, #12
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	08006ed3 	.word	0x08006ed3
 8006eac:	20000064 	.word	0x20000064

08006eb0 <__sread>:
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb8:	f000 f86e 	bl	8006f98 <_read_r>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	bfab      	itete	ge
 8006ec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ec2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ec4:	181b      	addge	r3, r3, r0
 8006ec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eca:	bfac      	ite	ge
 8006ecc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ece:	81a3      	strhlt	r3, [r4, #12]
 8006ed0:	bd10      	pop	{r4, pc}

08006ed2 <__seofread>:
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	4770      	bx	lr

08006ed6 <__swrite>:
 8006ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	461f      	mov	r7, r3
 8006edc:	898b      	ldrh	r3, [r1, #12]
 8006ede:	05db      	lsls	r3, r3, #23
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	d505      	bpl.n	8006ef4 <__swrite+0x1e>
 8006ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eec:	2302      	movs	r3, #2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f000 f840 	bl	8006f74 <_lseek_r>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	4632      	mov	r2, r6
 8006f02:	463b      	mov	r3, r7
 8006f04:	4628      	mov	r0, r5
 8006f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0a:	f000 b857 	b.w	8006fbc <_write_r>

08006f0e <__sseek>:
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	460c      	mov	r4, r1
 8006f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f16:	f000 f82d 	bl	8006f74 <_lseek_r>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	bf15      	itete	ne
 8006f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f2a:	81a3      	strheq	r3, [r4, #12]
 8006f2c:	bf18      	it	ne
 8006f2e:	81a3      	strhne	r3, [r4, #12]
 8006f30:	bd10      	pop	{r4, pc}

08006f32 <__sclose>:
 8006f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f36:	f000 b80d 	b.w	8006f54 <_close_r>

08006f3a <memset>:
 8006f3a:	4402      	add	r2, r0
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d100      	bne.n	8006f44 <memset+0xa>
 8006f42:	4770      	bx	lr
 8006f44:	f803 1b01 	strb.w	r1, [r3], #1
 8006f48:	e7f9      	b.n	8006f3e <memset+0x4>
	...

08006f4c <_localeconv_r>:
 8006f4c:	4800      	ldr	r0, [pc, #0]	; (8006f50 <_localeconv_r+0x4>)
 8006f4e:	4770      	bx	lr
 8006f50:	20000158 	.word	0x20000158

08006f54 <_close_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d06      	ldr	r5, [pc, #24]	; (8006f70 <_close_r+0x1c>)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	f7fb f9e3 	bl	800232a <_close>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_close_r+0x1a>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_close_r+0x1a>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	20000638 	.word	0x20000638

08006f74 <_lseek_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	; (8006f94 <_lseek_r+0x20>)
 8006f78:	4604      	mov	r4, r0
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	602a      	str	r2, [r5, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f7fb f9f8 	bl	8002378 <_lseek>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_lseek_r+0x1e>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_lseek_r+0x1e>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	20000638 	.word	0x20000638

08006f98 <_read_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	; (8006fb8 <_read_r+0x20>)
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fb f986 	bl	80022b8 <_read>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_read_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_read_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	20000638 	.word	0x20000638

08006fbc <_write_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d07      	ldr	r5, [pc, #28]	; (8006fdc <_write_r+0x20>)
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	602a      	str	r2, [r5, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f7fb f991 	bl	80022f2 <_write>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_write_r+0x1e>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_write_r+0x1e>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	20000638 	.word	0x20000638

08006fe0 <__errno>:
 8006fe0:	4b01      	ldr	r3, [pc, #4]	; (8006fe8 <__errno+0x8>)
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000064 	.word	0x20000064

08006fec <__libc_init_array>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	4d0d      	ldr	r5, [pc, #52]	; (8007024 <__libc_init_array+0x38>)
 8006ff0:	4c0d      	ldr	r4, [pc, #52]	; (8007028 <__libc_init_array+0x3c>)
 8006ff2:	1b64      	subs	r4, r4, r5
 8006ff4:	10a4      	asrs	r4, r4, #2
 8006ff6:	2600      	movs	r6, #0
 8006ff8:	42a6      	cmp	r6, r4
 8006ffa:	d109      	bne.n	8007010 <__libc_init_array+0x24>
 8006ffc:	4d0b      	ldr	r5, [pc, #44]	; (800702c <__libc_init_array+0x40>)
 8006ffe:	4c0c      	ldr	r4, [pc, #48]	; (8007030 <__libc_init_array+0x44>)
 8007000:	f005 faea 	bl	800c5d8 <_init>
 8007004:	1b64      	subs	r4, r4, r5
 8007006:	10a4      	asrs	r4, r4, #2
 8007008:	2600      	movs	r6, #0
 800700a:	42a6      	cmp	r6, r4
 800700c:	d105      	bne.n	800701a <__libc_init_array+0x2e>
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	f855 3b04 	ldr.w	r3, [r5], #4
 8007014:	4798      	blx	r3
 8007016:	3601      	adds	r6, #1
 8007018:	e7ee      	b.n	8006ff8 <__libc_init_array+0xc>
 800701a:	f855 3b04 	ldr.w	r3, [r5], #4
 800701e:	4798      	blx	r3
 8007020:	3601      	adds	r6, #1
 8007022:	e7f2      	b.n	800700a <__libc_init_array+0x1e>
 8007024:	0800cd20 	.word	0x0800cd20
 8007028:	0800cd20 	.word	0x0800cd20
 800702c:	0800cd20 	.word	0x0800cd20
 8007030:	0800cd24 	.word	0x0800cd24

08007034 <__retarget_lock_init_recursive>:
 8007034:	4770      	bx	lr

08007036 <__retarget_lock_acquire_recursive>:
 8007036:	4770      	bx	lr

08007038 <__retarget_lock_release_recursive>:
 8007038:	4770      	bx	lr

0800703a <strcpy>:
 800703a:	4603      	mov	r3, r0
 800703c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007040:	f803 2b01 	strb.w	r2, [r3], #1
 8007044:	2a00      	cmp	r2, #0
 8007046:	d1f9      	bne.n	800703c <strcpy+0x2>
 8007048:	4770      	bx	lr
	...

0800704c <nanf>:
 800704c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007054 <nanf+0x8>
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	7fc00000 	.word	0x7fc00000

08007058 <quorem>:
 8007058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	6903      	ldr	r3, [r0, #16]
 800705e:	690c      	ldr	r4, [r1, #16]
 8007060:	42a3      	cmp	r3, r4
 8007062:	4607      	mov	r7, r0
 8007064:	db7e      	blt.n	8007164 <quorem+0x10c>
 8007066:	3c01      	subs	r4, #1
 8007068:	f101 0814 	add.w	r8, r1, #20
 800706c:	f100 0514 	add.w	r5, r0, #20
 8007070:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800707a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800707e:	3301      	adds	r3, #1
 8007080:	429a      	cmp	r2, r3
 8007082:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007086:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800708a:	fbb2 f6f3 	udiv	r6, r2, r3
 800708e:	d331      	bcc.n	80070f4 <quorem+0x9c>
 8007090:	f04f 0e00 	mov.w	lr, #0
 8007094:	4640      	mov	r0, r8
 8007096:	46ac      	mov	ip, r5
 8007098:	46f2      	mov	sl, lr
 800709a:	f850 2b04 	ldr.w	r2, [r0], #4
 800709e:	b293      	uxth	r3, r2
 80070a0:	fb06 e303 	mla	r3, r6, r3, lr
 80070a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070a8:	0c1a      	lsrs	r2, r3, #16
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	ebaa 0303 	sub.w	r3, sl, r3
 80070b0:	f8dc a000 	ldr.w	sl, [ip]
 80070b4:	fa13 f38a 	uxtah	r3, r3, sl
 80070b8:	fb06 220e 	mla	r2, r6, lr, r2
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070c4:	b292      	uxth	r2, r2
 80070c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80070d2:	4581      	cmp	r9, r0
 80070d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070d8:	f84c 3b04 	str.w	r3, [ip], #4
 80070dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070e0:	d2db      	bcs.n	800709a <quorem+0x42>
 80070e2:	f855 300b 	ldr.w	r3, [r5, fp]
 80070e6:	b92b      	cbnz	r3, 80070f4 <quorem+0x9c>
 80070e8:	9b01      	ldr	r3, [sp, #4]
 80070ea:	3b04      	subs	r3, #4
 80070ec:	429d      	cmp	r5, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	d32c      	bcc.n	800714c <quorem+0xf4>
 80070f2:	613c      	str	r4, [r7, #16]
 80070f4:	4638      	mov	r0, r7
 80070f6:	f001 f9ef 	bl	80084d8 <__mcmp>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	db22      	blt.n	8007144 <quorem+0xec>
 80070fe:	3601      	adds	r6, #1
 8007100:	4629      	mov	r1, r5
 8007102:	2000      	movs	r0, #0
 8007104:	f858 2b04 	ldr.w	r2, [r8], #4
 8007108:	f8d1 c000 	ldr.w	ip, [r1]
 800710c:	b293      	uxth	r3, r2
 800710e:	1ac3      	subs	r3, r0, r3
 8007110:	0c12      	lsrs	r2, r2, #16
 8007112:	fa13 f38c 	uxtah	r3, r3, ip
 8007116:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800711a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800711e:	b29b      	uxth	r3, r3
 8007120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007124:	45c1      	cmp	r9, r8
 8007126:	f841 3b04 	str.w	r3, [r1], #4
 800712a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800712e:	d2e9      	bcs.n	8007104 <quorem+0xac>
 8007130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007134:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007138:	b922      	cbnz	r2, 8007144 <quorem+0xec>
 800713a:	3b04      	subs	r3, #4
 800713c:	429d      	cmp	r5, r3
 800713e:	461a      	mov	r2, r3
 8007140:	d30a      	bcc.n	8007158 <quorem+0x100>
 8007142:	613c      	str	r4, [r7, #16]
 8007144:	4630      	mov	r0, r6
 8007146:	b003      	add	sp, #12
 8007148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	3b04      	subs	r3, #4
 8007150:	2a00      	cmp	r2, #0
 8007152:	d1ce      	bne.n	80070f2 <quorem+0x9a>
 8007154:	3c01      	subs	r4, #1
 8007156:	e7c9      	b.n	80070ec <quorem+0x94>
 8007158:	6812      	ldr	r2, [r2, #0]
 800715a:	3b04      	subs	r3, #4
 800715c:	2a00      	cmp	r2, #0
 800715e:	d1f0      	bne.n	8007142 <quorem+0xea>
 8007160:	3c01      	subs	r4, #1
 8007162:	e7eb      	b.n	800713c <quorem+0xe4>
 8007164:	2000      	movs	r0, #0
 8007166:	e7ee      	b.n	8007146 <quorem+0xee>

08007168 <_dtoa_r>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	ed2d 8b04 	vpush	{d8-d9}
 8007170:	69c5      	ldr	r5, [r0, #28]
 8007172:	b093      	sub	sp, #76	; 0x4c
 8007174:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007178:	ec57 6b10 	vmov	r6, r7, d0
 800717c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007180:	9107      	str	r1, [sp, #28]
 8007182:	4604      	mov	r4, r0
 8007184:	920a      	str	r2, [sp, #40]	; 0x28
 8007186:	930d      	str	r3, [sp, #52]	; 0x34
 8007188:	b975      	cbnz	r5, 80071a8 <_dtoa_r+0x40>
 800718a:	2010      	movs	r0, #16
 800718c:	f000 fe2a 	bl	8007de4 <malloc>
 8007190:	4602      	mov	r2, r0
 8007192:	61e0      	str	r0, [r4, #28]
 8007194:	b920      	cbnz	r0, 80071a0 <_dtoa_r+0x38>
 8007196:	4bae      	ldr	r3, [pc, #696]	; (8007450 <_dtoa_r+0x2e8>)
 8007198:	21ef      	movs	r1, #239	; 0xef
 800719a:	48ae      	ldr	r0, [pc, #696]	; (8007454 <_dtoa_r+0x2ec>)
 800719c:	f003 f808 	bl	800a1b0 <__assert_func>
 80071a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071a4:	6005      	str	r5, [r0, #0]
 80071a6:	60c5      	str	r5, [r0, #12]
 80071a8:	69e3      	ldr	r3, [r4, #28]
 80071aa:	6819      	ldr	r1, [r3, #0]
 80071ac:	b151      	cbz	r1, 80071c4 <_dtoa_r+0x5c>
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	604a      	str	r2, [r1, #4]
 80071b2:	2301      	movs	r3, #1
 80071b4:	4093      	lsls	r3, r2
 80071b6:	608b      	str	r3, [r1, #8]
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 ff07 	bl	8007fcc <_Bfree>
 80071be:	69e3      	ldr	r3, [r4, #28]
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	1e3b      	subs	r3, r7, #0
 80071c6:	bfbb      	ittet	lt
 80071c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80071cc:	9303      	strlt	r3, [sp, #12]
 80071ce:	2300      	movge	r3, #0
 80071d0:	2201      	movlt	r2, #1
 80071d2:	bfac      	ite	ge
 80071d4:	f8c8 3000 	strge.w	r3, [r8]
 80071d8:	f8c8 2000 	strlt.w	r2, [r8]
 80071dc:	4b9e      	ldr	r3, [pc, #632]	; (8007458 <_dtoa_r+0x2f0>)
 80071de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80071e2:	ea33 0308 	bics.w	r3, r3, r8
 80071e6:	d11b      	bne.n	8007220 <_dtoa_r+0xb8>
 80071e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80071f4:	4333      	orrs	r3, r6
 80071f6:	f000 8593 	beq.w	8007d20 <_dtoa_r+0xbb8>
 80071fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071fc:	b963      	cbnz	r3, 8007218 <_dtoa_r+0xb0>
 80071fe:	4b97      	ldr	r3, [pc, #604]	; (800745c <_dtoa_r+0x2f4>)
 8007200:	e027      	b.n	8007252 <_dtoa_r+0xea>
 8007202:	4b97      	ldr	r3, [pc, #604]	; (8007460 <_dtoa_r+0x2f8>)
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	9800      	ldr	r0, [sp, #0]
 800720e:	b013      	add	sp, #76	; 0x4c
 8007210:	ecbd 8b04 	vpop	{d8-d9}
 8007214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007218:	4b90      	ldr	r3, [pc, #576]	; (800745c <_dtoa_r+0x2f4>)
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	3303      	adds	r3, #3
 800721e:	e7f3      	b.n	8007208 <_dtoa_r+0xa0>
 8007220:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007224:	2200      	movs	r2, #0
 8007226:	ec51 0b17 	vmov	r0, r1, d7
 800722a:	eeb0 8a47 	vmov.f32	s16, s14
 800722e:	eef0 8a67 	vmov.f32	s17, s15
 8007232:	2300      	movs	r3, #0
 8007234:	f7f9 fc60 	bl	8000af8 <__aeabi_dcmpeq>
 8007238:	4681      	mov	r9, r0
 800723a:	b160      	cbz	r0, 8007256 <_dtoa_r+0xee>
 800723c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800723e:	2301      	movs	r3, #1
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8568 	beq.w	8007d1a <_dtoa_r+0xbb2>
 800724a:	4b86      	ldr	r3, [pc, #536]	; (8007464 <_dtoa_r+0x2fc>)
 800724c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	3b01      	subs	r3, #1
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	e7da      	b.n	800720c <_dtoa_r+0xa4>
 8007256:	aa10      	add	r2, sp, #64	; 0x40
 8007258:	a911      	add	r1, sp, #68	; 0x44
 800725a:	4620      	mov	r0, r4
 800725c:	eeb0 0a48 	vmov.f32	s0, s16
 8007260:	eef0 0a68 	vmov.f32	s1, s17
 8007264:	f001 fa4e 	bl	8008704 <__d2b>
 8007268:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800726c:	4682      	mov	sl, r0
 800726e:	2d00      	cmp	r5, #0
 8007270:	d07f      	beq.n	8007372 <_dtoa_r+0x20a>
 8007272:	ee18 3a90 	vmov	r3, s17
 8007276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800727a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800727e:	ec51 0b18 	vmov	r0, r1, d8
 8007282:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800728a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800728e:	4619      	mov	r1, r3
 8007290:	2200      	movs	r2, #0
 8007292:	4b75      	ldr	r3, [pc, #468]	; (8007468 <_dtoa_r+0x300>)
 8007294:	f7f9 f810 	bl	80002b8 <__aeabi_dsub>
 8007298:	a367      	add	r3, pc, #412	; (adr r3, 8007438 <_dtoa_r+0x2d0>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f7f9 f9c3 	bl	8000628 <__aeabi_dmul>
 80072a2:	a367      	add	r3, pc, #412	; (adr r3, 8007440 <_dtoa_r+0x2d8>)
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f7f9 f808 	bl	80002bc <__adddf3>
 80072ac:	4606      	mov	r6, r0
 80072ae:	4628      	mov	r0, r5
 80072b0:	460f      	mov	r7, r1
 80072b2:	f7f9 f94f 	bl	8000554 <__aeabi_i2d>
 80072b6:	a364      	add	r3, pc, #400	; (adr r3, 8007448 <_dtoa_r+0x2e0>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f7f9 f9b4 	bl	8000628 <__aeabi_dmul>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4630      	mov	r0, r6
 80072c6:	4639      	mov	r1, r7
 80072c8:	f7f8 fff8 	bl	80002bc <__adddf3>
 80072cc:	4606      	mov	r6, r0
 80072ce:	460f      	mov	r7, r1
 80072d0:	f7f9 fc5a 	bl	8000b88 <__aeabi_d2iz>
 80072d4:	2200      	movs	r2, #0
 80072d6:	4683      	mov	fp, r0
 80072d8:	2300      	movs	r3, #0
 80072da:	4630      	mov	r0, r6
 80072dc:	4639      	mov	r1, r7
 80072de:	f7f9 fc15 	bl	8000b0c <__aeabi_dcmplt>
 80072e2:	b148      	cbz	r0, 80072f8 <_dtoa_r+0x190>
 80072e4:	4658      	mov	r0, fp
 80072e6:	f7f9 f935 	bl	8000554 <__aeabi_i2d>
 80072ea:	4632      	mov	r2, r6
 80072ec:	463b      	mov	r3, r7
 80072ee:	f7f9 fc03 	bl	8000af8 <__aeabi_dcmpeq>
 80072f2:	b908      	cbnz	r0, 80072f8 <_dtoa_r+0x190>
 80072f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072f8:	f1bb 0f16 	cmp.w	fp, #22
 80072fc:	d857      	bhi.n	80073ae <_dtoa_r+0x246>
 80072fe:	4b5b      	ldr	r3, [pc, #364]	; (800746c <_dtoa_r+0x304>)
 8007300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	ec51 0b18 	vmov	r0, r1, d8
 800730c:	f7f9 fbfe 	bl	8000b0c <__aeabi_dcmplt>
 8007310:	2800      	cmp	r0, #0
 8007312:	d04e      	beq.n	80073b2 <_dtoa_r+0x24a>
 8007314:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007318:	2300      	movs	r3, #0
 800731a:	930c      	str	r3, [sp, #48]	; 0x30
 800731c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800731e:	1b5b      	subs	r3, r3, r5
 8007320:	1e5a      	subs	r2, r3, #1
 8007322:	bf45      	ittet	mi
 8007324:	f1c3 0301 	rsbmi	r3, r3, #1
 8007328:	9305      	strmi	r3, [sp, #20]
 800732a:	2300      	movpl	r3, #0
 800732c:	2300      	movmi	r3, #0
 800732e:	9206      	str	r2, [sp, #24]
 8007330:	bf54      	ite	pl
 8007332:	9305      	strpl	r3, [sp, #20]
 8007334:	9306      	strmi	r3, [sp, #24]
 8007336:	f1bb 0f00 	cmp.w	fp, #0
 800733a:	db3c      	blt.n	80073b6 <_dtoa_r+0x24e>
 800733c:	9b06      	ldr	r3, [sp, #24]
 800733e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007342:	445b      	add	r3, fp
 8007344:	9306      	str	r3, [sp, #24]
 8007346:	2300      	movs	r3, #0
 8007348:	9308      	str	r3, [sp, #32]
 800734a:	9b07      	ldr	r3, [sp, #28]
 800734c:	2b09      	cmp	r3, #9
 800734e:	d868      	bhi.n	8007422 <_dtoa_r+0x2ba>
 8007350:	2b05      	cmp	r3, #5
 8007352:	bfc4      	itt	gt
 8007354:	3b04      	subgt	r3, #4
 8007356:	9307      	strgt	r3, [sp, #28]
 8007358:	9b07      	ldr	r3, [sp, #28]
 800735a:	f1a3 0302 	sub.w	r3, r3, #2
 800735e:	bfcc      	ite	gt
 8007360:	2500      	movgt	r5, #0
 8007362:	2501      	movle	r5, #1
 8007364:	2b03      	cmp	r3, #3
 8007366:	f200 8085 	bhi.w	8007474 <_dtoa_r+0x30c>
 800736a:	e8df f003 	tbb	[pc, r3]
 800736e:	3b2e      	.short	0x3b2e
 8007370:	5839      	.short	0x5839
 8007372:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007376:	441d      	add	r5, r3
 8007378:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800737c:	2b20      	cmp	r3, #32
 800737e:	bfc1      	itttt	gt
 8007380:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007384:	fa08 f803 	lslgt.w	r8, r8, r3
 8007388:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800738c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007390:	bfd6      	itet	le
 8007392:	f1c3 0320 	rsble	r3, r3, #32
 8007396:	ea48 0003 	orrgt.w	r0, r8, r3
 800739a:	fa06 f003 	lslle.w	r0, r6, r3
 800739e:	f7f9 f8c9 	bl	8000534 <__aeabi_ui2d>
 80073a2:	2201      	movs	r2, #1
 80073a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80073a8:	3d01      	subs	r5, #1
 80073aa:	920e      	str	r2, [sp, #56]	; 0x38
 80073ac:	e76f      	b.n	800728e <_dtoa_r+0x126>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e7b3      	b.n	800731a <_dtoa_r+0x1b2>
 80073b2:	900c      	str	r0, [sp, #48]	; 0x30
 80073b4:	e7b2      	b.n	800731c <_dtoa_r+0x1b4>
 80073b6:	9b05      	ldr	r3, [sp, #20]
 80073b8:	eba3 030b 	sub.w	r3, r3, fp
 80073bc:	9305      	str	r3, [sp, #20]
 80073be:	f1cb 0300 	rsb	r3, fp, #0
 80073c2:	9308      	str	r3, [sp, #32]
 80073c4:	2300      	movs	r3, #0
 80073c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073c8:	e7bf      	b.n	800734a <_dtoa_r+0x1e2>
 80073ca:	2300      	movs	r3, #0
 80073cc:	9309      	str	r3, [sp, #36]	; 0x24
 80073ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	dc52      	bgt.n	800747a <_dtoa_r+0x312>
 80073d4:	2301      	movs	r3, #1
 80073d6:	9301      	str	r3, [sp, #4]
 80073d8:	9304      	str	r3, [sp, #16]
 80073da:	461a      	mov	r2, r3
 80073dc:	920a      	str	r2, [sp, #40]	; 0x28
 80073de:	e00b      	b.n	80073f8 <_dtoa_r+0x290>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e7f3      	b.n	80073cc <_dtoa_r+0x264>
 80073e4:	2300      	movs	r3, #0
 80073e6:	9309      	str	r3, [sp, #36]	; 0x24
 80073e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ea:	445b      	add	r3, fp
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	3301      	adds	r3, #1
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	9304      	str	r3, [sp, #16]
 80073f4:	bfb8      	it	lt
 80073f6:	2301      	movlt	r3, #1
 80073f8:	69e0      	ldr	r0, [r4, #28]
 80073fa:	2100      	movs	r1, #0
 80073fc:	2204      	movs	r2, #4
 80073fe:	f102 0614 	add.w	r6, r2, #20
 8007402:	429e      	cmp	r6, r3
 8007404:	d93d      	bls.n	8007482 <_dtoa_r+0x31a>
 8007406:	6041      	str	r1, [r0, #4]
 8007408:	4620      	mov	r0, r4
 800740a:	f000 fd9f 	bl	8007f4c <_Balloc>
 800740e:	9000      	str	r0, [sp, #0]
 8007410:	2800      	cmp	r0, #0
 8007412:	d139      	bne.n	8007488 <_dtoa_r+0x320>
 8007414:	4b16      	ldr	r3, [pc, #88]	; (8007470 <_dtoa_r+0x308>)
 8007416:	4602      	mov	r2, r0
 8007418:	f240 11af 	movw	r1, #431	; 0x1af
 800741c:	e6bd      	b.n	800719a <_dtoa_r+0x32>
 800741e:	2301      	movs	r3, #1
 8007420:	e7e1      	b.n	80073e6 <_dtoa_r+0x27e>
 8007422:	2501      	movs	r5, #1
 8007424:	2300      	movs	r3, #0
 8007426:	9307      	str	r3, [sp, #28]
 8007428:	9509      	str	r5, [sp, #36]	; 0x24
 800742a:	f04f 33ff 	mov.w	r3, #4294967295
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	2200      	movs	r2, #0
 8007434:	2312      	movs	r3, #18
 8007436:	e7d1      	b.n	80073dc <_dtoa_r+0x274>
 8007438:	636f4361 	.word	0x636f4361
 800743c:	3fd287a7 	.word	0x3fd287a7
 8007440:	8b60c8b3 	.word	0x8b60c8b3
 8007444:	3fc68a28 	.word	0x3fc68a28
 8007448:	509f79fb 	.word	0x509f79fb
 800744c:	3fd34413 	.word	0x3fd34413
 8007450:	0800c6cc 	.word	0x0800c6cc
 8007454:	0800c6e3 	.word	0x0800c6e3
 8007458:	7ff00000 	.word	0x7ff00000
 800745c:	0800c6c8 	.word	0x0800c6c8
 8007460:	0800c6bf 	.word	0x0800c6bf
 8007464:	0800ca21 	.word	0x0800ca21
 8007468:	3ff80000 	.word	0x3ff80000
 800746c:	0800c7d0 	.word	0x0800c7d0
 8007470:	0800c73b 	.word	0x0800c73b
 8007474:	2301      	movs	r3, #1
 8007476:	9309      	str	r3, [sp, #36]	; 0x24
 8007478:	e7d7      	b.n	800742a <_dtoa_r+0x2c2>
 800747a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	9304      	str	r3, [sp, #16]
 8007480:	e7ba      	b.n	80073f8 <_dtoa_r+0x290>
 8007482:	3101      	adds	r1, #1
 8007484:	0052      	lsls	r2, r2, #1
 8007486:	e7ba      	b.n	80073fe <_dtoa_r+0x296>
 8007488:	69e3      	ldr	r3, [r4, #28]
 800748a:	9a00      	ldr	r2, [sp, #0]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	9b04      	ldr	r3, [sp, #16]
 8007490:	2b0e      	cmp	r3, #14
 8007492:	f200 80a8 	bhi.w	80075e6 <_dtoa_r+0x47e>
 8007496:	2d00      	cmp	r5, #0
 8007498:	f000 80a5 	beq.w	80075e6 <_dtoa_r+0x47e>
 800749c:	f1bb 0f00 	cmp.w	fp, #0
 80074a0:	dd38      	ble.n	8007514 <_dtoa_r+0x3ac>
 80074a2:	4bc0      	ldr	r3, [pc, #768]	; (80077a4 <_dtoa_r+0x63c>)
 80074a4:	f00b 020f 	and.w	r2, fp, #15
 80074a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80074b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80074b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80074b8:	d019      	beq.n	80074ee <_dtoa_r+0x386>
 80074ba:	4bbb      	ldr	r3, [pc, #748]	; (80077a8 <_dtoa_r+0x640>)
 80074bc:	ec51 0b18 	vmov	r0, r1, d8
 80074c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074c4:	f7f9 f9da 	bl	800087c <__aeabi_ddiv>
 80074c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074cc:	f008 080f 	and.w	r8, r8, #15
 80074d0:	2503      	movs	r5, #3
 80074d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80077a8 <_dtoa_r+0x640>
 80074d6:	f1b8 0f00 	cmp.w	r8, #0
 80074da:	d10a      	bne.n	80074f2 <_dtoa_r+0x38a>
 80074dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e0:	4632      	mov	r2, r6
 80074e2:	463b      	mov	r3, r7
 80074e4:	f7f9 f9ca 	bl	800087c <__aeabi_ddiv>
 80074e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ec:	e02b      	b.n	8007546 <_dtoa_r+0x3de>
 80074ee:	2502      	movs	r5, #2
 80074f0:	e7ef      	b.n	80074d2 <_dtoa_r+0x36a>
 80074f2:	f018 0f01 	tst.w	r8, #1
 80074f6:	d008      	beq.n	800750a <_dtoa_r+0x3a2>
 80074f8:	4630      	mov	r0, r6
 80074fa:	4639      	mov	r1, r7
 80074fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007500:	f7f9 f892 	bl	8000628 <__aeabi_dmul>
 8007504:	3501      	adds	r5, #1
 8007506:	4606      	mov	r6, r0
 8007508:	460f      	mov	r7, r1
 800750a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800750e:	f109 0908 	add.w	r9, r9, #8
 8007512:	e7e0      	b.n	80074d6 <_dtoa_r+0x36e>
 8007514:	f000 809f 	beq.w	8007656 <_dtoa_r+0x4ee>
 8007518:	f1cb 0600 	rsb	r6, fp, #0
 800751c:	4ba1      	ldr	r3, [pc, #644]	; (80077a4 <_dtoa_r+0x63c>)
 800751e:	4fa2      	ldr	r7, [pc, #648]	; (80077a8 <_dtoa_r+0x640>)
 8007520:	f006 020f 	and.w	r2, r6, #15
 8007524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	ec51 0b18 	vmov	r0, r1, d8
 8007530:	f7f9 f87a 	bl	8000628 <__aeabi_dmul>
 8007534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007538:	1136      	asrs	r6, r6, #4
 800753a:	2300      	movs	r3, #0
 800753c:	2502      	movs	r5, #2
 800753e:	2e00      	cmp	r6, #0
 8007540:	d17e      	bne.n	8007640 <_dtoa_r+0x4d8>
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1d0      	bne.n	80074e8 <_dtoa_r+0x380>
 8007546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007548:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8084 	beq.w	800765a <_dtoa_r+0x4f2>
 8007552:	4b96      	ldr	r3, [pc, #600]	; (80077ac <_dtoa_r+0x644>)
 8007554:	2200      	movs	r2, #0
 8007556:	4640      	mov	r0, r8
 8007558:	4649      	mov	r1, r9
 800755a:	f7f9 fad7 	bl	8000b0c <__aeabi_dcmplt>
 800755e:	2800      	cmp	r0, #0
 8007560:	d07b      	beq.n	800765a <_dtoa_r+0x4f2>
 8007562:	9b04      	ldr	r3, [sp, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d078      	beq.n	800765a <_dtoa_r+0x4f2>
 8007568:	9b01      	ldr	r3, [sp, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	dd39      	ble.n	80075e2 <_dtoa_r+0x47a>
 800756e:	4b90      	ldr	r3, [pc, #576]	; (80077b0 <_dtoa_r+0x648>)
 8007570:	2200      	movs	r2, #0
 8007572:	4640      	mov	r0, r8
 8007574:	4649      	mov	r1, r9
 8007576:	f7f9 f857 	bl	8000628 <__aeabi_dmul>
 800757a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800757e:	9e01      	ldr	r6, [sp, #4]
 8007580:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007584:	3501      	adds	r5, #1
 8007586:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800758a:	4628      	mov	r0, r5
 800758c:	f7f8 ffe2 	bl	8000554 <__aeabi_i2d>
 8007590:	4642      	mov	r2, r8
 8007592:	464b      	mov	r3, r9
 8007594:	f7f9 f848 	bl	8000628 <__aeabi_dmul>
 8007598:	4b86      	ldr	r3, [pc, #536]	; (80077b4 <_dtoa_r+0x64c>)
 800759a:	2200      	movs	r2, #0
 800759c:	f7f8 fe8e 	bl	80002bc <__adddf3>
 80075a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80075a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a8:	9303      	str	r3, [sp, #12]
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	d158      	bne.n	8007660 <_dtoa_r+0x4f8>
 80075ae:	4b82      	ldr	r3, [pc, #520]	; (80077b8 <_dtoa_r+0x650>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	f7f8 fe7f 	bl	80002b8 <__aeabi_dsub>
 80075ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075be:	4680      	mov	r8, r0
 80075c0:	4689      	mov	r9, r1
 80075c2:	f7f9 fac1 	bl	8000b48 <__aeabi_dcmpgt>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f040 8296 	bne.w	8007af8 <_dtoa_r+0x990>
 80075cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80075d0:	4640      	mov	r0, r8
 80075d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075d6:	4649      	mov	r1, r9
 80075d8:	f7f9 fa98 	bl	8000b0c <__aeabi_dcmplt>
 80075dc:	2800      	cmp	r0, #0
 80075de:	f040 8289 	bne.w	8007af4 <_dtoa_r+0x98c>
 80075e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80075e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f2c0 814e 	blt.w	800788a <_dtoa_r+0x722>
 80075ee:	f1bb 0f0e 	cmp.w	fp, #14
 80075f2:	f300 814a 	bgt.w	800788a <_dtoa_r+0x722>
 80075f6:	4b6b      	ldr	r3, [pc, #428]	; (80077a4 <_dtoa_r+0x63c>)
 80075f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	f280 80dc 	bge.w	80077c0 <_dtoa_r+0x658>
 8007608:	9b04      	ldr	r3, [sp, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f300 80d8 	bgt.w	80077c0 <_dtoa_r+0x658>
 8007610:	f040 826f 	bne.w	8007af2 <_dtoa_r+0x98a>
 8007614:	4b68      	ldr	r3, [pc, #416]	; (80077b8 <_dtoa_r+0x650>)
 8007616:	2200      	movs	r2, #0
 8007618:	4640      	mov	r0, r8
 800761a:	4649      	mov	r1, r9
 800761c:	f7f9 f804 	bl	8000628 <__aeabi_dmul>
 8007620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007624:	f7f9 fa86 	bl	8000b34 <__aeabi_dcmpge>
 8007628:	9e04      	ldr	r6, [sp, #16]
 800762a:	4637      	mov	r7, r6
 800762c:	2800      	cmp	r0, #0
 800762e:	f040 8245 	bne.w	8007abc <_dtoa_r+0x954>
 8007632:	9d00      	ldr	r5, [sp, #0]
 8007634:	2331      	movs	r3, #49	; 0x31
 8007636:	f805 3b01 	strb.w	r3, [r5], #1
 800763a:	f10b 0b01 	add.w	fp, fp, #1
 800763e:	e241      	b.n	8007ac4 <_dtoa_r+0x95c>
 8007640:	07f2      	lsls	r2, r6, #31
 8007642:	d505      	bpl.n	8007650 <_dtoa_r+0x4e8>
 8007644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007648:	f7f8 ffee 	bl	8000628 <__aeabi_dmul>
 800764c:	3501      	adds	r5, #1
 800764e:	2301      	movs	r3, #1
 8007650:	1076      	asrs	r6, r6, #1
 8007652:	3708      	adds	r7, #8
 8007654:	e773      	b.n	800753e <_dtoa_r+0x3d6>
 8007656:	2502      	movs	r5, #2
 8007658:	e775      	b.n	8007546 <_dtoa_r+0x3de>
 800765a:	9e04      	ldr	r6, [sp, #16]
 800765c:	465f      	mov	r7, fp
 800765e:	e792      	b.n	8007586 <_dtoa_r+0x41e>
 8007660:	9900      	ldr	r1, [sp, #0]
 8007662:	4b50      	ldr	r3, [pc, #320]	; (80077a4 <_dtoa_r+0x63c>)
 8007664:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007668:	4431      	add	r1, r6
 800766a:	9102      	str	r1, [sp, #8]
 800766c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800766e:	eeb0 9a47 	vmov.f32	s18, s14
 8007672:	eef0 9a67 	vmov.f32	s19, s15
 8007676:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800767a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800767e:	2900      	cmp	r1, #0
 8007680:	d044      	beq.n	800770c <_dtoa_r+0x5a4>
 8007682:	494e      	ldr	r1, [pc, #312]	; (80077bc <_dtoa_r+0x654>)
 8007684:	2000      	movs	r0, #0
 8007686:	f7f9 f8f9 	bl	800087c <__aeabi_ddiv>
 800768a:	ec53 2b19 	vmov	r2, r3, d9
 800768e:	f7f8 fe13 	bl	80002b8 <__aeabi_dsub>
 8007692:	9d00      	ldr	r5, [sp, #0]
 8007694:	ec41 0b19 	vmov	d9, r0, r1
 8007698:	4649      	mov	r1, r9
 800769a:	4640      	mov	r0, r8
 800769c:	f7f9 fa74 	bl	8000b88 <__aeabi_d2iz>
 80076a0:	4606      	mov	r6, r0
 80076a2:	f7f8 ff57 	bl	8000554 <__aeabi_i2d>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	f7f8 fe03 	bl	80002b8 <__aeabi_dsub>
 80076b2:	3630      	adds	r6, #48	; 0x30
 80076b4:	f805 6b01 	strb.w	r6, [r5], #1
 80076b8:	ec53 2b19 	vmov	r2, r3, d9
 80076bc:	4680      	mov	r8, r0
 80076be:	4689      	mov	r9, r1
 80076c0:	f7f9 fa24 	bl	8000b0c <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d164      	bne.n	8007792 <_dtoa_r+0x62a>
 80076c8:	4642      	mov	r2, r8
 80076ca:	464b      	mov	r3, r9
 80076cc:	4937      	ldr	r1, [pc, #220]	; (80077ac <_dtoa_r+0x644>)
 80076ce:	2000      	movs	r0, #0
 80076d0:	f7f8 fdf2 	bl	80002b8 <__aeabi_dsub>
 80076d4:	ec53 2b19 	vmov	r2, r3, d9
 80076d8:	f7f9 fa18 	bl	8000b0c <__aeabi_dcmplt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	f040 80b6 	bne.w	800784e <_dtoa_r+0x6e6>
 80076e2:	9b02      	ldr	r3, [sp, #8]
 80076e4:	429d      	cmp	r5, r3
 80076e6:	f43f af7c 	beq.w	80075e2 <_dtoa_r+0x47a>
 80076ea:	4b31      	ldr	r3, [pc, #196]	; (80077b0 <_dtoa_r+0x648>)
 80076ec:	ec51 0b19 	vmov	r0, r1, d9
 80076f0:	2200      	movs	r2, #0
 80076f2:	f7f8 ff99 	bl	8000628 <__aeabi_dmul>
 80076f6:	4b2e      	ldr	r3, [pc, #184]	; (80077b0 <_dtoa_r+0x648>)
 80076f8:	ec41 0b19 	vmov	d9, r0, r1
 80076fc:	2200      	movs	r2, #0
 80076fe:	4640      	mov	r0, r8
 8007700:	4649      	mov	r1, r9
 8007702:	f7f8 ff91 	bl	8000628 <__aeabi_dmul>
 8007706:	4680      	mov	r8, r0
 8007708:	4689      	mov	r9, r1
 800770a:	e7c5      	b.n	8007698 <_dtoa_r+0x530>
 800770c:	ec51 0b17 	vmov	r0, r1, d7
 8007710:	f7f8 ff8a 	bl	8000628 <__aeabi_dmul>
 8007714:	9b02      	ldr	r3, [sp, #8]
 8007716:	9d00      	ldr	r5, [sp, #0]
 8007718:	930f      	str	r3, [sp, #60]	; 0x3c
 800771a:	ec41 0b19 	vmov	d9, r0, r1
 800771e:	4649      	mov	r1, r9
 8007720:	4640      	mov	r0, r8
 8007722:	f7f9 fa31 	bl	8000b88 <__aeabi_d2iz>
 8007726:	4606      	mov	r6, r0
 8007728:	f7f8 ff14 	bl	8000554 <__aeabi_i2d>
 800772c:	3630      	adds	r6, #48	; 0x30
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4640      	mov	r0, r8
 8007734:	4649      	mov	r1, r9
 8007736:	f7f8 fdbf 	bl	80002b8 <__aeabi_dsub>
 800773a:	f805 6b01 	strb.w	r6, [r5], #1
 800773e:	9b02      	ldr	r3, [sp, #8]
 8007740:	429d      	cmp	r5, r3
 8007742:	4680      	mov	r8, r0
 8007744:	4689      	mov	r9, r1
 8007746:	f04f 0200 	mov.w	r2, #0
 800774a:	d124      	bne.n	8007796 <_dtoa_r+0x62e>
 800774c:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <_dtoa_r+0x654>)
 800774e:	ec51 0b19 	vmov	r0, r1, d9
 8007752:	f7f8 fdb3 	bl	80002bc <__adddf3>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4640      	mov	r0, r8
 800775c:	4649      	mov	r1, r9
 800775e:	f7f9 f9f3 	bl	8000b48 <__aeabi_dcmpgt>
 8007762:	2800      	cmp	r0, #0
 8007764:	d173      	bne.n	800784e <_dtoa_r+0x6e6>
 8007766:	ec53 2b19 	vmov	r2, r3, d9
 800776a:	4914      	ldr	r1, [pc, #80]	; (80077bc <_dtoa_r+0x654>)
 800776c:	2000      	movs	r0, #0
 800776e:	f7f8 fda3 	bl	80002b8 <__aeabi_dsub>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4640      	mov	r0, r8
 8007778:	4649      	mov	r1, r9
 800777a:	f7f9 f9c7 	bl	8000b0c <__aeabi_dcmplt>
 800777e:	2800      	cmp	r0, #0
 8007780:	f43f af2f 	beq.w	80075e2 <_dtoa_r+0x47a>
 8007784:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007786:	1e6b      	subs	r3, r5, #1
 8007788:	930f      	str	r3, [sp, #60]	; 0x3c
 800778a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800778e:	2b30      	cmp	r3, #48	; 0x30
 8007790:	d0f8      	beq.n	8007784 <_dtoa_r+0x61c>
 8007792:	46bb      	mov	fp, r7
 8007794:	e04a      	b.n	800782c <_dtoa_r+0x6c4>
 8007796:	4b06      	ldr	r3, [pc, #24]	; (80077b0 <_dtoa_r+0x648>)
 8007798:	f7f8 ff46 	bl	8000628 <__aeabi_dmul>
 800779c:	4680      	mov	r8, r0
 800779e:	4689      	mov	r9, r1
 80077a0:	e7bd      	b.n	800771e <_dtoa_r+0x5b6>
 80077a2:	bf00      	nop
 80077a4:	0800c7d0 	.word	0x0800c7d0
 80077a8:	0800c7a8 	.word	0x0800c7a8
 80077ac:	3ff00000 	.word	0x3ff00000
 80077b0:	40240000 	.word	0x40240000
 80077b4:	401c0000 	.word	0x401c0000
 80077b8:	40140000 	.word	0x40140000
 80077bc:	3fe00000 	.word	0x3fe00000
 80077c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077c4:	9d00      	ldr	r5, [sp, #0]
 80077c6:	4642      	mov	r2, r8
 80077c8:	464b      	mov	r3, r9
 80077ca:	4630      	mov	r0, r6
 80077cc:	4639      	mov	r1, r7
 80077ce:	f7f9 f855 	bl	800087c <__aeabi_ddiv>
 80077d2:	f7f9 f9d9 	bl	8000b88 <__aeabi_d2iz>
 80077d6:	9001      	str	r0, [sp, #4]
 80077d8:	f7f8 febc 	bl	8000554 <__aeabi_i2d>
 80077dc:	4642      	mov	r2, r8
 80077de:	464b      	mov	r3, r9
 80077e0:	f7f8 ff22 	bl	8000628 <__aeabi_dmul>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4630      	mov	r0, r6
 80077ea:	4639      	mov	r1, r7
 80077ec:	f7f8 fd64 	bl	80002b8 <__aeabi_dsub>
 80077f0:	9e01      	ldr	r6, [sp, #4]
 80077f2:	9f04      	ldr	r7, [sp, #16]
 80077f4:	3630      	adds	r6, #48	; 0x30
 80077f6:	f805 6b01 	strb.w	r6, [r5], #1
 80077fa:	9e00      	ldr	r6, [sp, #0]
 80077fc:	1bae      	subs	r6, r5, r6
 80077fe:	42b7      	cmp	r7, r6
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	d134      	bne.n	8007870 <_dtoa_r+0x708>
 8007806:	f7f8 fd59 	bl	80002bc <__adddf3>
 800780a:	4642      	mov	r2, r8
 800780c:	464b      	mov	r3, r9
 800780e:	4606      	mov	r6, r0
 8007810:	460f      	mov	r7, r1
 8007812:	f7f9 f999 	bl	8000b48 <__aeabi_dcmpgt>
 8007816:	b9c8      	cbnz	r0, 800784c <_dtoa_r+0x6e4>
 8007818:	4642      	mov	r2, r8
 800781a:	464b      	mov	r3, r9
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f7f9 f96a 	bl	8000af8 <__aeabi_dcmpeq>
 8007824:	b110      	cbz	r0, 800782c <_dtoa_r+0x6c4>
 8007826:	9b01      	ldr	r3, [sp, #4]
 8007828:	07db      	lsls	r3, r3, #31
 800782a:	d40f      	bmi.n	800784c <_dtoa_r+0x6e4>
 800782c:	4651      	mov	r1, sl
 800782e:	4620      	mov	r0, r4
 8007830:	f000 fbcc 	bl	8007fcc <_Bfree>
 8007834:	2300      	movs	r3, #0
 8007836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007838:	702b      	strb	r3, [r5, #0]
 800783a:	f10b 0301 	add.w	r3, fp, #1
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007842:	2b00      	cmp	r3, #0
 8007844:	f43f ace2 	beq.w	800720c <_dtoa_r+0xa4>
 8007848:	601d      	str	r5, [r3, #0]
 800784a:	e4df      	b.n	800720c <_dtoa_r+0xa4>
 800784c:	465f      	mov	r7, fp
 800784e:	462b      	mov	r3, r5
 8007850:	461d      	mov	r5, r3
 8007852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007856:	2a39      	cmp	r2, #57	; 0x39
 8007858:	d106      	bne.n	8007868 <_dtoa_r+0x700>
 800785a:	9a00      	ldr	r2, [sp, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d1f7      	bne.n	8007850 <_dtoa_r+0x6e8>
 8007860:	9900      	ldr	r1, [sp, #0]
 8007862:	2230      	movs	r2, #48	; 0x30
 8007864:	3701      	adds	r7, #1
 8007866:	700a      	strb	r2, [r1, #0]
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	3201      	adds	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e790      	b.n	8007792 <_dtoa_r+0x62a>
 8007870:	4ba3      	ldr	r3, [pc, #652]	; (8007b00 <_dtoa_r+0x998>)
 8007872:	2200      	movs	r2, #0
 8007874:	f7f8 fed8 	bl	8000628 <__aeabi_dmul>
 8007878:	2200      	movs	r2, #0
 800787a:	2300      	movs	r3, #0
 800787c:	4606      	mov	r6, r0
 800787e:	460f      	mov	r7, r1
 8007880:	f7f9 f93a 	bl	8000af8 <__aeabi_dcmpeq>
 8007884:	2800      	cmp	r0, #0
 8007886:	d09e      	beq.n	80077c6 <_dtoa_r+0x65e>
 8007888:	e7d0      	b.n	800782c <_dtoa_r+0x6c4>
 800788a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800788c:	2a00      	cmp	r2, #0
 800788e:	f000 80ca 	beq.w	8007a26 <_dtoa_r+0x8be>
 8007892:	9a07      	ldr	r2, [sp, #28]
 8007894:	2a01      	cmp	r2, #1
 8007896:	f300 80ad 	bgt.w	80079f4 <_dtoa_r+0x88c>
 800789a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800789c:	2a00      	cmp	r2, #0
 800789e:	f000 80a5 	beq.w	80079ec <_dtoa_r+0x884>
 80078a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078a6:	9e08      	ldr	r6, [sp, #32]
 80078a8:	9d05      	ldr	r5, [sp, #20]
 80078aa:	9a05      	ldr	r2, [sp, #20]
 80078ac:	441a      	add	r2, r3
 80078ae:	9205      	str	r2, [sp, #20]
 80078b0:	9a06      	ldr	r2, [sp, #24]
 80078b2:	2101      	movs	r1, #1
 80078b4:	441a      	add	r2, r3
 80078b6:	4620      	mov	r0, r4
 80078b8:	9206      	str	r2, [sp, #24]
 80078ba:	f000 fc87 	bl	80081cc <__i2b>
 80078be:	4607      	mov	r7, r0
 80078c0:	b165      	cbz	r5, 80078dc <_dtoa_r+0x774>
 80078c2:	9b06      	ldr	r3, [sp, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	dd09      	ble.n	80078dc <_dtoa_r+0x774>
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	9a05      	ldr	r2, [sp, #20]
 80078cc:	bfa8      	it	ge
 80078ce:	462b      	movge	r3, r5
 80078d0:	1ad2      	subs	r2, r2, r3
 80078d2:	9205      	str	r2, [sp, #20]
 80078d4:	9a06      	ldr	r2, [sp, #24]
 80078d6:	1aed      	subs	r5, r5, r3
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	9306      	str	r3, [sp, #24]
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	b1f3      	cbz	r3, 800791e <_dtoa_r+0x7b6>
 80078e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80a3 	beq.w	8007a2e <_dtoa_r+0x8c6>
 80078e8:	2e00      	cmp	r6, #0
 80078ea:	dd10      	ble.n	800790e <_dtoa_r+0x7a6>
 80078ec:	4639      	mov	r1, r7
 80078ee:	4632      	mov	r2, r6
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fd2b 	bl	800834c <__pow5mult>
 80078f6:	4652      	mov	r2, sl
 80078f8:	4601      	mov	r1, r0
 80078fa:	4607      	mov	r7, r0
 80078fc:	4620      	mov	r0, r4
 80078fe:	f000 fc7b 	bl	80081f8 <__multiply>
 8007902:	4651      	mov	r1, sl
 8007904:	4680      	mov	r8, r0
 8007906:	4620      	mov	r0, r4
 8007908:	f000 fb60 	bl	8007fcc <_Bfree>
 800790c:	46c2      	mov	sl, r8
 800790e:	9b08      	ldr	r3, [sp, #32]
 8007910:	1b9a      	subs	r2, r3, r6
 8007912:	d004      	beq.n	800791e <_dtoa_r+0x7b6>
 8007914:	4651      	mov	r1, sl
 8007916:	4620      	mov	r0, r4
 8007918:	f000 fd18 	bl	800834c <__pow5mult>
 800791c:	4682      	mov	sl, r0
 800791e:	2101      	movs	r1, #1
 8007920:	4620      	mov	r0, r4
 8007922:	f000 fc53 	bl	80081cc <__i2b>
 8007926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007928:	2b00      	cmp	r3, #0
 800792a:	4606      	mov	r6, r0
 800792c:	f340 8081 	ble.w	8007a32 <_dtoa_r+0x8ca>
 8007930:	461a      	mov	r2, r3
 8007932:	4601      	mov	r1, r0
 8007934:	4620      	mov	r0, r4
 8007936:	f000 fd09 	bl	800834c <__pow5mult>
 800793a:	9b07      	ldr	r3, [sp, #28]
 800793c:	2b01      	cmp	r3, #1
 800793e:	4606      	mov	r6, r0
 8007940:	dd7a      	ble.n	8007a38 <_dtoa_r+0x8d0>
 8007942:	f04f 0800 	mov.w	r8, #0
 8007946:	6933      	ldr	r3, [r6, #16]
 8007948:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800794c:	6918      	ldr	r0, [r3, #16]
 800794e:	f000 fbef 	bl	8008130 <__hi0bits>
 8007952:	f1c0 0020 	rsb	r0, r0, #32
 8007956:	9b06      	ldr	r3, [sp, #24]
 8007958:	4418      	add	r0, r3
 800795a:	f010 001f 	ands.w	r0, r0, #31
 800795e:	f000 8094 	beq.w	8007a8a <_dtoa_r+0x922>
 8007962:	f1c0 0320 	rsb	r3, r0, #32
 8007966:	2b04      	cmp	r3, #4
 8007968:	f340 8085 	ble.w	8007a76 <_dtoa_r+0x90e>
 800796c:	9b05      	ldr	r3, [sp, #20]
 800796e:	f1c0 001c 	rsb	r0, r0, #28
 8007972:	4403      	add	r3, r0
 8007974:	9305      	str	r3, [sp, #20]
 8007976:	9b06      	ldr	r3, [sp, #24]
 8007978:	4403      	add	r3, r0
 800797a:	4405      	add	r5, r0
 800797c:	9306      	str	r3, [sp, #24]
 800797e:	9b05      	ldr	r3, [sp, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	dd05      	ble.n	8007990 <_dtoa_r+0x828>
 8007984:	4651      	mov	r1, sl
 8007986:	461a      	mov	r2, r3
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fd39 	bl	8008400 <__lshift>
 800798e:	4682      	mov	sl, r0
 8007990:	9b06      	ldr	r3, [sp, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	dd05      	ble.n	80079a2 <_dtoa_r+0x83a>
 8007996:	4631      	mov	r1, r6
 8007998:	461a      	mov	r2, r3
 800799a:	4620      	mov	r0, r4
 800799c:	f000 fd30 	bl	8008400 <__lshift>
 80079a0:	4606      	mov	r6, r0
 80079a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d072      	beq.n	8007a8e <_dtoa_r+0x926>
 80079a8:	4631      	mov	r1, r6
 80079aa:	4650      	mov	r0, sl
 80079ac:	f000 fd94 	bl	80084d8 <__mcmp>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	da6c      	bge.n	8007a8e <_dtoa_r+0x926>
 80079b4:	2300      	movs	r3, #0
 80079b6:	4651      	mov	r1, sl
 80079b8:	220a      	movs	r2, #10
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 fb28 	bl	8008010 <__multadd>
 80079c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079c6:	4682      	mov	sl, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 81b0 	beq.w	8007d2e <_dtoa_r+0xbc6>
 80079ce:	2300      	movs	r3, #0
 80079d0:	4639      	mov	r1, r7
 80079d2:	220a      	movs	r2, #10
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 fb1b 	bl	8008010 <__multadd>
 80079da:	9b01      	ldr	r3, [sp, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	4607      	mov	r7, r0
 80079e0:	f300 8096 	bgt.w	8007b10 <_dtoa_r+0x9a8>
 80079e4:	9b07      	ldr	r3, [sp, #28]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	dc59      	bgt.n	8007a9e <_dtoa_r+0x936>
 80079ea:	e091      	b.n	8007b10 <_dtoa_r+0x9a8>
 80079ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079f2:	e758      	b.n	80078a6 <_dtoa_r+0x73e>
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	1e5e      	subs	r6, r3, #1
 80079f8:	9b08      	ldr	r3, [sp, #32]
 80079fa:	42b3      	cmp	r3, r6
 80079fc:	bfbf      	itttt	lt
 80079fe:	9b08      	ldrlt	r3, [sp, #32]
 8007a00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007a02:	9608      	strlt	r6, [sp, #32]
 8007a04:	1af3      	sublt	r3, r6, r3
 8007a06:	bfb4      	ite	lt
 8007a08:	18d2      	addlt	r2, r2, r3
 8007a0a:	1b9e      	subge	r6, r3, r6
 8007a0c:	9b04      	ldr	r3, [sp, #16]
 8007a0e:	bfbc      	itt	lt
 8007a10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007a12:	2600      	movlt	r6, #0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bfb7      	itett	lt
 8007a18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007a1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007a20:	1a9d      	sublt	r5, r3, r2
 8007a22:	2300      	movlt	r3, #0
 8007a24:	e741      	b.n	80078aa <_dtoa_r+0x742>
 8007a26:	9e08      	ldr	r6, [sp, #32]
 8007a28:	9d05      	ldr	r5, [sp, #20]
 8007a2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a2c:	e748      	b.n	80078c0 <_dtoa_r+0x758>
 8007a2e:	9a08      	ldr	r2, [sp, #32]
 8007a30:	e770      	b.n	8007914 <_dtoa_r+0x7ac>
 8007a32:	9b07      	ldr	r3, [sp, #28]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	dc19      	bgt.n	8007a6c <_dtoa_r+0x904>
 8007a38:	9b02      	ldr	r3, [sp, #8]
 8007a3a:	b9bb      	cbnz	r3, 8007a6c <_dtoa_r+0x904>
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a42:	b99b      	cbnz	r3, 8007a6c <_dtoa_r+0x904>
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a4a:	0d1b      	lsrs	r3, r3, #20
 8007a4c:	051b      	lsls	r3, r3, #20
 8007a4e:	b183      	cbz	r3, 8007a72 <_dtoa_r+0x90a>
 8007a50:	9b05      	ldr	r3, [sp, #20]
 8007a52:	3301      	adds	r3, #1
 8007a54:	9305      	str	r3, [sp, #20]
 8007a56:	9b06      	ldr	r3, [sp, #24]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	9306      	str	r3, [sp, #24]
 8007a5c:	f04f 0801 	mov.w	r8, #1
 8007a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f47f af6f 	bne.w	8007946 <_dtoa_r+0x7de>
 8007a68:	2001      	movs	r0, #1
 8007a6a:	e774      	b.n	8007956 <_dtoa_r+0x7ee>
 8007a6c:	f04f 0800 	mov.w	r8, #0
 8007a70:	e7f6      	b.n	8007a60 <_dtoa_r+0x8f8>
 8007a72:	4698      	mov	r8, r3
 8007a74:	e7f4      	b.n	8007a60 <_dtoa_r+0x8f8>
 8007a76:	d082      	beq.n	800797e <_dtoa_r+0x816>
 8007a78:	9a05      	ldr	r2, [sp, #20]
 8007a7a:	331c      	adds	r3, #28
 8007a7c:	441a      	add	r2, r3
 8007a7e:	9205      	str	r2, [sp, #20]
 8007a80:	9a06      	ldr	r2, [sp, #24]
 8007a82:	441a      	add	r2, r3
 8007a84:	441d      	add	r5, r3
 8007a86:	9206      	str	r2, [sp, #24]
 8007a88:	e779      	b.n	800797e <_dtoa_r+0x816>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	e7f4      	b.n	8007a78 <_dtoa_r+0x910>
 8007a8e:	9b04      	ldr	r3, [sp, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	dc37      	bgt.n	8007b04 <_dtoa_r+0x99c>
 8007a94:	9b07      	ldr	r3, [sp, #28]
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	dd34      	ble.n	8007b04 <_dtoa_r+0x99c>
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	9b01      	ldr	r3, [sp, #4]
 8007aa0:	b963      	cbnz	r3, 8007abc <_dtoa_r+0x954>
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	2205      	movs	r2, #5
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 fab2 	bl	8008010 <__multadd>
 8007aac:	4601      	mov	r1, r0
 8007aae:	4606      	mov	r6, r0
 8007ab0:	4650      	mov	r0, sl
 8007ab2:	f000 fd11 	bl	80084d8 <__mcmp>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f73f adbb 	bgt.w	8007632 <_dtoa_r+0x4ca>
 8007abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007abe:	9d00      	ldr	r5, [sp, #0]
 8007ac0:	ea6f 0b03 	mvn.w	fp, r3
 8007ac4:	f04f 0800 	mov.w	r8, #0
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 fa7e 	bl	8007fcc <_Bfree>
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	f43f aeab 	beq.w	800782c <_dtoa_r+0x6c4>
 8007ad6:	f1b8 0f00 	cmp.w	r8, #0
 8007ada:	d005      	beq.n	8007ae8 <_dtoa_r+0x980>
 8007adc:	45b8      	cmp	r8, r7
 8007ade:	d003      	beq.n	8007ae8 <_dtoa_r+0x980>
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 fa72 	bl	8007fcc <_Bfree>
 8007ae8:	4639      	mov	r1, r7
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 fa6e 	bl	8007fcc <_Bfree>
 8007af0:	e69c      	b.n	800782c <_dtoa_r+0x6c4>
 8007af2:	2600      	movs	r6, #0
 8007af4:	4637      	mov	r7, r6
 8007af6:	e7e1      	b.n	8007abc <_dtoa_r+0x954>
 8007af8:	46bb      	mov	fp, r7
 8007afa:	4637      	mov	r7, r6
 8007afc:	e599      	b.n	8007632 <_dtoa_r+0x4ca>
 8007afe:	bf00      	nop
 8007b00:	40240000 	.word	0x40240000
 8007b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 80c8 	beq.w	8007c9c <_dtoa_r+0xb34>
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	2d00      	cmp	r5, #0
 8007b12:	dd05      	ble.n	8007b20 <_dtoa_r+0x9b8>
 8007b14:	4639      	mov	r1, r7
 8007b16:	462a      	mov	r2, r5
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 fc71 	bl	8008400 <__lshift>
 8007b1e:	4607      	mov	r7, r0
 8007b20:	f1b8 0f00 	cmp.w	r8, #0
 8007b24:	d05b      	beq.n	8007bde <_dtoa_r+0xa76>
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 fa0f 	bl	8007f4c <_Balloc>
 8007b2e:	4605      	mov	r5, r0
 8007b30:	b928      	cbnz	r0, 8007b3e <_dtoa_r+0x9d6>
 8007b32:	4b83      	ldr	r3, [pc, #524]	; (8007d40 <_dtoa_r+0xbd8>)
 8007b34:	4602      	mov	r2, r0
 8007b36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b3a:	f7ff bb2e 	b.w	800719a <_dtoa_r+0x32>
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	3202      	adds	r2, #2
 8007b42:	0092      	lsls	r2, r2, #2
 8007b44:	f107 010c 	add.w	r1, r7, #12
 8007b48:	300c      	adds	r0, #12
 8007b4a:	f002 fb19 	bl	800a180 <memcpy>
 8007b4e:	2201      	movs	r2, #1
 8007b50:	4629      	mov	r1, r5
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fc54 	bl	8008400 <__lshift>
 8007b58:	9b00      	ldr	r3, [sp, #0]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	9304      	str	r3, [sp, #16]
 8007b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b62:	4413      	add	r3, r2
 8007b64:	9308      	str	r3, [sp, #32]
 8007b66:	9b02      	ldr	r3, [sp, #8]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	46b8      	mov	r8, r7
 8007b6e:	9306      	str	r3, [sp, #24]
 8007b70:	4607      	mov	r7, r0
 8007b72:	9b04      	ldr	r3, [sp, #16]
 8007b74:	4631      	mov	r1, r6
 8007b76:	3b01      	subs	r3, #1
 8007b78:	4650      	mov	r0, sl
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	f7ff fa6c 	bl	8007058 <quorem>
 8007b80:	4641      	mov	r1, r8
 8007b82:	9002      	str	r0, [sp, #8]
 8007b84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b88:	4650      	mov	r0, sl
 8007b8a:	f000 fca5 	bl	80084d8 <__mcmp>
 8007b8e:	463a      	mov	r2, r7
 8007b90:	9005      	str	r0, [sp, #20]
 8007b92:	4631      	mov	r1, r6
 8007b94:	4620      	mov	r0, r4
 8007b96:	f000 fcbb 	bl	8008510 <__mdiff>
 8007b9a:	68c2      	ldr	r2, [r0, #12]
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	bb02      	cbnz	r2, 8007be2 <_dtoa_r+0xa7a>
 8007ba0:	4601      	mov	r1, r0
 8007ba2:	4650      	mov	r0, sl
 8007ba4:	f000 fc98 	bl	80084d8 <__mcmp>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	4629      	mov	r1, r5
 8007bac:	4620      	mov	r0, r4
 8007bae:	9209      	str	r2, [sp, #36]	; 0x24
 8007bb0:	f000 fa0c 	bl	8007fcc <_Bfree>
 8007bb4:	9b07      	ldr	r3, [sp, #28]
 8007bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bb8:	9d04      	ldr	r5, [sp, #16]
 8007bba:	ea43 0102 	orr.w	r1, r3, r2
 8007bbe:	9b06      	ldr	r3, [sp, #24]
 8007bc0:	4319      	orrs	r1, r3
 8007bc2:	d110      	bne.n	8007be6 <_dtoa_r+0xa7e>
 8007bc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bc8:	d029      	beq.n	8007c1e <_dtoa_r+0xab6>
 8007bca:	9b05      	ldr	r3, [sp, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dd02      	ble.n	8007bd6 <_dtoa_r+0xa6e>
 8007bd0:	9b02      	ldr	r3, [sp, #8]
 8007bd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007bd6:	9b01      	ldr	r3, [sp, #4]
 8007bd8:	f883 9000 	strb.w	r9, [r3]
 8007bdc:	e774      	b.n	8007ac8 <_dtoa_r+0x960>
 8007bde:	4638      	mov	r0, r7
 8007be0:	e7ba      	b.n	8007b58 <_dtoa_r+0x9f0>
 8007be2:	2201      	movs	r2, #1
 8007be4:	e7e1      	b.n	8007baa <_dtoa_r+0xa42>
 8007be6:	9b05      	ldr	r3, [sp, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	db04      	blt.n	8007bf6 <_dtoa_r+0xa8e>
 8007bec:	9907      	ldr	r1, [sp, #28]
 8007bee:	430b      	orrs	r3, r1
 8007bf0:	9906      	ldr	r1, [sp, #24]
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	d120      	bne.n	8007c38 <_dtoa_r+0xad0>
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	dded      	ble.n	8007bd6 <_dtoa_r+0xa6e>
 8007bfa:	4651      	mov	r1, sl
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f000 fbfe 	bl	8008400 <__lshift>
 8007c04:	4631      	mov	r1, r6
 8007c06:	4682      	mov	sl, r0
 8007c08:	f000 fc66 	bl	80084d8 <__mcmp>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	dc03      	bgt.n	8007c18 <_dtoa_r+0xab0>
 8007c10:	d1e1      	bne.n	8007bd6 <_dtoa_r+0xa6e>
 8007c12:	f019 0f01 	tst.w	r9, #1
 8007c16:	d0de      	beq.n	8007bd6 <_dtoa_r+0xa6e>
 8007c18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c1c:	d1d8      	bne.n	8007bd0 <_dtoa_r+0xa68>
 8007c1e:	9a01      	ldr	r2, [sp, #4]
 8007c20:	2339      	movs	r3, #57	; 0x39
 8007c22:	7013      	strb	r3, [r2, #0]
 8007c24:	462b      	mov	r3, r5
 8007c26:	461d      	mov	r5, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c2e:	2a39      	cmp	r2, #57	; 0x39
 8007c30:	d06c      	beq.n	8007d0c <_dtoa_r+0xba4>
 8007c32:	3201      	adds	r2, #1
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	e747      	b.n	8007ac8 <_dtoa_r+0x960>
 8007c38:	2a00      	cmp	r2, #0
 8007c3a:	dd07      	ble.n	8007c4c <_dtoa_r+0xae4>
 8007c3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c40:	d0ed      	beq.n	8007c1e <_dtoa_r+0xab6>
 8007c42:	9a01      	ldr	r2, [sp, #4]
 8007c44:	f109 0301 	add.w	r3, r9, #1
 8007c48:	7013      	strb	r3, [r2, #0]
 8007c4a:	e73d      	b.n	8007ac8 <_dtoa_r+0x960>
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	9a08      	ldr	r2, [sp, #32]
 8007c50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d043      	beq.n	8007ce0 <_dtoa_r+0xb78>
 8007c58:	4651      	mov	r1, sl
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	220a      	movs	r2, #10
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 f9d6 	bl	8008010 <__multadd>
 8007c64:	45b8      	cmp	r8, r7
 8007c66:	4682      	mov	sl, r0
 8007c68:	f04f 0300 	mov.w	r3, #0
 8007c6c:	f04f 020a 	mov.w	r2, #10
 8007c70:	4641      	mov	r1, r8
 8007c72:	4620      	mov	r0, r4
 8007c74:	d107      	bne.n	8007c86 <_dtoa_r+0xb1e>
 8007c76:	f000 f9cb 	bl	8008010 <__multadd>
 8007c7a:	4680      	mov	r8, r0
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	3301      	adds	r3, #1
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	e775      	b.n	8007b72 <_dtoa_r+0xa0a>
 8007c86:	f000 f9c3 	bl	8008010 <__multadd>
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	2300      	movs	r3, #0
 8007c90:	220a      	movs	r2, #10
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 f9bc 	bl	8008010 <__multadd>
 8007c98:	4607      	mov	r7, r0
 8007c9a:	e7f0      	b.n	8007c7e <_dtoa_r+0xb16>
 8007c9c:	9b04      	ldr	r3, [sp, #16]
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	9d00      	ldr	r5, [sp, #0]
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4650      	mov	r0, sl
 8007ca6:	f7ff f9d7 	bl	8007058 <quorem>
 8007caa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	f805 9b01 	strb.w	r9, [r5], #1
 8007cb4:	1aea      	subs	r2, r5, r3
 8007cb6:	9b01      	ldr	r3, [sp, #4]
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	dd07      	ble.n	8007ccc <_dtoa_r+0xb64>
 8007cbc:	4651      	mov	r1, sl
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	220a      	movs	r2, #10
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 f9a4 	bl	8008010 <__multadd>
 8007cc8:	4682      	mov	sl, r0
 8007cca:	e7ea      	b.n	8007ca2 <_dtoa_r+0xb3a>
 8007ccc:	9b01      	ldr	r3, [sp, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	bfc8      	it	gt
 8007cd2:	461d      	movgt	r5, r3
 8007cd4:	9b00      	ldr	r3, [sp, #0]
 8007cd6:	bfd8      	it	le
 8007cd8:	2501      	movle	r5, #1
 8007cda:	441d      	add	r5, r3
 8007cdc:	f04f 0800 	mov.w	r8, #0
 8007ce0:	4651      	mov	r1, sl
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f000 fb8b 	bl	8008400 <__lshift>
 8007cea:	4631      	mov	r1, r6
 8007cec:	4682      	mov	sl, r0
 8007cee:	f000 fbf3 	bl	80084d8 <__mcmp>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	dc96      	bgt.n	8007c24 <_dtoa_r+0xabc>
 8007cf6:	d102      	bne.n	8007cfe <_dtoa_r+0xb96>
 8007cf8:	f019 0f01 	tst.w	r9, #1
 8007cfc:	d192      	bne.n	8007c24 <_dtoa_r+0xabc>
 8007cfe:	462b      	mov	r3, r5
 8007d00:	461d      	mov	r5, r3
 8007d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d06:	2a30      	cmp	r2, #48	; 0x30
 8007d08:	d0fa      	beq.n	8007d00 <_dtoa_r+0xb98>
 8007d0a:	e6dd      	b.n	8007ac8 <_dtoa_r+0x960>
 8007d0c:	9a00      	ldr	r2, [sp, #0]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d189      	bne.n	8007c26 <_dtoa_r+0xabe>
 8007d12:	f10b 0b01 	add.w	fp, fp, #1
 8007d16:	2331      	movs	r3, #49	; 0x31
 8007d18:	e796      	b.n	8007c48 <_dtoa_r+0xae0>
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <_dtoa_r+0xbdc>)
 8007d1c:	f7ff ba99 	b.w	8007252 <_dtoa_r+0xea>
 8007d20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f47f aa6d 	bne.w	8007202 <_dtoa_r+0x9a>
 8007d28:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <_dtoa_r+0xbe0>)
 8007d2a:	f7ff ba92 	b.w	8007252 <_dtoa_r+0xea>
 8007d2e:	9b01      	ldr	r3, [sp, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	dcb5      	bgt.n	8007ca0 <_dtoa_r+0xb38>
 8007d34:	9b07      	ldr	r3, [sp, #28]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	f73f aeb1 	bgt.w	8007a9e <_dtoa_r+0x936>
 8007d3c:	e7b0      	b.n	8007ca0 <_dtoa_r+0xb38>
 8007d3e:	bf00      	nop
 8007d40:	0800c73b 	.word	0x0800c73b
 8007d44:	0800ca20 	.word	0x0800ca20
 8007d48:	0800c6bf 	.word	0x0800c6bf

08007d4c <_free_r>:
 8007d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	d044      	beq.n	8007ddc <_free_r+0x90>
 8007d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d56:	9001      	str	r0, [sp, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d5e:	bfb8      	it	lt
 8007d60:	18e4      	addlt	r4, r4, r3
 8007d62:	f000 f8e7 	bl	8007f34 <__malloc_lock>
 8007d66:	4a1e      	ldr	r2, [pc, #120]	; (8007de0 <_free_r+0x94>)
 8007d68:	9801      	ldr	r0, [sp, #4]
 8007d6a:	6813      	ldr	r3, [r2, #0]
 8007d6c:	b933      	cbnz	r3, 8007d7c <_free_r+0x30>
 8007d6e:	6063      	str	r3, [r4, #4]
 8007d70:	6014      	str	r4, [r2, #0]
 8007d72:	b003      	add	sp, #12
 8007d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d78:	f000 b8e2 	b.w	8007f40 <__malloc_unlock>
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	d908      	bls.n	8007d92 <_free_r+0x46>
 8007d80:	6825      	ldr	r5, [r4, #0]
 8007d82:	1961      	adds	r1, r4, r5
 8007d84:	428b      	cmp	r3, r1
 8007d86:	bf01      	itttt	eq
 8007d88:	6819      	ldreq	r1, [r3, #0]
 8007d8a:	685b      	ldreq	r3, [r3, #4]
 8007d8c:	1949      	addeq	r1, r1, r5
 8007d8e:	6021      	streq	r1, [r4, #0]
 8007d90:	e7ed      	b.n	8007d6e <_free_r+0x22>
 8007d92:	461a      	mov	r2, r3
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	b10b      	cbz	r3, 8007d9c <_free_r+0x50>
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	d9fa      	bls.n	8007d92 <_free_r+0x46>
 8007d9c:	6811      	ldr	r1, [r2, #0]
 8007d9e:	1855      	adds	r5, r2, r1
 8007da0:	42a5      	cmp	r5, r4
 8007da2:	d10b      	bne.n	8007dbc <_free_r+0x70>
 8007da4:	6824      	ldr	r4, [r4, #0]
 8007da6:	4421      	add	r1, r4
 8007da8:	1854      	adds	r4, r2, r1
 8007daa:	42a3      	cmp	r3, r4
 8007dac:	6011      	str	r1, [r2, #0]
 8007dae:	d1e0      	bne.n	8007d72 <_free_r+0x26>
 8007db0:	681c      	ldr	r4, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	6053      	str	r3, [r2, #4]
 8007db6:	440c      	add	r4, r1
 8007db8:	6014      	str	r4, [r2, #0]
 8007dba:	e7da      	b.n	8007d72 <_free_r+0x26>
 8007dbc:	d902      	bls.n	8007dc4 <_free_r+0x78>
 8007dbe:	230c      	movs	r3, #12
 8007dc0:	6003      	str	r3, [r0, #0]
 8007dc2:	e7d6      	b.n	8007d72 <_free_r+0x26>
 8007dc4:	6825      	ldr	r5, [r4, #0]
 8007dc6:	1961      	adds	r1, r4, r5
 8007dc8:	428b      	cmp	r3, r1
 8007dca:	bf04      	itt	eq
 8007dcc:	6819      	ldreq	r1, [r3, #0]
 8007dce:	685b      	ldreq	r3, [r3, #4]
 8007dd0:	6063      	str	r3, [r4, #4]
 8007dd2:	bf04      	itt	eq
 8007dd4:	1949      	addeq	r1, r1, r5
 8007dd6:	6021      	streq	r1, [r4, #0]
 8007dd8:	6054      	str	r4, [r2, #4]
 8007dda:	e7ca      	b.n	8007d72 <_free_r+0x26>
 8007ddc:	b003      	add	sp, #12
 8007dde:	bd30      	pop	{r4, r5, pc}
 8007de0:	20000640 	.word	0x20000640

08007de4 <malloc>:
 8007de4:	4b02      	ldr	r3, [pc, #8]	; (8007df0 <malloc+0xc>)
 8007de6:	4601      	mov	r1, r0
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	f000 b823 	b.w	8007e34 <_malloc_r>
 8007dee:	bf00      	nop
 8007df0:	20000064 	.word	0x20000064

08007df4 <sbrk_aligned>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	4e0e      	ldr	r6, [pc, #56]	; (8007e30 <sbrk_aligned+0x3c>)
 8007df8:	460c      	mov	r4, r1
 8007dfa:	6831      	ldr	r1, [r6, #0]
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	b911      	cbnz	r1, 8007e06 <sbrk_aligned+0x12>
 8007e00:	f002 f9ae 	bl	800a160 <_sbrk_r>
 8007e04:	6030      	str	r0, [r6, #0]
 8007e06:	4621      	mov	r1, r4
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f002 f9a9 	bl	800a160 <_sbrk_r>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	d00a      	beq.n	8007e28 <sbrk_aligned+0x34>
 8007e12:	1cc4      	adds	r4, r0, #3
 8007e14:	f024 0403 	bic.w	r4, r4, #3
 8007e18:	42a0      	cmp	r0, r4
 8007e1a:	d007      	beq.n	8007e2c <sbrk_aligned+0x38>
 8007e1c:	1a21      	subs	r1, r4, r0
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f002 f99e 	bl	800a160 <_sbrk_r>
 8007e24:	3001      	adds	r0, #1
 8007e26:	d101      	bne.n	8007e2c <sbrk_aligned+0x38>
 8007e28:	f04f 34ff 	mov.w	r4, #4294967295
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	20000644 	.word	0x20000644

08007e34 <_malloc_r>:
 8007e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e38:	1ccd      	adds	r5, r1, #3
 8007e3a:	f025 0503 	bic.w	r5, r5, #3
 8007e3e:	3508      	adds	r5, #8
 8007e40:	2d0c      	cmp	r5, #12
 8007e42:	bf38      	it	cc
 8007e44:	250c      	movcc	r5, #12
 8007e46:	2d00      	cmp	r5, #0
 8007e48:	4607      	mov	r7, r0
 8007e4a:	db01      	blt.n	8007e50 <_malloc_r+0x1c>
 8007e4c:	42a9      	cmp	r1, r5
 8007e4e:	d905      	bls.n	8007e5c <_malloc_r+0x28>
 8007e50:	230c      	movs	r3, #12
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	2600      	movs	r6, #0
 8007e56:	4630      	mov	r0, r6
 8007e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f30 <_malloc_r+0xfc>
 8007e60:	f000 f868 	bl	8007f34 <__malloc_lock>
 8007e64:	f8d8 3000 	ldr.w	r3, [r8]
 8007e68:	461c      	mov	r4, r3
 8007e6a:	bb5c      	cbnz	r4, 8007ec4 <_malloc_r+0x90>
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4638      	mov	r0, r7
 8007e70:	f7ff ffc0 	bl	8007df4 <sbrk_aligned>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	4604      	mov	r4, r0
 8007e78:	d155      	bne.n	8007f26 <_malloc_r+0xf2>
 8007e7a:	f8d8 4000 	ldr.w	r4, [r8]
 8007e7e:	4626      	mov	r6, r4
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	d145      	bne.n	8007f10 <_malloc_r+0xdc>
 8007e84:	2c00      	cmp	r4, #0
 8007e86:	d048      	beq.n	8007f1a <_malloc_r+0xe6>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	eb04 0903 	add.w	r9, r4, r3
 8007e92:	f002 f965 	bl	800a160 <_sbrk_r>
 8007e96:	4581      	cmp	r9, r0
 8007e98:	d13f      	bne.n	8007f1a <_malloc_r+0xe6>
 8007e9a:	6821      	ldr	r1, [r4, #0]
 8007e9c:	1a6d      	subs	r5, r5, r1
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff ffa7 	bl	8007df4 <sbrk_aligned>
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d037      	beq.n	8007f1a <_malloc_r+0xe6>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	442b      	add	r3, r5
 8007eae:	6023      	str	r3, [r4, #0]
 8007eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d038      	beq.n	8007f2a <_malloc_r+0xf6>
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	42a2      	cmp	r2, r4
 8007ebc:	d12b      	bne.n	8007f16 <_malloc_r+0xe2>
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	605a      	str	r2, [r3, #4]
 8007ec2:	e00f      	b.n	8007ee4 <_malloc_r+0xb0>
 8007ec4:	6822      	ldr	r2, [r4, #0]
 8007ec6:	1b52      	subs	r2, r2, r5
 8007ec8:	d41f      	bmi.n	8007f0a <_malloc_r+0xd6>
 8007eca:	2a0b      	cmp	r2, #11
 8007ecc:	d917      	bls.n	8007efe <_malloc_r+0xca>
 8007ece:	1961      	adds	r1, r4, r5
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	6025      	str	r5, [r4, #0]
 8007ed4:	bf18      	it	ne
 8007ed6:	6059      	strne	r1, [r3, #4]
 8007ed8:	6863      	ldr	r3, [r4, #4]
 8007eda:	bf08      	it	eq
 8007edc:	f8c8 1000 	streq.w	r1, [r8]
 8007ee0:	5162      	str	r2, [r4, r5]
 8007ee2:	604b      	str	r3, [r1, #4]
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f104 060b 	add.w	r6, r4, #11
 8007eea:	f000 f829 	bl	8007f40 <__malloc_unlock>
 8007eee:	f026 0607 	bic.w	r6, r6, #7
 8007ef2:	1d23      	adds	r3, r4, #4
 8007ef4:	1af2      	subs	r2, r6, r3
 8007ef6:	d0ae      	beq.n	8007e56 <_malloc_r+0x22>
 8007ef8:	1b9b      	subs	r3, r3, r6
 8007efa:	50a3      	str	r3, [r4, r2]
 8007efc:	e7ab      	b.n	8007e56 <_malloc_r+0x22>
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	6862      	ldr	r2, [r4, #4]
 8007f02:	d1dd      	bne.n	8007ec0 <_malloc_r+0x8c>
 8007f04:	f8c8 2000 	str.w	r2, [r8]
 8007f08:	e7ec      	b.n	8007ee4 <_malloc_r+0xb0>
 8007f0a:	4623      	mov	r3, r4
 8007f0c:	6864      	ldr	r4, [r4, #4]
 8007f0e:	e7ac      	b.n	8007e6a <_malloc_r+0x36>
 8007f10:	4634      	mov	r4, r6
 8007f12:	6876      	ldr	r6, [r6, #4]
 8007f14:	e7b4      	b.n	8007e80 <_malloc_r+0x4c>
 8007f16:	4613      	mov	r3, r2
 8007f18:	e7cc      	b.n	8007eb4 <_malloc_r+0x80>
 8007f1a:	230c      	movs	r3, #12
 8007f1c:	603b      	str	r3, [r7, #0]
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f000 f80e 	bl	8007f40 <__malloc_unlock>
 8007f24:	e797      	b.n	8007e56 <_malloc_r+0x22>
 8007f26:	6025      	str	r5, [r4, #0]
 8007f28:	e7dc      	b.n	8007ee4 <_malloc_r+0xb0>
 8007f2a:	605b      	str	r3, [r3, #4]
 8007f2c:	deff      	udf	#255	; 0xff
 8007f2e:	bf00      	nop
 8007f30:	20000640 	.word	0x20000640

08007f34 <__malloc_lock>:
 8007f34:	4801      	ldr	r0, [pc, #4]	; (8007f3c <__malloc_lock+0x8>)
 8007f36:	f7ff b87e 	b.w	8007036 <__retarget_lock_acquire_recursive>
 8007f3a:	bf00      	nop
 8007f3c:	2000063c 	.word	0x2000063c

08007f40 <__malloc_unlock>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__malloc_unlock+0x8>)
 8007f42:	f7ff b879 	b.w	8007038 <__retarget_lock_release_recursive>
 8007f46:	bf00      	nop
 8007f48:	2000063c 	.word	0x2000063c

08007f4c <_Balloc>:
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	69c6      	ldr	r6, [r0, #28]
 8007f50:	4604      	mov	r4, r0
 8007f52:	460d      	mov	r5, r1
 8007f54:	b976      	cbnz	r6, 8007f74 <_Balloc+0x28>
 8007f56:	2010      	movs	r0, #16
 8007f58:	f7ff ff44 	bl	8007de4 <malloc>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	61e0      	str	r0, [r4, #28]
 8007f60:	b920      	cbnz	r0, 8007f6c <_Balloc+0x20>
 8007f62:	4b18      	ldr	r3, [pc, #96]	; (8007fc4 <_Balloc+0x78>)
 8007f64:	4818      	ldr	r0, [pc, #96]	; (8007fc8 <_Balloc+0x7c>)
 8007f66:	216b      	movs	r1, #107	; 0x6b
 8007f68:	f002 f922 	bl	800a1b0 <__assert_func>
 8007f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f70:	6006      	str	r6, [r0, #0]
 8007f72:	60c6      	str	r6, [r0, #12]
 8007f74:	69e6      	ldr	r6, [r4, #28]
 8007f76:	68f3      	ldr	r3, [r6, #12]
 8007f78:	b183      	cbz	r3, 8007f9c <_Balloc+0x50>
 8007f7a:	69e3      	ldr	r3, [r4, #28]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f82:	b9b8      	cbnz	r0, 8007fb4 <_Balloc+0x68>
 8007f84:	2101      	movs	r1, #1
 8007f86:	fa01 f605 	lsl.w	r6, r1, r5
 8007f8a:	1d72      	adds	r2, r6, #5
 8007f8c:	0092      	lsls	r2, r2, #2
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f002 f92c 	bl	800a1ec <_calloc_r>
 8007f94:	b160      	cbz	r0, 8007fb0 <_Balloc+0x64>
 8007f96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f9a:	e00e      	b.n	8007fba <_Balloc+0x6e>
 8007f9c:	2221      	movs	r2, #33	; 0x21
 8007f9e:	2104      	movs	r1, #4
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f002 f923 	bl	800a1ec <_calloc_r>
 8007fa6:	69e3      	ldr	r3, [r4, #28]
 8007fa8:	60f0      	str	r0, [r6, #12]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e4      	bne.n	8007f7a <_Balloc+0x2e>
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}
 8007fb4:	6802      	ldr	r2, [r0, #0]
 8007fb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fc0:	e7f7      	b.n	8007fb2 <_Balloc+0x66>
 8007fc2:	bf00      	nop
 8007fc4:	0800c6cc 	.word	0x0800c6cc
 8007fc8:	0800c74c 	.word	0x0800c74c

08007fcc <_Bfree>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	69c6      	ldr	r6, [r0, #28]
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	b976      	cbnz	r6, 8007ff4 <_Bfree+0x28>
 8007fd6:	2010      	movs	r0, #16
 8007fd8:	f7ff ff04 	bl	8007de4 <malloc>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	61e8      	str	r0, [r5, #28]
 8007fe0:	b920      	cbnz	r0, 8007fec <_Bfree+0x20>
 8007fe2:	4b09      	ldr	r3, [pc, #36]	; (8008008 <_Bfree+0x3c>)
 8007fe4:	4809      	ldr	r0, [pc, #36]	; (800800c <_Bfree+0x40>)
 8007fe6:	218f      	movs	r1, #143	; 0x8f
 8007fe8:	f002 f8e2 	bl	800a1b0 <__assert_func>
 8007fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ff0:	6006      	str	r6, [r0, #0]
 8007ff2:	60c6      	str	r6, [r0, #12]
 8007ff4:	b13c      	cbz	r4, 8008006 <_Bfree+0x3a>
 8007ff6:	69eb      	ldr	r3, [r5, #28]
 8007ff8:	6862      	ldr	r2, [r4, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008000:	6021      	str	r1, [r4, #0]
 8008002:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	0800c6cc 	.word	0x0800c6cc
 800800c:	0800c74c 	.word	0x0800c74c

08008010 <__multadd>:
 8008010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008014:	690d      	ldr	r5, [r1, #16]
 8008016:	4607      	mov	r7, r0
 8008018:	460c      	mov	r4, r1
 800801a:	461e      	mov	r6, r3
 800801c:	f101 0c14 	add.w	ip, r1, #20
 8008020:	2000      	movs	r0, #0
 8008022:	f8dc 3000 	ldr.w	r3, [ip]
 8008026:	b299      	uxth	r1, r3
 8008028:	fb02 6101 	mla	r1, r2, r1, r6
 800802c:	0c1e      	lsrs	r6, r3, #16
 800802e:	0c0b      	lsrs	r3, r1, #16
 8008030:	fb02 3306 	mla	r3, r2, r6, r3
 8008034:	b289      	uxth	r1, r1
 8008036:	3001      	adds	r0, #1
 8008038:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800803c:	4285      	cmp	r5, r0
 800803e:	f84c 1b04 	str.w	r1, [ip], #4
 8008042:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008046:	dcec      	bgt.n	8008022 <__multadd+0x12>
 8008048:	b30e      	cbz	r6, 800808e <__multadd+0x7e>
 800804a:	68a3      	ldr	r3, [r4, #8]
 800804c:	42ab      	cmp	r3, r5
 800804e:	dc19      	bgt.n	8008084 <__multadd+0x74>
 8008050:	6861      	ldr	r1, [r4, #4]
 8008052:	4638      	mov	r0, r7
 8008054:	3101      	adds	r1, #1
 8008056:	f7ff ff79 	bl	8007f4c <_Balloc>
 800805a:	4680      	mov	r8, r0
 800805c:	b928      	cbnz	r0, 800806a <__multadd+0x5a>
 800805e:	4602      	mov	r2, r0
 8008060:	4b0c      	ldr	r3, [pc, #48]	; (8008094 <__multadd+0x84>)
 8008062:	480d      	ldr	r0, [pc, #52]	; (8008098 <__multadd+0x88>)
 8008064:	21ba      	movs	r1, #186	; 0xba
 8008066:	f002 f8a3 	bl	800a1b0 <__assert_func>
 800806a:	6922      	ldr	r2, [r4, #16]
 800806c:	3202      	adds	r2, #2
 800806e:	f104 010c 	add.w	r1, r4, #12
 8008072:	0092      	lsls	r2, r2, #2
 8008074:	300c      	adds	r0, #12
 8008076:	f002 f883 	bl	800a180 <memcpy>
 800807a:	4621      	mov	r1, r4
 800807c:	4638      	mov	r0, r7
 800807e:	f7ff ffa5 	bl	8007fcc <_Bfree>
 8008082:	4644      	mov	r4, r8
 8008084:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008088:	3501      	adds	r5, #1
 800808a:	615e      	str	r6, [r3, #20]
 800808c:	6125      	str	r5, [r4, #16]
 800808e:	4620      	mov	r0, r4
 8008090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008094:	0800c73b 	.word	0x0800c73b
 8008098:	0800c74c 	.word	0x0800c74c

0800809c <__s2b>:
 800809c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a0:	460c      	mov	r4, r1
 80080a2:	4615      	mov	r5, r2
 80080a4:	461f      	mov	r7, r3
 80080a6:	2209      	movs	r2, #9
 80080a8:	3308      	adds	r3, #8
 80080aa:	4606      	mov	r6, r0
 80080ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80080b0:	2100      	movs	r1, #0
 80080b2:	2201      	movs	r2, #1
 80080b4:	429a      	cmp	r2, r3
 80080b6:	db09      	blt.n	80080cc <__s2b+0x30>
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7ff ff47 	bl	8007f4c <_Balloc>
 80080be:	b940      	cbnz	r0, 80080d2 <__s2b+0x36>
 80080c0:	4602      	mov	r2, r0
 80080c2:	4b19      	ldr	r3, [pc, #100]	; (8008128 <__s2b+0x8c>)
 80080c4:	4819      	ldr	r0, [pc, #100]	; (800812c <__s2b+0x90>)
 80080c6:	21d3      	movs	r1, #211	; 0xd3
 80080c8:	f002 f872 	bl	800a1b0 <__assert_func>
 80080cc:	0052      	lsls	r2, r2, #1
 80080ce:	3101      	adds	r1, #1
 80080d0:	e7f0      	b.n	80080b4 <__s2b+0x18>
 80080d2:	9b08      	ldr	r3, [sp, #32]
 80080d4:	6143      	str	r3, [r0, #20]
 80080d6:	2d09      	cmp	r5, #9
 80080d8:	f04f 0301 	mov.w	r3, #1
 80080dc:	6103      	str	r3, [r0, #16]
 80080de:	dd16      	ble.n	800810e <__s2b+0x72>
 80080e0:	f104 0909 	add.w	r9, r4, #9
 80080e4:	46c8      	mov	r8, r9
 80080e6:	442c      	add	r4, r5
 80080e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080ec:	4601      	mov	r1, r0
 80080ee:	3b30      	subs	r3, #48	; 0x30
 80080f0:	220a      	movs	r2, #10
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7ff ff8c 	bl	8008010 <__multadd>
 80080f8:	45a0      	cmp	r8, r4
 80080fa:	d1f5      	bne.n	80080e8 <__s2b+0x4c>
 80080fc:	f1a5 0408 	sub.w	r4, r5, #8
 8008100:	444c      	add	r4, r9
 8008102:	1b2d      	subs	r5, r5, r4
 8008104:	1963      	adds	r3, r4, r5
 8008106:	42bb      	cmp	r3, r7
 8008108:	db04      	blt.n	8008114 <__s2b+0x78>
 800810a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810e:	340a      	adds	r4, #10
 8008110:	2509      	movs	r5, #9
 8008112:	e7f6      	b.n	8008102 <__s2b+0x66>
 8008114:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008118:	4601      	mov	r1, r0
 800811a:	3b30      	subs	r3, #48	; 0x30
 800811c:	220a      	movs	r2, #10
 800811e:	4630      	mov	r0, r6
 8008120:	f7ff ff76 	bl	8008010 <__multadd>
 8008124:	e7ee      	b.n	8008104 <__s2b+0x68>
 8008126:	bf00      	nop
 8008128:	0800c73b 	.word	0x0800c73b
 800812c:	0800c74c 	.word	0x0800c74c

08008130 <__hi0bits>:
 8008130:	0c03      	lsrs	r3, r0, #16
 8008132:	041b      	lsls	r3, r3, #16
 8008134:	b9d3      	cbnz	r3, 800816c <__hi0bits+0x3c>
 8008136:	0400      	lsls	r0, r0, #16
 8008138:	2310      	movs	r3, #16
 800813a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800813e:	bf04      	itt	eq
 8008140:	0200      	lsleq	r0, r0, #8
 8008142:	3308      	addeq	r3, #8
 8008144:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008148:	bf04      	itt	eq
 800814a:	0100      	lsleq	r0, r0, #4
 800814c:	3304      	addeq	r3, #4
 800814e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008152:	bf04      	itt	eq
 8008154:	0080      	lsleq	r0, r0, #2
 8008156:	3302      	addeq	r3, #2
 8008158:	2800      	cmp	r0, #0
 800815a:	db05      	blt.n	8008168 <__hi0bits+0x38>
 800815c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008160:	f103 0301 	add.w	r3, r3, #1
 8008164:	bf08      	it	eq
 8008166:	2320      	moveq	r3, #32
 8008168:	4618      	mov	r0, r3
 800816a:	4770      	bx	lr
 800816c:	2300      	movs	r3, #0
 800816e:	e7e4      	b.n	800813a <__hi0bits+0xa>

08008170 <__lo0bits>:
 8008170:	6803      	ldr	r3, [r0, #0]
 8008172:	f013 0207 	ands.w	r2, r3, #7
 8008176:	d00c      	beq.n	8008192 <__lo0bits+0x22>
 8008178:	07d9      	lsls	r1, r3, #31
 800817a:	d422      	bmi.n	80081c2 <__lo0bits+0x52>
 800817c:	079a      	lsls	r2, r3, #30
 800817e:	bf49      	itett	mi
 8008180:	085b      	lsrmi	r3, r3, #1
 8008182:	089b      	lsrpl	r3, r3, #2
 8008184:	6003      	strmi	r3, [r0, #0]
 8008186:	2201      	movmi	r2, #1
 8008188:	bf5c      	itt	pl
 800818a:	6003      	strpl	r3, [r0, #0]
 800818c:	2202      	movpl	r2, #2
 800818e:	4610      	mov	r0, r2
 8008190:	4770      	bx	lr
 8008192:	b299      	uxth	r1, r3
 8008194:	b909      	cbnz	r1, 800819a <__lo0bits+0x2a>
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	2210      	movs	r2, #16
 800819a:	b2d9      	uxtb	r1, r3
 800819c:	b909      	cbnz	r1, 80081a2 <__lo0bits+0x32>
 800819e:	3208      	adds	r2, #8
 80081a0:	0a1b      	lsrs	r3, r3, #8
 80081a2:	0719      	lsls	r1, r3, #28
 80081a4:	bf04      	itt	eq
 80081a6:	091b      	lsreq	r3, r3, #4
 80081a8:	3204      	addeq	r2, #4
 80081aa:	0799      	lsls	r1, r3, #30
 80081ac:	bf04      	itt	eq
 80081ae:	089b      	lsreq	r3, r3, #2
 80081b0:	3202      	addeq	r2, #2
 80081b2:	07d9      	lsls	r1, r3, #31
 80081b4:	d403      	bmi.n	80081be <__lo0bits+0x4e>
 80081b6:	085b      	lsrs	r3, r3, #1
 80081b8:	f102 0201 	add.w	r2, r2, #1
 80081bc:	d003      	beq.n	80081c6 <__lo0bits+0x56>
 80081be:	6003      	str	r3, [r0, #0]
 80081c0:	e7e5      	b.n	800818e <__lo0bits+0x1e>
 80081c2:	2200      	movs	r2, #0
 80081c4:	e7e3      	b.n	800818e <__lo0bits+0x1e>
 80081c6:	2220      	movs	r2, #32
 80081c8:	e7e1      	b.n	800818e <__lo0bits+0x1e>
	...

080081cc <__i2b>:
 80081cc:	b510      	push	{r4, lr}
 80081ce:	460c      	mov	r4, r1
 80081d0:	2101      	movs	r1, #1
 80081d2:	f7ff febb 	bl	8007f4c <_Balloc>
 80081d6:	4602      	mov	r2, r0
 80081d8:	b928      	cbnz	r0, 80081e6 <__i2b+0x1a>
 80081da:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <__i2b+0x24>)
 80081dc:	4805      	ldr	r0, [pc, #20]	; (80081f4 <__i2b+0x28>)
 80081de:	f240 1145 	movw	r1, #325	; 0x145
 80081e2:	f001 ffe5 	bl	800a1b0 <__assert_func>
 80081e6:	2301      	movs	r3, #1
 80081e8:	6144      	str	r4, [r0, #20]
 80081ea:	6103      	str	r3, [r0, #16]
 80081ec:	bd10      	pop	{r4, pc}
 80081ee:	bf00      	nop
 80081f0:	0800c73b 	.word	0x0800c73b
 80081f4:	0800c74c 	.word	0x0800c74c

080081f8 <__multiply>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	4691      	mov	r9, r2
 80081fe:	690a      	ldr	r2, [r1, #16]
 8008200:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008204:	429a      	cmp	r2, r3
 8008206:	bfb8      	it	lt
 8008208:	460b      	movlt	r3, r1
 800820a:	460c      	mov	r4, r1
 800820c:	bfbc      	itt	lt
 800820e:	464c      	movlt	r4, r9
 8008210:	4699      	movlt	r9, r3
 8008212:	6927      	ldr	r7, [r4, #16]
 8008214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008218:	68a3      	ldr	r3, [r4, #8]
 800821a:	6861      	ldr	r1, [r4, #4]
 800821c:	eb07 060a 	add.w	r6, r7, sl
 8008220:	42b3      	cmp	r3, r6
 8008222:	b085      	sub	sp, #20
 8008224:	bfb8      	it	lt
 8008226:	3101      	addlt	r1, #1
 8008228:	f7ff fe90 	bl	8007f4c <_Balloc>
 800822c:	b930      	cbnz	r0, 800823c <__multiply+0x44>
 800822e:	4602      	mov	r2, r0
 8008230:	4b44      	ldr	r3, [pc, #272]	; (8008344 <__multiply+0x14c>)
 8008232:	4845      	ldr	r0, [pc, #276]	; (8008348 <__multiply+0x150>)
 8008234:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008238:	f001 ffba 	bl	800a1b0 <__assert_func>
 800823c:	f100 0514 	add.w	r5, r0, #20
 8008240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008244:	462b      	mov	r3, r5
 8008246:	2200      	movs	r2, #0
 8008248:	4543      	cmp	r3, r8
 800824a:	d321      	bcc.n	8008290 <__multiply+0x98>
 800824c:	f104 0314 	add.w	r3, r4, #20
 8008250:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008254:	f109 0314 	add.w	r3, r9, #20
 8008258:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800825c:	9202      	str	r2, [sp, #8]
 800825e:	1b3a      	subs	r2, r7, r4
 8008260:	3a15      	subs	r2, #21
 8008262:	f022 0203 	bic.w	r2, r2, #3
 8008266:	3204      	adds	r2, #4
 8008268:	f104 0115 	add.w	r1, r4, #21
 800826c:	428f      	cmp	r7, r1
 800826e:	bf38      	it	cc
 8008270:	2204      	movcc	r2, #4
 8008272:	9201      	str	r2, [sp, #4]
 8008274:	9a02      	ldr	r2, [sp, #8]
 8008276:	9303      	str	r3, [sp, #12]
 8008278:	429a      	cmp	r2, r3
 800827a:	d80c      	bhi.n	8008296 <__multiply+0x9e>
 800827c:	2e00      	cmp	r6, #0
 800827e:	dd03      	ble.n	8008288 <__multiply+0x90>
 8008280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008284:	2b00      	cmp	r3, #0
 8008286:	d05b      	beq.n	8008340 <__multiply+0x148>
 8008288:	6106      	str	r6, [r0, #16]
 800828a:	b005      	add	sp, #20
 800828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008290:	f843 2b04 	str.w	r2, [r3], #4
 8008294:	e7d8      	b.n	8008248 <__multiply+0x50>
 8008296:	f8b3 a000 	ldrh.w	sl, [r3]
 800829a:	f1ba 0f00 	cmp.w	sl, #0
 800829e:	d024      	beq.n	80082ea <__multiply+0xf2>
 80082a0:	f104 0e14 	add.w	lr, r4, #20
 80082a4:	46a9      	mov	r9, r5
 80082a6:	f04f 0c00 	mov.w	ip, #0
 80082aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80082ae:	f8d9 1000 	ldr.w	r1, [r9]
 80082b2:	fa1f fb82 	uxth.w	fp, r2
 80082b6:	b289      	uxth	r1, r1
 80082b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80082bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80082c0:	f8d9 2000 	ldr.w	r2, [r9]
 80082c4:	4461      	add	r1, ip
 80082c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80082ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082d2:	b289      	uxth	r1, r1
 80082d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082d8:	4577      	cmp	r7, lr
 80082da:	f849 1b04 	str.w	r1, [r9], #4
 80082de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082e2:	d8e2      	bhi.n	80082aa <__multiply+0xb2>
 80082e4:	9a01      	ldr	r2, [sp, #4]
 80082e6:	f845 c002 	str.w	ip, [r5, r2]
 80082ea:	9a03      	ldr	r2, [sp, #12]
 80082ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082f0:	3304      	adds	r3, #4
 80082f2:	f1b9 0f00 	cmp.w	r9, #0
 80082f6:	d021      	beq.n	800833c <__multiply+0x144>
 80082f8:	6829      	ldr	r1, [r5, #0]
 80082fa:	f104 0c14 	add.w	ip, r4, #20
 80082fe:	46ae      	mov	lr, r5
 8008300:	f04f 0a00 	mov.w	sl, #0
 8008304:	f8bc b000 	ldrh.w	fp, [ip]
 8008308:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800830c:	fb09 220b 	mla	r2, r9, fp, r2
 8008310:	4452      	add	r2, sl
 8008312:	b289      	uxth	r1, r1
 8008314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008318:	f84e 1b04 	str.w	r1, [lr], #4
 800831c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008320:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008324:	f8be 1000 	ldrh.w	r1, [lr]
 8008328:	fb09 110a 	mla	r1, r9, sl, r1
 800832c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008330:	4567      	cmp	r7, ip
 8008332:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008336:	d8e5      	bhi.n	8008304 <__multiply+0x10c>
 8008338:	9a01      	ldr	r2, [sp, #4]
 800833a:	50a9      	str	r1, [r5, r2]
 800833c:	3504      	adds	r5, #4
 800833e:	e799      	b.n	8008274 <__multiply+0x7c>
 8008340:	3e01      	subs	r6, #1
 8008342:	e79b      	b.n	800827c <__multiply+0x84>
 8008344:	0800c73b 	.word	0x0800c73b
 8008348:	0800c74c 	.word	0x0800c74c

0800834c <__pow5mult>:
 800834c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008350:	4615      	mov	r5, r2
 8008352:	f012 0203 	ands.w	r2, r2, #3
 8008356:	4606      	mov	r6, r0
 8008358:	460f      	mov	r7, r1
 800835a:	d007      	beq.n	800836c <__pow5mult+0x20>
 800835c:	4c25      	ldr	r4, [pc, #148]	; (80083f4 <__pow5mult+0xa8>)
 800835e:	3a01      	subs	r2, #1
 8008360:	2300      	movs	r3, #0
 8008362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008366:	f7ff fe53 	bl	8008010 <__multadd>
 800836a:	4607      	mov	r7, r0
 800836c:	10ad      	asrs	r5, r5, #2
 800836e:	d03d      	beq.n	80083ec <__pow5mult+0xa0>
 8008370:	69f4      	ldr	r4, [r6, #28]
 8008372:	b97c      	cbnz	r4, 8008394 <__pow5mult+0x48>
 8008374:	2010      	movs	r0, #16
 8008376:	f7ff fd35 	bl	8007de4 <malloc>
 800837a:	4602      	mov	r2, r0
 800837c:	61f0      	str	r0, [r6, #28]
 800837e:	b928      	cbnz	r0, 800838c <__pow5mult+0x40>
 8008380:	4b1d      	ldr	r3, [pc, #116]	; (80083f8 <__pow5mult+0xac>)
 8008382:	481e      	ldr	r0, [pc, #120]	; (80083fc <__pow5mult+0xb0>)
 8008384:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008388:	f001 ff12 	bl	800a1b0 <__assert_func>
 800838c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008390:	6004      	str	r4, [r0, #0]
 8008392:	60c4      	str	r4, [r0, #12]
 8008394:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800839c:	b94c      	cbnz	r4, 80083b2 <__pow5mult+0x66>
 800839e:	f240 2171 	movw	r1, #625	; 0x271
 80083a2:	4630      	mov	r0, r6
 80083a4:	f7ff ff12 	bl	80081cc <__i2b>
 80083a8:	2300      	movs	r3, #0
 80083aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80083ae:	4604      	mov	r4, r0
 80083b0:	6003      	str	r3, [r0, #0]
 80083b2:	f04f 0900 	mov.w	r9, #0
 80083b6:	07eb      	lsls	r3, r5, #31
 80083b8:	d50a      	bpl.n	80083d0 <__pow5mult+0x84>
 80083ba:	4639      	mov	r1, r7
 80083bc:	4622      	mov	r2, r4
 80083be:	4630      	mov	r0, r6
 80083c0:	f7ff ff1a 	bl	80081f8 <__multiply>
 80083c4:	4639      	mov	r1, r7
 80083c6:	4680      	mov	r8, r0
 80083c8:	4630      	mov	r0, r6
 80083ca:	f7ff fdff 	bl	8007fcc <_Bfree>
 80083ce:	4647      	mov	r7, r8
 80083d0:	106d      	asrs	r5, r5, #1
 80083d2:	d00b      	beq.n	80083ec <__pow5mult+0xa0>
 80083d4:	6820      	ldr	r0, [r4, #0]
 80083d6:	b938      	cbnz	r0, 80083e8 <__pow5mult+0x9c>
 80083d8:	4622      	mov	r2, r4
 80083da:	4621      	mov	r1, r4
 80083dc:	4630      	mov	r0, r6
 80083de:	f7ff ff0b 	bl	80081f8 <__multiply>
 80083e2:	6020      	str	r0, [r4, #0]
 80083e4:	f8c0 9000 	str.w	r9, [r0]
 80083e8:	4604      	mov	r4, r0
 80083ea:	e7e4      	b.n	80083b6 <__pow5mult+0x6a>
 80083ec:	4638      	mov	r0, r7
 80083ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f2:	bf00      	nop
 80083f4:	0800c898 	.word	0x0800c898
 80083f8:	0800c6cc 	.word	0x0800c6cc
 80083fc:	0800c74c 	.word	0x0800c74c

08008400 <__lshift>:
 8008400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008404:	460c      	mov	r4, r1
 8008406:	6849      	ldr	r1, [r1, #4]
 8008408:	6923      	ldr	r3, [r4, #16]
 800840a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800840e:	68a3      	ldr	r3, [r4, #8]
 8008410:	4607      	mov	r7, r0
 8008412:	4691      	mov	r9, r2
 8008414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008418:	f108 0601 	add.w	r6, r8, #1
 800841c:	42b3      	cmp	r3, r6
 800841e:	db0b      	blt.n	8008438 <__lshift+0x38>
 8008420:	4638      	mov	r0, r7
 8008422:	f7ff fd93 	bl	8007f4c <_Balloc>
 8008426:	4605      	mov	r5, r0
 8008428:	b948      	cbnz	r0, 800843e <__lshift+0x3e>
 800842a:	4602      	mov	r2, r0
 800842c:	4b28      	ldr	r3, [pc, #160]	; (80084d0 <__lshift+0xd0>)
 800842e:	4829      	ldr	r0, [pc, #164]	; (80084d4 <__lshift+0xd4>)
 8008430:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008434:	f001 febc 	bl	800a1b0 <__assert_func>
 8008438:	3101      	adds	r1, #1
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	e7ee      	b.n	800841c <__lshift+0x1c>
 800843e:	2300      	movs	r3, #0
 8008440:	f100 0114 	add.w	r1, r0, #20
 8008444:	f100 0210 	add.w	r2, r0, #16
 8008448:	4618      	mov	r0, r3
 800844a:	4553      	cmp	r3, sl
 800844c:	db33      	blt.n	80084b6 <__lshift+0xb6>
 800844e:	6920      	ldr	r0, [r4, #16]
 8008450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008454:	f104 0314 	add.w	r3, r4, #20
 8008458:	f019 091f 	ands.w	r9, r9, #31
 800845c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008464:	d02b      	beq.n	80084be <__lshift+0xbe>
 8008466:	f1c9 0e20 	rsb	lr, r9, #32
 800846a:	468a      	mov	sl, r1
 800846c:	2200      	movs	r2, #0
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	fa00 f009 	lsl.w	r0, r0, r9
 8008474:	4310      	orrs	r0, r2
 8008476:	f84a 0b04 	str.w	r0, [sl], #4
 800847a:	f853 2b04 	ldr.w	r2, [r3], #4
 800847e:	459c      	cmp	ip, r3
 8008480:	fa22 f20e 	lsr.w	r2, r2, lr
 8008484:	d8f3      	bhi.n	800846e <__lshift+0x6e>
 8008486:	ebac 0304 	sub.w	r3, ip, r4
 800848a:	3b15      	subs	r3, #21
 800848c:	f023 0303 	bic.w	r3, r3, #3
 8008490:	3304      	adds	r3, #4
 8008492:	f104 0015 	add.w	r0, r4, #21
 8008496:	4584      	cmp	ip, r0
 8008498:	bf38      	it	cc
 800849a:	2304      	movcc	r3, #4
 800849c:	50ca      	str	r2, [r1, r3]
 800849e:	b10a      	cbz	r2, 80084a4 <__lshift+0xa4>
 80084a0:	f108 0602 	add.w	r6, r8, #2
 80084a4:	3e01      	subs	r6, #1
 80084a6:	4638      	mov	r0, r7
 80084a8:	612e      	str	r6, [r5, #16]
 80084aa:	4621      	mov	r1, r4
 80084ac:	f7ff fd8e 	bl	8007fcc <_Bfree>
 80084b0:	4628      	mov	r0, r5
 80084b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80084ba:	3301      	adds	r3, #1
 80084bc:	e7c5      	b.n	800844a <__lshift+0x4a>
 80084be:	3904      	subs	r1, #4
 80084c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80084c8:	459c      	cmp	ip, r3
 80084ca:	d8f9      	bhi.n	80084c0 <__lshift+0xc0>
 80084cc:	e7ea      	b.n	80084a4 <__lshift+0xa4>
 80084ce:	bf00      	nop
 80084d0:	0800c73b 	.word	0x0800c73b
 80084d4:	0800c74c 	.word	0x0800c74c

080084d8 <__mcmp>:
 80084d8:	b530      	push	{r4, r5, lr}
 80084da:	6902      	ldr	r2, [r0, #16]
 80084dc:	690c      	ldr	r4, [r1, #16]
 80084de:	1b12      	subs	r2, r2, r4
 80084e0:	d10e      	bne.n	8008500 <__mcmp+0x28>
 80084e2:	f100 0314 	add.w	r3, r0, #20
 80084e6:	3114      	adds	r1, #20
 80084e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084f8:	42a5      	cmp	r5, r4
 80084fa:	d003      	beq.n	8008504 <__mcmp+0x2c>
 80084fc:	d305      	bcc.n	800850a <__mcmp+0x32>
 80084fe:	2201      	movs	r2, #1
 8008500:	4610      	mov	r0, r2
 8008502:	bd30      	pop	{r4, r5, pc}
 8008504:	4283      	cmp	r3, r0
 8008506:	d3f3      	bcc.n	80084f0 <__mcmp+0x18>
 8008508:	e7fa      	b.n	8008500 <__mcmp+0x28>
 800850a:	f04f 32ff 	mov.w	r2, #4294967295
 800850e:	e7f7      	b.n	8008500 <__mcmp+0x28>

08008510 <__mdiff>:
 8008510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	460c      	mov	r4, r1
 8008516:	4606      	mov	r6, r0
 8008518:	4611      	mov	r1, r2
 800851a:	4620      	mov	r0, r4
 800851c:	4690      	mov	r8, r2
 800851e:	f7ff ffdb 	bl	80084d8 <__mcmp>
 8008522:	1e05      	subs	r5, r0, #0
 8008524:	d110      	bne.n	8008548 <__mdiff+0x38>
 8008526:	4629      	mov	r1, r5
 8008528:	4630      	mov	r0, r6
 800852a:	f7ff fd0f 	bl	8007f4c <_Balloc>
 800852e:	b930      	cbnz	r0, 800853e <__mdiff+0x2e>
 8008530:	4b3a      	ldr	r3, [pc, #232]	; (800861c <__mdiff+0x10c>)
 8008532:	4602      	mov	r2, r0
 8008534:	f240 2137 	movw	r1, #567	; 0x237
 8008538:	4839      	ldr	r0, [pc, #228]	; (8008620 <__mdiff+0x110>)
 800853a:	f001 fe39 	bl	800a1b0 <__assert_func>
 800853e:	2301      	movs	r3, #1
 8008540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008548:	bfa4      	itt	ge
 800854a:	4643      	movge	r3, r8
 800854c:	46a0      	movge	r8, r4
 800854e:	4630      	mov	r0, r6
 8008550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008554:	bfa6      	itte	ge
 8008556:	461c      	movge	r4, r3
 8008558:	2500      	movge	r5, #0
 800855a:	2501      	movlt	r5, #1
 800855c:	f7ff fcf6 	bl	8007f4c <_Balloc>
 8008560:	b920      	cbnz	r0, 800856c <__mdiff+0x5c>
 8008562:	4b2e      	ldr	r3, [pc, #184]	; (800861c <__mdiff+0x10c>)
 8008564:	4602      	mov	r2, r0
 8008566:	f240 2145 	movw	r1, #581	; 0x245
 800856a:	e7e5      	b.n	8008538 <__mdiff+0x28>
 800856c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008570:	6926      	ldr	r6, [r4, #16]
 8008572:	60c5      	str	r5, [r0, #12]
 8008574:	f104 0914 	add.w	r9, r4, #20
 8008578:	f108 0514 	add.w	r5, r8, #20
 800857c:	f100 0e14 	add.w	lr, r0, #20
 8008580:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008584:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008588:	f108 0210 	add.w	r2, r8, #16
 800858c:	46f2      	mov	sl, lr
 800858e:	2100      	movs	r1, #0
 8008590:	f859 3b04 	ldr.w	r3, [r9], #4
 8008594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008598:	fa11 f88b 	uxtah	r8, r1, fp
 800859c:	b299      	uxth	r1, r3
 800859e:	0c1b      	lsrs	r3, r3, #16
 80085a0:	eba8 0801 	sub.w	r8, r8, r1
 80085a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085ac:	fa1f f888 	uxth.w	r8, r8
 80085b0:	1419      	asrs	r1, r3, #16
 80085b2:	454e      	cmp	r6, r9
 80085b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085b8:	f84a 3b04 	str.w	r3, [sl], #4
 80085bc:	d8e8      	bhi.n	8008590 <__mdiff+0x80>
 80085be:	1b33      	subs	r3, r6, r4
 80085c0:	3b15      	subs	r3, #21
 80085c2:	f023 0303 	bic.w	r3, r3, #3
 80085c6:	3304      	adds	r3, #4
 80085c8:	3415      	adds	r4, #21
 80085ca:	42a6      	cmp	r6, r4
 80085cc:	bf38      	it	cc
 80085ce:	2304      	movcc	r3, #4
 80085d0:	441d      	add	r5, r3
 80085d2:	4473      	add	r3, lr
 80085d4:	469e      	mov	lr, r3
 80085d6:	462e      	mov	r6, r5
 80085d8:	4566      	cmp	r6, ip
 80085da:	d30e      	bcc.n	80085fa <__mdiff+0xea>
 80085dc:	f10c 0203 	add.w	r2, ip, #3
 80085e0:	1b52      	subs	r2, r2, r5
 80085e2:	f022 0203 	bic.w	r2, r2, #3
 80085e6:	3d03      	subs	r5, #3
 80085e8:	45ac      	cmp	ip, r5
 80085ea:	bf38      	it	cc
 80085ec:	2200      	movcc	r2, #0
 80085ee:	4413      	add	r3, r2
 80085f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80085f4:	b17a      	cbz	r2, 8008616 <__mdiff+0x106>
 80085f6:	6107      	str	r7, [r0, #16]
 80085f8:	e7a4      	b.n	8008544 <__mdiff+0x34>
 80085fa:	f856 8b04 	ldr.w	r8, [r6], #4
 80085fe:	fa11 f288 	uxtah	r2, r1, r8
 8008602:	1414      	asrs	r4, r2, #16
 8008604:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008608:	b292      	uxth	r2, r2
 800860a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800860e:	f84e 2b04 	str.w	r2, [lr], #4
 8008612:	1421      	asrs	r1, r4, #16
 8008614:	e7e0      	b.n	80085d8 <__mdiff+0xc8>
 8008616:	3f01      	subs	r7, #1
 8008618:	e7ea      	b.n	80085f0 <__mdiff+0xe0>
 800861a:	bf00      	nop
 800861c:	0800c73b 	.word	0x0800c73b
 8008620:	0800c74c 	.word	0x0800c74c

08008624 <__ulp>:
 8008624:	b082      	sub	sp, #8
 8008626:	ed8d 0b00 	vstr	d0, [sp]
 800862a:	9a01      	ldr	r2, [sp, #4]
 800862c:	4b0f      	ldr	r3, [pc, #60]	; (800866c <__ulp+0x48>)
 800862e:	4013      	ands	r3, r2
 8008630:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008634:	2b00      	cmp	r3, #0
 8008636:	dc08      	bgt.n	800864a <__ulp+0x26>
 8008638:	425b      	negs	r3, r3
 800863a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800863e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008642:	da04      	bge.n	800864e <__ulp+0x2a>
 8008644:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008648:	4113      	asrs	r3, r2
 800864a:	2200      	movs	r2, #0
 800864c:	e008      	b.n	8008660 <__ulp+0x3c>
 800864e:	f1a2 0314 	sub.w	r3, r2, #20
 8008652:	2b1e      	cmp	r3, #30
 8008654:	bfda      	itte	le
 8008656:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800865a:	40da      	lsrle	r2, r3
 800865c:	2201      	movgt	r2, #1
 800865e:	2300      	movs	r3, #0
 8008660:	4619      	mov	r1, r3
 8008662:	4610      	mov	r0, r2
 8008664:	ec41 0b10 	vmov	d0, r0, r1
 8008668:	b002      	add	sp, #8
 800866a:	4770      	bx	lr
 800866c:	7ff00000 	.word	0x7ff00000

08008670 <__b2d>:
 8008670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008674:	6906      	ldr	r6, [r0, #16]
 8008676:	f100 0814 	add.w	r8, r0, #20
 800867a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800867e:	1f37      	subs	r7, r6, #4
 8008680:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008684:	4610      	mov	r0, r2
 8008686:	f7ff fd53 	bl	8008130 <__hi0bits>
 800868a:	f1c0 0320 	rsb	r3, r0, #32
 800868e:	280a      	cmp	r0, #10
 8008690:	600b      	str	r3, [r1, #0]
 8008692:	491b      	ldr	r1, [pc, #108]	; (8008700 <__b2d+0x90>)
 8008694:	dc15      	bgt.n	80086c2 <__b2d+0x52>
 8008696:	f1c0 0c0b 	rsb	ip, r0, #11
 800869a:	fa22 f30c 	lsr.w	r3, r2, ip
 800869e:	45b8      	cmp	r8, r7
 80086a0:	ea43 0501 	orr.w	r5, r3, r1
 80086a4:	bf34      	ite	cc
 80086a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086aa:	2300      	movcs	r3, #0
 80086ac:	3015      	adds	r0, #21
 80086ae:	fa02 f000 	lsl.w	r0, r2, r0
 80086b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80086b6:	4303      	orrs	r3, r0
 80086b8:	461c      	mov	r4, r3
 80086ba:	ec45 4b10 	vmov	d0, r4, r5
 80086be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c2:	45b8      	cmp	r8, r7
 80086c4:	bf3a      	itte	cc
 80086c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80086ce:	2300      	movcs	r3, #0
 80086d0:	380b      	subs	r0, #11
 80086d2:	d012      	beq.n	80086fa <__b2d+0x8a>
 80086d4:	f1c0 0120 	rsb	r1, r0, #32
 80086d8:	fa23 f401 	lsr.w	r4, r3, r1
 80086dc:	4082      	lsls	r2, r0
 80086de:	4322      	orrs	r2, r4
 80086e0:	4547      	cmp	r7, r8
 80086e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80086e6:	bf8c      	ite	hi
 80086e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80086ec:	2200      	movls	r2, #0
 80086ee:	4083      	lsls	r3, r0
 80086f0:	40ca      	lsrs	r2, r1
 80086f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80086f6:	4313      	orrs	r3, r2
 80086f8:	e7de      	b.n	80086b8 <__b2d+0x48>
 80086fa:	ea42 0501 	orr.w	r5, r2, r1
 80086fe:	e7db      	b.n	80086b8 <__b2d+0x48>
 8008700:	3ff00000 	.word	0x3ff00000

08008704 <__d2b>:
 8008704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008708:	460f      	mov	r7, r1
 800870a:	2101      	movs	r1, #1
 800870c:	ec59 8b10 	vmov	r8, r9, d0
 8008710:	4616      	mov	r6, r2
 8008712:	f7ff fc1b 	bl	8007f4c <_Balloc>
 8008716:	4604      	mov	r4, r0
 8008718:	b930      	cbnz	r0, 8008728 <__d2b+0x24>
 800871a:	4602      	mov	r2, r0
 800871c:	4b24      	ldr	r3, [pc, #144]	; (80087b0 <__d2b+0xac>)
 800871e:	4825      	ldr	r0, [pc, #148]	; (80087b4 <__d2b+0xb0>)
 8008720:	f240 310f 	movw	r1, #783	; 0x30f
 8008724:	f001 fd44 	bl	800a1b0 <__assert_func>
 8008728:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800872c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008730:	bb2d      	cbnz	r5, 800877e <__d2b+0x7a>
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	f1b8 0300 	subs.w	r3, r8, #0
 8008738:	d026      	beq.n	8008788 <__d2b+0x84>
 800873a:	4668      	mov	r0, sp
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	f7ff fd17 	bl	8008170 <__lo0bits>
 8008742:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008746:	b1e8      	cbz	r0, 8008784 <__d2b+0x80>
 8008748:	f1c0 0320 	rsb	r3, r0, #32
 800874c:	fa02 f303 	lsl.w	r3, r2, r3
 8008750:	430b      	orrs	r3, r1
 8008752:	40c2      	lsrs	r2, r0
 8008754:	6163      	str	r3, [r4, #20]
 8008756:	9201      	str	r2, [sp, #4]
 8008758:	9b01      	ldr	r3, [sp, #4]
 800875a:	61a3      	str	r3, [r4, #24]
 800875c:	2b00      	cmp	r3, #0
 800875e:	bf14      	ite	ne
 8008760:	2202      	movne	r2, #2
 8008762:	2201      	moveq	r2, #1
 8008764:	6122      	str	r2, [r4, #16]
 8008766:	b1bd      	cbz	r5, 8008798 <__d2b+0x94>
 8008768:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800876c:	4405      	add	r5, r0
 800876e:	603d      	str	r5, [r7, #0]
 8008770:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008774:	6030      	str	r0, [r6, #0]
 8008776:	4620      	mov	r0, r4
 8008778:	b003      	add	sp, #12
 800877a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800877e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008782:	e7d6      	b.n	8008732 <__d2b+0x2e>
 8008784:	6161      	str	r1, [r4, #20]
 8008786:	e7e7      	b.n	8008758 <__d2b+0x54>
 8008788:	a801      	add	r0, sp, #4
 800878a:	f7ff fcf1 	bl	8008170 <__lo0bits>
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	6163      	str	r3, [r4, #20]
 8008792:	3020      	adds	r0, #32
 8008794:	2201      	movs	r2, #1
 8008796:	e7e5      	b.n	8008764 <__d2b+0x60>
 8008798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800879c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087a0:	6038      	str	r0, [r7, #0]
 80087a2:	6918      	ldr	r0, [r3, #16]
 80087a4:	f7ff fcc4 	bl	8008130 <__hi0bits>
 80087a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087ac:	e7e2      	b.n	8008774 <__d2b+0x70>
 80087ae:	bf00      	nop
 80087b0:	0800c73b 	.word	0x0800c73b
 80087b4:	0800c74c 	.word	0x0800c74c

080087b8 <__ratio>:
 80087b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	4688      	mov	r8, r1
 80087be:	4669      	mov	r1, sp
 80087c0:	4681      	mov	r9, r0
 80087c2:	f7ff ff55 	bl	8008670 <__b2d>
 80087c6:	a901      	add	r1, sp, #4
 80087c8:	4640      	mov	r0, r8
 80087ca:	ec55 4b10 	vmov	r4, r5, d0
 80087ce:	f7ff ff4f 	bl	8008670 <__b2d>
 80087d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80087da:	eba3 0c02 	sub.w	ip, r3, r2
 80087de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087e2:	1a9b      	subs	r3, r3, r2
 80087e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80087e8:	ec51 0b10 	vmov	r0, r1, d0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bfd6      	itet	le
 80087f0:	460a      	movle	r2, r1
 80087f2:	462a      	movgt	r2, r5
 80087f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087f8:	468b      	mov	fp, r1
 80087fa:	462f      	mov	r7, r5
 80087fc:	bfd4      	ite	le
 80087fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008802:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008806:	4620      	mov	r0, r4
 8008808:	ee10 2a10 	vmov	r2, s0
 800880c:	465b      	mov	r3, fp
 800880e:	4639      	mov	r1, r7
 8008810:	f7f8 f834 	bl	800087c <__aeabi_ddiv>
 8008814:	ec41 0b10 	vmov	d0, r0, r1
 8008818:	b003      	add	sp, #12
 800881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800881e <__copybits>:
 800881e:	3901      	subs	r1, #1
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	1149      	asrs	r1, r1, #5
 8008824:	6914      	ldr	r4, [r2, #16]
 8008826:	3101      	adds	r1, #1
 8008828:	f102 0314 	add.w	r3, r2, #20
 800882c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008830:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008834:	1f05      	subs	r5, r0, #4
 8008836:	42a3      	cmp	r3, r4
 8008838:	d30c      	bcc.n	8008854 <__copybits+0x36>
 800883a:	1aa3      	subs	r3, r4, r2
 800883c:	3b11      	subs	r3, #17
 800883e:	f023 0303 	bic.w	r3, r3, #3
 8008842:	3211      	adds	r2, #17
 8008844:	42a2      	cmp	r2, r4
 8008846:	bf88      	it	hi
 8008848:	2300      	movhi	r3, #0
 800884a:	4418      	add	r0, r3
 800884c:	2300      	movs	r3, #0
 800884e:	4288      	cmp	r0, r1
 8008850:	d305      	bcc.n	800885e <__copybits+0x40>
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	f853 6b04 	ldr.w	r6, [r3], #4
 8008858:	f845 6f04 	str.w	r6, [r5, #4]!
 800885c:	e7eb      	b.n	8008836 <__copybits+0x18>
 800885e:	f840 3b04 	str.w	r3, [r0], #4
 8008862:	e7f4      	b.n	800884e <__copybits+0x30>

08008864 <__any_on>:
 8008864:	f100 0214 	add.w	r2, r0, #20
 8008868:	6900      	ldr	r0, [r0, #16]
 800886a:	114b      	asrs	r3, r1, #5
 800886c:	4298      	cmp	r0, r3
 800886e:	b510      	push	{r4, lr}
 8008870:	db11      	blt.n	8008896 <__any_on+0x32>
 8008872:	dd0a      	ble.n	800888a <__any_on+0x26>
 8008874:	f011 011f 	ands.w	r1, r1, #31
 8008878:	d007      	beq.n	800888a <__any_on+0x26>
 800887a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800887e:	fa24 f001 	lsr.w	r0, r4, r1
 8008882:	fa00 f101 	lsl.w	r1, r0, r1
 8008886:	428c      	cmp	r4, r1
 8008888:	d10b      	bne.n	80088a2 <__any_on+0x3e>
 800888a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800888e:	4293      	cmp	r3, r2
 8008890:	d803      	bhi.n	800889a <__any_on+0x36>
 8008892:	2000      	movs	r0, #0
 8008894:	bd10      	pop	{r4, pc}
 8008896:	4603      	mov	r3, r0
 8008898:	e7f7      	b.n	800888a <__any_on+0x26>
 800889a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800889e:	2900      	cmp	r1, #0
 80088a0:	d0f5      	beq.n	800888e <__any_on+0x2a>
 80088a2:	2001      	movs	r0, #1
 80088a4:	e7f6      	b.n	8008894 <__any_on+0x30>

080088a6 <sulp>:
 80088a6:	b570      	push	{r4, r5, r6, lr}
 80088a8:	4604      	mov	r4, r0
 80088aa:	460d      	mov	r5, r1
 80088ac:	ec45 4b10 	vmov	d0, r4, r5
 80088b0:	4616      	mov	r6, r2
 80088b2:	f7ff feb7 	bl	8008624 <__ulp>
 80088b6:	ec51 0b10 	vmov	r0, r1, d0
 80088ba:	b17e      	cbz	r6, 80088dc <sulp+0x36>
 80088bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80088c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dd09      	ble.n	80088dc <sulp+0x36>
 80088c8:	051b      	lsls	r3, r3, #20
 80088ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088ce:	2400      	movs	r4, #0
 80088d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088d4:	4622      	mov	r2, r4
 80088d6:	462b      	mov	r3, r5
 80088d8:	f7f7 fea6 	bl	8000628 <__aeabi_dmul>
 80088dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080088e0 <_strtod_l>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	ed2d 8b02 	vpush	{d8}
 80088e8:	b09b      	sub	sp, #108	; 0x6c
 80088ea:	4604      	mov	r4, r0
 80088ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80088ee:	2200      	movs	r2, #0
 80088f0:	9216      	str	r2, [sp, #88]	; 0x58
 80088f2:	460d      	mov	r5, r1
 80088f4:	f04f 0800 	mov.w	r8, #0
 80088f8:	f04f 0900 	mov.w	r9, #0
 80088fc:	460a      	mov	r2, r1
 80088fe:	9215      	str	r2, [sp, #84]	; 0x54
 8008900:	7811      	ldrb	r1, [r2, #0]
 8008902:	292b      	cmp	r1, #43	; 0x2b
 8008904:	d04c      	beq.n	80089a0 <_strtod_l+0xc0>
 8008906:	d83a      	bhi.n	800897e <_strtod_l+0x9e>
 8008908:	290d      	cmp	r1, #13
 800890a:	d834      	bhi.n	8008976 <_strtod_l+0x96>
 800890c:	2908      	cmp	r1, #8
 800890e:	d834      	bhi.n	800897a <_strtod_l+0x9a>
 8008910:	2900      	cmp	r1, #0
 8008912:	d03d      	beq.n	8008990 <_strtod_l+0xb0>
 8008914:	2200      	movs	r2, #0
 8008916:	920a      	str	r2, [sp, #40]	; 0x28
 8008918:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800891a:	7832      	ldrb	r2, [r6, #0]
 800891c:	2a30      	cmp	r2, #48	; 0x30
 800891e:	f040 80b4 	bne.w	8008a8a <_strtod_l+0x1aa>
 8008922:	7872      	ldrb	r2, [r6, #1]
 8008924:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008928:	2a58      	cmp	r2, #88	; 0x58
 800892a:	d170      	bne.n	8008a0e <_strtod_l+0x12e>
 800892c:	9302      	str	r3, [sp, #8]
 800892e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	ab16      	add	r3, sp, #88	; 0x58
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	4a8e      	ldr	r2, [pc, #568]	; (8008b70 <_strtod_l+0x290>)
 8008938:	ab17      	add	r3, sp, #92	; 0x5c
 800893a:	a915      	add	r1, sp, #84	; 0x54
 800893c:	4620      	mov	r0, r4
 800893e:	f001 fcd3 	bl	800a2e8 <__gethex>
 8008942:	f010 070f 	ands.w	r7, r0, #15
 8008946:	4605      	mov	r5, r0
 8008948:	d005      	beq.n	8008956 <_strtod_l+0x76>
 800894a:	2f06      	cmp	r7, #6
 800894c:	d12a      	bne.n	80089a4 <_strtod_l+0xc4>
 800894e:	3601      	adds	r6, #1
 8008950:	2300      	movs	r3, #0
 8008952:	9615      	str	r6, [sp, #84]	; 0x54
 8008954:	930a      	str	r3, [sp, #40]	; 0x28
 8008956:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008958:	2b00      	cmp	r3, #0
 800895a:	f040 857f 	bne.w	800945c <_strtod_l+0xb7c>
 800895e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008960:	b1db      	cbz	r3, 800899a <_strtod_l+0xba>
 8008962:	4642      	mov	r2, r8
 8008964:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008968:	ec43 2b10 	vmov	d0, r2, r3
 800896c:	b01b      	add	sp, #108	; 0x6c
 800896e:	ecbd 8b02 	vpop	{d8}
 8008972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008976:	2920      	cmp	r1, #32
 8008978:	d1cc      	bne.n	8008914 <_strtod_l+0x34>
 800897a:	3201      	adds	r2, #1
 800897c:	e7bf      	b.n	80088fe <_strtod_l+0x1e>
 800897e:	292d      	cmp	r1, #45	; 0x2d
 8008980:	d1c8      	bne.n	8008914 <_strtod_l+0x34>
 8008982:	2101      	movs	r1, #1
 8008984:	910a      	str	r1, [sp, #40]	; 0x28
 8008986:	1c51      	adds	r1, r2, #1
 8008988:	9115      	str	r1, [sp, #84]	; 0x54
 800898a:	7852      	ldrb	r2, [r2, #1]
 800898c:	2a00      	cmp	r2, #0
 800898e:	d1c3      	bne.n	8008918 <_strtod_l+0x38>
 8008990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008992:	9515      	str	r5, [sp, #84]	; 0x54
 8008994:	2b00      	cmp	r3, #0
 8008996:	f040 855f 	bne.w	8009458 <_strtod_l+0xb78>
 800899a:	4642      	mov	r2, r8
 800899c:	464b      	mov	r3, r9
 800899e:	e7e3      	b.n	8008968 <_strtod_l+0x88>
 80089a0:	2100      	movs	r1, #0
 80089a2:	e7ef      	b.n	8008984 <_strtod_l+0xa4>
 80089a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80089a6:	b13a      	cbz	r2, 80089b8 <_strtod_l+0xd8>
 80089a8:	2135      	movs	r1, #53	; 0x35
 80089aa:	a818      	add	r0, sp, #96	; 0x60
 80089ac:	f7ff ff37 	bl	800881e <__copybits>
 80089b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089b2:	4620      	mov	r0, r4
 80089b4:	f7ff fb0a 	bl	8007fcc <_Bfree>
 80089b8:	3f01      	subs	r7, #1
 80089ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089bc:	2f04      	cmp	r7, #4
 80089be:	d806      	bhi.n	80089ce <_strtod_l+0xee>
 80089c0:	e8df f007 	tbb	[pc, r7]
 80089c4:	201d0314 	.word	0x201d0314
 80089c8:	14          	.byte	0x14
 80089c9:	00          	.byte	0x00
 80089ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80089ce:	05e9      	lsls	r1, r5, #23
 80089d0:	bf48      	it	mi
 80089d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80089d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089da:	0d1b      	lsrs	r3, r3, #20
 80089dc:	051b      	lsls	r3, r3, #20
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1b9      	bne.n	8008956 <_strtod_l+0x76>
 80089e2:	f7fe fafd 	bl	8006fe0 <__errno>
 80089e6:	2322      	movs	r3, #34	; 0x22
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	e7b4      	b.n	8008956 <_strtod_l+0x76>
 80089ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80089f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80089f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80089f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80089fc:	e7e7      	b.n	80089ce <_strtod_l+0xee>
 80089fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008b78 <_strtod_l+0x298>
 8008a02:	e7e4      	b.n	80089ce <_strtod_l+0xee>
 8008a04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008a08:	f04f 38ff 	mov.w	r8, #4294967295
 8008a0c:	e7df      	b.n	80089ce <_strtod_l+0xee>
 8008a0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	9215      	str	r2, [sp, #84]	; 0x54
 8008a14:	785b      	ldrb	r3, [r3, #1]
 8008a16:	2b30      	cmp	r3, #48	; 0x30
 8008a18:	d0f9      	beq.n	8008a0e <_strtod_l+0x12e>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d09b      	beq.n	8008956 <_strtod_l+0x76>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f04f 0a00 	mov.w	sl, #0
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008a2e:	46d3      	mov	fp, sl
 8008a30:	220a      	movs	r2, #10
 8008a32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008a34:	7806      	ldrb	r6, [r0, #0]
 8008a36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a3a:	b2d9      	uxtb	r1, r3
 8008a3c:	2909      	cmp	r1, #9
 8008a3e:	d926      	bls.n	8008a8e <_strtod_l+0x1ae>
 8008a40:	494c      	ldr	r1, [pc, #304]	; (8008b74 <_strtod_l+0x294>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	f001 fb79 	bl	800a13a <strncmp>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d030      	beq.n	8008aae <_strtod_l+0x1ce>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	4632      	mov	r2, r6
 8008a50:	9005      	str	r0, [sp, #20]
 8008a52:	465e      	mov	r6, fp
 8008a54:	4603      	mov	r3, r0
 8008a56:	2a65      	cmp	r2, #101	; 0x65
 8008a58:	d001      	beq.n	8008a5e <_strtod_l+0x17e>
 8008a5a:	2a45      	cmp	r2, #69	; 0x45
 8008a5c:	d113      	bne.n	8008a86 <_strtod_l+0x1a6>
 8008a5e:	b91e      	cbnz	r6, 8008a68 <_strtod_l+0x188>
 8008a60:	9a04      	ldr	r2, [sp, #16]
 8008a62:	4302      	orrs	r2, r0
 8008a64:	d094      	beq.n	8008990 <_strtod_l+0xb0>
 8008a66:	2600      	movs	r6, #0
 8008a68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008a6a:	1c6a      	adds	r2, r5, #1
 8008a6c:	9215      	str	r2, [sp, #84]	; 0x54
 8008a6e:	786a      	ldrb	r2, [r5, #1]
 8008a70:	2a2b      	cmp	r2, #43	; 0x2b
 8008a72:	d074      	beq.n	8008b5e <_strtod_l+0x27e>
 8008a74:	2a2d      	cmp	r2, #45	; 0x2d
 8008a76:	d078      	beq.n	8008b6a <_strtod_l+0x28a>
 8008a78:	f04f 0c00 	mov.w	ip, #0
 8008a7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008a80:	2909      	cmp	r1, #9
 8008a82:	d97f      	bls.n	8008b84 <_strtod_l+0x2a4>
 8008a84:	9515      	str	r5, [sp, #84]	; 0x54
 8008a86:	2700      	movs	r7, #0
 8008a88:	e09e      	b.n	8008bc8 <_strtod_l+0x2e8>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	e7c8      	b.n	8008a20 <_strtod_l+0x140>
 8008a8e:	f1bb 0f08 	cmp.w	fp, #8
 8008a92:	bfd8      	it	le
 8008a94:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008a96:	f100 0001 	add.w	r0, r0, #1
 8008a9a:	bfda      	itte	le
 8008a9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008aa0:	9309      	strle	r3, [sp, #36]	; 0x24
 8008aa2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008aa6:	f10b 0b01 	add.w	fp, fp, #1
 8008aaa:	9015      	str	r0, [sp, #84]	; 0x54
 8008aac:	e7c1      	b.n	8008a32 <_strtod_l+0x152>
 8008aae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	9215      	str	r2, [sp, #84]	; 0x54
 8008ab4:	785a      	ldrb	r2, [r3, #1]
 8008ab6:	f1bb 0f00 	cmp.w	fp, #0
 8008aba:	d037      	beq.n	8008b2c <_strtod_l+0x24c>
 8008abc:	9005      	str	r0, [sp, #20]
 8008abe:	465e      	mov	r6, fp
 8008ac0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ac4:	2b09      	cmp	r3, #9
 8008ac6:	d912      	bls.n	8008aee <_strtod_l+0x20e>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e7c4      	b.n	8008a56 <_strtod_l+0x176>
 8008acc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	9215      	str	r2, [sp, #84]	; 0x54
 8008ad2:	785a      	ldrb	r2, [r3, #1]
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	2a30      	cmp	r2, #48	; 0x30
 8008ad8:	d0f8      	beq.n	8008acc <_strtod_l+0x1ec>
 8008ada:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ade:	2b08      	cmp	r3, #8
 8008ae0:	f200 84c1 	bhi.w	8009466 <_strtod_l+0xb86>
 8008ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ae6:	9005      	str	r0, [sp, #20]
 8008ae8:	2000      	movs	r0, #0
 8008aea:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aec:	4606      	mov	r6, r0
 8008aee:	3a30      	subs	r2, #48	; 0x30
 8008af0:	f100 0301 	add.w	r3, r0, #1
 8008af4:	d014      	beq.n	8008b20 <_strtod_l+0x240>
 8008af6:	9905      	ldr	r1, [sp, #20]
 8008af8:	4419      	add	r1, r3
 8008afa:	9105      	str	r1, [sp, #20]
 8008afc:	4633      	mov	r3, r6
 8008afe:	eb00 0c06 	add.w	ip, r0, r6
 8008b02:	210a      	movs	r1, #10
 8008b04:	4563      	cmp	r3, ip
 8008b06:	d113      	bne.n	8008b30 <_strtod_l+0x250>
 8008b08:	1833      	adds	r3, r6, r0
 8008b0a:	2b08      	cmp	r3, #8
 8008b0c:	f106 0601 	add.w	r6, r6, #1
 8008b10:	4406      	add	r6, r0
 8008b12:	dc1a      	bgt.n	8008b4a <_strtod_l+0x26a>
 8008b14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b16:	230a      	movs	r3, #10
 8008b18:	fb03 2301 	mla	r3, r3, r1, r2
 8008b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b22:	1c51      	adds	r1, r2, #1
 8008b24:	9115      	str	r1, [sp, #84]	; 0x54
 8008b26:	7852      	ldrb	r2, [r2, #1]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	e7c9      	b.n	8008ac0 <_strtod_l+0x1e0>
 8008b2c:	4658      	mov	r0, fp
 8008b2e:	e7d2      	b.n	8008ad6 <_strtod_l+0x1f6>
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	f103 0301 	add.w	r3, r3, #1
 8008b36:	dc03      	bgt.n	8008b40 <_strtod_l+0x260>
 8008b38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b3a:	434f      	muls	r7, r1
 8008b3c:	9709      	str	r7, [sp, #36]	; 0x24
 8008b3e:	e7e1      	b.n	8008b04 <_strtod_l+0x224>
 8008b40:	2b10      	cmp	r3, #16
 8008b42:	bfd8      	it	le
 8008b44:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008b48:	e7dc      	b.n	8008b04 <_strtod_l+0x224>
 8008b4a:	2e10      	cmp	r6, #16
 8008b4c:	bfdc      	itt	le
 8008b4e:	230a      	movle	r3, #10
 8008b50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008b54:	e7e3      	b.n	8008b1e <_strtod_l+0x23e>
 8008b56:	2300      	movs	r3, #0
 8008b58:	9305      	str	r3, [sp, #20]
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e780      	b.n	8008a60 <_strtod_l+0x180>
 8008b5e:	f04f 0c00 	mov.w	ip, #0
 8008b62:	1caa      	adds	r2, r5, #2
 8008b64:	9215      	str	r2, [sp, #84]	; 0x54
 8008b66:	78aa      	ldrb	r2, [r5, #2]
 8008b68:	e788      	b.n	8008a7c <_strtod_l+0x19c>
 8008b6a:	f04f 0c01 	mov.w	ip, #1
 8008b6e:	e7f8      	b.n	8008b62 <_strtod_l+0x282>
 8008b70:	0800c8a8 	.word	0x0800c8a8
 8008b74:	0800c8a4 	.word	0x0800c8a4
 8008b78:	7ff00000 	.word	0x7ff00000
 8008b7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b7e:	1c51      	adds	r1, r2, #1
 8008b80:	9115      	str	r1, [sp, #84]	; 0x54
 8008b82:	7852      	ldrb	r2, [r2, #1]
 8008b84:	2a30      	cmp	r2, #48	; 0x30
 8008b86:	d0f9      	beq.n	8008b7c <_strtod_l+0x29c>
 8008b88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008b8c:	2908      	cmp	r1, #8
 8008b8e:	f63f af7a 	bhi.w	8008a86 <_strtod_l+0x1a6>
 8008b92:	3a30      	subs	r2, #48	; 0x30
 8008b94:	9208      	str	r2, [sp, #32]
 8008b96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b98:	920c      	str	r2, [sp, #48]	; 0x30
 8008b9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b9c:	1c57      	adds	r7, r2, #1
 8008b9e:	9715      	str	r7, [sp, #84]	; 0x54
 8008ba0:	7852      	ldrb	r2, [r2, #1]
 8008ba2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008ba6:	f1be 0f09 	cmp.w	lr, #9
 8008baa:	d938      	bls.n	8008c1e <_strtod_l+0x33e>
 8008bac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bae:	1a7f      	subs	r7, r7, r1
 8008bb0:	2f08      	cmp	r7, #8
 8008bb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008bb6:	dc03      	bgt.n	8008bc0 <_strtod_l+0x2e0>
 8008bb8:	9908      	ldr	r1, [sp, #32]
 8008bba:	428f      	cmp	r7, r1
 8008bbc:	bfa8      	it	ge
 8008bbe:	460f      	movge	r7, r1
 8008bc0:	f1bc 0f00 	cmp.w	ip, #0
 8008bc4:	d000      	beq.n	8008bc8 <_strtod_l+0x2e8>
 8008bc6:	427f      	negs	r7, r7
 8008bc8:	2e00      	cmp	r6, #0
 8008bca:	d14f      	bne.n	8008c6c <_strtod_l+0x38c>
 8008bcc:	9904      	ldr	r1, [sp, #16]
 8008bce:	4301      	orrs	r1, r0
 8008bd0:	f47f aec1 	bne.w	8008956 <_strtod_l+0x76>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f47f aedb 	bne.w	8008990 <_strtod_l+0xb0>
 8008bda:	2a69      	cmp	r2, #105	; 0x69
 8008bdc:	d029      	beq.n	8008c32 <_strtod_l+0x352>
 8008bde:	dc26      	bgt.n	8008c2e <_strtod_l+0x34e>
 8008be0:	2a49      	cmp	r2, #73	; 0x49
 8008be2:	d026      	beq.n	8008c32 <_strtod_l+0x352>
 8008be4:	2a4e      	cmp	r2, #78	; 0x4e
 8008be6:	f47f aed3 	bne.w	8008990 <_strtod_l+0xb0>
 8008bea:	499b      	ldr	r1, [pc, #620]	; (8008e58 <_strtod_l+0x578>)
 8008bec:	a815      	add	r0, sp, #84	; 0x54
 8008bee:	f001 fdbb 	bl	800a768 <__match>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	f43f aecc 	beq.w	8008990 <_strtod_l+0xb0>
 8008bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b28      	cmp	r3, #40	; 0x28
 8008bfe:	d12f      	bne.n	8008c60 <_strtod_l+0x380>
 8008c00:	4996      	ldr	r1, [pc, #600]	; (8008e5c <_strtod_l+0x57c>)
 8008c02:	aa18      	add	r2, sp, #96	; 0x60
 8008c04:	a815      	add	r0, sp, #84	; 0x54
 8008c06:	f001 fdc3 	bl	800a790 <__hexnan>
 8008c0a:	2805      	cmp	r0, #5
 8008c0c:	d128      	bne.n	8008c60 <_strtod_l+0x380>
 8008c0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c1c:	e69b      	b.n	8008956 <_strtod_l+0x76>
 8008c1e:	9f08      	ldr	r7, [sp, #32]
 8008c20:	210a      	movs	r1, #10
 8008c22:	fb01 2107 	mla	r1, r1, r7, r2
 8008c26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008c2a:	9208      	str	r2, [sp, #32]
 8008c2c:	e7b5      	b.n	8008b9a <_strtod_l+0x2ba>
 8008c2e:	2a6e      	cmp	r2, #110	; 0x6e
 8008c30:	e7d9      	b.n	8008be6 <_strtod_l+0x306>
 8008c32:	498b      	ldr	r1, [pc, #556]	; (8008e60 <_strtod_l+0x580>)
 8008c34:	a815      	add	r0, sp, #84	; 0x54
 8008c36:	f001 fd97 	bl	800a768 <__match>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f43f aea8 	beq.w	8008990 <_strtod_l+0xb0>
 8008c40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c42:	4988      	ldr	r1, [pc, #544]	; (8008e64 <_strtod_l+0x584>)
 8008c44:	3b01      	subs	r3, #1
 8008c46:	a815      	add	r0, sp, #84	; 0x54
 8008c48:	9315      	str	r3, [sp, #84]	; 0x54
 8008c4a:	f001 fd8d 	bl	800a768 <__match>
 8008c4e:	b910      	cbnz	r0, 8008c56 <_strtod_l+0x376>
 8008c50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c52:	3301      	adds	r3, #1
 8008c54:	9315      	str	r3, [sp, #84]	; 0x54
 8008c56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008e74 <_strtod_l+0x594>
 8008c5a:	f04f 0800 	mov.w	r8, #0
 8008c5e:	e67a      	b.n	8008956 <_strtod_l+0x76>
 8008c60:	4881      	ldr	r0, [pc, #516]	; (8008e68 <_strtod_l+0x588>)
 8008c62:	f001 fa9d 	bl	800a1a0 <nan>
 8008c66:	ec59 8b10 	vmov	r8, r9, d0
 8008c6a:	e674      	b.n	8008956 <_strtod_l+0x76>
 8008c6c:	9b05      	ldr	r3, [sp, #20]
 8008c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c70:	1afb      	subs	r3, r7, r3
 8008c72:	f1bb 0f00 	cmp.w	fp, #0
 8008c76:	bf08      	it	eq
 8008c78:	46b3      	moveq	fp, r6
 8008c7a:	2e10      	cmp	r6, #16
 8008c7c:	9308      	str	r3, [sp, #32]
 8008c7e:	4635      	mov	r5, r6
 8008c80:	bfa8      	it	ge
 8008c82:	2510      	movge	r5, #16
 8008c84:	f7f7 fc56 	bl	8000534 <__aeabi_ui2d>
 8008c88:	2e09      	cmp	r6, #9
 8008c8a:	4680      	mov	r8, r0
 8008c8c:	4689      	mov	r9, r1
 8008c8e:	dd13      	ble.n	8008cb8 <_strtod_l+0x3d8>
 8008c90:	4b76      	ldr	r3, [pc, #472]	; (8008e6c <_strtod_l+0x58c>)
 8008c92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008c9a:	f7f7 fcc5 	bl	8000628 <__aeabi_dmul>
 8008c9e:	4680      	mov	r8, r0
 8008ca0:	4650      	mov	r0, sl
 8008ca2:	4689      	mov	r9, r1
 8008ca4:	f7f7 fc46 	bl	8000534 <__aeabi_ui2d>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4640      	mov	r0, r8
 8008cae:	4649      	mov	r1, r9
 8008cb0:	f7f7 fb04 	bl	80002bc <__adddf3>
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	4689      	mov	r9, r1
 8008cb8:	2e0f      	cmp	r6, #15
 8008cba:	dc38      	bgt.n	8008d2e <_strtod_l+0x44e>
 8008cbc:	9b08      	ldr	r3, [sp, #32]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f43f ae49 	beq.w	8008956 <_strtod_l+0x76>
 8008cc4:	dd24      	ble.n	8008d10 <_strtod_l+0x430>
 8008cc6:	2b16      	cmp	r3, #22
 8008cc8:	dc0b      	bgt.n	8008ce2 <_strtod_l+0x402>
 8008cca:	4968      	ldr	r1, [pc, #416]	; (8008e6c <_strtod_l+0x58c>)
 8008ccc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cd4:	4642      	mov	r2, r8
 8008cd6:	464b      	mov	r3, r9
 8008cd8:	f7f7 fca6 	bl	8000628 <__aeabi_dmul>
 8008cdc:	4680      	mov	r8, r0
 8008cde:	4689      	mov	r9, r1
 8008ce0:	e639      	b.n	8008956 <_strtod_l+0x76>
 8008ce2:	9a08      	ldr	r2, [sp, #32]
 8008ce4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	db20      	blt.n	8008d2e <_strtod_l+0x44e>
 8008cec:	4c5f      	ldr	r4, [pc, #380]	; (8008e6c <_strtod_l+0x58c>)
 8008cee:	f1c6 060f 	rsb	r6, r6, #15
 8008cf2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008cf6:	4642      	mov	r2, r8
 8008cf8:	464b      	mov	r3, r9
 8008cfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cfe:	f7f7 fc93 	bl	8000628 <__aeabi_dmul>
 8008d02:	9b08      	ldr	r3, [sp, #32]
 8008d04:	1b9e      	subs	r6, r3, r6
 8008d06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008d0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d0e:	e7e3      	b.n	8008cd8 <_strtod_l+0x3f8>
 8008d10:	9b08      	ldr	r3, [sp, #32]
 8008d12:	3316      	adds	r3, #22
 8008d14:	db0b      	blt.n	8008d2e <_strtod_l+0x44e>
 8008d16:	9b05      	ldr	r3, [sp, #20]
 8008d18:	1bdf      	subs	r7, r3, r7
 8008d1a:	4b54      	ldr	r3, [pc, #336]	; (8008e6c <_strtod_l+0x58c>)
 8008d1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d24:	4640      	mov	r0, r8
 8008d26:	4649      	mov	r1, r9
 8008d28:	f7f7 fda8 	bl	800087c <__aeabi_ddiv>
 8008d2c:	e7d6      	b.n	8008cdc <_strtod_l+0x3fc>
 8008d2e:	9b08      	ldr	r3, [sp, #32]
 8008d30:	1b75      	subs	r5, r6, r5
 8008d32:	441d      	add	r5, r3
 8008d34:	2d00      	cmp	r5, #0
 8008d36:	dd70      	ble.n	8008e1a <_strtod_l+0x53a>
 8008d38:	f015 030f 	ands.w	r3, r5, #15
 8008d3c:	d00a      	beq.n	8008d54 <_strtod_l+0x474>
 8008d3e:	494b      	ldr	r1, [pc, #300]	; (8008e6c <_strtod_l+0x58c>)
 8008d40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d44:	4642      	mov	r2, r8
 8008d46:	464b      	mov	r3, r9
 8008d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d4c:	f7f7 fc6c 	bl	8000628 <__aeabi_dmul>
 8008d50:	4680      	mov	r8, r0
 8008d52:	4689      	mov	r9, r1
 8008d54:	f035 050f 	bics.w	r5, r5, #15
 8008d58:	d04d      	beq.n	8008df6 <_strtod_l+0x516>
 8008d5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008d5e:	dd22      	ble.n	8008da6 <_strtod_l+0x4c6>
 8008d60:	2500      	movs	r5, #0
 8008d62:	46ab      	mov	fp, r5
 8008d64:	9509      	str	r5, [sp, #36]	; 0x24
 8008d66:	9505      	str	r5, [sp, #20]
 8008d68:	2322      	movs	r3, #34	; 0x22
 8008d6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008e74 <_strtod_l+0x594>
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	f04f 0800 	mov.w	r8, #0
 8008d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f43f aded 	beq.w	8008956 <_strtod_l+0x76>
 8008d7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7ff f924 	bl	8007fcc <_Bfree>
 8008d84:	9905      	ldr	r1, [sp, #20]
 8008d86:	4620      	mov	r0, r4
 8008d88:	f7ff f920 	bl	8007fcc <_Bfree>
 8008d8c:	4659      	mov	r1, fp
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f7ff f91c 	bl	8007fcc <_Bfree>
 8008d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d96:	4620      	mov	r0, r4
 8008d98:	f7ff f918 	bl	8007fcc <_Bfree>
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f7ff f914 	bl	8007fcc <_Bfree>
 8008da4:	e5d7      	b.n	8008956 <_strtod_l+0x76>
 8008da6:	4b32      	ldr	r3, [pc, #200]	; (8008e70 <_strtod_l+0x590>)
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	2300      	movs	r3, #0
 8008dac:	112d      	asrs	r5, r5, #4
 8008dae:	4640      	mov	r0, r8
 8008db0:	4649      	mov	r1, r9
 8008db2:	469a      	mov	sl, r3
 8008db4:	2d01      	cmp	r5, #1
 8008db6:	dc21      	bgt.n	8008dfc <_strtod_l+0x51c>
 8008db8:	b10b      	cbz	r3, 8008dbe <_strtod_l+0x4de>
 8008dba:	4680      	mov	r8, r0
 8008dbc:	4689      	mov	r9, r1
 8008dbe:	492c      	ldr	r1, [pc, #176]	; (8008e70 <_strtod_l+0x590>)
 8008dc0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008dc4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008dc8:	4642      	mov	r2, r8
 8008dca:	464b      	mov	r3, r9
 8008dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd0:	f7f7 fc2a 	bl	8000628 <__aeabi_dmul>
 8008dd4:	4b27      	ldr	r3, [pc, #156]	; (8008e74 <_strtod_l+0x594>)
 8008dd6:	460a      	mov	r2, r1
 8008dd8:	400b      	ands	r3, r1
 8008dda:	4927      	ldr	r1, [pc, #156]	; (8008e78 <_strtod_l+0x598>)
 8008ddc:	428b      	cmp	r3, r1
 8008dde:	4680      	mov	r8, r0
 8008de0:	d8be      	bhi.n	8008d60 <_strtod_l+0x480>
 8008de2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008de6:	428b      	cmp	r3, r1
 8008de8:	bf86      	itte	hi
 8008dea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008e7c <_strtod_l+0x59c>
 8008dee:	f04f 38ff 	movhi.w	r8, #4294967295
 8008df2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008df6:	2300      	movs	r3, #0
 8008df8:	9304      	str	r3, [sp, #16]
 8008dfa:	e07b      	b.n	8008ef4 <_strtod_l+0x614>
 8008dfc:	07ea      	lsls	r2, r5, #31
 8008dfe:	d505      	bpl.n	8008e0c <_strtod_l+0x52c>
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f7f7 fc0f 	bl	8000628 <__aeabi_dmul>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	9a04      	ldr	r2, [sp, #16]
 8008e0e:	3208      	adds	r2, #8
 8008e10:	f10a 0a01 	add.w	sl, sl, #1
 8008e14:	106d      	asrs	r5, r5, #1
 8008e16:	9204      	str	r2, [sp, #16]
 8008e18:	e7cc      	b.n	8008db4 <_strtod_l+0x4d4>
 8008e1a:	d0ec      	beq.n	8008df6 <_strtod_l+0x516>
 8008e1c:	426d      	negs	r5, r5
 8008e1e:	f015 020f 	ands.w	r2, r5, #15
 8008e22:	d00a      	beq.n	8008e3a <_strtod_l+0x55a>
 8008e24:	4b11      	ldr	r3, [pc, #68]	; (8008e6c <_strtod_l+0x58c>)
 8008e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f7f7 fd23 	bl	800087c <__aeabi_ddiv>
 8008e36:	4680      	mov	r8, r0
 8008e38:	4689      	mov	r9, r1
 8008e3a:	112d      	asrs	r5, r5, #4
 8008e3c:	d0db      	beq.n	8008df6 <_strtod_l+0x516>
 8008e3e:	2d1f      	cmp	r5, #31
 8008e40:	dd1e      	ble.n	8008e80 <_strtod_l+0x5a0>
 8008e42:	2500      	movs	r5, #0
 8008e44:	46ab      	mov	fp, r5
 8008e46:	9509      	str	r5, [sp, #36]	; 0x24
 8008e48:	9505      	str	r5, [sp, #20]
 8008e4a:	2322      	movs	r3, #34	; 0x22
 8008e4c:	f04f 0800 	mov.w	r8, #0
 8008e50:	f04f 0900 	mov.w	r9, #0
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	e78d      	b.n	8008d74 <_strtod_l+0x494>
 8008e58:	0800c695 	.word	0x0800c695
 8008e5c:	0800c8bc 	.word	0x0800c8bc
 8008e60:	0800c68d 	.word	0x0800c68d
 8008e64:	0800c6c2 	.word	0x0800c6c2
 8008e68:	0800ca68 	.word	0x0800ca68
 8008e6c:	0800c7d0 	.word	0x0800c7d0
 8008e70:	0800c7a8 	.word	0x0800c7a8
 8008e74:	7ff00000 	.word	0x7ff00000
 8008e78:	7ca00000 	.word	0x7ca00000
 8008e7c:	7fefffff 	.word	0x7fefffff
 8008e80:	f015 0310 	ands.w	r3, r5, #16
 8008e84:	bf18      	it	ne
 8008e86:	236a      	movne	r3, #106	; 0x6a
 8008e88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800922c <_strtod_l+0x94c>
 8008e8c:	9304      	str	r3, [sp, #16]
 8008e8e:	4640      	mov	r0, r8
 8008e90:	4649      	mov	r1, r9
 8008e92:	2300      	movs	r3, #0
 8008e94:	07ea      	lsls	r2, r5, #31
 8008e96:	d504      	bpl.n	8008ea2 <_strtod_l+0x5c2>
 8008e98:	e9da 2300 	ldrd	r2, r3, [sl]
 8008e9c:	f7f7 fbc4 	bl	8000628 <__aeabi_dmul>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	106d      	asrs	r5, r5, #1
 8008ea4:	f10a 0a08 	add.w	sl, sl, #8
 8008ea8:	d1f4      	bne.n	8008e94 <_strtod_l+0x5b4>
 8008eaa:	b10b      	cbz	r3, 8008eb0 <_strtod_l+0x5d0>
 8008eac:	4680      	mov	r8, r0
 8008eae:	4689      	mov	r9, r1
 8008eb0:	9b04      	ldr	r3, [sp, #16]
 8008eb2:	b1bb      	cbz	r3, 8008ee4 <_strtod_l+0x604>
 8008eb4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008eb8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	dd10      	ble.n	8008ee4 <_strtod_l+0x604>
 8008ec2:	2b1f      	cmp	r3, #31
 8008ec4:	f340 811e 	ble.w	8009104 <_strtod_l+0x824>
 8008ec8:	2b34      	cmp	r3, #52	; 0x34
 8008eca:	bfde      	ittt	le
 8008ecc:	f04f 33ff 	movle.w	r3, #4294967295
 8008ed0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ed4:	4093      	lslle	r3, r2
 8008ed6:	f04f 0800 	mov.w	r8, #0
 8008eda:	bfcc      	ite	gt
 8008edc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ee0:	ea03 0901 	andle.w	r9, r3, r1
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	4640      	mov	r0, r8
 8008eea:	4649      	mov	r1, r9
 8008eec:	f7f7 fe04 	bl	8000af8 <__aeabi_dcmpeq>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1a6      	bne.n	8008e42 <_strtod_l+0x562>
 8008ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008efa:	4633      	mov	r3, r6
 8008efc:	465a      	mov	r2, fp
 8008efe:	4620      	mov	r0, r4
 8008f00:	f7ff f8cc 	bl	800809c <__s2b>
 8008f04:	9009      	str	r0, [sp, #36]	; 0x24
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f43f af2a 	beq.w	8008d60 <_strtod_l+0x480>
 8008f0c:	9a08      	ldr	r2, [sp, #32]
 8008f0e:	9b05      	ldr	r3, [sp, #20]
 8008f10:	2a00      	cmp	r2, #0
 8008f12:	eba3 0307 	sub.w	r3, r3, r7
 8008f16:	bfa8      	it	ge
 8008f18:	2300      	movge	r3, #0
 8008f1a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f1c:	2500      	movs	r5, #0
 8008f1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f22:	9312      	str	r3, [sp, #72]	; 0x48
 8008f24:	46ab      	mov	fp, r5
 8008f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f28:	4620      	mov	r0, r4
 8008f2a:	6859      	ldr	r1, [r3, #4]
 8008f2c:	f7ff f80e 	bl	8007f4c <_Balloc>
 8008f30:	9005      	str	r0, [sp, #20]
 8008f32:	2800      	cmp	r0, #0
 8008f34:	f43f af18 	beq.w	8008d68 <_strtod_l+0x488>
 8008f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f3a:	691a      	ldr	r2, [r3, #16]
 8008f3c:	3202      	adds	r2, #2
 8008f3e:	f103 010c 	add.w	r1, r3, #12
 8008f42:	0092      	lsls	r2, r2, #2
 8008f44:	300c      	adds	r0, #12
 8008f46:	f001 f91b 	bl	800a180 <memcpy>
 8008f4a:	ec49 8b10 	vmov	d0, r8, r9
 8008f4e:	aa18      	add	r2, sp, #96	; 0x60
 8008f50:	a917      	add	r1, sp, #92	; 0x5c
 8008f52:	4620      	mov	r0, r4
 8008f54:	f7ff fbd6 	bl	8008704 <__d2b>
 8008f58:	ec49 8b18 	vmov	d8, r8, r9
 8008f5c:	9016      	str	r0, [sp, #88]	; 0x58
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f43f af02 	beq.w	8008d68 <_strtod_l+0x488>
 8008f64:	2101      	movs	r1, #1
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff f930 	bl	80081cc <__i2b>
 8008f6c:	4683      	mov	fp, r0
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f43f aefa 	beq.w	8008d68 <_strtod_l+0x488>
 8008f74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008f76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f78:	2e00      	cmp	r6, #0
 8008f7a:	bfab      	itete	ge
 8008f7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008f7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008f80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008f82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008f86:	bfac      	ite	ge
 8008f88:	eb06 0a03 	addge.w	sl, r6, r3
 8008f8c:	1b9f      	sublt	r7, r3, r6
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	1af6      	subs	r6, r6, r3
 8008f92:	4416      	add	r6, r2
 8008f94:	4ba0      	ldr	r3, [pc, #640]	; (8009218 <_strtod_l+0x938>)
 8008f96:	3e01      	subs	r6, #1
 8008f98:	429e      	cmp	r6, r3
 8008f9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008f9e:	f280 80c4 	bge.w	800912a <_strtod_l+0x84a>
 8008fa2:	1b9b      	subs	r3, r3, r6
 8008fa4:	2b1f      	cmp	r3, #31
 8008fa6:	eba2 0203 	sub.w	r2, r2, r3
 8008faa:	f04f 0101 	mov.w	r1, #1
 8008fae:	f300 80b0 	bgt.w	8009112 <_strtod_l+0x832>
 8008fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb6:	930e      	str	r3, [sp, #56]	; 0x38
 8008fb8:	2300      	movs	r3, #0
 8008fba:	930d      	str	r3, [sp, #52]	; 0x34
 8008fbc:	eb0a 0602 	add.w	r6, sl, r2
 8008fc0:	9b04      	ldr	r3, [sp, #16]
 8008fc2:	45b2      	cmp	sl, r6
 8008fc4:	4417      	add	r7, r2
 8008fc6:	441f      	add	r7, r3
 8008fc8:	4653      	mov	r3, sl
 8008fca:	bfa8      	it	ge
 8008fcc:	4633      	movge	r3, r6
 8008fce:	42bb      	cmp	r3, r7
 8008fd0:	bfa8      	it	ge
 8008fd2:	463b      	movge	r3, r7
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bfc2      	ittt	gt
 8008fd8:	1af6      	subgt	r6, r6, r3
 8008fda:	1aff      	subgt	r7, r7, r3
 8008fdc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dd17      	ble.n	8009016 <_strtod_l+0x736>
 8008fe6:	4659      	mov	r1, fp
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4620      	mov	r0, r4
 8008fec:	f7ff f9ae 	bl	800834c <__pow5mult>
 8008ff0:	4683      	mov	fp, r0
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	f43f aeb8 	beq.w	8008d68 <_strtod_l+0x488>
 8008ff8:	4601      	mov	r1, r0
 8008ffa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7ff f8fb 	bl	80081f8 <__multiply>
 8009002:	900b      	str	r0, [sp, #44]	; 0x2c
 8009004:	2800      	cmp	r0, #0
 8009006:	f43f aeaf 	beq.w	8008d68 <_strtod_l+0x488>
 800900a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800900c:	4620      	mov	r0, r4
 800900e:	f7fe ffdd 	bl	8007fcc <_Bfree>
 8009012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009014:	9316      	str	r3, [sp, #88]	; 0x58
 8009016:	2e00      	cmp	r6, #0
 8009018:	f300 808c 	bgt.w	8009134 <_strtod_l+0x854>
 800901c:	9b08      	ldr	r3, [sp, #32]
 800901e:	2b00      	cmp	r3, #0
 8009020:	dd08      	ble.n	8009034 <_strtod_l+0x754>
 8009022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009024:	9905      	ldr	r1, [sp, #20]
 8009026:	4620      	mov	r0, r4
 8009028:	f7ff f990 	bl	800834c <__pow5mult>
 800902c:	9005      	str	r0, [sp, #20]
 800902e:	2800      	cmp	r0, #0
 8009030:	f43f ae9a 	beq.w	8008d68 <_strtod_l+0x488>
 8009034:	2f00      	cmp	r7, #0
 8009036:	dd08      	ble.n	800904a <_strtod_l+0x76a>
 8009038:	9905      	ldr	r1, [sp, #20]
 800903a:	463a      	mov	r2, r7
 800903c:	4620      	mov	r0, r4
 800903e:	f7ff f9df 	bl	8008400 <__lshift>
 8009042:	9005      	str	r0, [sp, #20]
 8009044:	2800      	cmp	r0, #0
 8009046:	f43f ae8f 	beq.w	8008d68 <_strtod_l+0x488>
 800904a:	f1ba 0f00 	cmp.w	sl, #0
 800904e:	dd08      	ble.n	8009062 <_strtod_l+0x782>
 8009050:	4659      	mov	r1, fp
 8009052:	4652      	mov	r2, sl
 8009054:	4620      	mov	r0, r4
 8009056:	f7ff f9d3 	bl	8008400 <__lshift>
 800905a:	4683      	mov	fp, r0
 800905c:	2800      	cmp	r0, #0
 800905e:	f43f ae83 	beq.w	8008d68 <_strtod_l+0x488>
 8009062:	9a05      	ldr	r2, [sp, #20]
 8009064:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009066:	4620      	mov	r0, r4
 8009068:	f7ff fa52 	bl	8008510 <__mdiff>
 800906c:	4605      	mov	r5, r0
 800906e:	2800      	cmp	r0, #0
 8009070:	f43f ae7a 	beq.w	8008d68 <_strtod_l+0x488>
 8009074:	68c3      	ldr	r3, [r0, #12]
 8009076:	930b      	str	r3, [sp, #44]	; 0x2c
 8009078:	2300      	movs	r3, #0
 800907a:	60c3      	str	r3, [r0, #12]
 800907c:	4659      	mov	r1, fp
 800907e:	f7ff fa2b 	bl	80084d8 <__mcmp>
 8009082:	2800      	cmp	r0, #0
 8009084:	da60      	bge.n	8009148 <_strtod_l+0x868>
 8009086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009088:	ea53 0308 	orrs.w	r3, r3, r8
 800908c:	f040 8084 	bne.w	8009198 <_strtod_l+0x8b8>
 8009090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009094:	2b00      	cmp	r3, #0
 8009096:	d17f      	bne.n	8009198 <_strtod_l+0x8b8>
 8009098:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800909c:	0d1b      	lsrs	r3, r3, #20
 800909e:	051b      	lsls	r3, r3, #20
 80090a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090a4:	d978      	bls.n	8009198 <_strtod_l+0x8b8>
 80090a6:	696b      	ldr	r3, [r5, #20]
 80090a8:	b913      	cbnz	r3, 80090b0 <_strtod_l+0x7d0>
 80090aa:	692b      	ldr	r3, [r5, #16]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	dd73      	ble.n	8009198 <_strtod_l+0x8b8>
 80090b0:	4629      	mov	r1, r5
 80090b2:	2201      	movs	r2, #1
 80090b4:	4620      	mov	r0, r4
 80090b6:	f7ff f9a3 	bl	8008400 <__lshift>
 80090ba:	4659      	mov	r1, fp
 80090bc:	4605      	mov	r5, r0
 80090be:	f7ff fa0b 	bl	80084d8 <__mcmp>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	dd68      	ble.n	8009198 <_strtod_l+0x8b8>
 80090c6:	9904      	ldr	r1, [sp, #16]
 80090c8:	4a54      	ldr	r2, [pc, #336]	; (800921c <_strtod_l+0x93c>)
 80090ca:	464b      	mov	r3, r9
 80090cc:	2900      	cmp	r1, #0
 80090ce:	f000 8084 	beq.w	80091da <_strtod_l+0x8fa>
 80090d2:	ea02 0109 	and.w	r1, r2, r9
 80090d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80090da:	dc7e      	bgt.n	80091da <_strtod_l+0x8fa>
 80090dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80090e0:	f77f aeb3 	ble.w	8008e4a <_strtod_l+0x56a>
 80090e4:	4b4e      	ldr	r3, [pc, #312]	; (8009220 <_strtod_l+0x940>)
 80090e6:	4640      	mov	r0, r8
 80090e8:	4649      	mov	r1, r9
 80090ea:	2200      	movs	r2, #0
 80090ec:	f7f7 fa9c 	bl	8000628 <__aeabi_dmul>
 80090f0:	4b4a      	ldr	r3, [pc, #296]	; (800921c <_strtod_l+0x93c>)
 80090f2:	400b      	ands	r3, r1
 80090f4:	4680      	mov	r8, r0
 80090f6:	4689      	mov	r9, r1
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f47f ae3f 	bne.w	8008d7c <_strtod_l+0x49c>
 80090fe:	2322      	movs	r3, #34	; 0x22
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	e63b      	b.n	8008d7c <_strtod_l+0x49c>
 8009104:	f04f 32ff 	mov.w	r2, #4294967295
 8009108:	fa02 f303 	lsl.w	r3, r2, r3
 800910c:	ea03 0808 	and.w	r8, r3, r8
 8009110:	e6e8      	b.n	8008ee4 <_strtod_l+0x604>
 8009112:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009116:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800911a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800911e:	36e2      	adds	r6, #226	; 0xe2
 8009120:	fa01 f306 	lsl.w	r3, r1, r6
 8009124:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009128:	e748      	b.n	8008fbc <_strtod_l+0x6dc>
 800912a:	2100      	movs	r1, #0
 800912c:	2301      	movs	r3, #1
 800912e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009132:	e743      	b.n	8008fbc <_strtod_l+0x6dc>
 8009134:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009136:	4632      	mov	r2, r6
 8009138:	4620      	mov	r0, r4
 800913a:	f7ff f961 	bl	8008400 <__lshift>
 800913e:	9016      	str	r0, [sp, #88]	; 0x58
 8009140:	2800      	cmp	r0, #0
 8009142:	f47f af6b 	bne.w	800901c <_strtod_l+0x73c>
 8009146:	e60f      	b.n	8008d68 <_strtod_l+0x488>
 8009148:	46ca      	mov	sl, r9
 800914a:	d171      	bne.n	8009230 <_strtod_l+0x950>
 800914c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800914e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009152:	b352      	cbz	r2, 80091aa <_strtod_l+0x8ca>
 8009154:	4a33      	ldr	r2, [pc, #204]	; (8009224 <_strtod_l+0x944>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d12a      	bne.n	80091b0 <_strtod_l+0x8d0>
 800915a:	9b04      	ldr	r3, [sp, #16]
 800915c:	4641      	mov	r1, r8
 800915e:	b1fb      	cbz	r3, 80091a0 <_strtod_l+0x8c0>
 8009160:	4b2e      	ldr	r3, [pc, #184]	; (800921c <_strtod_l+0x93c>)
 8009162:	ea09 0303 	and.w	r3, r9, r3
 8009166:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800916a:	f04f 32ff 	mov.w	r2, #4294967295
 800916e:	d81a      	bhi.n	80091a6 <_strtod_l+0x8c6>
 8009170:	0d1b      	lsrs	r3, r3, #20
 8009172:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009176:	fa02 f303 	lsl.w	r3, r2, r3
 800917a:	4299      	cmp	r1, r3
 800917c:	d118      	bne.n	80091b0 <_strtod_l+0x8d0>
 800917e:	4b2a      	ldr	r3, [pc, #168]	; (8009228 <_strtod_l+0x948>)
 8009180:	459a      	cmp	sl, r3
 8009182:	d102      	bne.n	800918a <_strtod_l+0x8aa>
 8009184:	3101      	adds	r1, #1
 8009186:	f43f adef 	beq.w	8008d68 <_strtod_l+0x488>
 800918a:	4b24      	ldr	r3, [pc, #144]	; (800921c <_strtod_l+0x93c>)
 800918c:	ea0a 0303 	and.w	r3, sl, r3
 8009190:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009194:	f04f 0800 	mov.w	r8, #0
 8009198:	9b04      	ldr	r3, [sp, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1a2      	bne.n	80090e4 <_strtod_l+0x804>
 800919e:	e5ed      	b.n	8008d7c <_strtod_l+0x49c>
 80091a0:	f04f 33ff 	mov.w	r3, #4294967295
 80091a4:	e7e9      	b.n	800917a <_strtod_l+0x89a>
 80091a6:	4613      	mov	r3, r2
 80091a8:	e7e7      	b.n	800917a <_strtod_l+0x89a>
 80091aa:	ea53 0308 	orrs.w	r3, r3, r8
 80091ae:	d08a      	beq.n	80090c6 <_strtod_l+0x7e6>
 80091b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091b2:	b1e3      	cbz	r3, 80091ee <_strtod_l+0x90e>
 80091b4:	ea13 0f0a 	tst.w	r3, sl
 80091b8:	d0ee      	beq.n	8009198 <_strtod_l+0x8b8>
 80091ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091bc:	9a04      	ldr	r2, [sp, #16]
 80091be:	4640      	mov	r0, r8
 80091c0:	4649      	mov	r1, r9
 80091c2:	b1c3      	cbz	r3, 80091f6 <_strtod_l+0x916>
 80091c4:	f7ff fb6f 	bl	80088a6 <sulp>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	ec51 0b18 	vmov	r0, r1, d8
 80091d0:	f7f7 f874 	bl	80002bc <__adddf3>
 80091d4:	4680      	mov	r8, r0
 80091d6:	4689      	mov	r9, r1
 80091d8:	e7de      	b.n	8009198 <_strtod_l+0x8b8>
 80091da:	4013      	ands	r3, r2
 80091dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80091e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80091e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80091e8:	f04f 38ff 	mov.w	r8, #4294967295
 80091ec:	e7d4      	b.n	8009198 <_strtod_l+0x8b8>
 80091ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091f0:	ea13 0f08 	tst.w	r3, r8
 80091f4:	e7e0      	b.n	80091b8 <_strtod_l+0x8d8>
 80091f6:	f7ff fb56 	bl	80088a6 <sulp>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	ec51 0b18 	vmov	r0, r1, d8
 8009202:	f7f7 f859 	bl	80002b8 <__aeabi_dsub>
 8009206:	2200      	movs	r2, #0
 8009208:	2300      	movs	r3, #0
 800920a:	4680      	mov	r8, r0
 800920c:	4689      	mov	r9, r1
 800920e:	f7f7 fc73 	bl	8000af8 <__aeabi_dcmpeq>
 8009212:	2800      	cmp	r0, #0
 8009214:	d0c0      	beq.n	8009198 <_strtod_l+0x8b8>
 8009216:	e618      	b.n	8008e4a <_strtod_l+0x56a>
 8009218:	fffffc02 	.word	0xfffffc02
 800921c:	7ff00000 	.word	0x7ff00000
 8009220:	39500000 	.word	0x39500000
 8009224:	000fffff 	.word	0x000fffff
 8009228:	7fefffff 	.word	0x7fefffff
 800922c:	0800c8d0 	.word	0x0800c8d0
 8009230:	4659      	mov	r1, fp
 8009232:	4628      	mov	r0, r5
 8009234:	f7ff fac0 	bl	80087b8 <__ratio>
 8009238:	ec57 6b10 	vmov	r6, r7, d0
 800923c:	ee10 0a10 	vmov	r0, s0
 8009240:	2200      	movs	r2, #0
 8009242:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009246:	4639      	mov	r1, r7
 8009248:	f7f7 fc6a 	bl	8000b20 <__aeabi_dcmple>
 800924c:	2800      	cmp	r0, #0
 800924e:	d071      	beq.n	8009334 <_strtod_l+0xa54>
 8009250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009252:	2b00      	cmp	r3, #0
 8009254:	d17c      	bne.n	8009350 <_strtod_l+0xa70>
 8009256:	f1b8 0f00 	cmp.w	r8, #0
 800925a:	d15a      	bne.n	8009312 <_strtod_l+0xa32>
 800925c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009260:	2b00      	cmp	r3, #0
 8009262:	d15d      	bne.n	8009320 <_strtod_l+0xa40>
 8009264:	4b90      	ldr	r3, [pc, #576]	; (80094a8 <_strtod_l+0xbc8>)
 8009266:	2200      	movs	r2, #0
 8009268:	4630      	mov	r0, r6
 800926a:	4639      	mov	r1, r7
 800926c:	f7f7 fc4e 	bl	8000b0c <__aeabi_dcmplt>
 8009270:	2800      	cmp	r0, #0
 8009272:	d15c      	bne.n	800932e <_strtod_l+0xa4e>
 8009274:	4630      	mov	r0, r6
 8009276:	4639      	mov	r1, r7
 8009278:	4b8c      	ldr	r3, [pc, #560]	; (80094ac <_strtod_l+0xbcc>)
 800927a:	2200      	movs	r2, #0
 800927c:	f7f7 f9d4 	bl	8000628 <__aeabi_dmul>
 8009280:	4606      	mov	r6, r0
 8009282:	460f      	mov	r7, r1
 8009284:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009288:	9606      	str	r6, [sp, #24]
 800928a:	9307      	str	r3, [sp, #28]
 800928c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009290:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009294:	4b86      	ldr	r3, [pc, #536]	; (80094b0 <_strtod_l+0xbd0>)
 8009296:	ea0a 0303 	and.w	r3, sl, r3
 800929a:	930d      	str	r3, [sp, #52]	; 0x34
 800929c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800929e:	4b85      	ldr	r3, [pc, #532]	; (80094b4 <_strtod_l+0xbd4>)
 80092a0:	429a      	cmp	r2, r3
 80092a2:	f040 8090 	bne.w	80093c6 <_strtod_l+0xae6>
 80092a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80092aa:	ec49 8b10 	vmov	d0, r8, r9
 80092ae:	f7ff f9b9 	bl	8008624 <__ulp>
 80092b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092b6:	ec51 0b10 	vmov	r0, r1, d0
 80092ba:	f7f7 f9b5 	bl	8000628 <__aeabi_dmul>
 80092be:	4642      	mov	r2, r8
 80092c0:	464b      	mov	r3, r9
 80092c2:	f7f6 fffb 	bl	80002bc <__adddf3>
 80092c6:	460b      	mov	r3, r1
 80092c8:	4979      	ldr	r1, [pc, #484]	; (80094b0 <_strtod_l+0xbd0>)
 80092ca:	4a7b      	ldr	r2, [pc, #492]	; (80094b8 <_strtod_l+0xbd8>)
 80092cc:	4019      	ands	r1, r3
 80092ce:	4291      	cmp	r1, r2
 80092d0:	4680      	mov	r8, r0
 80092d2:	d944      	bls.n	800935e <_strtod_l+0xa7e>
 80092d4:	ee18 2a90 	vmov	r2, s17
 80092d8:	4b78      	ldr	r3, [pc, #480]	; (80094bc <_strtod_l+0xbdc>)
 80092da:	429a      	cmp	r2, r3
 80092dc:	d104      	bne.n	80092e8 <_strtod_l+0xa08>
 80092de:	ee18 3a10 	vmov	r3, s16
 80092e2:	3301      	adds	r3, #1
 80092e4:	f43f ad40 	beq.w	8008d68 <_strtod_l+0x488>
 80092e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80094bc <_strtod_l+0xbdc>
 80092ec:	f04f 38ff 	mov.w	r8, #4294967295
 80092f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80092f2:	4620      	mov	r0, r4
 80092f4:	f7fe fe6a 	bl	8007fcc <_Bfree>
 80092f8:	9905      	ldr	r1, [sp, #20]
 80092fa:	4620      	mov	r0, r4
 80092fc:	f7fe fe66 	bl	8007fcc <_Bfree>
 8009300:	4659      	mov	r1, fp
 8009302:	4620      	mov	r0, r4
 8009304:	f7fe fe62 	bl	8007fcc <_Bfree>
 8009308:	4629      	mov	r1, r5
 800930a:	4620      	mov	r0, r4
 800930c:	f7fe fe5e 	bl	8007fcc <_Bfree>
 8009310:	e609      	b.n	8008f26 <_strtod_l+0x646>
 8009312:	f1b8 0f01 	cmp.w	r8, #1
 8009316:	d103      	bne.n	8009320 <_strtod_l+0xa40>
 8009318:	f1b9 0f00 	cmp.w	r9, #0
 800931c:	f43f ad95 	beq.w	8008e4a <_strtod_l+0x56a>
 8009320:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009478 <_strtod_l+0xb98>
 8009324:	4f60      	ldr	r7, [pc, #384]	; (80094a8 <_strtod_l+0xbc8>)
 8009326:	ed8d 7b06 	vstr	d7, [sp, #24]
 800932a:	2600      	movs	r6, #0
 800932c:	e7ae      	b.n	800928c <_strtod_l+0x9ac>
 800932e:	4f5f      	ldr	r7, [pc, #380]	; (80094ac <_strtod_l+0xbcc>)
 8009330:	2600      	movs	r6, #0
 8009332:	e7a7      	b.n	8009284 <_strtod_l+0x9a4>
 8009334:	4b5d      	ldr	r3, [pc, #372]	; (80094ac <_strtod_l+0xbcc>)
 8009336:	4630      	mov	r0, r6
 8009338:	4639      	mov	r1, r7
 800933a:	2200      	movs	r2, #0
 800933c:	f7f7 f974 	bl	8000628 <__aeabi_dmul>
 8009340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009342:	4606      	mov	r6, r0
 8009344:	460f      	mov	r7, r1
 8009346:	2b00      	cmp	r3, #0
 8009348:	d09c      	beq.n	8009284 <_strtod_l+0x9a4>
 800934a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800934e:	e79d      	b.n	800928c <_strtod_l+0x9ac>
 8009350:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009480 <_strtod_l+0xba0>
 8009354:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009358:	ec57 6b17 	vmov	r6, r7, d7
 800935c:	e796      	b.n	800928c <_strtod_l+0x9ac>
 800935e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009362:	9b04      	ldr	r3, [sp, #16]
 8009364:	46ca      	mov	sl, r9
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1c2      	bne.n	80092f0 <_strtod_l+0xa10>
 800936a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800936e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009370:	0d1b      	lsrs	r3, r3, #20
 8009372:	051b      	lsls	r3, r3, #20
 8009374:	429a      	cmp	r2, r3
 8009376:	d1bb      	bne.n	80092f0 <_strtod_l+0xa10>
 8009378:	4630      	mov	r0, r6
 800937a:	4639      	mov	r1, r7
 800937c:	f7f7 fcb4 	bl	8000ce8 <__aeabi_d2lz>
 8009380:	f7f7 f924 	bl	80005cc <__aeabi_l2d>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4630      	mov	r0, r6
 800938a:	4639      	mov	r1, r7
 800938c:	f7f6 ff94 	bl	80002b8 <__aeabi_dsub>
 8009390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009392:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009396:	ea43 0308 	orr.w	r3, r3, r8
 800939a:	4313      	orrs	r3, r2
 800939c:	4606      	mov	r6, r0
 800939e:	460f      	mov	r7, r1
 80093a0:	d054      	beq.n	800944c <_strtod_l+0xb6c>
 80093a2:	a339      	add	r3, pc, #228	; (adr r3, 8009488 <_strtod_l+0xba8>)
 80093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a8:	f7f7 fbb0 	bl	8000b0c <__aeabi_dcmplt>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f47f ace5 	bne.w	8008d7c <_strtod_l+0x49c>
 80093b2:	a337      	add	r3, pc, #220	; (adr r3, 8009490 <_strtod_l+0xbb0>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f7 fbc4 	bl	8000b48 <__aeabi_dcmpgt>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d095      	beq.n	80092f0 <_strtod_l+0xa10>
 80093c4:	e4da      	b.n	8008d7c <_strtod_l+0x49c>
 80093c6:	9b04      	ldr	r3, [sp, #16]
 80093c8:	b333      	cbz	r3, 8009418 <_strtod_l+0xb38>
 80093ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093d0:	d822      	bhi.n	8009418 <_strtod_l+0xb38>
 80093d2:	a331      	add	r3, pc, #196	; (adr r3, 8009498 <_strtod_l+0xbb8>)
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	4630      	mov	r0, r6
 80093da:	4639      	mov	r1, r7
 80093dc:	f7f7 fba0 	bl	8000b20 <__aeabi_dcmple>
 80093e0:	b1a0      	cbz	r0, 800940c <_strtod_l+0xb2c>
 80093e2:	4639      	mov	r1, r7
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7f7 fbf7 	bl	8000bd8 <__aeabi_d2uiz>
 80093ea:	2801      	cmp	r0, #1
 80093ec:	bf38      	it	cc
 80093ee:	2001      	movcc	r0, #1
 80093f0:	f7f7 f8a0 	bl	8000534 <__aeabi_ui2d>
 80093f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093f6:	4606      	mov	r6, r0
 80093f8:	460f      	mov	r7, r1
 80093fa:	bb23      	cbnz	r3, 8009446 <_strtod_l+0xb66>
 80093fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009400:	9010      	str	r0, [sp, #64]	; 0x40
 8009402:	9311      	str	r3, [sp, #68]	; 0x44
 8009404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009408:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800940c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800940e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009410:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009414:	1a9b      	subs	r3, r3, r2
 8009416:	930f      	str	r3, [sp, #60]	; 0x3c
 8009418:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800941c:	eeb0 0a48 	vmov.f32	s0, s16
 8009420:	eef0 0a68 	vmov.f32	s1, s17
 8009424:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009428:	f7ff f8fc 	bl	8008624 <__ulp>
 800942c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009430:	ec53 2b10 	vmov	r2, r3, d0
 8009434:	f7f7 f8f8 	bl	8000628 <__aeabi_dmul>
 8009438:	ec53 2b18 	vmov	r2, r3, d8
 800943c:	f7f6 ff3e 	bl	80002bc <__adddf3>
 8009440:	4680      	mov	r8, r0
 8009442:	4689      	mov	r9, r1
 8009444:	e78d      	b.n	8009362 <_strtod_l+0xa82>
 8009446:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800944a:	e7db      	b.n	8009404 <_strtod_l+0xb24>
 800944c:	a314      	add	r3, pc, #80	; (adr r3, 80094a0 <_strtod_l+0xbc0>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f7 fb5b 	bl	8000b0c <__aeabi_dcmplt>
 8009456:	e7b3      	b.n	80093c0 <_strtod_l+0xae0>
 8009458:	2300      	movs	r3, #0
 800945a:	930a      	str	r3, [sp, #40]	; 0x28
 800945c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800945e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009460:	6013      	str	r3, [r2, #0]
 8009462:	f7ff ba7c 	b.w	800895e <_strtod_l+0x7e>
 8009466:	2a65      	cmp	r2, #101	; 0x65
 8009468:	f43f ab75 	beq.w	8008b56 <_strtod_l+0x276>
 800946c:	2a45      	cmp	r2, #69	; 0x45
 800946e:	f43f ab72 	beq.w	8008b56 <_strtod_l+0x276>
 8009472:	2301      	movs	r3, #1
 8009474:	f7ff bbaa 	b.w	8008bcc <_strtod_l+0x2ec>
 8009478:	00000000 	.word	0x00000000
 800947c:	bff00000 	.word	0xbff00000
 8009480:	00000000 	.word	0x00000000
 8009484:	3ff00000 	.word	0x3ff00000
 8009488:	94a03595 	.word	0x94a03595
 800948c:	3fdfffff 	.word	0x3fdfffff
 8009490:	35afe535 	.word	0x35afe535
 8009494:	3fe00000 	.word	0x3fe00000
 8009498:	ffc00000 	.word	0xffc00000
 800949c:	41dfffff 	.word	0x41dfffff
 80094a0:	94a03595 	.word	0x94a03595
 80094a4:	3fcfffff 	.word	0x3fcfffff
 80094a8:	3ff00000 	.word	0x3ff00000
 80094ac:	3fe00000 	.word	0x3fe00000
 80094b0:	7ff00000 	.word	0x7ff00000
 80094b4:	7fe00000 	.word	0x7fe00000
 80094b8:	7c9fffff 	.word	0x7c9fffff
 80094bc:	7fefffff 	.word	0x7fefffff

080094c0 <_strtod_r>:
 80094c0:	4b01      	ldr	r3, [pc, #4]	; (80094c8 <_strtod_r+0x8>)
 80094c2:	f7ff ba0d 	b.w	80088e0 <_strtod_l>
 80094c6:	bf00      	nop
 80094c8:	20000068 	.word	0x20000068

080094cc <_strtol_l.constprop.0>:
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d2:	d001      	beq.n	80094d8 <_strtol_l.constprop.0+0xc>
 80094d4:	2b24      	cmp	r3, #36	; 0x24
 80094d6:	d906      	bls.n	80094e6 <_strtol_l.constprop.0+0x1a>
 80094d8:	f7fd fd82 	bl	8006fe0 <__errno>
 80094dc:	2316      	movs	r3, #22
 80094de:	6003      	str	r3, [r0, #0]
 80094e0:	2000      	movs	r0, #0
 80094e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80095cc <_strtol_l.constprop.0+0x100>
 80094ea:	460d      	mov	r5, r1
 80094ec:	462e      	mov	r6, r5
 80094ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80094f6:	f017 0708 	ands.w	r7, r7, #8
 80094fa:	d1f7      	bne.n	80094ec <_strtol_l.constprop.0+0x20>
 80094fc:	2c2d      	cmp	r4, #45	; 0x2d
 80094fe:	d132      	bne.n	8009566 <_strtol_l.constprop.0+0x9a>
 8009500:	782c      	ldrb	r4, [r5, #0]
 8009502:	2701      	movs	r7, #1
 8009504:	1cb5      	adds	r5, r6, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d05b      	beq.n	80095c2 <_strtol_l.constprop.0+0xf6>
 800950a:	2b10      	cmp	r3, #16
 800950c:	d109      	bne.n	8009522 <_strtol_l.constprop.0+0x56>
 800950e:	2c30      	cmp	r4, #48	; 0x30
 8009510:	d107      	bne.n	8009522 <_strtol_l.constprop.0+0x56>
 8009512:	782c      	ldrb	r4, [r5, #0]
 8009514:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009518:	2c58      	cmp	r4, #88	; 0x58
 800951a:	d14d      	bne.n	80095b8 <_strtol_l.constprop.0+0xec>
 800951c:	786c      	ldrb	r4, [r5, #1]
 800951e:	2310      	movs	r3, #16
 8009520:	3502      	adds	r5, #2
 8009522:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009526:	f108 38ff 	add.w	r8, r8, #4294967295
 800952a:	f04f 0e00 	mov.w	lr, #0
 800952e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009532:	4676      	mov	r6, lr
 8009534:	fb03 8a19 	mls	sl, r3, r9, r8
 8009538:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800953c:	f1bc 0f09 	cmp.w	ip, #9
 8009540:	d816      	bhi.n	8009570 <_strtol_l.constprop.0+0xa4>
 8009542:	4664      	mov	r4, ip
 8009544:	42a3      	cmp	r3, r4
 8009546:	dd24      	ble.n	8009592 <_strtol_l.constprop.0+0xc6>
 8009548:	f1be 3fff 	cmp.w	lr, #4294967295
 800954c:	d008      	beq.n	8009560 <_strtol_l.constprop.0+0x94>
 800954e:	45b1      	cmp	r9, r6
 8009550:	d31c      	bcc.n	800958c <_strtol_l.constprop.0+0xc0>
 8009552:	d101      	bne.n	8009558 <_strtol_l.constprop.0+0x8c>
 8009554:	45a2      	cmp	sl, r4
 8009556:	db19      	blt.n	800958c <_strtol_l.constprop.0+0xc0>
 8009558:	fb06 4603 	mla	r6, r6, r3, r4
 800955c:	f04f 0e01 	mov.w	lr, #1
 8009560:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009564:	e7e8      	b.n	8009538 <_strtol_l.constprop.0+0x6c>
 8009566:	2c2b      	cmp	r4, #43	; 0x2b
 8009568:	bf04      	itt	eq
 800956a:	782c      	ldrbeq	r4, [r5, #0]
 800956c:	1cb5      	addeq	r5, r6, #2
 800956e:	e7ca      	b.n	8009506 <_strtol_l.constprop.0+0x3a>
 8009570:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009574:	f1bc 0f19 	cmp.w	ip, #25
 8009578:	d801      	bhi.n	800957e <_strtol_l.constprop.0+0xb2>
 800957a:	3c37      	subs	r4, #55	; 0x37
 800957c:	e7e2      	b.n	8009544 <_strtol_l.constprop.0+0x78>
 800957e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009582:	f1bc 0f19 	cmp.w	ip, #25
 8009586:	d804      	bhi.n	8009592 <_strtol_l.constprop.0+0xc6>
 8009588:	3c57      	subs	r4, #87	; 0x57
 800958a:	e7db      	b.n	8009544 <_strtol_l.constprop.0+0x78>
 800958c:	f04f 3eff 	mov.w	lr, #4294967295
 8009590:	e7e6      	b.n	8009560 <_strtol_l.constprop.0+0x94>
 8009592:	f1be 3fff 	cmp.w	lr, #4294967295
 8009596:	d105      	bne.n	80095a4 <_strtol_l.constprop.0+0xd8>
 8009598:	2322      	movs	r3, #34	; 0x22
 800959a:	6003      	str	r3, [r0, #0]
 800959c:	4646      	mov	r6, r8
 800959e:	b942      	cbnz	r2, 80095b2 <_strtol_l.constprop.0+0xe6>
 80095a0:	4630      	mov	r0, r6
 80095a2:	e79e      	b.n	80094e2 <_strtol_l.constprop.0+0x16>
 80095a4:	b107      	cbz	r7, 80095a8 <_strtol_l.constprop.0+0xdc>
 80095a6:	4276      	negs	r6, r6
 80095a8:	2a00      	cmp	r2, #0
 80095aa:	d0f9      	beq.n	80095a0 <_strtol_l.constprop.0+0xd4>
 80095ac:	f1be 0f00 	cmp.w	lr, #0
 80095b0:	d000      	beq.n	80095b4 <_strtol_l.constprop.0+0xe8>
 80095b2:	1e69      	subs	r1, r5, #1
 80095b4:	6011      	str	r1, [r2, #0]
 80095b6:	e7f3      	b.n	80095a0 <_strtol_l.constprop.0+0xd4>
 80095b8:	2430      	movs	r4, #48	; 0x30
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1b1      	bne.n	8009522 <_strtol_l.constprop.0+0x56>
 80095be:	2308      	movs	r3, #8
 80095c0:	e7af      	b.n	8009522 <_strtol_l.constprop.0+0x56>
 80095c2:	2c30      	cmp	r4, #48	; 0x30
 80095c4:	d0a5      	beq.n	8009512 <_strtol_l.constprop.0+0x46>
 80095c6:	230a      	movs	r3, #10
 80095c8:	e7ab      	b.n	8009522 <_strtol_l.constprop.0+0x56>
 80095ca:	bf00      	nop
 80095cc:	0800c8f9 	.word	0x0800c8f9

080095d0 <_strtol_r>:
 80095d0:	f7ff bf7c 	b.w	80094cc <_strtol_l.constprop.0>

080095d4 <__ssputs_r>:
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	688e      	ldr	r6, [r1, #8]
 80095da:	461f      	mov	r7, r3
 80095dc:	42be      	cmp	r6, r7
 80095de:	680b      	ldr	r3, [r1, #0]
 80095e0:	4682      	mov	sl, r0
 80095e2:	460c      	mov	r4, r1
 80095e4:	4690      	mov	r8, r2
 80095e6:	d82c      	bhi.n	8009642 <__ssputs_r+0x6e>
 80095e8:	898a      	ldrh	r2, [r1, #12]
 80095ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095ee:	d026      	beq.n	800963e <__ssputs_r+0x6a>
 80095f0:	6965      	ldr	r5, [r4, #20]
 80095f2:	6909      	ldr	r1, [r1, #16]
 80095f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095f8:	eba3 0901 	sub.w	r9, r3, r1
 80095fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009600:	1c7b      	adds	r3, r7, #1
 8009602:	444b      	add	r3, r9
 8009604:	106d      	asrs	r5, r5, #1
 8009606:	429d      	cmp	r5, r3
 8009608:	bf38      	it	cc
 800960a:	461d      	movcc	r5, r3
 800960c:	0553      	lsls	r3, r2, #21
 800960e:	d527      	bpl.n	8009660 <__ssputs_r+0x8c>
 8009610:	4629      	mov	r1, r5
 8009612:	f7fe fc0f 	bl	8007e34 <_malloc_r>
 8009616:	4606      	mov	r6, r0
 8009618:	b360      	cbz	r0, 8009674 <__ssputs_r+0xa0>
 800961a:	6921      	ldr	r1, [r4, #16]
 800961c:	464a      	mov	r2, r9
 800961e:	f000 fdaf 	bl	800a180 <memcpy>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800962c:	81a3      	strh	r3, [r4, #12]
 800962e:	6126      	str	r6, [r4, #16]
 8009630:	6165      	str	r5, [r4, #20]
 8009632:	444e      	add	r6, r9
 8009634:	eba5 0509 	sub.w	r5, r5, r9
 8009638:	6026      	str	r6, [r4, #0]
 800963a:	60a5      	str	r5, [r4, #8]
 800963c:	463e      	mov	r6, r7
 800963e:	42be      	cmp	r6, r7
 8009640:	d900      	bls.n	8009644 <__ssputs_r+0x70>
 8009642:	463e      	mov	r6, r7
 8009644:	6820      	ldr	r0, [r4, #0]
 8009646:	4632      	mov	r2, r6
 8009648:	4641      	mov	r1, r8
 800964a:	f000 fd5c 	bl	800a106 <memmove>
 800964e:	68a3      	ldr	r3, [r4, #8]
 8009650:	1b9b      	subs	r3, r3, r6
 8009652:	60a3      	str	r3, [r4, #8]
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	4433      	add	r3, r6
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	2000      	movs	r0, #0
 800965c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009660:	462a      	mov	r2, r5
 8009662:	f001 f942 	bl	800a8ea <_realloc_r>
 8009666:	4606      	mov	r6, r0
 8009668:	2800      	cmp	r0, #0
 800966a:	d1e0      	bne.n	800962e <__ssputs_r+0x5a>
 800966c:	6921      	ldr	r1, [r4, #16]
 800966e:	4650      	mov	r0, sl
 8009670:	f7fe fb6c 	bl	8007d4c <_free_r>
 8009674:	230c      	movs	r3, #12
 8009676:	f8ca 3000 	str.w	r3, [sl]
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009680:	81a3      	strh	r3, [r4, #12]
 8009682:	f04f 30ff 	mov.w	r0, #4294967295
 8009686:	e7e9      	b.n	800965c <__ssputs_r+0x88>

08009688 <_svfiprintf_r>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	4698      	mov	r8, r3
 800968e:	898b      	ldrh	r3, [r1, #12]
 8009690:	061b      	lsls	r3, r3, #24
 8009692:	b09d      	sub	sp, #116	; 0x74
 8009694:	4607      	mov	r7, r0
 8009696:	460d      	mov	r5, r1
 8009698:	4614      	mov	r4, r2
 800969a:	d50e      	bpl.n	80096ba <_svfiprintf_r+0x32>
 800969c:	690b      	ldr	r3, [r1, #16]
 800969e:	b963      	cbnz	r3, 80096ba <_svfiprintf_r+0x32>
 80096a0:	2140      	movs	r1, #64	; 0x40
 80096a2:	f7fe fbc7 	bl	8007e34 <_malloc_r>
 80096a6:	6028      	str	r0, [r5, #0]
 80096a8:	6128      	str	r0, [r5, #16]
 80096aa:	b920      	cbnz	r0, 80096b6 <_svfiprintf_r+0x2e>
 80096ac:	230c      	movs	r3, #12
 80096ae:	603b      	str	r3, [r7, #0]
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295
 80096b4:	e0d0      	b.n	8009858 <_svfiprintf_r+0x1d0>
 80096b6:	2340      	movs	r3, #64	; 0x40
 80096b8:	616b      	str	r3, [r5, #20]
 80096ba:	2300      	movs	r3, #0
 80096bc:	9309      	str	r3, [sp, #36]	; 0x24
 80096be:	2320      	movs	r3, #32
 80096c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c8:	2330      	movs	r3, #48	; 0x30
 80096ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009870 <_svfiprintf_r+0x1e8>
 80096ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096d2:	f04f 0901 	mov.w	r9, #1
 80096d6:	4623      	mov	r3, r4
 80096d8:	469a      	mov	sl, r3
 80096da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096de:	b10a      	cbz	r2, 80096e4 <_svfiprintf_r+0x5c>
 80096e0:	2a25      	cmp	r2, #37	; 0x25
 80096e2:	d1f9      	bne.n	80096d8 <_svfiprintf_r+0x50>
 80096e4:	ebba 0b04 	subs.w	fp, sl, r4
 80096e8:	d00b      	beq.n	8009702 <_svfiprintf_r+0x7a>
 80096ea:	465b      	mov	r3, fp
 80096ec:	4622      	mov	r2, r4
 80096ee:	4629      	mov	r1, r5
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff ff6f 	bl	80095d4 <__ssputs_r>
 80096f6:	3001      	adds	r0, #1
 80096f8:	f000 80a9 	beq.w	800984e <_svfiprintf_r+0x1c6>
 80096fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fe:	445a      	add	r2, fp
 8009700:	9209      	str	r2, [sp, #36]	; 0x24
 8009702:	f89a 3000 	ldrb.w	r3, [sl]
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 80a1 	beq.w	800984e <_svfiprintf_r+0x1c6>
 800970c:	2300      	movs	r3, #0
 800970e:	f04f 32ff 	mov.w	r2, #4294967295
 8009712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009716:	f10a 0a01 	add.w	sl, sl, #1
 800971a:	9304      	str	r3, [sp, #16]
 800971c:	9307      	str	r3, [sp, #28]
 800971e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009722:	931a      	str	r3, [sp, #104]	; 0x68
 8009724:	4654      	mov	r4, sl
 8009726:	2205      	movs	r2, #5
 8009728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800972c:	4850      	ldr	r0, [pc, #320]	; (8009870 <_svfiprintf_r+0x1e8>)
 800972e:	f7f6 fd67 	bl	8000200 <memchr>
 8009732:	9a04      	ldr	r2, [sp, #16]
 8009734:	b9d8      	cbnz	r0, 800976e <_svfiprintf_r+0xe6>
 8009736:	06d0      	lsls	r0, r2, #27
 8009738:	bf44      	itt	mi
 800973a:	2320      	movmi	r3, #32
 800973c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009740:	0711      	lsls	r1, r2, #28
 8009742:	bf44      	itt	mi
 8009744:	232b      	movmi	r3, #43	; 0x2b
 8009746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800974a:	f89a 3000 	ldrb.w	r3, [sl]
 800974e:	2b2a      	cmp	r3, #42	; 0x2a
 8009750:	d015      	beq.n	800977e <_svfiprintf_r+0xf6>
 8009752:	9a07      	ldr	r2, [sp, #28]
 8009754:	4654      	mov	r4, sl
 8009756:	2000      	movs	r0, #0
 8009758:	f04f 0c0a 	mov.w	ip, #10
 800975c:	4621      	mov	r1, r4
 800975e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009762:	3b30      	subs	r3, #48	; 0x30
 8009764:	2b09      	cmp	r3, #9
 8009766:	d94d      	bls.n	8009804 <_svfiprintf_r+0x17c>
 8009768:	b1b0      	cbz	r0, 8009798 <_svfiprintf_r+0x110>
 800976a:	9207      	str	r2, [sp, #28]
 800976c:	e014      	b.n	8009798 <_svfiprintf_r+0x110>
 800976e:	eba0 0308 	sub.w	r3, r0, r8
 8009772:	fa09 f303 	lsl.w	r3, r9, r3
 8009776:	4313      	orrs	r3, r2
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	46a2      	mov	sl, r4
 800977c:	e7d2      	b.n	8009724 <_svfiprintf_r+0x9c>
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	1d19      	adds	r1, r3, #4
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	9103      	str	r1, [sp, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	bfbb      	ittet	lt
 800978a:	425b      	neglt	r3, r3
 800978c:	f042 0202 	orrlt.w	r2, r2, #2
 8009790:	9307      	strge	r3, [sp, #28]
 8009792:	9307      	strlt	r3, [sp, #28]
 8009794:	bfb8      	it	lt
 8009796:	9204      	strlt	r2, [sp, #16]
 8009798:	7823      	ldrb	r3, [r4, #0]
 800979a:	2b2e      	cmp	r3, #46	; 0x2e
 800979c:	d10c      	bne.n	80097b8 <_svfiprintf_r+0x130>
 800979e:	7863      	ldrb	r3, [r4, #1]
 80097a0:	2b2a      	cmp	r3, #42	; 0x2a
 80097a2:	d134      	bne.n	800980e <_svfiprintf_r+0x186>
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	1d1a      	adds	r2, r3, #4
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	9203      	str	r2, [sp, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bfb8      	it	lt
 80097b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80097b4:	3402      	adds	r4, #2
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009880 <_svfiprintf_r+0x1f8>
 80097bc:	7821      	ldrb	r1, [r4, #0]
 80097be:	2203      	movs	r2, #3
 80097c0:	4650      	mov	r0, sl
 80097c2:	f7f6 fd1d 	bl	8000200 <memchr>
 80097c6:	b138      	cbz	r0, 80097d8 <_svfiprintf_r+0x150>
 80097c8:	9b04      	ldr	r3, [sp, #16]
 80097ca:	eba0 000a 	sub.w	r0, r0, sl
 80097ce:	2240      	movs	r2, #64	; 0x40
 80097d0:	4082      	lsls	r2, r0
 80097d2:	4313      	orrs	r3, r2
 80097d4:	3401      	adds	r4, #1
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097dc:	4825      	ldr	r0, [pc, #148]	; (8009874 <_svfiprintf_r+0x1ec>)
 80097de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097e2:	2206      	movs	r2, #6
 80097e4:	f7f6 fd0c 	bl	8000200 <memchr>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d038      	beq.n	800985e <_svfiprintf_r+0x1d6>
 80097ec:	4b22      	ldr	r3, [pc, #136]	; (8009878 <_svfiprintf_r+0x1f0>)
 80097ee:	bb1b      	cbnz	r3, 8009838 <_svfiprintf_r+0x1b0>
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	3307      	adds	r3, #7
 80097f4:	f023 0307 	bic.w	r3, r3, #7
 80097f8:	3308      	adds	r3, #8
 80097fa:	9303      	str	r3, [sp, #12]
 80097fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fe:	4433      	add	r3, r6
 8009800:	9309      	str	r3, [sp, #36]	; 0x24
 8009802:	e768      	b.n	80096d6 <_svfiprintf_r+0x4e>
 8009804:	fb0c 3202 	mla	r2, ip, r2, r3
 8009808:	460c      	mov	r4, r1
 800980a:	2001      	movs	r0, #1
 800980c:	e7a6      	b.n	800975c <_svfiprintf_r+0xd4>
 800980e:	2300      	movs	r3, #0
 8009810:	3401      	adds	r4, #1
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	4619      	mov	r1, r3
 8009816:	f04f 0c0a 	mov.w	ip, #10
 800981a:	4620      	mov	r0, r4
 800981c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009820:	3a30      	subs	r2, #48	; 0x30
 8009822:	2a09      	cmp	r2, #9
 8009824:	d903      	bls.n	800982e <_svfiprintf_r+0x1a6>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0c6      	beq.n	80097b8 <_svfiprintf_r+0x130>
 800982a:	9105      	str	r1, [sp, #20]
 800982c:	e7c4      	b.n	80097b8 <_svfiprintf_r+0x130>
 800982e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009832:	4604      	mov	r4, r0
 8009834:	2301      	movs	r3, #1
 8009836:	e7f0      	b.n	800981a <_svfiprintf_r+0x192>
 8009838:	ab03      	add	r3, sp, #12
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	462a      	mov	r2, r5
 800983e:	4b0f      	ldr	r3, [pc, #60]	; (800987c <_svfiprintf_r+0x1f4>)
 8009840:	a904      	add	r1, sp, #16
 8009842:	4638      	mov	r0, r7
 8009844:	f7fc fc50 	bl	80060e8 <_printf_float>
 8009848:	1c42      	adds	r2, r0, #1
 800984a:	4606      	mov	r6, r0
 800984c:	d1d6      	bne.n	80097fc <_svfiprintf_r+0x174>
 800984e:	89ab      	ldrh	r3, [r5, #12]
 8009850:	065b      	lsls	r3, r3, #25
 8009852:	f53f af2d 	bmi.w	80096b0 <_svfiprintf_r+0x28>
 8009856:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009858:	b01d      	add	sp, #116	; 0x74
 800985a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985e:	ab03      	add	r3, sp, #12
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	462a      	mov	r2, r5
 8009864:	4b05      	ldr	r3, [pc, #20]	; (800987c <_svfiprintf_r+0x1f4>)
 8009866:	a904      	add	r1, sp, #16
 8009868:	4638      	mov	r0, r7
 800986a:	f7fc fee1 	bl	8006630 <_printf_i>
 800986e:	e7eb      	b.n	8009848 <_svfiprintf_r+0x1c0>
 8009870:	0800c9f9 	.word	0x0800c9f9
 8009874:	0800ca03 	.word	0x0800ca03
 8009878:	080060e9 	.word	0x080060e9
 800987c:	080095d5 	.word	0x080095d5
 8009880:	0800c9ff 	.word	0x0800c9ff

08009884 <_sungetc_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	1c4b      	adds	r3, r1, #1
 8009888:	4614      	mov	r4, r2
 800988a:	d103      	bne.n	8009894 <_sungetc_r+0x10>
 800988c:	f04f 35ff 	mov.w	r5, #4294967295
 8009890:	4628      	mov	r0, r5
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	8993      	ldrh	r3, [r2, #12]
 8009896:	f023 0320 	bic.w	r3, r3, #32
 800989a:	8193      	strh	r3, [r2, #12]
 800989c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800989e:	6852      	ldr	r2, [r2, #4]
 80098a0:	b2cd      	uxtb	r5, r1
 80098a2:	b18b      	cbz	r3, 80098c8 <_sungetc_r+0x44>
 80098a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098a6:	4293      	cmp	r3, r2
 80098a8:	dd08      	ble.n	80098bc <_sungetc_r+0x38>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	1e5a      	subs	r2, r3, #1
 80098ae:	6022      	str	r2, [r4, #0]
 80098b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80098b4:	6863      	ldr	r3, [r4, #4]
 80098b6:	3301      	adds	r3, #1
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	e7e9      	b.n	8009890 <_sungetc_r+0xc>
 80098bc:	4621      	mov	r1, r4
 80098be:	f000 fbe8 	bl	800a092 <__submore>
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d0f1      	beq.n	80098aa <_sungetc_r+0x26>
 80098c6:	e7e1      	b.n	800988c <_sungetc_r+0x8>
 80098c8:	6921      	ldr	r1, [r4, #16]
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	b151      	cbz	r1, 80098e4 <_sungetc_r+0x60>
 80098ce:	4299      	cmp	r1, r3
 80098d0:	d208      	bcs.n	80098e4 <_sungetc_r+0x60>
 80098d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80098d6:	42a9      	cmp	r1, r5
 80098d8:	d104      	bne.n	80098e4 <_sungetc_r+0x60>
 80098da:	3b01      	subs	r3, #1
 80098dc:	3201      	adds	r2, #1
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	6062      	str	r2, [r4, #4]
 80098e2:	e7d5      	b.n	8009890 <_sungetc_r+0xc>
 80098e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80098e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098ec:	6363      	str	r3, [r4, #52]	; 0x34
 80098ee:	2303      	movs	r3, #3
 80098f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80098f2:	4623      	mov	r3, r4
 80098f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	2301      	movs	r3, #1
 80098fc:	e7dc      	b.n	80098b8 <_sungetc_r+0x34>

080098fe <__ssrefill_r>:
 80098fe:	b510      	push	{r4, lr}
 8009900:	460c      	mov	r4, r1
 8009902:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009904:	b169      	cbz	r1, 8009922 <__ssrefill_r+0x24>
 8009906:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800990a:	4299      	cmp	r1, r3
 800990c:	d001      	beq.n	8009912 <__ssrefill_r+0x14>
 800990e:	f7fe fa1d 	bl	8007d4c <_free_r>
 8009912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009914:	6063      	str	r3, [r4, #4]
 8009916:	2000      	movs	r0, #0
 8009918:	6360      	str	r0, [r4, #52]	; 0x34
 800991a:	b113      	cbz	r3, 8009922 <__ssrefill_r+0x24>
 800991c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800991e:	6023      	str	r3, [r4, #0]
 8009920:	bd10      	pop	{r4, pc}
 8009922:	6923      	ldr	r3, [r4, #16]
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	2300      	movs	r3, #0
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	f043 0320 	orr.w	r3, r3, #32
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	e7f3      	b.n	8009920 <__ssrefill_r+0x22>

08009938 <__ssvfiscanf_r>:
 8009938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800993c:	460c      	mov	r4, r1
 800993e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009942:	2100      	movs	r1, #0
 8009944:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009948:	49a6      	ldr	r1, [pc, #664]	; (8009be4 <__ssvfiscanf_r+0x2ac>)
 800994a:	91a0      	str	r1, [sp, #640]	; 0x280
 800994c:	f10d 0804 	add.w	r8, sp, #4
 8009950:	49a5      	ldr	r1, [pc, #660]	; (8009be8 <__ssvfiscanf_r+0x2b0>)
 8009952:	4fa6      	ldr	r7, [pc, #664]	; (8009bec <__ssvfiscanf_r+0x2b4>)
 8009954:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009bf0 <__ssvfiscanf_r+0x2b8>
 8009958:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800995c:	4606      	mov	r6, r0
 800995e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	7813      	ldrb	r3, [r2, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 815a 	beq.w	8009c1e <__ssvfiscanf_r+0x2e6>
 800996a:	5cf9      	ldrb	r1, [r7, r3]
 800996c:	f011 0108 	ands.w	r1, r1, #8
 8009970:	f102 0501 	add.w	r5, r2, #1
 8009974:	d019      	beq.n	80099aa <__ssvfiscanf_r+0x72>
 8009976:	6863      	ldr	r3, [r4, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	dd0f      	ble.n	800999c <__ssvfiscanf_r+0x64>
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	781a      	ldrb	r2, [r3, #0]
 8009980:	5cba      	ldrb	r2, [r7, r2]
 8009982:	0712      	lsls	r2, r2, #28
 8009984:	d401      	bmi.n	800998a <__ssvfiscanf_r+0x52>
 8009986:	462a      	mov	r2, r5
 8009988:	e7eb      	b.n	8009962 <__ssvfiscanf_r+0x2a>
 800998a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800998c:	3201      	adds	r2, #1
 800998e:	9245      	str	r2, [sp, #276]	; 0x114
 8009990:	6862      	ldr	r2, [r4, #4]
 8009992:	3301      	adds	r3, #1
 8009994:	3a01      	subs	r2, #1
 8009996:	6062      	str	r2, [r4, #4]
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	e7ec      	b.n	8009976 <__ssvfiscanf_r+0x3e>
 800999c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800999e:	4621      	mov	r1, r4
 80099a0:	4630      	mov	r0, r6
 80099a2:	4798      	blx	r3
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d0e9      	beq.n	800997c <__ssvfiscanf_r+0x44>
 80099a8:	e7ed      	b.n	8009986 <__ssvfiscanf_r+0x4e>
 80099aa:	2b25      	cmp	r3, #37	; 0x25
 80099ac:	d012      	beq.n	80099d4 <__ssvfiscanf_r+0x9c>
 80099ae:	469a      	mov	sl, r3
 80099b0:	6863      	ldr	r3, [r4, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f340 8091 	ble.w	8009ada <__ssvfiscanf_r+0x1a2>
 80099b8:	6822      	ldr	r2, [r4, #0]
 80099ba:	7813      	ldrb	r3, [r2, #0]
 80099bc:	4553      	cmp	r3, sl
 80099be:	f040 812e 	bne.w	8009c1e <__ssvfiscanf_r+0x2e6>
 80099c2:	6863      	ldr	r3, [r4, #4]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	6063      	str	r3, [r4, #4]
 80099c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80099ca:	3201      	adds	r2, #1
 80099cc:	3301      	adds	r3, #1
 80099ce:	6022      	str	r2, [r4, #0]
 80099d0:	9345      	str	r3, [sp, #276]	; 0x114
 80099d2:	e7d8      	b.n	8009986 <__ssvfiscanf_r+0x4e>
 80099d4:	9141      	str	r1, [sp, #260]	; 0x104
 80099d6:	9143      	str	r1, [sp, #268]	; 0x10c
 80099d8:	7853      	ldrb	r3, [r2, #1]
 80099da:	2b2a      	cmp	r3, #42	; 0x2a
 80099dc:	bf02      	ittt	eq
 80099de:	2310      	moveq	r3, #16
 80099e0:	1c95      	addeq	r5, r2, #2
 80099e2:	9341      	streq	r3, [sp, #260]	; 0x104
 80099e4:	220a      	movs	r2, #10
 80099e6:	46aa      	mov	sl, r5
 80099e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80099ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80099f0:	2b09      	cmp	r3, #9
 80099f2:	d91c      	bls.n	8009a2e <__ssvfiscanf_r+0xf6>
 80099f4:	487e      	ldr	r0, [pc, #504]	; (8009bf0 <__ssvfiscanf_r+0x2b8>)
 80099f6:	2203      	movs	r2, #3
 80099f8:	f7f6 fc02 	bl	8000200 <memchr>
 80099fc:	b138      	cbz	r0, 8009a0e <__ssvfiscanf_r+0xd6>
 80099fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a00:	eba0 0009 	sub.w	r0, r0, r9
 8009a04:	2301      	movs	r3, #1
 8009a06:	4083      	lsls	r3, r0
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	9341      	str	r3, [sp, #260]	; 0x104
 8009a0c:	4655      	mov	r5, sl
 8009a0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a12:	2b78      	cmp	r3, #120	; 0x78
 8009a14:	d806      	bhi.n	8009a24 <__ssvfiscanf_r+0xec>
 8009a16:	2b57      	cmp	r3, #87	; 0x57
 8009a18:	d810      	bhi.n	8009a3c <__ssvfiscanf_r+0x104>
 8009a1a:	2b25      	cmp	r3, #37	; 0x25
 8009a1c:	d0c7      	beq.n	80099ae <__ssvfiscanf_r+0x76>
 8009a1e:	d857      	bhi.n	8009ad0 <__ssvfiscanf_r+0x198>
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d065      	beq.n	8009af0 <__ssvfiscanf_r+0x1b8>
 8009a24:	2303      	movs	r3, #3
 8009a26:	9347      	str	r3, [sp, #284]	; 0x11c
 8009a28:	230a      	movs	r3, #10
 8009a2a:	9342      	str	r3, [sp, #264]	; 0x108
 8009a2c:	e076      	b.n	8009b1c <__ssvfiscanf_r+0x1e4>
 8009a2e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009a30:	fb02 1103 	mla	r1, r2, r3, r1
 8009a34:	3930      	subs	r1, #48	; 0x30
 8009a36:	9143      	str	r1, [sp, #268]	; 0x10c
 8009a38:	4655      	mov	r5, sl
 8009a3a:	e7d4      	b.n	80099e6 <__ssvfiscanf_r+0xae>
 8009a3c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009a40:	2a20      	cmp	r2, #32
 8009a42:	d8ef      	bhi.n	8009a24 <__ssvfiscanf_r+0xec>
 8009a44:	a101      	add	r1, pc, #4	; (adr r1, 8009a4c <__ssvfiscanf_r+0x114>)
 8009a46:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009a4a:	bf00      	nop
 8009a4c:	08009aff 	.word	0x08009aff
 8009a50:	08009a25 	.word	0x08009a25
 8009a54:	08009a25 	.word	0x08009a25
 8009a58:	08009b5d 	.word	0x08009b5d
 8009a5c:	08009a25 	.word	0x08009a25
 8009a60:	08009a25 	.word	0x08009a25
 8009a64:	08009a25 	.word	0x08009a25
 8009a68:	08009a25 	.word	0x08009a25
 8009a6c:	08009a25 	.word	0x08009a25
 8009a70:	08009a25 	.word	0x08009a25
 8009a74:	08009a25 	.word	0x08009a25
 8009a78:	08009b73 	.word	0x08009b73
 8009a7c:	08009b59 	.word	0x08009b59
 8009a80:	08009ad7 	.word	0x08009ad7
 8009a84:	08009ad7 	.word	0x08009ad7
 8009a88:	08009ad7 	.word	0x08009ad7
 8009a8c:	08009a25 	.word	0x08009a25
 8009a90:	08009b15 	.word	0x08009b15
 8009a94:	08009a25 	.word	0x08009a25
 8009a98:	08009a25 	.word	0x08009a25
 8009a9c:	08009a25 	.word	0x08009a25
 8009aa0:	08009a25 	.word	0x08009a25
 8009aa4:	08009b83 	.word	0x08009b83
 8009aa8:	08009b51 	.word	0x08009b51
 8009aac:	08009af7 	.word	0x08009af7
 8009ab0:	08009a25 	.word	0x08009a25
 8009ab4:	08009a25 	.word	0x08009a25
 8009ab8:	08009b7f 	.word	0x08009b7f
 8009abc:	08009a25 	.word	0x08009a25
 8009ac0:	08009b59 	.word	0x08009b59
 8009ac4:	08009a25 	.word	0x08009a25
 8009ac8:	08009a25 	.word	0x08009a25
 8009acc:	08009aff 	.word	0x08009aff
 8009ad0:	3b45      	subs	r3, #69	; 0x45
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d8a6      	bhi.n	8009a24 <__ssvfiscanf_r+0xec>
 8009ad6:	2305      	movs	r3, #5
 8009ad8:	e01f      	b.n	8009b1a <__ssvfiscanf_r+0x1e2>
 8009ada:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009adc:	4621      	mov	r1, r4
 8009ade:	4630      	mov	r0, r6
 8009ae0:	4798      	blx	r3
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	f43f af68 	beq.w	80099b8 <__ssvfiscanf_r+0x80>
 8009ae8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f040 808d 	bne.w	8009c0a <__ssvfiscanf_r+0x2d2>
 8009af0:	f04f 30ff 	mov.w	r0, #4294967295
 8009af4:	e08f      	b.n	8009c16 <__ssvfiscanf_r+0x2de>
 8009af6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009af8:	f042 0220 	orr.w	r2, r2, #32
 8009afc:	9241      	str	r2, [sp, #260]	; 0x104
 8009afe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b04:	9241      	str	r2, [sp, #260]	; 0x104
 8009b06:	2210      	movs	r2, #16
 8009b08:	2b6f      	cmp	r3, #111	; 0x6f
 8009b0a:	9242      	str	r2, [sp, #264]	; 0x108
 8009b0c:	bf34      	ite	cc
 8009b0e:	2303      	movcc	r3, #3
 8009b10:	2304      	movcs	r3, #4
 8009b12:	e002      	b.n	8009b1a <__ssvfiscanf_r+0x1e2>
 8009b14:	2300      	movs	r3, #0
 8009b16:	9342      	str	r3, [sp, #264]	; 0x108
 8009b18:	2303      	movs	r3, #3
 8009b1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8009b1c:	6863      	ldr	r3, [r4, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	dd3d      	ble.n	8009b9e <__ssvfiscanf_r+0x266>
 8009b22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b24:	0659      	lsls	r1, r3, #25
 8009b26:	d404      	bmi.n	8009b32 <__ssvfiscanf_r+0x1fa>
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	781a      	ldrb	r2, [r3, #0]
 8009b2c:	5cba      	ldrb	r2, [r7, r2]
 8009b2e:	0712      	lsls	r2, r2, #28
 8009b30:	d43c      	bmi.n	8009bac <__ssvfiscanf_r+0x274>
 8009b32:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	dc4b      	bgt.n	8009bd0 <__ssvfiscanf_r+0x298>
 8009b38:	466b      	mov	r3, sp
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	a941      	add	r1, sp, #260	; 0x104
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f000 f872 	bl	8009c28 <_scanf_chars>
 8009b44:	2801      	cmp	r0, #1
 8009b46:	d06a      	beq.n	8009c1e <__ssvfiscanf_r+0x2e6>
 8009b48:	2802      	cmp	r0, #2
 8009b4a:	f47f af1c 	bne.w	8009986 <__ssvfiscanf_r+0x4e>
 8009b4e:	e7cb      	b.n	8009ae8 <__ssvfiscanf_r+0x1b0>
 8009b50:	2308      	movs	r3, #8
 8009b52:	9342      	str	r3, [sp, #264]	; 0x108
 8009b54:	2304      	movs	r3, #4
 8009b56:	e7e0      	b.n	8009b1a <__ssvfiscanf_r+0x1e2>
 8009b58:	220a      	movs	r2, #10
 8009b5a:	e7d5      	b.n	8009b08 <__ssvfiscanf_r+0x1d0>
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	4640      	mov	r0, r8
 8009b60:	f000 fa5e 	bl	800a020 <__sccl>
 8009b64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b6a:	9341      	str	r3, [sp, #260]	; 0x104
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e7d3      	b.n	8009b1a <__ssvfiscanf_r+0x1e2>
 8009b72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b78:	9341      	str	r3, [sp, #260]	; 0x104
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e7cd      	b.n	8009b1a <__ssvfiscanf_r+0x1e2>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e7cb      	b.n	8009b1a <__ssvfiscanf_r+0x1e2>
 8009b82:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009b84:	06c3      	lsls	r3, r0, #27
 8009b86:	f53f aefe 	bmi.w	8009986 <__ssvfiscanf_r+0x4e>
 8009b8a:	9b00      	ldr	r3, [sp, #0]
 8009b8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b8e:	1d19      	adds	r1, r3, #4
 8009b90:	9100      	str	r1, [sp, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	07c0      	lsls	r0, r0, #31
 8009b96:	bf4c      	ite	mi
 8009b98:	801a      	strhmi	r2, [r3, #0]
 8009b9a:	601a      	strpl	r2, [r3, #0]
 8009b9c:	e6f3      	b.n	8009986 <__ssvfiscanf_r+0x4e>
 8009b9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	4798      	blx	r3
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d0bb      	beq.n	8009b22 <__ssvfiscanf_r+0x1ea>
 8009baa:	e79d      	b.n	8009ae8 <__ssvfiscanf_r+0x1b0>
 8009bac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009bae:	3201      	adds	r2, #1
 8009bb0:	9245      	str	r2, [sp, #276]	; 0x114
 8009bb2:	6862      	ldr	r2, [r4, #4]
 8009bb4:	3a01      	subs	r2, #1
 8009bb6:	2a00      	cmp	r2, #0
 8009bb8:	6062      	str	r2, [r4, #4]
 8009bba:	dd02      	ble.n	8009bc2 <__ssvfiscanf_r+0x28a>
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	e7b2      	b.n	8009b28 <__ssvfiscanf_r+0x1f0>
 8009bc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	4798      	blx	r3
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d0ac      	beq.n	8009b28 <__ssvfiscanf_r+0x1f0>
 8009bce:	e78b      	b.n	8009ae8 <__ssvfiscanf_r+0x1b0>
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	dc0f      	bgt.n	8009bf4 <__ssvfiscanf_r+0x2bc>
 8009bd4:	466b      	mov	r3, sp
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	a941      	add	r1, sp, #260	; 0x104
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f000 f87e 	bl	8009cdc <_scanf_i>
 8009be0:	e7b0      	b.n	8009b44 <__ssvfiscanf_r+0x20c>
 8009be2:	bf00      	nop
 8009be4:	08009885 	.word	0x08009885
 8009be8:	080098ff 	.word	0x080098ff
 8009bec:	0800c8f9 	.word	0x0800c8f9
 8009bf0:	0800c9ff 	.word	0x0800c9ff
 8009bf4:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <__ssvfiscanf_r+0x2ec>)
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f43f aec5 	beq.w	8009986 <__ssvfiscanf_r+0x4e>
 8009bfc:	466b      	mov	r3, sp
 8009bfe:	4622      	mov	r2, r4
 8009c00:	a941      	add	r1, sp, #260	; 0x104
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7fc fe36 	bl	8006874 <_scanf_float>
 8009c08:	e79c      	b.n	8009b44 <__ssvfiscanf_r+0x20c>
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009c10:	bf18      	it	ne
 8009c12:	f04f 30ff 	movne.w	r0, #4294967295
 8009c16:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009c20:	e7f9      	b.n	8009c16 <__ssvfiscanf_r+0x2de>
 8009c22:	bf00      	nop
 8009c24:	08006875 	.word	0x08006875

08009c28 <_scanf_chars>:
 8009c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c2c:	4615      	mov	r5, r2
 8009c2e:	688a      	ldr	r2, [r1, #8]
 8009c30:	4680      	mov	r8, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	b932      	cbnz	r2, 8009c44 <_scanf_chars+0x1c>
 8009c36:	698a      	ldr	r2, [r1, #24]
 8009c38:	2a00      	cmp	r2, #0
 8009c3a:	bf0c      	ite	eq
 8009c3c:	2201      	moveq	r2, #1
 8009c3e:	f04f 32ff 	movne.w	r2, #4294967295
 8009c42:	608a      	str	r2, [r1, #8]
 8009c44:	6822      	ldr	r2, [r4, #0]
 8009c46:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009cd8 <_scanf_chars+0xb0>
 8009c4a:	06d1      	lsls	r1, r2, #27
 8009c4c:	bf5f      	itttt	pl
 8009c4e:	681a      	ldrpl	r2, [r3, #0]
 8009c50:	1d11      	addpl	r1, r2, #4
 8009c52:	6019      	strpl	r1, [r3, #0]
 8009c54:	6816      	ldrpl	r6, [r2, #0]
 8009c56:	2700      	movs	r7, #0
 8009c58:	69a0      	ldr	r0, [r4, #24]
 8009c5a:	b188      	cbz	r0, 8009c80 <_scanf_chars+0x58>
 8009c5c:	2801      	cmp	r0, #1
 8009c5e:	d107      	bne.n	8009c70 <_scanf_chars+0x48>
 8009c60:	682a      	ldr	r2, [r5, #0]
 8009c62:	7811      	ldrb	r1, [r2, #0]
 8009c64:	6962      	ldr	r2, [r4, #20]
 8009c66:	5c52      	ldrb	r2, [r2, r1]
 8009c68:	b952      	cbnz	r2, 8009c80 <_scanf_chars+0x58>
 8009c6a:	2f00      	cmp	r7, #0
 8009c6c:	d031      	beq.n	8009cd2 <_scanf_chars+0xaa>
 8009c6e:	e022      	b.n	8009cb6 <_scanf_chars+0x8e>
 8009c70:	2802      	cmp	r0, #2
 8009c72:	d120      	bne.n	8009cb6 <_scanf_chars+0x8e>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009c7c:	071b      	lsls	r3, r3, #28
 8009c7e:	d41a      	bmi.n	8009cb6 <_scanf_chars+0x8e>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	06da      	lsls	r2, r3, #27
 8009c84:	bf5e      	ittt	pl
 8009c86:	682b      	ldrpl	r3, [r5, #0]
 8009c88:	781b      	ldrbpl	r3, [r3, #0]
 8009c8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009c8e:	682a      	ldr	r2, [r5, #0]
 8009c90:	686b      	ldr	r3, [r5, #4]
 8009c92:	3201      	adds	r2, #1
 8009c94:	602a      	str	r2, [r5, #0]
 8009c96:	68a2      	ldr	r2, [r4, #8]
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	3a01      	subs	r2, #1
 8009c9c:	606b      	str	r3, [r5, #4]
 8009c9e:	3701      	adds	r7, #1
 8009ca0:	60a2      	str	r2, [r4, #8]
 8009ca2:	b142      	cbz	r2, 8009cb6 <_scanf_chars+0x8e>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	dcd7      	bgt.n	8009c58 <_scanf_chars+0x30>
 8009ca8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009cac:	4629      	mov	r1, r5
 8009cae:	4640      	mov	r0, r8
 8009cb0:	4798      	blx	r3
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d0d0      	beq.n	8009c58 <_scanf_chars+0x30>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	f013 0310 	ands.w	r3, r3, #16
 8009cbc:	d105      	bne.n	8009cca <_scanf_chars+0xa2>
 8009cbe:	68e2      	ldr	r2, [r4, #12]
 8009cc0:	3201      	adds	r2, #1
 8009cc2:	60e2      	str	r2, [r4, #12]
 8009cc4:	69a2      	ldr	r2, [r4, #24]
 8009cc6:	b102      	cbz	r2, 8009cca <_scanf_chars+0xa2>
 8009cc8:	7033      	strb	r3, [r6, #0]
 8009cca:	6923      	ldr	r3, [r4, #16]
 8009ccc:	443b      	add	r3, r7
 8009cce:	6123      	str	r3, [r4, #16]
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd6:	bf00      	nop
 8009cd8:	0800c8f9 	.word	0x0800c8f9

08009cdc <_scanf_i>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	4b74      	ldr	r3, [pc, #464]	; (8009eb4 <_scanf_i+0x1d8>)
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	4682      	mov	sl, r0
 8009ce8:	4616      	mov	r6, r2
 8009cea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	ab03      	add	r3, sp, #12
 8009cf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009cf6:	4b70      	ldr	r3, [pc, #448]	; (8009eb8 <_scanf_i+0x1dc>)
 8009cf8:	69a1      	ldr	r1, [r4, #24]
 8009cfa:	4a70      	ldr	r2, [pc, #448]	; (8009ebc <_scanf_i+0x1e0>)
 8009cfc:	2903      	cmp	r1, #3
 8009cfe:	bf18      	it	ne
 8009d00:	461a      	movne	r2, r3
 8009d02:	68a3      	ldr	r3, [r4, #8]
 8009d04:	9201      	str	r2, [sp, #4]
 8009d06:	1e5a      	subs	r2, r3, #1
 8009d08:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d0c:	bf88      	it	hi
 8009d0e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009d12:	4627      	mov	r7, r4
 8009d14:	bf82      	ittt	hi
 8009d16:	eb03 0905 	addhi.w	r9, r3, r5
 8009d1a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d1e:	60a3      	strhi	r3, [r4, #8]
 8009d20:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009d24:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009d28:	bf98      	it	ls
 8009d2a:	f04f 0900 	movls.w	r9, #0
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	463d      	mov	r5, r7
 8009d32:	f04f 0b00 	mov.w	fp, #0
 8009d36:	6831      	ldr	r1, [r6, #0]
 8009d38:	ab03      	add	r3, sp, #12
 8009d3a:	7809      	ldrb	r1, [r1, #0]
 8009d3c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009d40:	2202      	movs	r2, #2
 8009d42:	f7f6 fa5d 	bl	8000200 <memchr>
 8009d46:	b328      	cbz	r0, 8009d94 <_scanf_i+0xb8>
 8009d48:	f1bb 0f01 	cmp.w	fp, #1
 8009d4c:	d159      	bne.n	8009e02 <_scanf_i+0x126>
 8009d4e:	6862      	ldr	r2, [r4, #4]
 8009d50:	b92a      	cbnz	r2, 8009d5e <_scanf_i+0x82>
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	2308      	movs	r3, #8
 8009d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d5a:	6063      	str	r3, [r4, #4]
 8009d5c:	6022      	str	r2, [r4, #0]
 8009d5e:	6822      	ldr	r2, [r4, #0]
 8009d60:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009d64:	6022      	str	r2, [r4, #0]
 8009d66:	68a2      	ldr	r2, [r4, #8]
 8009d68:	1e51      	subs	r1, r2, #1
 8009d6a:	60a1      	str	r1, [r4, #8]
 8009d6c:	b192      	cbz	r2, 8009d94 <_scanf_i+0xb8>
 8009d6e:	6832      	ldr	r2, [r6, #0]
 8009d70:	1c51      	adds	r1, r2, #1
 8009d72:	6031      	str	r1, [r6, #0]
 8009d74:	7812      	ldrb	r2, [r2, #0]
 8009d76:	f805 2b01 	strb.w	r2, [r5], #1
 8009d7a:	6872      	ldr	r2, [r6, #4]
 8009d7c:	3a01      	subs	r2, #1
 8009d7e:	2a00      	cmp	r2, #0
 8009d80:	6072      	str	r2, [r6, #4]
 8009d82:	dc07      	bgt.n	8009d94 <_scanf_i+0xb8>
 8009d84:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009d88:	4631      	mov	r1, r6
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	4790      	blx	r2
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f040 8085 	bne.w	8009e9e <_scanf_i+0x1c2>
 8009d94:	f10b 0b01 	add.w	fp, fp, #1
 8009d98:	f1bb 0f03 	cmp.w	fp, #3
 8009d9c:	d1cb      	bne.n	8009d36 <_scanf_i+0x5a>
 8009d9e:	6863      	ldr	r3, [r4, #4]
 8009da0:	b90b      	cbnz	r3, 8009da6 <_scanf_i+0xca>
 8009da2:	230a      	movs	r3, #10
 8009da4:	6063      	str	r3, [r4, #4]
 8009da6:	6863      	ldr	r3, [r4, #4]
 8009da8:	4945      	ldr	r1, [pc, #276]	; (8009ec0 <_scanf_i+0x1e4>)
 8009daa:	6960      	ldr	r0, [r4, #20]
 8009dac:	1ac9      	subs	r1, r1, r3
 8009dae:	f000 f937 	bl	800a020 <__sccl>
 8009db2:	f04f 0b00 	mov.w	fp, #0
 8009db6:	68a3      	ldr	r3, [r4, #8]
 8009db8:	6822      	ldr	r2, [r4, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d03d      	beq.n	8009e3a <_scanf_i+0x15e>
 8009dbe:	6831      	ldr	r1, [r6, #0]
 8009dc0:	6960      	ldr	r0, [r4, #20]
 8009dc2:	f891 c000 	ldrb.w	ip, [r1]
 8009dc6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d035      	beq.n	8009e3a <_scanf_i+0x15e>
 8009dce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009dd2:	d124      	bne.n	8009e1e <_scanf_i+0x142>
 8009dd4:	0510      	lsls	r0, r2, #20
 8009dd6:	d522      	bpl.n	8009e1e <_scanf_i+0x142>
 8009dd8:	f10b 0b01 	add.w	fp, fp, #1
 8009ddc:	f1b9 0f00 	cmp.w	r9, #0
 8009de0:	d003      	beq.n	8009dea <_scanf_i+0x10e>
 8009de2:	3301      	adds	r3, #1
 8009de4:	f109 39ff 	add.w	r9, r9, #4294967295
 8009de8:	60a3      	str	r3, [r4, #8]
 8009dea:	6873      	ldr	r3, [r6, #4]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	6073      	str	r3, [r6, #4]
 8009df2:	dd1b      	ble.n	8009e2c <_scanf_i+0x150>
 8009df4:	6833      	ldr	r3, [r6, #0]
 8009df6:	3301      	adds	r3, #1
 8009df8:	6033      	str	r3, [r6, #0]
 8009dfa:	68a3      	ldr	r3, [r4, #8]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	60a3      	str	r3, [r4, #8]
 8009e00:	e7d9      	b.n	8009db6 <_scanf_i+0xda>
 8009e02:	f1bb 0f02 	cmp.w	fp, #2
 8009e06:	d1ae      	bne.n	8009d66 <_scanf_i+0x8a>
 8009e08:	6822      	ldr	r2, [r4, #0]
 8009e0a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009e0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009e12:	d1bf      	bne.n	8009d94 <_scanf_i+0xb8>
 8009e14:	2310      	movs	r3, #16
 8009e16:	6063      	str	r3, [r4, #4]
 8009e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e1c:	e7a2      	b.n	8009d64 <_scanf_i+0x88>
 8009e1e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009e22:	6022      	str	r2, [r4, #0]
 8009e24:	780b      	ldrb	r3, [r1, #0]
 8009e26:	f805 3b01 	strb.w	r3, [r5], #1
 8009e2a:	e7de      	b.n	8009dea <_scanf_i+0x10e>
 8009e2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e30:	4631      	mov	r1, r6
 8009e32:	4650      	mov	r0, sl
 8009e34:	4798      	blx	r3
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d0df      	beq.n	8009dfa <_scanf_i+0x11e>
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	05d9      	lsls	r1, r3, #23
 8009e3e:	d50d      	bpl.n	8009e5c <_scanf_i+0x180>
 8009e40:	42bd      	cmp	r5, r7
 8009e42:	d909      	bls.n	8009e58 <_scanf_i+0x17c>
 8009e44:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009e48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e4c:	4632      	mov	r2, r6
 8009e4e:	4650      	mov	r0, sl
 8009e50:	4798      	blx	r3
 8009e52:	f105 39ff 	add.w	r9, r5, #4294967295
 8009e56:	464d      	mov	r5, r9
 8009e58:	42bd      	cmp	r5, r7
 8009e5a:	d028      	beq.n	8009eae <_scanf_i+0x1d2>
 8009e5c:	6822      	ldr	r2, [r4, #0]
 8009e5e:	f012 0210 	ands.w	r2, r2, #16
 8009e62:	d113      	bne.n	8009e8c <_scanf_i+0x1b0>
 8009e64:	702a      	strb	r2, [r5, #0]
 8009e66:	6863      	ldr	r3, [r4, #4]
 8009e68:	9e01      	ldr	r6, [sp, #4]
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	4650      	mov	r0, sl
 8009e6e:	47b0      	blx	r6
 8009e70:	f8d8 3000 	ldr.w	r3, [r8]
 8009e74:	6821      	ldr	r1, [r4, #0]
 8009e76:	1d1a      	adds	r2, r3, #4
 8009e78:	f8c8 2000 	str.w	r2, [r8]
 8009e7c:	f011 0f20 	tst.w	r1, #32
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	d00f      	beq.n	8009ea4 <_scanf_i+0x1c8>
 8009e84:	6018      	str	r0, [r3, #0]
 8009e86:	68e3      	ldr	r3, [r4, #12]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	60e3      	str	r3, [r4, #12]
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	1bed      	subs	r5, r5, r7
 8009e90:	445d      	add	r5, fp
 8009e92:	442b      	add	r3, r5
 8009e94:	6123      	str	r3, [r4, #16]
 8009e96:	2000      	movs	r0, #0
 8009e98:	b007      	add	sp, #28
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	f04f 0b00 	mov.w	fp, #0
 8009ea2:	e7ca      	b.n	8009e3a <_scanf_i+0x15e>
 8009ea4:	07ca      	lsls	r2, r1, #31
 8009ea6:	bf4c      	ite	mi
 8009ea8:	8018      	strhmi	r0, [r3, #0]
 8009eaa:	6018      	strpl	r0, [r3, #0]
 8009eac:	e7eb      	b.n	8009e86 <_scanf_i+0x1aa>
 8009eae:	2001      	movs	r0, #1
 8009eb0:	e7f2      	b.n	8009e98 <_scanf_i+0x1bc>
 8009eb2:	bf00      	nop
 8009eb4:	0800c65c 	.word	0x0800c65c
 8009eb8:	0800aa2d 	.word	0x0800aa2d
 8009ebc:	080095d1 	.word	0x080095d1
 8009ec0:	0800ca1a 	.word	0x0800ca1a

08009ec4 <__sflush_r>:
 8009ec4:	898a      	ldrh	r2, [r1, #12]
 8009ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eca:	4605      	mov	r5, r0
 8009ecc:	0710      	lsls	r0, r2, #28
 8009ece:	460c      	mov	r4, r1
 8009ed0:	d458      	bmi.n	8009f84 <__sflush_r+0xc0>
 8009ed2:	684b      	ldr	r3, [r1, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	dc05      	bgt.n	8009ee4 <__sflush_r+0x20>
 8009ed8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	dc02      	bgt.n	8009ee4 <__sflush_r+0x20>
 8009ede:	2000      	movs	r0, #0
 8009ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ee6:	2e00      	cmp	r6, #0
 8009ee8:	d0f9      	beq.n	8009ede <__sflush_r+0x1a>
 8009eea:	2300      	movs	r3, #0
 8009eec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ef0:	682f      	ldr	r7, [r5, #0]
 8009ef2:	6a21      	ldr	r1, [r4, #32]
 8009ef4:	602b      	str	r3, [r5, #0]
 8009ef6:	d032      	beq.n	8009f5e <__sflush_r+0x9a>
 8009ef8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	075a      	lsls	r2, r3, #29
 8009efe:	d505      	bpl.n	8009f0c <__sflush_r+0x48>
 8009f00:	6863      	ldr	r3, [r4, #4]
 8009f02:	1ac0      	subs	r0, r0, r3
 8009f04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f06:	b10b      	cbz	r3, 8009f0c <__sflush_r+0x48>
 8009f08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f0a:	1ac0      	subs	r0, r0, r3
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4602      	mov	r2, r0
 8009f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f12:	6a21      	ldr	r1, [r4, #32]
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b0      	blx	r6
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	d106      	bne.n	8009f2c <__sflush_r+0x68>
 8009f1e:	6829      	ldr	r1, [r5, #0]
 8009f20:	291d      	cmp	r1, #29
 8009f22:	d82b      	bhi.n	8009f7c <__sflush_r+0xb8>
 8009f24:	4a29      	ldr	r2, [pc, #164]	; (8009fcc <__sflush_r+0x108>)
 8009f26:	410a      	asrs	r2, r1
 8009f28:	07d6      	lsls	r6, r2, #31
 8009f2a:	d427      	bmi.n	8009f7c <__sflush_r+0xb8>
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	6062      	str	r2, [r4, #4]
 8009f30:	04d9      	lsls	r1, r3, #19
 8009f32:	6922      	ldr	r2, [r4, #16]
 8009f34:	6022      	str	r2, [r4, #0]
 8009f36:	d504      	bpl.n	8009f42 <__sflush_r+0x7e>
 8009f38:	1c42      	adds	r2, r0, #1
 8009f3a:	d101      	bne.n	8009f40 <__sflush_r+0x7c>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b903      	cbnz	r3, 8009f42 <__sflush_r+0x7e>
 8009f40:	6560      	str	r0, [r4, #84]	; 0x54
 8009f42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f44:	602f      	str	r7, [r5, #0]
 8009f46:	2900      	cmp	r1, #0
 8009f48:	d0c9      	beq.n	8009ede <__sflush_r+0x1a>
 8009f4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f4e:	4299      	cmp	r1, r3
 8009f50:	d002      	beq.n	8009f58 <__sflush_r+0x94>
 8009f52:	4628      	mov	r0, r5
 8009f54:	f7fd fefa 	bl	8007d4c <_free_r>
 8009f58:	2000      	movs	r0, #0
 8009f5a:	6360      	str	r0, [r4, #52]	; 0x34
 8009f5c:	e7c0      	b.n	8009ee0 <__sflush_r+0x1c>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	4628      	mov	r0, r5
 8009f62:	47b0      	blx	r6
 8009f64:	1c41      	adds	r1, r0, #1
 8009f66:	d1c8      	bne.n	8009efa <__sflush_r+0x36>
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0c5      	beq.n	8009efa <__sflush_r+0x36>
 8009f6e:	2b1d      	cmp	r3, #29
 8009f70:	d001      	beq.n	8009f76 <__sflush_r+0xb2>
 8009f72:	2b16      	cmp	r3, #22
 8009f74:	d101      	bne.n	8009f7a <__sflush_r+0xb6>
 8009f76:	602f      	str	r7, [r5, #0]
 8009f78:	e7b1      	b.n	8009ede <__sflush_r+0x1a>
 8009f7a:	89a3      	ldrh	r3, [r4, #12]
 8009f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f80:	81a3      	strh	r3, [r4, #12]
 8009f82:	e7ad      	b.n	8009ee0 <__sflush_r+0x1c>
 8009f84:	690f      	ldr	r7, [r1, #16]
 8009f86:	2f00      	cmp	r7, #0
 8009f88:	d0a9      	beq.n	8009ede <__sflush_r+0x1a>
 8009f8a:	0793      	lsls	r3, r2, #30
 8009f8c:	680e      	ldr	r6, [r1, #0]
 8009f8e:	bf08      	it	eq
 8009f90:	694b      	ldreq	r3, [r1, #20]
 8009f92:	600f      	str	r7, [r1, #0]
 8009f94:	bf18      	it	ne
 8009f96:	2300      	movne	r3, #0
 8009f98:	eba6 0807 	sub.w	r8, r6, r7
 8009f9c:	608b      	str	r3, [r1, #8]
 8009f9e:	f1b8 0f00 	cmp.w	r8, #0
 8009fa2:	dd9c      	ble.n	8009ede <__sflush_r+0x1a>
 8009fa4:	6a21      	ldr	r1, [r4, #32]
 8009fa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fa8:	4643      	mov	r3, r8
 8009faa:	463a      	mov	r2, r7
 8009fac:	4628      	mov	r0, r5
 8009fae:	47b0      	blx	r6
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	dc06      	bgt.n	8009fc2 <__sflush_r+0xfe>
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	e78e      	b.n	8009ee0 <__sflush_r+0x1c>
 8009fc2:	4407      	add	r7, r0
 8009fc4:	eba8 0800 	sub.w	r8, r8, r0
 8009fc8:	e7e9      	b.n	8009f9e <__sflush_r+0xda>
 8009fca:	bf00      	nop
 8009fcc:	dfbffffe 	.word	0xdfbffffe

08009fd0 <_fflush_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	690b      	ldr	r3, [r1, #16]
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b913      	cbnz	r3, 8009fe0 <_fflush_r+0x10>
 8009fda:	2500      	movs	r5, #0
 8009fdc:	4628      	mov	r0, r5
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	b118      	cbz	r0, 8009fea <_fflush_r+0x1a>
 8009fe2:	6a03      	ldr	r3, [r0, #32]
 8009fe4:	b90b      	cbnz	r3, 8009fea <_fflush_r+0x1a>
 8009fe6:	f7fc fee1 	bl	8006dac <__sinit>
 8009fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d0f3      	beq.n	8009fda <_fflush_r+0xa>
 8009ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ff4:	07d0      	lsls	r0, r2, #31
 8009ff6:	d404      	bmi.n	800a002 <_fflush_r+0x32>
 8009ff8:	0599      	lsls	r1, r3, #22
 8009ffa:	d402      	bmi.n	800a002 <_fflush_r+0x32>
 8009ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ffe:	f7fd f81a 	bl	8007036 <__retarget_lock_acquire_recursive>
 800a002:	4628      	mov	r0, r5
 800a004:	4621      	mov	r1, r4
 800a006:	f7ff ff5d 	bl	8009ec4 <__sflush_r>
 800a00a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a00c:	07da      	lsls	r2, r3, #31
 800a00e:	4605      	mov	r5, r0
 800a010:	d4e4      	bmi.n	8009fdc <_fflush_r+0xc>
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	059b      	lsls	r3, r3, #22
 800a016:	d4e1      	bmi.n	8009fdc <_fflush_r+0xc>
 800a018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a01a:	f7fd f80d 	bl	8007038 <__retarget_lock_release_recursive>
 800a01e:	e7dd      	b.n	8009fdc <_fflush_r+0xc>

0800a020 <__sccl>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	780b      	ldrb	r3, [r1, #0]
 800a024:	4604      	mov	r4, r0
 800a026:	2b5e      	cmp	r3, #94	; 0x5e
 800a028:	bf0b      	itete	eq
 800a02a:	784b      	ldrbeq	r3, [r1, #1]
 800a02c:	1c4a      	addne	r2, r1, #1
 800a02e:	1c8a      	addeq	r2, r1, #2
 800a030:	2100      	movne	r1, #0
 800a032:	bf08      	it	eq
 800a034:	2101      	moveq	r1, #1
 800a036:	3801      	subs	r0, #1
 800a038:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a03c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a040:	42a8      	cmp	r0, r5
 800a042:	d1fb      	bne.n	800a03c <__sccl+0x1c>
 800a044:	b90b      	cbnz	r3, 800a04a <__sccl+0x2a>
 800a046:	1e50      	subs	r0, r2, #1
 800a048:	bd70      	pop	{r4, r5, r6, pc}
 800a04a:	f081 0101 	eor.w	r1, r1, #1
 800a04e:	54e1      	strb	r1, [r4, r3]
 800a050:	4610      	mov	r0, r2
 800a052:	4602      	mov	r2, r0
 800a054:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a058:	2d2d      	cmp	r5, #45	; 0x2d
 800a05a:	d005      	beq.n	800a068 <__sccl+0x48>
 800a05c:	2d5d      	cmp	r5, #93	; 0x5d
 800a05e:	d016      	beq.n	800a08e <__sccl+0x6e>
 800a060:	2d00      	cmp	r5, #0
 800a062:	d0f1      	beq.n	800a048 <__sccl+0x28>
 800a064:	462b      	mov	r3, r5
 800a066:	e7f2      	b.n	800a04e <__sccl+0x2e>
 800a068:	7846      	ldrb	r6, [r0, #1]
 800a06a:	2e5d      	cmp	r6, #93	; 0x5d
 800a06c:	d0fa      	beq.n	800a064 <__sccl+0x44>
 800a06e:	42b3      	cmp	r3, r6
 800a070:	dcf8      	bgt.n	800a064 <__sccl+0x44>
 800a072:	3002      	adds	r0, #2
 800a074:	461a      	mov	r2, r3
 800a076:	3201      	adds	r2, #1
 800a078:	4296      	cmp	r6, r2
 800a07a:	54a1      	strb	r1, [r4, r2]
 800a07c:	dcfb      	bgt.n	800a076 <__sccl+0x56>
 800a07e:	1af2      	subs	r2, r6, r3
 800a080:	3a01      	subs	r2, #1
 800a082:	1c5d      	adds	r5, r3, #1
 800a084:	42b3      	cmp	r3, r6
 800a086:	bfa8      	it	ge
 800a088:	2200      	movge	r2, #0
 800a08a:	18ab      	adds	r3, r5, r2
 800a08c:	e7e1      	b.n	800a052 <__sccl+0x32>
 800a08e:	4610      	mov	r0, r2
 800a090:	e7da      	b.n	800a048 <__sccl+0x28>

0800a092 <__submore>:
 800a092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a096:	460c      	mov	r4, r1
 800a098:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a09a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a09e:	4299      	cmp	r1, r3
 800a0a0:	d11d      	bne.n	800a0de <__submore+0x4c>
 800a0a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0a6:	f7fd fec5 	bl	8007e34 <_malloc_r>
 800a0aa:	b918      	cbnz	r0, 800a0b4 <__submore+0x22>
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0b8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0ba:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a0be:	6360      	str	r0, [r4, #52]	; 0x34
 800a0c0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a0c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a0c8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a0cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a0d0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a0d4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a0d8:	6020      	str	r0, [r4, #0]
 800a0da:	2000      	movs	r0, #0
 800a0dc:	e7e8      	b.n	800a0b0 <__submore+0x1e>
 800a0de:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a0e0:	0077      	lsls	r7, r6, #1
 800a0e2:	463a      	mov	r2, r7
 800a0e4:	f000 fc01 	bl	800a8ea <_realloc_r>
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d0de      	beq.n	800a0ac <__submore+0x1a>
 800a0ee:	eb00 0806 	add.w	r8, r0, r6
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	f000 f842 	bl	800a180 <memcpy>
 800a0fc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a100:	f8c4 8000 	str.w	r8, [r4]
 800a104:	e7e9      	b.n	800a0da <__submore+0x48>

0800a106 <memmove>:
 800a106:	4288      	cmp	r0, r1
 800a108:	b510      	push	{r4, lr}
 800a10a:	eb01 0402 	add.w	r4, r1, r2
 800a10e:	d902      	bls.n	800a116 <memmove+0x10>
 800a110:	4284      	cmp	r4, r0
 800a112:	4623      	mov	r3, r4
 800a114:	d807      	bhi.n	800a126 <memmove+0x20>
 800a116:	1e43      	subs	r3, r0, #1
 800a118:	42a1      	cmp	r1, r4
 800a11a:	d008      	beq.n	800a12e <memmove+0x28>
 800a11c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a120:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a124:	e7f8      	b.n	800a118 <memmove+0x12>
 800a126:	4402      	add	r2, r0
 800a128:	4601      	mov	r1, r0
 800a12a:	428a      	cmp	r2, r1
 800a12c:	d100      	bne.n	800a130 <memmove+0x2a>
 800a12e:	bd10      	pop	{r4, pc}
 800a130:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a134:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a138:	e7f7      	b.n	800a12a <memmove+0x24>

0800a13a <strncmp>:
 800a13a:	b510      	push	{r4, lr}
 800a13c:	b16a      	cbz	r2, 800a15a <strncmp+0x20>
 800a13e:	3901      	subs	r1, #1
 800a140:	1884      	adds	r4, r0, r2
 800a142:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a146:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d103      	bne.n	800a156 <strncmp+0x1c>
 800a14e:	42a0      	cmp	r0, r4
 800a150:	d001      	beq.n	800a156 <strncmp+0x1c>
 800a152:	2a00      	cmp	r2, #0
 800a154:	d1f5      	bne.n	800a142 <strncmp+0x8>
 800a156:	1ad0      	subs	r0, r2, r3
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	4610      	mov	r0, r2
 800a15c:	e7fc      	b.n	800a158 <strncmp+0x1e>
	...

0800a160 <_sbrk_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4d06      	ldr	r5, [pc, #24]	; (800a17c <_sbrk_r+0x1c>)
 800a164:	2300      	movs	r3, #0
 800a166:	4604      	mov	r4, r0
 800a168:	4608      	mov	r0, r1
 800a16a:	602b      	str	r3, [r5, #0]
 800a16c:	f7f8 f912 	bl	8002394 <_sbrk>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d102      	bne.n	800a17a <_sbrk_r+0x1a>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	b103      	cbz	r3, 800a17a <_sbrk_r+0x1a>
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	20000638 	.word	0x20000638

0800a180 <memcpy>:
 800a180:	440a      	add	r2, r1
 800a182:	4291      	cmp	r1, r2
 800a184:	f100 33ff 	add.w	r3, r0, #4294967295
 800a188:	d100      	bne.n	800a18c <memcpy+0xc>
 800a18a:	4770      	bx	lr
 800a18c:	b510      	push	{r4, lr}
 800a18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a192:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a196:	4291      	cmp	r1, r2
 800a198:	d1f9      	bne.n	800a18e <memcpy+0xe>
 800a19a:	bd10      	pop	{r4, pc}
 800a19c:	0000      	movs	r0, r0
	...

0800a1a0 <nan>:
 800a1a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a1a8 <nan+0x8>
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	00000000 	.word	0x00000000
 800a1ac:	7ff80000 	.word	0x7ff80000

0800a1b0 <__assert_func>:
 800a1b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1b2:	4614      	mov	r4, r2
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	4b09      	ldr	r3, [pc, #36]	; (800a1dc <__assert_func+0x2c>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	68d8      	ldr	r0, [r3, #12]
 800a1be:	b14c      	cbz	r4, 800a1d4 <__assert_func+0x24>
 800a1c0:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <__assert_func+0x30>)
 800a1c2:	9100      	str	r1, [sp, #0]
 800a1c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1c8:	4906      	ldr	r1, [pc, #24]	; (800a1e4 <__assert_func+0x34>)
 800a1ca:	462b      	mov	r3, r5
 800a1cc:	f000 fc3e 	bl	800aa4c <fiprintf>
 800a1d0:	f000 fc4e 	bl	800aa70 <abort>
 800a1d4:	4b04      	ldr	r3, [pc, #16]	; (800a1e8 <__assert_func+0x38>)
 800a1d6:	461c      	mov	r4, r3
 800a1d8:	e7f3      	b.n	800a1c2 <__assert_func+0x12>
 800a1da:	bf00      	nop
 800a1dc:	20000064 	.word	0x20000064
 800a1e0:	0800ca2d 	.word	0x0800ca2d
 800a1e4:	0800ca3a 	.word	0x0800ca3a
 800a1e8:	0800ca68 	.word	0x0800ca68

0800a1ec <_calloc_r>:
 800a1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1ee:	fba1 2402 	umull	r2, r4, r1, r2
 800a1f2:	b94c      	cbnz	r4, 800a208 <_calloc_r+0x1c>
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	9201      	str	r2, [sp, #4]
 800a1f8:	f7fd fe1c 	bl	8007e34 <_malloc_r>
 800a1fc:	9a01      	ldr	r2, [sp, #4]
 800a1fe:	4605      	mov	r5, r0
 800a200:	b930      	cbnz	r0, 800a210 <_calloc_r+0x24>
 800a202:	4628      	mov	r0, r5
 800a204:	b003      	add	sp, #12
 800a206:	bd30      	pop	{r4, r5, pc}
 800a208:	220c      	movs	r2, #12
 800a20a:	6002      	str	r2, [r0, #0]
 800a20c:	2500      	movs	r5, #0
 800a20e:	e7f8      	b.n	800a202 <_calloc_r+0x16>
 800a210:	4621      	mov	r1, r4
 800a212:	f7fc fe92 	bl	8006f3a <memset>
 800a216:	e7f4      	b.n	800a202 <_calloc_r+0x16>

0800a218 <rshift>:
 800a218:	6903      	ldr	r3, [r0, #16]
 800a21a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a21e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a222:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a226:	f100 0414 	add.w	r4, r0, #20
 800a22a:	dd45      	ble.n	800a2b8 <rshift+0xa0>
 800a22c:	f011 011f 	ands.w	r1, r1, #31
 800a230:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a234:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a238:	d10c      	bne.n	800a254 <rshift+0x3c>
 800a23a:	f100 0710 	add.w	r7, r0, #16
 800a23e:	4629      	mov	r1, r5
 800a240:	42b1      	cmp	r1, r6
 800a242:	d334      	bcc.n	800a2ae <rshift+0x96>
 800a244:	1a9b      	subs	r3, r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	1eea      	subs	r2, r5, #3
 800a24a:	4296      	cmp	r6, r2
 800a24c:	bf38      	it	cc
 800a24e:	2300      	movcc	r3, #0
 800a250:	4423      	add	r3, r4
 800a252:	e015      	b.n	800a280 <rshift+0x68>
 800a254:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a258:	f1c1 0820 	rsb	r8, r1, #32
 800a25c:	40cf      	lsrs	r7, r1
 800a25e:	f105 0e04 	add.w	lr, r5, #4
 800a262:	46a1      	mov	r9, r4
 800a264:	4576      	cmp	r6, lr
 800a266:	46f4      	mov	ip, lr
 800a268:	d815      	bhi.n	800a296 <rshift+0x7e>
 800a26a:	1a9a      	subs	r2, r3, r2
 800a26c:	0092      	lsls	r2, r2, #2
 800a26e:	3a04      	subs	r2, #4
 800a270:	3501      	adds	r5, #1
 800a272:	42ae      	cmp	r6, r5
 800a274:	bf38      	it	cc
 800a276:	2200      	movcc	r2, #0
 800a278:	18a3      	adds	r3, r4, r2
 800a27a:	50a7      	str	r7, [r4, r2]
 800a27c:	b107      	cbz	r7, 800a280 <rshift+0x68>
 800a27e:	3304      	adds	r3, #4
 800a280:	1b1a      	subs	r2, r3, r4
 800a282:	42a3      	cmp	r3, r4
 800a284:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a288:	bf08      	it	eq
 800a28a:	2300      	moveq	r3, #0
 800a28c:	6102      	str	r2, [r0, #16]
 800a28e:	bf08      	it	eq
 800a290:	6143      	streq	r3, [r0, #20]
 800a292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a296:	f8dc c000 	ldr.w	ip, [ip]
 800a29a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a29e:	ea4c 0707 	orr.w	r7, ip, r7
 800a2a2:	f849 7b04 	str.w	r7, [r9], #4
 800a2a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a2aa:	40cf      	lsrs	r7, r1
 800a2ac:	e7da      	b.n	800a264 <rshift+0x4c>
 800a2ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800a2b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800a2b6:	e7c3      	b.n	800a240 <rshift+0x28>
 800a2b8:	4623      	mov	r3, r4
 800a2ba:	e7e1      	b.n	800a280 <rshift+0x68>

0800a2bc <__hexdig_fun>:
 800a2bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a2c0:	2b09      	cmp	r3, #9
 800a2c2:	d802      	bhi.n	800a2ca <__hexdig_fun+0xe>
 800a2c4:	3820      	subs	r0, #32
 800a2c6:	b2c0      	uxtb	r0, r0
 800a2c8:	4770      	bx	lr
 800a2ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a2ce:	2b05      	cmp	r3, #5
 800a2d0:	d801      	bhi.n	800a2d6 <__hexdig_fun+0x1a>
 800a2d2:	3847      	subs	r0, #71	; 0x47
 800a2d4:	e7f7      	b.n	800a2c6 <__hexdig_fun+0xa>
 800a2d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a2da:	2b05      	cmp	r3, #5
 800a2dc:	d801      	bhi.n	800a2e2 <__hexdig_fun+0x26>
 800a2de:	3827      	subs	r0, #39	; 0x27
 800a2e0:	e7f1      	b.n	800a2c6 <__hexdig_fun+0xa>
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	4770      	bx	lr
	...

0800a2e8 <__gethex>:
 800a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	4617      	mov	r7, r2
 800a2ee:	680a      	ldr	r2, [r1, #0]
 800a2f0:	b085      	sub	sp, #20
 800a2f2:	f102 0b02 	add.w	fp, r2, #2
 800a2f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a2fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a2fe:	4681      	mov	r9, r0
 800a300:	468a      	mov	sl, r1
 800a302:	9302      	str	r3, [sp, #8]
 800a304:	32fe      	adds	r2, #254	; 0xfe
 800a306:	eb02 030b 	add.w	r3, r2, fp
 800a30a:	46d8      	mov	r8, fp
 800a30c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	2830      	cmp	r0, #48	; 0x30
 800a314:	d0f7      	beq.n	800a306 <__gethex+0x1e>
 800a316:	f7ff ffd1 	bl	800a2bc <__hexdig_fun>
 800a31a:	4604      	mov	r4, r0
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d138      	bne.n	800a392 <__gethex+0xaa>
 800a320:	49a7      	ldr	r1, [pc, #668]	; (800a5c0 <__gethex+0x2d8>)
 800a322:	2201      	movs	r2, #1
 800a324:	4640      	mov	r0, r8
 800a326:	f7ff ff08 	bl	800a13a <strncmp>
 800a32a:	4606      	mov	r6, r0
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d169      	bne.n	800a404 <__gethex+0x11c>
 800a330:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a334:	465d      	mov	r5, fp
 800a336:	f7ff ffc1 	bl	800a2bc <__hexdig_fun>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d064      	beq.n	800a408 <__gethex+0x120>
 800a33e:	465a      	mov	r2, fp
 800a340:	7810      	ldrb	r0, [r2, #0]
 800a342:	2830      	cmp	r0, #48	; 0x30
 800a344:	4690      	mov	r8, r2
 800a346:	f102 0201 	add.w	r2, r2, #1
 800a34a:	d0f9      	beq.n	800a340 <__gethex+0x58>
 800a34c:	f7ff ffb6 	bl	800a2bc <__hexdig_fun>
 800a350:	2301      	movs	r3, #1
 800a352:	fab0 f480 	clz	r4, r0
 800a356:	0964      	lsrs	r4, r4, #5
 800a358:	465e      	mov	r6, fp
 800a35a:	9301      	str	r3, [sp, #4]
 800a35c:	4642      	mov	r2, r8
 800a35e:	4615      	mov	r5, r2
 800a360:	3201      	adds	r2, #1
 800a362:	7828      	ldrb	r0, [r5, #0]
 800a364:	f7ff ffaa 	bl	800a2bc <__hexdig_fun>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d1f8      	bne.n	800a35e <__gethex+0x76>
 800a36c:	4994      	ldr	r1, [pc, #592]	; (800a5c0 <__gethex+0x2d8>)
 800a36e:	2201      	movs	r2, #1
 800a370:	4628      	mov	r0, r5
 800a372:	f7ff fee2 	bl	800a13a <strncmp>
 800a376:	b978      	cbnz	r0, 800a398 <__gethex+0xb0>
 800a378:	b946      	cbnz	r6, 800a38c <__gethex+0xa4>
 800a37a:	1c6e      	adds	r6, r5, #1
 800a37c:	4632      	mov	r2, r6
 800a37e:	4615      	mov	r5, r2
 800a380:	3201      	adds	r2, #1
 800a382:	7828      	ldrb	r0, [r5, #0]
 800a384:	f7ff ff9a 	bl	800a2bc <__hexdig_fun>
 800a388:	2800      	cmp	r0, #0
 800a38a:	d1f8      	bne.n	800a37e <__gethex+0x96>
 800a38c:	1b73      	subs	r3, r6, r5
 800a38e:	009e      	lsls	r6, r3, #2
 800a390:	e004      	b.n	800a39c <__gethex+0xb4>
 800a392:	2400      	movs	r4, #0
 800a394:	4626      	mov	r6, r4
 800a396:	e7e1      	b.n	800a35c <__gethex+0x74>
 800a398:	2e00      	cmp	r6, #0
 800a39a:	d1f7      	bne.n	800a38c <__gethex+0xa4>
 800a39c:	782b      	ldrb	r3, [r5, #0]
 800a39e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a3a2:	2b50      	cmp	r3, #80	; 0x50
 800a3a4:	d13d      	bne.n	800a422 <__gethex+0x13a>
 800a3a6:	786b      	ldrb	r3, [r5, #1]
 800a3a8:	2b2b      	cmp	r3, #43	; 0x2b
 800a3aa:	d02f      	beq.n	800a40c <__gethex+0x124>
 800a3ac:	2b2d      	cmp	r3, #45	; 0x2d
 800a3ae:	d031      	beq.n	800a414 <__gethex+0x12c>
 800a3b0:	1c69      	adds	r1, r5, #1
 800a3b2:	f04f 0b00 	mov.w	fp, #0
 800a3b6:	7808      	ldrb	r0, [r1, #0]
 800a3b8:	f7ff ff80 	bl	800a2bc <__hexdig_fun>
 800a3bc:	1e42      	subs	r2, r0, #1
 800a3be:	b2d2      	uxtb	r2, r2
 800a3c0:	2a18      	cmp	r2, #24
 800a3c2:	d82e      	bhi.n	800a422 <__gethex+0x13a>
 800a3c4:	f1a0 0210 	sub.w	r2, r0, #16
 800a3c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a3cc:	f7ff ff76 	bl	800a2bc <__hexdig_fun>
 800a3d0:	f100 3cff 	add.w	ip, r0, #4294967295
 800a3d4:	fa5f fc8c 	uxtb.w	ip, ip
 800a3d8:	f1bc 0f18 	cmp.w	ip, #24
 800a3dc:	d91d      	bls.n	800a41a <__gethex+0x132>
 800a3de:	f1bb 0f00 	cmp.w	fp, #0
 800a3e2:	d000      	beq.n	800a3e6 <__gethex+0xfe>
 800a3e4:	4252      	negs	r2, r2
 800a3e6:	4416      	add	r6, r2
 800a3e8:	f8ca 1000 	str.w	r1, [sl]
 800a3ec:	b1dc      	cbz	r4, 800a426 <__gethex+0x13e>
 800a3ee:	9b01      	ldr	r3, [sp, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bf14      	ite	ne
 800a3f4:	f04f 0800 	movne.w	r8, #0
 800a3f8:	f04f 0806 	moveq.w	r8, #6
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	b005      	add	sp, #20
 800a400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a404:	4645      	mov	r5, r8
 800a406:	4626      	mov	r6, r4
 800a408:	2401      	movs	r4, #1
 800a40a:	e7c7      	b.n	800a39c <__gethex+0xb4>
 800a40c:	f04f 0b00 	mov.w	fp, #0
 800a410:	1ca9      	adds	r1, r5, #2
 800a412:	e7d0      	b.n	800a3b6 <__gethex+0xce>
 800a414:	f04f 0b01 	mov.w	fp, #1
 800a418:	e7fa      	b.n	800a410 <__gethex+0x128>
 800a41a:	230a      	movs	r3, #10
 800a41c:	fb03 0002 	mla	r0, r3, r2, r0
 800a420:	e7d0      	b.n	800a3c4 <__gethex+0xdc>
 800a422:	4629      	mov	r1, r5
 800a424:	e7e0      	b.n	800a3e8 <__gethex+0x100>
 800a426:	eba5 0308 	sub.w	r3, r5, r8
 800a42a:	3b01      	subs	r3, #1
 800a42c:	4621      	mov	r1, r4
 800a42e:	2b07      	cmp	r3, #7
 800a430:	dc0a      	bgt.n	800a448 <__gethex+0x160>
 800a432:	4648      	mov	r0, r9
 800a434:	f7fd fd8a 	bl	8007f4c <_Balloc>
 800a438:	4604      	mov	r4, r0
 800a43a:	b940      	cbnz	r0, 800a44e <__gethex+0x166>
 800a43c:	4b61      	ldr	r3, [pc, #388]	; (800a5c4 <__gethex+0x2dc>)
 800a43e:	4602      	mov	r2, r0
 800a440:	21e4      	movs	r1, #228	; 0xe4
 800a442:	4861      	ldr	r0, [pc, #388]	; (800a5c8 <__gethex+0x2e0>)
 800a444:	f7ff feb4 	bl	800a1b0 <__assert_func>
 800a448:	3101      	adds	r1, #1
 800a44a:	105b      	asrs	r3, r3, #1
 800a44c:	e7ef      	b.n	800a42e <__gethex+0x146>
 800a44e:	f100 0a14 	add.w	sl, r0, #20
 800a452:	2300      	movs	r3, #0
 800a454:	495a      	ldr	r1, [pc, #360]	; (800a5c0 <__gethex+0x2d8>)
 800a456:	f8cd a004 	str.w	sl, [sp, #4]
 800a45a:	469b      	mov	fp, r3
 800a45c:	45a8      	cmp	r8, r5
 800a45e:	d342      	bcc.n	800a4e6 <__gethex+0x1fe>
 800a460:	9801      	ldr	r0, [sp, #4]
 800a462:	f840 bb04 	str.w	fp, [r0], #4
 800a466:	eba0 000a 	sub.w	r0, r0, sl
 800a46a:	1080      	asrs	r0, r0, #2
 800a46c:	6120      	str	r0, [r4, #16]
 800a46e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a472:	4658      	mov	r0, fp
 800a474:	f7fd fe5c 	bl	8008130 <__hi0bits>
 800a478:	683d      	ldr	r5, [r7, #0]
 800a47a:	eba8 0000 	sub.w	r0, r8, r0
 800a47e:	42a8      	cmp	r0, r5
 800a480:	dd59      	ble.n	800a536 <__gethex+0x24e>
 800a482:	eba0 0805 	sub.w	r8, r0, r5
 800a486:	4641      	mov	r1, r8
 800a488:	4620      	mov	r0, r4
 800a48a:	f7fe f9eb 	bl	8008864 <__any_on>
 800a48e:	4683      	mov	fp, r0
 800a490:	b1b8      	cbz	r0, 800a4c2 <__gethex+0x1da>
 800a492:	f108 33ff 	add.w	r3, r8, #4294967295
 800a496:	1159      	asrs	r1, r3, #5
 800a498:	f003 021f 	and.w	r2, r3, #31
 800a49c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a4a0:	f04f 0b01 	mov.w	fp, #1
 800a4a4:	fa0b f202 	lsl.w	r2, fp, r2
 800a4a8:	420a      	tst	r2, r1
 800a4aa:	d00a      	beq.n	800a4c2 <__gethex+0x1da>
 800a4ac:	455b      	cmp	r3, fp
 800a4ae:	dd06      	ble.n	800a4be <__gethex+0x1d6>
 800a4b0:	f1a8 0102 	sub.w	r1, r8, #2
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f7fe f9d5 	bl	8008864 <__any_on>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d138      	bne.n	800a530 <__gethex+0x248>
 800a4be:	f04f 0b02 	mov.w	fp, #2
 800a4c2:	4641      	mov	r1, r8
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f7ff fea7 	bl	800a218 <rshift>
 800a4ca:	4446      	add	r6, r8
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	42b3      	cmp	r3, r6
 800a4d0:	da41      	bge.n	800a556 <__gethex+0x26e>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4648      	mov	r0, r9
 800a4d6:	f7fd fd79 	bl	8007fcc <_Bfree>
 800a4da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4dc:	2300      	movs	r3, #0
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a4e4:	e78a      	b.n	800a3fc <__gethex+0x114>
 800a4e6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a4ea:	2a2e      	cmp	r2, #46	; 0x2e
 800a4ec:	d014      	beq.n	800a518 <__gethex+0x230>
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d106      	bne.n	800a500 <__gethex+0x218>
 800a4f2:	9b01      	ldr	r3, [sp, #4]
 800a4f4:	f843 bb04 	str.w	fp, [r3], #4
 800a4f8:	f04f 0b00 	mov.w	fp, #0
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	465b      	mov	r3, fp
 800a500:	7828      	ldrb	r0, [r5, #0]
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	f7ff feda 	bl	800a2bc <__hexdig_fun>
 800a508:	9b03      	ldr	r3, [sp, #12]
 800a50a:	f000 000f 	and.w	r0, r0, #15
 800a50e:	4098      	lsls	r0, r3
 800a510:	ea4b 0b00 	orr.w	fp, fp, r0
 800a514:	3304      	adds	r3, #4
 800a516:	e7a1      	b.n	800a45c <__gethex+0x174>
 800a518:	45a8      	cmp	r8, r5
 800a51a:	d8e8      	bhi.n	800a4ee <__gethex+0x206>
 800a51c:	2201      	movs	r2, #1
 800a51e:	4628      	mov	r0, r5
 800a520:	9303      	str	r3, [sp, #12]
 800a522:	f7ff fe0a 	bl	800a13a <strncmp>
 800a526:	4926      	ldr	r1, [pc, #152]	; (800a5c0 <__gethex+0x2d8>)
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d1df      	bne.n	800a4ee <__gethex+0x206>
 800a52e:	e795      	b.n	800a45c <__gethex+0x174>
 800a530:	f04f 0b03 	mov.w	fp, #3
 800a534:	e7c5      	b.n	800a4c2 <__gethex+0x1da>
 800a536:	da0b      	bge.n	800a550 <__gethex+0x268>
 800a538:	eba5 0800 	sub.w	r8, r5, r0
 800a53c:	4621      	mov	r1, r4
 800a53e:	4642      	mov	r2, r8
 800a540:	4648      	mov	r0, r9
 800a542:	f7fd ff5d 	bl	8008400 <__lshift>
 800a546:	eba6 0608 	sub.w	r6, r6, r8
 800a54a:	4604      	mov	r4, r0
 800a54c:	f100 0a14 	add.w	sl, r0, #20
 800a550:	f04f 0b00 	mov.w	fp, #0
 800a554:	e7ba      	b.n	800a4cc <__gethex+0x1e4>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	42b3      	cmp	r3, r6
 800a55a:	dd73      	ble.n	800a644 <__gethex+0x35c>
 800a55c:	1b9e      	subs	r6, r3, r6
 800a55e:	42b5      	cmp	r5, r6
 800a560:	dc34      	bgt.n	800a5cc <__gethex+0x2e4>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2b02      	cmp	r3, #2
 800a566:	d023      	beq.n	800a5b0 <__gethex+0x2c8>
 800a568:	2b03      	cmp	r3, #3
 800a56a:	d025      	beq.n	800a5b8 <__gethex+0x2d0>
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d115      	bne.n	800a59c <__gethex+0x2b4>
 800a570:	42b5      	cmp	r5, r6
 800a572:	d113      	bne.n	800a59c <__gethex+0x2b4>
 800a574:	2d01      	cmp	r5, #1
 800a576:	d10b      	bne.n	800a590 <__gethex+0x2a8>
 800a578:	9a02      	ldr	r2, [sp, #8]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	2301      	movs	r3, #1
 800a580:	6123      	str	r3, [r4, #16]
 800a582:	f8ca 3000 	str.w	r3, [sl]
 800a586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a588:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a58c:	601c      	str	r4, [r3, #0]
 800a58e:	e735      	b.n	800a3fc <__gethex+0x114>
 800a590:	1e69      	subs	r1, r5, #1
 800a592:	4620      	mov	r0, r4
 800a594:	f7fe f966 	bl	8008864 <__any_on>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d1ed      	bne.n	800a578 <__gethex+0x290>
 800a59c:	4621      	mov	r1, r4
 800a59e:	4648      	mov	r0, r9
 800a5a0:	f7fd fd14 	bl	8007fcc <_Bfree>
 800a5a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a5ae:	e725      	b.n	800a3fc <__gethex+0x114>
 800a5b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1f2      	bne.n	800a59c <__gethex+0x2b4>
 800a5b6:	e7df      	b.n	800a578 <__gethex+0x290>
 800a5b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1dc      	bne.n	800a578 <__gethex+0x290>
 800a5be:	e7ed      	b.n	800a59c <__gethex+0x2b4>
 800a5c0:	0800c8a4 	.word	0x0800c8a4
 800a5c4:	0800c73b 	.word	0x0800c73b
 800a5c8:	0800ca69 	.word	0x0800ca69
 800a5cc:	f106 38ff 	add.w	r8, r6, #4294967295
 800a5d0:	f1bb 0f00 	cmp.w	fp, #0
 800a5d4:	d133      	bne.n	800a63e <__gethex+0x356>
 800a5d6:	f1b8 0f00 	cmp.w	r8, #0
 800a5da:	d004      	beq.n	800a5e6 <__gethex+0x2fe>
 800a5dc:	4641      	mov	r1, r8
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f7fe f940 	bl	8008864 <__any_on>
 800a5e4:	4683      	mov	fp, r0
 800a5e6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a5f0:	f008 081f 	and.w	r8, r8, #31
 800a5f4:	fa03 f308 	lsl.w	r3, r3, r8
 800a5f8:	4213      	tst	r3, r2
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	bf18      	it	ne
 800a600:	f04b 0b02 	orrne.w	fp, fp, #2
 800a604:	1bad      	subs	r5, r5, r6
 800a606:	f7ff fe07 	bl	800a218 <rshift>
 800a60a:	687e      	ldr	r6, [r7, #4]
 800a60c:	f04f 0802 	mov.w	r8, #2
 800a610:	f1bb 0f00 	cmp.w	fp, #0
 800a614:	d04a      	beq.n	800a6ac <__gethex+0x3c4>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d016      	beq.n	800a64a <__gethex+0x362>
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d018      	beq.n	800a652 <__gethex+0x36a>
 800a620:	2b01      	cmp	r3, #1
 800a622:	d109      	bne.n	800a638 <__gethex+0x350>
 800a624:	f01b 0f02 	tst.w	fp, #2
 800a628:	d006      	beq.n	800a638 <__gethex+0x350>
 800a62a:	f8da 3000 	ldr.w	r3, [sl]
 800a62e:	ea4b 0b03 	orr.w	fp, fp, r3
 800a632:	f01b 0f01 	tst.w	fp, #1
 800a636:	d10f      	bne.n	800a658 <__gethex+0x370>
 800a638:	f048 0810 	orr.w	r8, r8, #16
 800a63c:	e036      	b.n	800a6ac <__gethex+0x3c4>
 800a63e:	f04f 0b01 	mov.w	fp, #1
 800a642:	e7d0      	b.n	800a5e6 <__gethex+0x2fe>
 800a644:	f04f 0801 	mov.w	r8, #1
 800a648:	e7e2      	b.n	800a610 <__gethex+0x328>
 800a64a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a64c:	f1c3 0301 	rsb	r3, r3, #1
 800a650:	930f      	str	r3, [sp, #60]	; 0x3c
 800a652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0ef      	beq.n	800a638 <__gethex+0x350>
 800a658:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a65c:	f104 0214 	add.w	r2, r4, #20
 800a660:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a66a:	2300      	movs	r3, #0
 800a66c:	4694      	mov	ip, r2
 800a66e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a672:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a676:	d01e      	beq.n	800a6b6 <__gethex+0x3ce>
 800a678:	3101      	adds	r1, #1
 800a67a:	f8cc 1000 	str.w	r1, [ip]
 800a67e:	f1b8 0f02 	cmp.w	r8, #2
 800a682:	f104 0214 	add.w	r2, r4, #20
 800a686:	d13d      	bne.n	800a704 <__gethex+0x41c>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	42ab      	cmp	r3, r5
 800a68e:	d10b      	bne.n	800a6a8 <__gethex+0x3c0>
 800a690:	1169      	asrs	r1, r5, #5
 800a692:	2301      	movs	r3, #1
 800a694:	f005 051f 	and.w	r5, r5, #31
 800a698:	fa03 f505 	lsl.w	r5, r3, r5
 800a69c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6a0:	421d      	tst	r5, r3
 800a6a2:	bf18      	it	ne
 800a6a4:	f04f 0801 	movne.w	r8, #1
 800a6a8:	f048 0820 	orr.w	r8, r8, #32
 800a6ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6ae:	601c      	str	r4, [r3, #0]
 800a6b0:	9b02      	ldr	r3, [sp, #8]
 800a6b2:	601e      	str	r6, [r3, #0]
 800a6b4:	e6a2      	b.n	800a3fc <__gethex+0x114>
 800a6b6:	4290      	cmp	r0, r2
 800a6b8:	f842 3c04 	str.w	r3, [r2, #-4]
 800a6bc:	d8d6      	bhi.n	800a66c <__gethex+0x384>
 800a6be:	68a2      	ldr	r2, [r4, #8]
 800a6c0:	4593      	cmp	fp, r2
 800a6c2:	db17      	blt.n	800a6f4 <__gethex+0x40c>
 800a6c4:	6861      	ldr	r1, [r4, #4]
 800a6c6:	4648      	mov	r0, r9
 800a6c8:	3101      	adds	r1, #1
 800a6ca:	f7fd fc3f 	bl	8007f4c <_Balloc>
 800a6ce:	4682      	mov	sl, r0
 800a6d0:	b918      	cbnz	r0, 800a6da <__gethex+0x3f2>
 800a6d2:	4b1b      	ldr	r3, [pc, #108]	; (800a740 <__gethex+0x458>)
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	2184      	movs	r1, #132	; 0x84
 800a6d8:	e6b3      	b.n	800a442 <__gethex+0x15a>
 800a6da:	6922      	ldr	r2, [r4, #16]
 800a6dc:	3202      	adds	r2, #2
 800a6de:	f104 010c 	add.w	r1, r4, #12
 800a6e2:	0092      	lsls	r2, r2, #2
 800a6e4:	300c      	adds	r0, #12
 800a6e6:	f7ff fd4b 	bl	800a180 <memcpy>
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4648      	mov	r0, r9
 800a6ee:	f7fd fc6d 	bl	8007fcc <_Bfree>
 800a6f2:	4654      	mov	r4, sl
 800a6f4:	6922      	ldr	r2, [r4, #16]
 800a6f6:	1c51      	adds	r1, r2, #1
 800a6f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a6fc:	6121      	str	r1, [r4, #16]
 800a6fe:	2101      	movs	r1, #1
 800a700:	6151      	str	r1, [r2, #20]
 800a702:	e7bc      	b.n	800a67e <__gethex+0x396>
 800a704:	6921      	ldr	r1, [r4, #16]
 800a706:	4559      	cmp	r1, fp
 800a708:	dd0b      	ble.n	800a722 <__gethex+0x43a>
 800a70a:	2101      	movs	r1, #1
 800a70c:	4620      	mov	r0, r4
 800a70e:	f7ff fd83 	bl	800a218 <rshift>
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	3601      	adds	r6, #1
 800a716:	42b3      	cmp	r3, r6
 800a718:	f6ff aedb 	blt.w	800a4d2 <__gethex+0x1ea>
 800a71c:	f04f 0801 	mov.w	r8, #1
 800a720:	e7c2      	b.n	800a6a8 <__gethex+0x3c0>
 800a722:	f015 051f 	ands.w	r5, r5, #31
 800a726:	d0f9      	beq.n	800a71c <__gethex+0x434>
 800a728:	9b01      	ldr	r3, [sp, #4]
 800a72a:	441a      	add	r2, r3
 800a72c:	f1c5 0520 	rsb	r5, r5, #32
 800a730:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a734:	f7fd fcfc 	bl	8008130 <__hi0bits>
 800a738:	42a8      	cmp	r0, r5
 800a73a:	dbe6      	blt.n	800a70a <__gethex+0x422>
 800a73c:	e7ee      	b.n	800a71c <__gethex+0x434>
 800a73e:	bf00      	nop
 800a740:	0800c73b 	.word	0x0800c73b

0800a744 <L_shift>:
 800a744:	f1c2 0208 	rsb	r2, r2, #8
 800a748:	0092      	lsls	r2, r2, #2
 800a74a:	b570      	push	{r4, r5, r6, lr}
 800a74c:	f1c2 0620 	rsb	r6, r2, #32
 800a750:	6843      	ldr	r3, [r0, #4]
 800a752:	6804      	ldr	r4, [r0, #0]
 800a754:	fa03 f506 	lsl.w	r5, r3, r6
 800a758:	432c      	orrs	r4, r5
 800a75a:	40d3      	lsrs	r3, r2
 800a75c:	6004      	str	r4, [r0, #0]
 800a75e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a762:	4288      	cmp	r0, r1
 800a764:	d3f4      	bcc.n	800a750 <L_shift+0xc>
 800a766:	bd70      	pop	{r4, r5, r6, pc}

0800a768 <__match>:
 800a768:	b530      	push	{r4, r5, lr}
 800a76a:	6803      	ldr	r3, [r0, #0]
 800a76c:	3301      	adds	r3, #1
 800a76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a772:	b914      	cbnz	r4, 800a77a <__match+0x12>
 800a774:	6003      	str	r3, [r0, #0]
 800a776:	2001      	movs	r0, #1
 800a778:	bd30      	pop	{r4, r5, pc}
 800a77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a77e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a782:	2d19      	cmp	r5, #25
 800a784:	bf98      	it	ls
 800a786:	3220      	addls	r2, #32
 800a788:	42a2      	cmp	r2, r4
 800a78a:	d0f0      	beq.n	800a76e <__match+0x6>
 800a78c:	2000      	movs	r0, #0
 800a78e:	e7f3      	b.n	800a778 <__match+0x10>

0800a790 <__hexnan>:
 800a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	680b      	ldr	r3, [r1, #0]
 800a796:	6801      	ldr	r1, [r0, #0]
 800a798:	115e      	asrs	r6, r3, #5
 800a79a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a79e:	f013 031f 	ands.w	r3, r3, #31
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	bf18      	it	ne
 800a7a6:	3604      	addne	r6, #4
 800a7a8:	2500      	movs	r5, #0
 800a7aa:	1f37      	subs	r7, r6, #4
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	4690      	mov	r8, r2
 800a7b0:	9301      	str	r3, [sp, #4]
 800a7b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a7b6:	46b9      	mov	r9, r7
 800a7b8:	463c      	mov	r4, r7
 800a7ba:	9502      	str	r5, [sp, #8]
 800a7bc:	46ab      	mov	fp, r5
 800a7be:	784a      	ldrb	r2, [r1, #1]
 800a7c0:	1c4b      	adds	r3, r1, #1
 800a7c2:	9303      	str	r3, [sp, #12]
 800a7c4:	b342      	cbz	r2, 800a818 <__hexnan+0x88>
 800a7c6:	4610      	mov	r0, r2
 800a7c8:	9105      	str	r1, [sp, #20]
 800a7ca:	9204      	str	r2, [sp, #16]
 800a7cc:	f7ff fd76 	bl	800a2bc <__hexdig_fun>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d14f      	bne.n	800a874 <__hexnan+0xe4>
 800a7d4:	9a04      	ldr	r2, [sp, #16]
 800a7d6:	9905      	ldr	r1, [sp, #20]
 800a7d8:	2a20      	cmp	r2, #32
 800a7da:	d818      	bhi.n	800a80e <__hexnan+0x7e>
 800a7dc:	9b02      	ldr	r3, [sp, #8]
 800a7de:	459b      	cmp	fp, r3
 800a7e0:	dd13      	ble.n	800a80a <__hexnan+0x7a>
 800a7e2:	454c      	cmp	r4, r9
 800a7e4:	d206      	bcs.n	800a7f4 <__hexnan+0x64>
 800a7e6:	2d07      	cmp	r5, #7
 800a7e8:	dc04      	bgt.n	800a7f4 <__hexnan+0x64>
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7ff ffa8 	bl	800a744 <L_shift>
 800a7f4:	4544      	cmp	r4, r8
 800a7f6:	d950      	bls.n	800a89a <__hexnan+0x10a>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f1a4 0904 	sub.w	r9, r4, #4
 800a7fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800a802:	f8cd b008 	str.w	fp, [sp, #8]
 800a806:	464c      	mov	r4, r9
 800a808:	461d      	mov	r5, r3
 800a80a:	9903      	ldr	r1, [sp, #12]
 800a80c:	e7d7      	b.n	800a7be <__hexnan+0x2e>
 800a80e:	2a29      	cmp	r2, #41	; 0x29
 800a810:	d155      	bne.n	800a8be <__hexnan+0x12e>
 800a812:	3102      	adds	r1, #2
 800a814:	f8ca 1000 	str.w	r1, [sl]
 800a818:	f1bb 0f00 	cmp.w	fp, #0
 800a81c:	d04f      	beq.n	800a8be <__hexnan+0x12e>
 800a81e:	454c      	cmp	r4, r9
 800a820:	d206      	bcs.n	800a830 <__hexnan+0xa0>
 800a822:	2d07      	cmp	r5, #7
 800a824:	dc04      	bgt.n	800a830 <__hexnan+0xa0>
 800a826:	462a      	mov	r2, r5
 800a828:	4649      	mov	r1, r9
 800a82a:	4620      	mov	r0, r4
 800a82c:	f7ff ff8a 	bl	800a744 <L_shift>
 800a830:	4544      	cmp	r4, r8
 800a832:	d934      	bls.n	800a89e <__hexnan+0x10e>
 800a834:	f1a8 0204 	sub.w	r2, r8, #4
 800a838:	4623      	mov	r3, r4
 800a83a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a83e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a842:	429f      	cmp	r7, r3
 800a844:	d2f9      	bcs.n	800a83a <__hexnan+0xaa>
 800a846:	1b3b      	subs	r3, r7, r4
 800a848:	f023 0303 	bic.w	r3, r3, #3
 800a84c:	3304      	adds	r3, #4
 800a84e:	3e03      	subs	r6, #3
 800a850:	3401      	adds	r4, #1
 800a852:	42a6      	cmp	r6, r4
 800a854:	bf38      	it	cc
 800a856:	2304      	movcc	r3, #4
 800a858:	4443      	add	r3, r8
 800a85a:	2200      	movs	r2, #0
 800a85c:	f843 2b04 	str.w	r2, [r3], #4
 800a860:	429f      	cmp	r7, r3
 800a862:	d2fb      	bcs.n	800a85c <__hexnan+0xcc>
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	b91b      	cbnz	r3, 800a870 <__hexnan+0xe0>
 800a868:	4547      	cmp	r7, r8
 800a86a:	d126      	bne.n	800a8ba <__hexnan+0x12a>
 800a86c:	2301      	movs	r3, #1
 800a86e:	603b      	str	r3, [r7, #0]
 800a870:	2005      	movs	r0, #5
 800a872:	e025      	b.n	800a8c0 <__hexnan+0x130>
 800a874:	3501      	adds	r5, #1
 800a876:	2d08      	cmp	r5, #8
 800a878:	f10b 0b01 	add.w	fp, fp, #1
 800a87c:	dd06      	ble.n	800a88c <__hexnan+0xfc>
 800a87e:	4544      	cmp	r4, r8
 800a880:	d9c3      	bls.n	800a80a <__hexnan+0x7a>
 800a882:	2300      	movs	r3, #0
 800a884:	f844 3c04 	str.w	r3, [r4, #-4]
 800a888:	2501      	movs	r5, #1
 800a88a:	3c04      	subs	r4, #4
 800a88c:	6822      	ldr	r2, [r4, #0]
 800a88e:	f000 000f 	and.w	r0, r0, #15
 800a892:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a896:	6020      	str	r0, [r4, #0]
 800a898:	e7b7      	b.n	800a80a <__hexnan+0x7a>
 800a89a:	2508      	movs	r5, #8
 800a89c:	e7b5      	b.n	800a80a <__hexnan+0x7a>
 800a89e:	9b01      	ldr	r3, [sp, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0df      	beq.n	800a864 <__hexnan+0xd4>
 800a8a4:	f1c3 0320 	rsb	r3, r3, #32
 800a8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ac:	40da      	lsrs	r2, r3
 800a8ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	f846 3c04 	str.w	r3, [r6, #-4]
 800a8b8:	e7d4      	b.n	800a864 <__hexnan+0xd4>
 800a8ba:	3f04      	subs	r7, #4
 800a8bc:	e7d2      	b.n	800a864 <__hexnan+0xd4>
 800a8be:	2004      	movs	r0, #4
 800a8c0:	b007      	add	sp, #28
 800a8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8c6 <__ascii_mbtowc>:
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	b901      	cbnz	r1, 800a8cc <__ascii_mbtowc+0x6>
 800a8ca:	a901      	add	r1, sp, #4
 800a8cc:	b142      	cbz	r2, 800a8e0 <__ascii_mbtowc+0x1a>
 800a8ce:	b14b      	cbz	r3, 800a8e4 <__ascii_mbtowc+0x1e>
 800a8d0:	7813      	ldrb	r3, [r2, #0]
 800a8d2:	600b      	str	r3, [r1, #0]
 800a8d4:	7812      	ldrb	r2, [r2, #0]
 800a8d6:	1e10      	subs	r0, r2, #0
 800a8d8:	bf18      	it	ne
 800a8da:	2001      	movne	r0, #1
 800a8dc:	b002      	add	sp, #8
 800a8de:	4770      	bx	lr
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	e7fb      	b.n	800a8dc <__ascii_mbtowc+0x16>
 800a8e4:	f06f 0001 	mvn.w	r0, #1
 800a8e8:	e7f8      	b.n	800a8dc <__ascii_mbtowc+0x16>

0800a8ea <_realloc_r>:
 800a8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ee:	4680      	mov	r8, r0
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	460e      	mov	r6, r1
 800a8f4:	b921      	cbnz	r1, 800a900 <_realloc_r+0x16>
 800a8f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	f7fd ba9a 	b.w	8007e34 <_malloc_r>
 800a900:	b92a      	cbnz	r2, 800a90e <_realloc_r+0x24>
 800a902:	f7fd fa23 	bl	8007d4c <_free_r>
 800a906:	4625      	mov	r5, r4
 800a908:	4628      	mov	r0, r5
 800a90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a90e:	f000 f8b6 	bl	800aa7e <_malloc_usable_size_r>
 800a912:	4284      	cmp	r4, r0
 800a914:	4607      	mov	r7, r0
 800a916:	d802      	bhi.n	800a91e <_realloc_r+0x34>
 800a918:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a91c:	d812      	bhi.n	800a944 <_realloc_r+0x5a>
 800a91e:	4621      	mov	r1, r4
 800a920:	4640      	mov	r0, r8
 800a922:	f7fd fa87 	bl	8007e34 <_malloc_r>
 800a926:	4605      	mov	r5, r0
 800a928:	2800      	cmp	r0, #0
 800a92a:	d0ed      	beq.n	800a908 <_realloc_r+0x1e>
 800a92c:	42bc      	cmp	r4, r7
 800a92e:	4622      	mov	r2, r4
 800a930:	4631      	mov	r1, r6
 800a932:	bf28      	it	cs
 800a934:	463a      	movcs	r2, r7
 800a936:	f7ff fc23 	bl	800a180 <memcpy>
 800a93a:	4631      	mov	r1, r6
 800a93c:	4640      	mov	r0, r8
 800a93e:	f7fd fa05 	bl	8007d4c <_free_r>
 800a942:	e7e1      	b.n	800a908 <_realloc_r+0x1e>
 800a944:	4635      	mov	r5, r6
 800a946:	e7df      	b.n	800a908 <_realloc_r+0x1e>

0800a948 <_strtoul_l.constprop.0>:
 800a948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a94c:	4f36      	ldr	r7, [pc, #216]	; (800aa28 <_strtoul_l.constprop.0+0xe0>)
 800a94e:	4686      	mov	lr, r0
 800a950:	460d      	mov	r5, r1
 800a952:	4628      	mov	r0, r5
 800a954:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a958:	5d3e      	ldrb	r6, [r7, r4]
 800a95a:	f016 0608 	ands.w	r6, r6, #8
 800a95e:	d1f8      	bne.n	800a952 <_strtoul_l.constprop.0+0xa>
 800a960:	2c2d      	cmp	r4, #45	; 0x2d
 800a962:	d130      	bne.n	800a9c6 <_strtoul_l.constprop.0+0x7e>
 800a964:	782c      	ldrb	r4, [r5, #0]
 800a966:	2601      	movs	r6, #1
 800a968:	1c85      	adds	r5, r0, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d057      	beq.n	800aa1e <_strtoul_l.constprop.0+0xd6>
 800a96e:	2b10      	cmp	r3, #16
 800a970:	d109      	bne.n	800a986 <_strtoul_l.constprop.0+0x3e>
 800a972:	2c30      	cmp	r4, #48	; 0x30
 800a974:	d107      	bne.n	800a986 <_strtoul_l.constprop.0+0x3e>
 800a976:	7828      	ldrb	r0, [r5, #0]
 800a978:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a97c:	2858      	cmp	r0, #88	; 0x58
 800a97e:	d149      	bne.n	800aa14 <_strtoul_l.constprop.0+0xcc>
 800a980:	786c      	ldrb	r4, [r5, #1]
 800a982:	2310      	movs	r3, #16
 800a984:	3502      	adds	r5, #2
 800a986:	f04f 38ff 	mov.w	r8, #4294967295
 800a98a:	2700      	movs	r7, #0
 800a98c:	fbb8 f8f3 	udiv	r8, r8, r3
 800a990:	fb03 f908 	mul.w	r9, r3, r8
 800a994:	ea6f 0909 	mvn.w	r9, r9
 800a998:	4638      	mov	r0, r7
 800a99a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a99e:	f1bc 0f09 	cmp.w	ip, #9
 800a9a2:	d815      	bhi.n	800a9d0 <_strtoul_l.constprop.0+0x88>
 800a9a4:	4664      	mov	r4, ip
 800a9a6:	42a3      	cmp	r3, r4
 800a9a8:	dd23      	ble.n	800a9f2 <_strtoul_l.constprop.0+0xaa>
 800a9aa:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a9ae:	d007      	beq.n	800a9c0 <_strtoul_l.constprop.0+0x78>
 800a9b0:	4580      	cmp	r8, r0
 800a9b2:	d31b      	bcc.n	800a9ec <_strtoul_l.constprop.0+0xa4>
 800a9b4:	d101      	bne.n	800a9ba <_strtoul_l.constprop.0+0x72>
 800a9b6:	45a1      	cmp	r9, r4
 800a9b8:	db18      	blt.n	800a9ec <_strtoul_l.constprop.0+0xa4>
 800a9ba:	fb00 4003 	mla	r0, r0, r3, r4
 800a9be:	2701      	movs	r7, #1
 800a9c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9c4:	e7e9      	b.n	800a99a <_strtoul_l.constprop.0+0x52>
 800a9c6:	2c2b      	cmp	r4, #43	; 0x2b
 800a9c8:	bf04      	itt	eq
 800a9ca:	782c      	ldrbeq	r4, [r5, #0]
 800a9cc:	1c85      	addeq	r5, r0, #2
 800a9ce:	e7cc      	b.n	800a96a <_strtoul_l.constprop.0+0x22>
 800a9d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a9d4:	f1bc 0f19 	cmp.w	ip, #25
 800a9d8:	d801      	bhi.n	800a9de <_strtoul_l.constprop.0+0x96>
 800a9da:	3c37      	subs	r4, #55	; 0x37
 800a9dc:	e7e3      	b.n	800a9a6 <_strtoul_l.constprop.0+0x5e>
 800a9de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a9e2:	f1bc 0f19 	cmp.w	ip, #25
 800a9e6:	d804      	bhi.n	800a9f2 <_strtoul_l.constprop.0+0xaa>
 800a9e8:	3c57      	subs	r4, #87	; 0x57
 800a9ea:	e7dc      	b.n	800a9a6 <_strtoul_l.constprop.0+0x5e>
 800a9ec:	f04f 37ff 	mov.w	r7, #4294967295
 800a9f0:	e7e6      	b.n	800a9c0 <_strtoul_l.constprop.0+0x78>
 800a9f2:	1c7b      	adds	r3, r7, #1
 800a9f4:	d106      	bne.n	800aa04 <_strtoul_l.constprop.0+0xbc>
 800a9f6:	2322      	movs	r3, #34	; 0x22
 800a9f8:	f8ce 3000 	str.w	r3, [lr]
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	b932      	cbnz	r2, 800aa0e <_strtoul_l.constprop.0+0xc6>
 800aa00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa04:	b106      	cbz	r6, 800aa08 <_strtoul_l.constprop.0+0xc0>
 800aa06:	4240      	negs	r0, r0
 800aa08:	2a00      	cmp	r2, #0
 800aa0a:	d0f9      	beq.n	800aa00 <_strtoul_l.constprop.0+0xb8>
 800aa0c:	b107      	cbz	r7, 800aa10 <_strtoul_l.constprop.0+0xc8>
 800aa0e:	1e69      	subs	r1, r5, #1
 800aa10:	6011      	str	r1, [r2, #0]
 800aa12:	e7f5      	b.n	800aa00 <_strtoul_l.constprop.0+0xb8>
 800aa14:	2430      	movs	r4, #48	; 0x30
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1b5      	bne.n	800a986 <_strtoul_l.constprop.0+0x3e>
 800aa1a:	2308      	movs	r3, #8
 800aa1c:	e7b3      	b.n	800a986 <_strtoul_l.constprop.0+0x3e>
 800aa1e:	2c30      	cmp	r4, #48	; 0x30
 800aa20:	d0a9      	beq.n	800a976 <_strtoul_l.constprop.0+0x2e>
 800aa22:	230a      	movs	r3, #10
 800aa24:	e7af      	b.n	800a986 <_strtoul_l.constprop.0+0x3e>
 800aa26:	bf00      	nop
 800aa28:	0800c8f9 	.word	0x0800c8f9

0800aa2c <_strtoul_r>:
 800aa2c:	f7ff bf8c 	b.w	800a948 <_strtoul_l.constprop.0>

0800aa30 <__ascii_wctomb>:
 800aa30:	b149      	cbz	r1, 800aa46 <__ascii_wctomb+0x16>
 800aa32:	2aff      	cmp	r2, #255	; 0xff
 800aa34:	bf85      	ittet	hi
 800aa36:	238a      	movhi	r3, #138	; 0x8a
 800aa38:	6003      	strhi	r3, [r0, #0]
 800aa3a:	700a      	strbls	r2, [r1, #0]
 800aa3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa40:	bf98      	it	ls
 800aa42:	2001      	movls	r0, #1
 800aa44:	4770      	bx	lr
 800aa46:	4608      	mov	r0, r1
 800aa48:	4770      	bx	lr
	...

0800aa4c <fiprintf>:
 800aa4c:	b40e      	push	{r1, r2, r3}
 800aa4e:	b503      	push	{r0, r1, lr}
 800aa50:	4601      	mov	r1, r0
 800aa52:	ab03      	add	r3, sp, #12
 800aa54:	4805      	ldr	r0, [pc, #20]	; (800aa6c <fiprintf+0x20>)
 800aa56:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa5a:	6800      	ldr	r0, [r0, #0]
 800aa5c:	9301      	str	r3, [sp, #4]
 800aa5e:	f000 f83f 	bl	800aae0 <_vfiprintf_r>
 800aa62:	b002      	add	sp, #8
 800aa64:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa68:	b003      	add	sp, #12
 800aa6a:	4770      	bx	lr
 800aa6c:	20000064 	.word	0x20000064

0800aa70 <abort>:
 800aa70:	b508      	push	{r3, lr}
 800aa72:	2006      	movs	r0, #6
 800aa74:	f000 fa0c 	bl	800ae90 <raise>
 800aa78:	2001      	movs	r0, #1
 800aa7a:	f7f7 fc13 	bl	80022a4 <_exit>

0800aa7e <_malloc_usable_size_r>:
 800aa7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa82:	1f18      	subs	r0, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bfbc      	itt	lt
 800aa88:	580b      	ldrlt	r3, [r1, r0]
 800aa8a:	18c0      	addlt	r0, r0, r3
 800aa8c:	4770      	bx	lr

0800aa8e <__sfputc_r>:
 800aa8e:	6893      	ldr	r3, [r2, #8]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	b410      	push	{r4}
 800aa96:	6093      	str	r3, [r2, #8]
 800aa98:	da08      	bge.n	800aaac <__sfputc_r+0x1e>
 800aa9a:	6994      	ldr	r4, [r2, #24]
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	db01      	blt.n	800aaa4 <__sfputc_r+0x16>
 800aaa0:	290a      	cmp	r1, #10
 800aaa2:	d103      	bne.n	800aaac <__sfputc_r+0x1e>
 800aaa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaa8:	f000 b934 	b.w	800ad14 <__swbuf_r>
 800aaac:	6813      	ldr	r3, [r2, #0]
 800aaae:	1c58      	adds	r0, r3, #1
 800aab0:	6010      	str	r0, [r2, #0]
 800aab2:	7019      	strb	r1, [r3, #0]
 800aab4:	4608      	mov	r0, r1
 800aab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <__sfputs_r>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	4606      	mov	r6, r0
 800aac0:	460f      	mov	r7, r1
 800aac2:	4614      	mov	r4, r2
 800aac4:	18d5      	adds	r5, r2, r3
 800aac6:	42ac      	cmp	r4, r5
 800aac8:	d101      	bne.n	800aace <__sfputs_r+0x12>
 800aaca:	2000      	movs	r0, #0
 800aacc:	e007      	b.n	800aade <__sfputs_r+0x22>
 800aace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad2:	463a      	mov	r2, r7
 800aad4:	4630      	mov	r0, r6
 800aad6:	f7ff ffda 	bl	800aa8e <__sfputc_r>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d1f3      	bne.n	800aac6 <__sfputs_r+0xa>
 800aade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aae0 <_vfiprintf_r>:
 800aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae4:	460d      	mov	r5, r1
 800aae6:	b09d      	sub	sp, #116	; 0x74
 800aae8:	4614      	mov	r4, r2
 800aaea:	4698      	mov	r8, r3
 800aaec:	4606      	mov	r6, r0
 800aaee:	b118      	cbz	r0, 800aaf8 <_vfiprintf_r+0x18>
 800aaf0:	6a03      	ldr	r3, [r0, #32]
 800aaf2:	b90b      	cbnz	r3, 800aaf8 <_vfiprintf_r+0x18>
 800aaf4:	f7fc f95a 	bl	8006dac <__sinit>
 800aaf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aafa:	07d9      	lsls	r1, r3, #31
 800aafc:	d405      	bmi.n	800ab0a <_vfiprintf_r+0x2a>
 800aafe:	89ab      	ldrh	r3, [r5, #12]
 800ab00:	059a      	lsls	r2, r3, #22
 800ab02:	d402      	bmi.n	800ab0a <_vfiprintf_r+0x2a>
 800ab04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab06:	f7fc fa96 	bl	8007036 <__retarget_lock_acquire_recursive>
 800ab0a:	89ab      	ldrh	r3, [r5, #12]
 800ab0c:	071b      	lsls	r3, r3, #28
 800ab0e:	d501      	bpl.n	800ab14 <_vfiprintf_r+0x34>
 800ab10:	692b      	ldr	r3, [r5, #16]
 800ab12:	b99b      	cbnz	r3, 800ab3c <_vfiprintf_r+0x5c>
 800ab14:	4629      	mov	r1, r5
 800ab16:	4630      	mov	r0, r6
 800ab18:	f000 f93a 	bl	800ad90 <__swsetup_r>
 800ab1c:	b170      	cbz	r0, 800ab3c <_vfiprintf_r+0x5c>
 800ab1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab20:	07dc      	lsls	r4, r3, #31
 800ab22:	d504      	bpl.n	800ab2e <_vfiprintf_r+0x4e>
 800ab24:	f04f 30ff 	mov.w	r0, #4294967295
 800ab28:	b01d      	add	sp, #116	; 0x74
 800ab2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2e:	89ab      	ldrh	r3, [r5, #12]
 800ab30:	0598      	lsls	r0, r3, #22
 800ab32:	d4f7      	bmi.n	800ab24 <_vfiprintf_r+0x44>
 800ab34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab36:	f7fc fa7f 	bl	8007038 <__retarget_lock_release_recursive>
 800ab3a:	e7f3      	b.n	800ab24 <_vfiprintf_r+0x44>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab40:	2320      	movs	r3, #32
 800ab42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab4a:	2330      	movs	r3, #48	; 0x30
 800ab4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ad00 <_vfiprintf_r+0x220>
 800ab50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab54:	f04f 0901 	mov.w	r9, #1
 800ab58:	4623      	mov	r3, r4
 800ab5a:	469a      	mov	sl, r3
 800ab5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab60:	b10a      	cbz	r2, 800ab66 <_vfiprintf_r+0x86>
 800ab62:	2a25      	cmp	r2, #37	; 0x25
 800ab64:	d1f9      	bne.n	800ab5a <_vfiprintf_r+0x7a>
 800ab66:	ebba 0b04 	subs.w	fp, sl, r4
 800ab6a:	d00b      	beq.n	800ab84 <_vfiprintf_r+0xa4>
 800ab6c:	465b      	mov	r3, fp
 800ab6e:	4622      	mov	r2, r4
 800ab70:	4629      	mov	r1, r5
 800ab72:	4630      	mov	r0, r6
 800ab74:	f7ff ffa2 	bl	800aabc <__sfputs_r>
 800ab78:	3001      	adds	r0, #1
 800ab7a:	f000 80a9 	beq.w	800acd0 <_vfiprintf_r+0x1f0>
 800ab7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab80:	445a      	add	r2, fp
 800ab82:	9209      	str	r2, [sp, #36]	; 0x24
 800ab84:	f89a 3000 	ldrb.w	r3, [sl]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 80a1 	beq.w	800acd0 <_vfiprintf_r+0x1f0>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f04f 32ff 	mov.w	r2, #4294967295
 800ab94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab98:	f10a 0a01 	add.w	sl, sl, #1
 800ab9c:	9304      	str	r3, [sp, #16]
 800ab9e:	9307      	str	r3, [sp, #28]
 800aba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aba4:	931a      	str	r3, [sp, #104]	; 0x68
 800aba6:	4654      	mov	r4, sl
 800aba8:	2205      	movs	r2, #5
 800abaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abae:	4854      	ldr	r0, [pc, #336]	; (800ad00 <_vfiprintf_r+0x220>)
 800abb0:	f7f5 fb26 	bl	8000200 <memchr>
 800abb4:	9a04      	ldr	r2, [sp, #16]
 800abb6:	b9d8      	cbnz	r0, 800abf0 <_vfiprintf_r+0x110>
 800abb8:	06d1      	lsls	r1, r2, #27
 800abba:	bf44      	itt	mi
 800abbc:	2320      	movmi	r3, #32
 800abbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abc2:	0713      	lsls	r3, r2, #28
 800abc4:	bf44      	itt	mi
 800abc6:	232b      	movmi	r3, #43	; 0x2b
 800abc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abcc:	f89a 3000 	ldrb.w	r3, [sl]
 800abd0:	2b2a      	cmp	r3, #42	; 0x2a
 800abd2:	d015      	beq.n	800ac00 <_vfiprintf_r+0x120>
 800abd4:	9a07      	ldr	r2, [sp, #28]
 800abd6:	4654      	mov	r4, sl
 800abd8:	2000      	movs	r0, #0
 800abda:	f04f 0c0a 	mov.w	ip, #10
 800abde:	4621      	mov	r1, r4
 800abe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abe4:	3b30      	subs	r3, #48	; 0x30
 800abe6:	2b09      	cmp	r3, #9
 800abe8:	d94d      	bls.n	800ac86 <_vfiprintf_r+0x1a6>
 800abea:	b1b0      	cbz	r0, 800ac1a <_vfiprintf_r+0x13a>
 800abec:	9207      	str	r2, [sp, #28]
 800abee:	e014      	b.n	800ac1a <_vfiprintf_r+0x13a>
 800abf0:	eba0 0308 	sub.w	r3, r0, r8
 800abf4:	fa09 f303 	lsl.w	r3, r9, r3
 800abf8:	4313      	orrs	r3, r2
 800abfa:	9304      	str	r3, [sp, #16]
 800abfc:	46a2      	mov	sl, r4
 800abfe:	e7d2      	b.n	800aba6 <_vfiprintf_r+0xc6>
 800ac00:	9b03      	ldr	r3, [sp, #12]
 800ac02:	1d19      	adds	r1, r3, #4
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	9103      	str	r1, [sp, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfbb      	ittet	lt
 800ac0c:	425b      	neglt	r3, r3
 800ac0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac12:	9307      	strge	r3, [sp, #28]
 800ac14:	9307      	strlt	r3, [sp, #28]
 800ac16:	bfb8      	it	lt
 800ac18:	9204      	strlt	r2, [sp, #16]
 800ac1a:	7823      	ldrb	r3, [r4, #0]
 800ac1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac1e:	d10c      	bne.n	800ac3a <_vfiprintf_r+0x15a>
 800ac20:	7863      	ldrb	r3, [r4, #1]
 800ac22:	2b2a      	cmp	r3, #42	; 0x2a
 800ac24:	d134      	bne.n	800ac90 <_vfiprintf_r+0x1b0>
 800ac26:	9b03      	ldr	r3, [sp, #12]
 800ac28:	1d1a      	adds	r2, r3, #4
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	9203      	str	r2, [sp, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	bfb8      	it	lt
 800ac32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac36:	3402      	adds	r4, #2
 800ac38:	9305      	str	r3, [sp, #20]
 800ac3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ad10 <_vfiprintf_r+0x230>
 800ac3e:	7821      	ldrb	r1, [r4, #0]
 800ac40:	2203      	movs	r2, #3
 800ac42:	4650      	mov	r0, sl
 800ac44:	f7f5 fadc 	bl	8000200 <memchr>
 800ac48:	b138      	cbz	r0, 800ac5a <_vfiprintf_r+0x17a>
 800ac4a:	9b04      	ldr	r3, [sp, #16]
 800ac4c:	eba0 000a 	sub.w	r0, r0, sl
 800ac50:	2240      	movs	r2, #64	; 0x40
 800ac52:	4082      	lsls	r2, r0
 800ac54:	4313      	orrs	r3, r2
 800ac56:	3401      	adds	r4, #1
 800ac58:	9304      	str	r3, [sp, #16]
 800ac5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac5e:	4829      	ldr	r0, [pc, #164]	; (800ad04 <_vfiprintf_r+0x224>)
 800ac60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac64:	2206      	movs	r2, #6
 800ac66:	f7f5 facb 	bl	8000200 <memchr>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d03f      	beq.n	800acee <_vfiprintf_r+0x20e>
 800ac6e:	4b26      	ldr	r3, [pc, #152]	; (800ad08 <_vfiprintf_r+0x228>)
 800ac70:	bb1b      	cbnz	r3, 800acba <_vfiprintf_r+0x1da>
 800ac72:	9b03      	ldr	r3, [sp, #12]
 800ac74:	3307      	adds	r3, #7
 800ac76:	f023 0307 	bic.w	r3, r3, #7
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	9303      	str	r3, [sp, #12]
 800ac7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac80:	443b      	add	r3, r7
 800ac82:	9309      	str	r3, [sp, #36]	; 0x24
 800ac84:	e768      	b.n	800ab58 <_vfiprintf_r+0x78>
 800ac86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	e7a6      	b.n	800abde <_vfiprintf_r+0xfe>
 800ac90:	2300      	movs	r3, #0
 800ac92:	3401      	adds	r4, #1
 800ac94:	9305      	str	r3, [sp, #20]
 800ac96:	4619      	mov	r1, r3
 800ac98:	f04f 0c0a 	mov.w	ip, #10
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca2:	3a30      	subs	r2, #48	; 0x30
 800aca4:	2a09      	cmp	r2, #9
 800aca6:	d903      	bls.n	800acb0 <_vfiprintf_r+0x1d0>
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d0c6      	beq.n	800ac3a <_vfiprintf_r+0x15a>
 800acac:	9105      	str	r1, [sp, #20]
 800acae:	e7c4      	b.n	800ac3a <_vfiprintf_r+0x15a>
 800acb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800acb4:	4604      	mov	r4, r0
 800acb6:	2301      	movs	r3, #1
 800acb8:	e7f0      	b.n	800ac9c <_vfiprintf_r+0x1bc>
 800acba:	ab03      	add	r3, sp, #12
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	462a      	mov	r2, r5
 800acc0:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <_vfiprintf_r+0x22c>)
 800acc2:	a904      	add	r1, sp, #16
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7fb fa0f 	bl	80060e8 <_printf_float>
 800acca:	4607      	mov	r7, r0
 800accc:	1c78      	adds	r0, r7, #1
 800acce:	d1d6      	bne.n	800ac7e <_vfiprintf_r+0x19e>
 800acd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acd2:	07d9      	lsls	r1, r3, #31
 800acd4:	d405      	bmi.n	800ace2 <_vfiprintf_r+0x202>
 800acd6:	89ab      	ldrh	r3, [r5, #12]
 800acd8:	059a      	lsls	r2, r3, #22
 800acda:	d402      	bmi.n	800ace2 <_vfiprintf_r+0x202>
 800acdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acde:	f7fc f9ab 	bl	8007038 <__retarget_lock_release_recursive>
 800ace2:	89ab      	ldrh	r3, [r5, #12]
 800ace4:	065b      	lsls	r3, r3, #25
 800ace6:	f53f af1d 	bmi.w	800ab24 <_vfiprintf_r+0x44>
 800acea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acec:	e71c      	b.n	800ab28 <_vfiprintf_r+0x48>
 800acee:	ab03      	add	r3, sp, #12
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	462a      	mov	r2, r5
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <_vfiprintf_r+0x22c>)
 800acf6:	a904      	add	r1, sp, #16
 800acf8:	4630      	mov	r0, r6
 800acfa:	f7fb fc99 	bl	8006630 <_printf_i>
 800acfe:	e7e4      	b.n	800acca <_vfiprintf_r+0x1ea>
 800ad00:	0800c9f9 	.word	0x0800c9f9
 800ad04:	0800ca03 	.word	0x0800ca03
 800ad08:	080060e9 	.word	0x080060e9
 800ad0c:	0800aabd 	.word	0x0800aabd
 800ad10:	0800c9ff 	.word	0x0800c9ff

0800ad14 <__swbuf_r>:
 800ad14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad16:	460e      	mov	r6, r1
 800ad18:	4614      	mov	r4, r2
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	b118      	cbz	r0, 800ad26 <__swbuf_r+0x12>
 800ad1e:	6a03      	ldr	r3, [r0, #32]
 800ad20:	b90b      	cbnz	r3, 800ad26 <__swbuf_r+0x12>
 800ad22:	f7fc f843 	bl	8006dac <__sinit>
 800ad26:	69a3      	ldr	r3, [r4, #24]
 800ad28:	60a3      	str	r3, [r4, #8]
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	071a      	lsls	r2, r3, #28
 800ad2e:	d525      	bpl.n	800ad7c <__swbuf_r+0x68>
 800ad30:	6923      	ldr	r3, [r4, #16]
 800ad32:	b31b      	cbz	r3, 800ad7c <__swbuf_r+0x68>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	6922      	ldr	r2, [r4, #16]
 800ad38:	1a98      	subs	r0, r3, r2
 800ad3a:	6963      	ldr	r3, [r4, #20]
 800ad3c:	b2f6      	uxtb	r6, r6
 800ad3e:	4283      	cmp	r3, r0
 800ad40:	4637      	mov	r7, r6
 800ad42:	dc04      	bgt.n	800ad4e <__swbuf_r+0x3a>
 800ad44:	4621      	mov	r1, r4
 800ad46:	4628      	mov	r0, r5
 800ad48:	f7ff f942 	bl	8009fd0 <_fflush_r>
 800ad4c:	b9e0      	cbnz	r0, 800ad88 <__swbuf_r+0x74>
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	60a3      	str	r3, [r4, #8]
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	6022      	str	r2, [r4, #0]
 800ad5a:	701e      	strb	r6, [r3, #0]
 800ad5c:	6962      	ldr	r2, [r4, #20]
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d004      	beq.n	800ad6e <__swbuf_r+0x5a>
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	07db      	lsls	r3, r3, #31
 800ad68:	d506      	bpl.n	800ad78 <__swbuf_r+0x64>
 800ad6a:	2e0a      	cmp	r6, #10
 800ad6c:	d104      	bne.n	800ad78 <__swbuf_r+0x64>
 800ad6e:	4621      	mov	r1, r4
 800ad70:	4628      	mov	r0, r5
 800ad72:	f7ff f92d 	bl	8009fd0 <_fflush_r>
 800ad76:	b938      	cbnz	r0, 800ad88 <__swbuf_r+0x74>
 800ad78:	4638      	mov	r0, r7
 800ad7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f000 f806 	bl	800ad90 <__swsetup_r>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d0d5      	beq.n	800ad34 <__swbuf_r+0x20>
 800ad88:	f04f 37ff 	mov.w	r7, #4294967295
 800ad8c:	e7f4      	b.n	800ad78 <__swbuf_r+0x64>
	...

0800ad90 <__swsetup_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4b2a      	ldr	r3, [pc, #168]	; (800ae3c <__swsetup_r+0xac>)
 800ad94:	4605      	mov	r5, r0
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	460c      	mov	r4, r1
 800ad9a:	b118      	cbz	r0, 800ada4 <__swsetup_r+0x14>
 800ad9c:	6a03      	ldr	r3, [r0, #32]
 800ad9e:	b90b      	cbnz	r3, 800ada4 <__swsetup_r+0x14>
 800ada0:	f7fc f804 	bl	8006dac <__sinit>
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adaa:	0718      	lsls	r0, r3, #28
 800adac:	d422      	bmi.n	800adf4 <__swsetup_r+0x64>
 800adae:	06d9      	lsls	r1, r3, #27
 800adb0:	d407      	bmi.n	800adc2 <__swsetup_r+0x32>
 800adb2:	2309      	movs	r3, #9
 800adb4:	602b      	str	r3, [r5, #0]
 800adb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800adba:	81a3      	strh	r3, [r4, #12]
 800adbc:	f04f 30ff 	mov.w	r0, #4294967295
 800adc0:	e034      	b.n	800ae2c <__swsetup_r+0x9c>
 800adc2:	0758      	lsls	r0, r3, #29
 800adc4:	d512      	bpl.n	800adec <__swsetup_r+0x5c>
 800adc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adc8:	b141      	cbz	r1, 800addc <__swsetup_r+0x4c>
 800adca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adce:	4299      	cmp	r1, r3
 800add0:	d002      	beq.n	800add8 <__swsetup_r+0x48>
 800add2:	4628      	mov	r0, r5
 800add4:	f7fc ffba 	bl	8007d4c <_free_r>
 800add8:	2300      	movs	r3, #0
 800adda:	6363      	str	r3, [r4, #52]	; 0x34
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ade2:	81a3      	strh	r3, [r4, #12]
 800ade4:	2300      	movs	r3, #0
 800ade6:	6063      	str	r3, [r4, #4]
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f043 0308 	orr.w	r3, r3, #8
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	6923      	ldr	r3, [r4, #16]
 800adf6:	b94b      	cbnz	r3, 800ae0c <__swsetup_r+0x7c>
 800adf8:	89a3      	ldrh	r3, [r4, #12]
 800adfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae02:	d003      	beq.n	800ae0c <__swsetup_r+0x7c>
 800ae04:	4621      	mov	r1, r4
 800ae06:	4628      	mov	r0, r5
 800ae08:	f000 f884 	bl	800af14 <__smakebuf_r>
 800ae0c:	89a0      	ldrh	r0, [r4, #12]
 800ae0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae12:	f010 0301 	ands.w	r3, r0, #1
 800ae16:	d00a      	beq.n	800ae2e <__swsetup_r+0x9e>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	60a3      	str	r3, [r4, #8]
 800ae1c:	6963      	ldr	r3, [r4, #20]
 800ae1e:	425b      	negs	r3, r3
 800ae20:	61a3      	str	r3, [r4, #24]
 800ae22:	6923      	ldr	r3, [r4, #16]
 800ae24:	b943      	cbnz	r3, 800ae38 <__swsetup_r+0xa8>
 800ae26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae2a:	d1c4      	bne.n	800adb6 <__swsetup_r+0x26>
 800ae2c:	bd38      	pop	{r3, r4, r5, pc}
 800ae2e:	0781      	lsls	r1, r0, #30
 800ae30:	bf58      	it	pl
 800ae32:	6963      	ldrpl	r3, [r4, #20]
 800ae34:	60a3      	str	r3, [r4, #8]
 800ae36:	e7f4      	b.n	800ae22 <__swsetup_r+0x92>
 800ae38:	2000      	movs	r0, #0
 800ae3a:	e7f7      	b.n	800ae2c <__swsetup_r+0x9c>
 800ae3c:	20000064 	.word	0x20000064

0800ae40 <_raise_r>:
 800ae40:	291f      	cmp	r1, #31
 800ae42:	b538      	push	{r3, r4, r5, lr}
 800ae44:	4604      	mov	r4, r0
 800ae46:	460d      	mov	r5, r1
 800ae48:	d904      	bls.n	800ae54 <_raise_r+0x14>
 800ae4a:	2316      	movs	r3, #22
 800ae4c:	6003      	str	r3, [r0, #0]
 800ae4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ae56:	b112      	cbz	r2, 800ae5e <_raise_r+0x1e>
 800ae58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae5c:	b94b      	cbnz	r3, 800ae72 <_raise_r+0x32>
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 f830 	bl	800aec4 <_getpid_r>
 800ae64:	462a      	mov	r2, r5
 800ae66:	4601      	mov	r1, r0
 800ae68:	4620      	mov	r0, r4
 800ae6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae6e:	f000 b817 	b.w	800aea0 <_kill_r>
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d00a      	beq.n	800ae8c <_raise_r+0x4c>
 800ae76:	1c59      	adds	r1, r3, #1
 800ae78:	d103      	bne.n	800ae82 <_raise_r+0x42>
 800ae7a:	2316      	movs	r3, #22
 800ae7c:	6003      	str	r3, [r0, #0]
 800ae7e:	2001      	movs	r0, #1
 800ae80:	e7e7      	b.n	800ae52 <_raise_r+0x12>
 800ae82:	2400      	movs	r4, #0
 800ae84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae88:	4628      	mov	r0, r5
 800ae8a:	4798      	blx	r3
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	e7e0      	b.n	800ae52 <_raise_r+0x12>

0800ae90 <raise>:
 800ae90:	4b02      	ldr	r3, [pc, #8]	; (800ae9c <raise+0xc>)
 800ae92:	4601      	mov	r1, r0
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	f7ff bfd3 	b.w	800ae40 <_raise_r>
 800ae9a:	bf00      	nop
 800ae9c:	20000064 	.word	0x20000064

0800aea0 <_kill_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d07      	ldr	r5, [pc, #28]	; (800aec0 <_kill_r+0x20>)
 800aea4:	2300      	movs	r3, #0
 800aea6:	4604      	mov	r4, r0
 800aea8:	4608      	mov	r0, r1
 800aeaa:	4611      	mov	r1, r2
 800aeac:	602b      	str	r3, [r5, #0]
 800aeae:	f7f7 f9e9 	bl	8002284 <_kill>
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	d102      	bne.n	800aebc <_kill_r+0x1c>
 800aeb6:	682b      	ldr	r3, [r5, #0]
 800aeb8:	b103      	cbz	r3, 800aebc <_kill_r+0x1c>
 800aeba:	6023      	str	r3, [r4, #0]
 800aebc:	bd38      	pop	{r3, r4, r5, pc}
 800aebe:	bf00      	nop
 800aec0:	20000638 	.word	0x20000638

0800aec4 <_getpid_r>:
 800aec4:	f7f7 b9d6 	b.w	8002274 <_getpid>

0800aec8 <__swhatbuf_r>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	460c      	mov	r4, r1
 800aecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed0:	2900      	cmp	r1, #0
 800aed2:	b096      	sub	sp, #88	; 0x58
 800aed4:	4615      	mov	r5, r2
 800aed6:	461e      	mov	r6, r3
 800aed8:	da0d      	bge.n	800aef6 <__swhatbuf_r+0x2e>
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aee0:	f04f 0100 	mov.w	r1, #0
 800aee4:	bf0c      	ite	eq
 800aee6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aeea:	2340      	movne	r3, #64	; 0x40
 800aeec:	2000      	movs	r0, #0
 800aeee:	6031      	str	r1, [r6, #0]
 800aef0:	602b      	str	r3, [r5, #0]
 800aef2:	b016      	add	sp, #88	; 0x58
 800aef4:	bd70      	pop	{r4, r5, r6, pc}
 800aef6:	466a      	mov	r2, sp
 800aef8:	f000 f848 	bl	800af8c <_fstat_r>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	dbec      	blt.n	800aeda <__swhatbuf_r+0x12>
 800af00:	9901      	ldr	r1, [sp, #4]
 800af02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800af06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800af0a:	4259      	negs	r1, r3
 800af0c:	4159      	adcs	r1, r3
 800af0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af12:	e7eb      	b.n	800aeec <__swhatbuf_r+0x24>

0800af14 <__smakebuf_r>:
 800af14:	898b      	ldrh	r3, [r1, #12]
 800af16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af18:	079d      	lsls	r5, r3, #30
 800af1a:	4606      	mov	r6, r0
 800af1c:	460c      	mov	r4, r1
 800af1e:	d507      	bpl.n	800af30 <__smakebuf_r+0x1c>
 800af20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	6123      	str	r3, [r4, #16]
 800af28:	2301      	movs	r3, #1
 800af2a:	6163      	str	r3, [r4, #20]
 800af2c:	b002      	add	sp, #8
 800af2e:	bd70      	pop	{r4, r5, r6, pc}
 800af30:	ab01      	add	r3, sp, #4
 800af32:	466a      	mov	r2, sp
 800af34:	f7ff ffc8 	bl	800aec8 <__swhatbuf_r>
 800af38:	9900      	ldr	r1, [sp, #0]
 800af3a:	4605      	mov	r5, r0
 800af3c:	4630      	mov	r0, r6
 800af3e:	f7fc ff79 	bl	8007e34 <_malloc_r>
 800af42:	b948      	cbnz	r0, 800af58 <__smakebuf_r+0x44>
 800af44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af48:	059a      	lsls	r2, r3, #22
 800af4a:	d4ef      	bmi.n	800af2c <__smakebuf_r+0x18>
 800af4c:	f023 0303 	bic.w	r3, r3, #3
 800af50:	f043 0302 	orr.w	r3, r3, #2
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	e7e3      	b.n	800af20 <__smakebuf_r+0xc>
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	6020      	str	r0, [r4, #0]
 800af5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af60:	81a3      	strh	r3, [r4, #12]
 800af62:	9b00      	ldr	r3, [sp, #0]
 800af64:	6163      	str	r3, [r4, #20]
 800af66:	9b01      	ldr	r3, [sp, #4]
 800af68:	6120      	str	r0, [r4, #16]
 800af6a:	b15b      	cbz	r3, 800af84 <__smakebuf_r+0x70>
 800af6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af70:	4630      	mov	r0, r6
 800af72:	f000 f81d 	bl	800afb0 <_isatty_r>
 800af76:	b128      	cbz	r0, 800af84 <__smakebuf_r+0x70>
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	f023 0303 	bic.w	r3, r3, #3
 800af7e:	f043 0301 	orr.w	r3, r3, #1
 800af82:	81a3      	strh	r3, [r4, #12]
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	431d      	orrs	r5, r3
 800af88:	81a5      	strh	r5, [r4, #12]
 800af8a:	e7cf      	b.n	800af2c <__smakebuf_r+0x18>

0800af8c <_fstat_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d07      	ldr	r5, [pc, #28]	; (800afac <_fstat_r+0x20>)
 800af90:	2300      	movs	r3, #0
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	4611      	mov	r1, r2
 800af98:	602b      	str	r3, [r5, #0]
 800af9a:	f7f7 f9d2 	bl	8002342 <_fstat>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	d102      	bne.n	800afa8 <_fstat_r+0x1c>
 800afa2:	682b      	ldr	r3, [r5, #0]
 800afa4:	b103      	cbz	r3, 800afa8 <_fstat_r+0x1c>
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	bd38      	pop	{r3, r4, r5, pc}
 800afaa:	bf00      	nop
 800afac:	20000638 	.word	0x20000638

0800afb0 <_isatty_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d06      	ldr	r5, [pc, #24]	; (800afcc <_isatty_r+0x1c>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	4604      	mov	r4, r0
 800afb8:	4608      	mov	r0, r1
 800afba:	602b      	str	r3, [r5, #0]
 800afbc:	f7f7 f9d1 	bl	8002362 <_isatty>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d102      	bne.n	800afca <_isatty_r+0x1a>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b103      	cbz	r3, 800afca <_isatty_r+0x1a>
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	20000638 	.word	0x20000638

0800afd0 <atan2>:
 800afd0:	f000 ba36 	b.w	800b440 <__ieee754_atan2>
 800afd4:	0000      	movs	r0, r0
	...

0800afd8 <cos>:
 800afd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afda:	ec53 2b10 	vmov	r2, r3, d0
 800afde:	4826      	ldr	r0, [pc, #152]	; (800b078 <cos+0xa0>)
 800afe0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800afe4:	4281      	cmp	r1, r0
 800afe6:	dc06      	bgt.n	800aff6 <cos+0x1e>
 800afe8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b070 <cos+0x98>
 800afec:	b005      	add	sp, #20
 800afee:	f85d eb04 	ldr.w	lr, [sp], #4
 800aff2:	f000 b89d 	b.w	800b130 <__kernel_cos>
 800aff6:	4821      	ldr	r0, [pc, #132]	; (800b07c <cos+0xa4>)
 800aff8:	4281      	cmp	r1, r0
 800affa:	dd09      	ble.n	800b010 <cos+0x38>
 800affc:	ee10 0a10 	vmov	r0, s0
 800b000:	4619      	mov	r1, r3
 800b002:	f7f5 f959 	bl	80002b8 <__aeabi_dsub>
 800b006:	ec41 0b10 	vmov	d0, r0, r1
 800b00a:	b005      	add	sp, #20
 800b00c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b010:	4668      	mov	r0, sp
 800b012:	f000 fadd 	bl	800b5d0 <__ieee754_rem_pio2>
 800b016:	f000 0003 	and.w	r0, r0, #3
 800b01a:	2801      	cmp	r0, #1
 800b01c:	d00b      	beq.n	800b036 <cos+0x5e>
 800b01e:	2802      	cmp	r0, #2
 800b020:	d016      	beq.n	800b050 <cos+0x78>
 800b022:	b9e0      	cbnz	r0, 800b05e <cos+0x86>
 800b024:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b028:	ed9d 0b00 	vldr	d0, [sp]
 800b02c:	f000 f880 	bl	800b130 <__kernel_cos>
 800b030:	ec51 0b10 	vmov	r0, r1, d0
 800b034:	e7e7      	b.n	800b006 <cos+0x2e>
 800b036:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b03a:	ed9d 0b00 	vldr	d0, [sp]
 800b03e:	f000 f93f 	bl	800b2c0 <__kernel_sin>
 800b042:	ec53 2b10 	vmov	r2, r3, d0
 800b046:	ee10 0a10 	vmov	r0, s0
 800b04a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b04e:	e7da      	b.n	800b006 <cos+0x2e>
 800b050:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b054:	ed9d 0b00 	vldr	d0, [sp]
 800b058:	f000 f86a 	bl	800b130 <__kernel_cos>
 800b05c:	e7f1      	b.n	800b042 <cos+0x6a>
 800b05e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b062:	ed9d 0b00 	vldr	d0, [sp]
 800b066:	2001      	movs	r0, #1
 800b068:	f000 f92a 	bl	800b2c0 <__kernel_sin>
 800b06c:	e7e0      	b.n	800b030 <cos+0x58>
 800b06e:	bf00      	nop
	...
 800b078:	3fe921fb 	.word	0x3fe921fb
 800b07c:	7fefffff 	.word	0x7fefffff

0800b080 <sin>:
 800b080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b082:	ec53 2b10 	vmov	r2, r3, d0
 800b086:	4828      	ldr	r0, [pc, #160]	; (800b128 <sin+0xa8>)
 800b088:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b08c:	4281      	cmp	r1, r0
 800b08e:	dc07      	bgt.n	800b0a0 <sin+0x20>
 800b090:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b120 <sin+0xa0>
 800b094:	2000      	movs	r0, #0
 800b096:	b005      	add	sp, #20
 800b098:	f85d eb04 	ldr.w	lr, [sp], #4
 800b09c:	f000 b910 	b.w	800b2c0 <__kernel_sin>
 800b0a0:	4822      	ldr	r0, [pc, #136]	; (800b12c <sin+0xac>)
 800b0a2:	4281      	cmp	r1, r0
 800b0a4:	dd09      	ble.n	800b0ba <sin+0x3a>
 800b0a6:	ee10 0a10 	vmov	r0, s0
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	f7f5 f904 	bl	80002b8 <__aeabi_dsub>
 800b0b0:	ec41 0b10 	vmov	d0, r0, r1
 800b0b4:	b005      	add	sp, #20
 800b0b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0ba:	4668      	mov	r0, sp
 800b0bc:	f000 fa88 	bl	800b5d0 <__ieee754_rem_pio2>
 800b0c0:	f000 0003 	and.w	r0, r0, #3
 800b0c4:	2801      	cmp	r0, #1
 800b0c6:	d00c      	beq.n	800b0e2 <sin+0x62>
 800b0c8:	2802      	cmp	r0, #2
 800b0ca:	d011      	beq.n	800b0f0 <sin+0x70>
 800b0cc:	b9f0      	cbnz	r0, 800b10c <sin+0x8c>
 800b0ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0d2:	ed9d 0b00 	vldr	d0, [sp]
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	f000 f8f2 	bl	800b2c0 <__kernel_sin>
 800b0dc:	ec51 0b10 	vmov	r0, r1, d0
 800b0e0:	e7e6      	b.n	800b0b0 <sin+0x30>
 800b0e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0e6:	ed9d 0b00 	vldr	d0, [sp]
 800b0ea:	f000 f821 	bl	800b130 <__kernel_cos>
 800b0ee:	e7f5      	b.n	800b0dc <sin+0x5c>
 800b0f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0f4:	ed9d 0b00 	vldr	d0, [sp]
 800b0f8:	2001      	movs	r0, #1
 800b0fa:	f000 f8e1 	bl	800b2c0 <__kernel_sin>
 800b0fe:	ec53 2b10 	vmov	r2, r3, d0
 800b102:	ee10 0a10 	vmov	r0, s0
 800b106:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b10a:	e7d1      	b.n	800b0b0 <sin+0x30>
 800b10c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b110:	ed9d 0b00 	vldr	d0, [sp]
 800b114:	f000 f80c 	bl	800b130 <__kernel_cos>
 800b118:	e7f1      	b.n	800b0fe <sin+0x7e>
 800b11a:	bf00      	nop
 800b11c:	f3af 8000 	nop.w
	...
 800b128:	3fe921fb 	.word	0x3fe921fb
 800b12c:	7fefffff 	.word	0x7fefffff

0800b130 <__kernel_cos>:
 800b130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	ec57 6b10 	vmov	r6, r7, d0
 800b138:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b13c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b140:	ed8d 1b00 	vstr	d1, [sp]
 800b144:	da07      	bge.n	800b156 <__kernel_cos+0x26>
 800b146:	ee10 0a10 	vmov	r0, s0
 800b14a:	4639      	mov	r1, r7
 800b14c:	f7f5 fd1c 	bl	8000b88 <__aeabi_d2iz>
 800b150:	2800      	cmp	r0, #0
 800b152:	f000 8088 	beq.w	800b266 <__kernel_cos+0x136>
 800b156:	4632      	mov	r2, r6
 800b158:	463b      	mov	r3, r7
 800b15a:	4630      	mov	r0, r6
 800b15c:	4639      	mov	r1, r7
 800b15e:	f7f5 fa63 	bl	8000628 <__aeabi_dmul>
 800b162:	4b51      	ldr	r3, [pc, #324]	; (800b2a8 <__kernel_cos+0x178>)
 800b164:	2200      	movs	r2, #0
 800b166:	4604      	mov	r4, r0
 800b168:	460d      	mov	r5, r1
 800b16a:	f7f5 fa5d 	bl	8000628 <__aeabi_dmul>
 800b16e:	a340      	add	r3, pc, #256	; (adr r3, 800b270 <__kernel_cos+0x140>)
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	4682      	mov	sl, r0
 800b176:	468b      	mov	fp, r1
 800b178:	4620      	mov	r0, r4
 800b17a:	4629      	mov	r1, r5
 800b17c:	f7f5 fa54 	bl	8000628 <__aeabi_dmul>
 800b180:	a33d      	add	r3, pc, #244	; (adr r3, 800b278 <__kernel_cos+0x148>)
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	f7f5 f899 	bl	80002bc <__adddf3>
 800b18a:	4622      	mov	r2, r4
 800b18c:	462b      	mov	r3, r5
 800b18e:	f7f5 fa4b 	bl	8000628 <__aeabi_dmul>
 800b192:	a33b      	add	r3, pc, #236	; (adr r3, 800b280 <__kernel_cos+0x150>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	f7f5 f88e 	bl	80002b8 <__aeabi_dsub>
 800b19c:	4622      	mov	r2, r4
 800b19e:	462b      	mov	r3, r5
 800b1a0:	f7f5 fa42 	bl	8000628 <__aeabi_dmul>
 800b1a4:	a338      	add	r3, pc, #224	; (adr r3, 800b288 <__kernel_cos+0x158>)
 800b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1aa:	f7f5 f887 	bl	80002bc <__adddf3>
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	462b      	mov	r3, r5
 800b1b2:	f7f5 fa39 	bl	8000628 <__aeabi_dmul>
 800b1b6:	a336      	add	r3, pc, #216	; (adr r3, 800b290 <__kernel_cos+0x160>)
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	f7f5 f87c 	bl	80002b8 <__aeabi_dsub>
 800b1c0:	4622      	mov	r2, r4
 800b1c2:	462b      	mov	r3, r5
 800b1c4:	f7f5 fa30 	bl	8000628 <__aeabi_dmul>
 800b1c8:	a333      	add	r3, pc, #204	; (adr r3, 800b298 <__kernel_cos+0x168>)
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	f7f5 f875 	bl	80002bc <__adddf3>
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	462b      	mov	r3, r5
 800b1d6:	f7f5 fa27 	bl	8000628 <__aeabi_dmul>
 800b1da:	4622      	mov	r2, r4
 800b1dc:	462b      	mov	r3, r5
 800b1de:	f7f5 fa23 	bl	8000628 <__aeabi_dmul>
 800b1e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	4639      	mov	r1, r7
 800b1ee:	f7f5 fa1b 	bl	8000628 <__aeabi_dmul>
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f7f5 f85d 	bl	80002b8 <__aeabi_dsub>
 800b1fe:	4b2b      	ldr	r3, [pc, #172]	; (800b2ac <__kernel_cos+0x17c>)
 800b200:	4598      	cmp	r8, r3
 800b202:	4606      	mov	r6, r0
 800b204:	460f      	mov	r7, r1
 800b206:	dc10      	bgt.n	800b22a <__kernel_cos+0xfa>
 800b208:	4602      	mov	r2, r0
 800b20a:	460b      	mov	r3, r1
 800b20c:	4650      	mov	r0, sl
 800b20e:	4659      	mov	r1, fp
 800b210:	f7f5 f852 	bl	80002b8 <__aeabi_dsub>
 800b214:	460b      	mov	r3, r1
 800b216:	4926      	ldr	r1, [pc, #152]	; (800b2b0 <__kernel_cos+0x180>)
 800b218:	4602      	mov	r2, r0
 800b21a:	2000      	movs	r0, #0
 800b21c:	f7f5 f84c 	bl	80002b8 <__aeabi_dsub>
 800b220:	ec41 0b10 	vmov	d0, r0, r1
 800b224:	b003      	add	sp, #12
 800b226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22a:	4b22      	ldr	r3, [pc, #136]	; (800b2b4 <__kernel_cos+0x184>)
 800b22c:	4920      	ldr	r1, [pc, #128]	; (800b2b0 <__kernel_cos+0x180>)
 800b22e:	4598      	cmp	r8, r3
 800b230:	bfcc      	ite	gt
 800b232:	4d21      	ldrgt	r5, [pc, #132]	; (800b2b8 <__kernel_cos+0x188>)
 800b234:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b238:	2400      	movs	r4, #0
 800b23a:	4622      	mov	r2, r4
 800b23c:	462b      	mov	r3, r5
 800b23e:	2000      	movs	r0, #0
 800b240:	f7f5 f83a 	bl	80002b8 <__aeabi_dsub>
 800b244:	4622      	mov	r2, r4
 800b246:	4680      	mov	r8, r0
 800b248:	4689      	mov	r9, r1
 800b24a:	462b      	mov	r3, r5
 800b24c:	4650      	mov	r0, sl
 800b24e:	4659      	mov	r1, fp
 800b250:	f7f5 f832 	bl	80002b8 <__aeabi_dsub>
 800b254:	4632      	mov	r2, r6
 800b256:	463b      	mov	r3, r7
 800b258:	f7f5 f82e 	bl	80002b8 <__aeabi_dsub>
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	4640      	mov	r0, r8
 800b262:	4649      	mov	r1, r9
 800b264:	e7da      	b.n	800b21c <__kernel_cos+0xec>
 800b266:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b2a0 <__kernel_cos+0x170>
 800b26a:	e7db      	b.n	800b224 <__kernel_cos+0xf4>
 800b26c:	f3af 8000 	nop.w
 800b270:	be8838d4 	.word	0xbe8838d4
 800b274:	bda8fae9 	.word	0xbda8fae9
 800b278:	bdb4b1c4 	.word	0xbdb4b1c4
 800b27c:	3e21ee9e 	.word	0x3e21ee9e
 800b280:	809c52ad 	.word	0x809c52ad
 800b284:	3e927e4f 	.word	0x3e927e4f
 800b288:	19cb1590 	.word	0x19cb1590
 800b28c:	3efa01a0 	.word	0x3efa01a0
 800b290:	16c15177 	.word	0x16c15177
 800b294:	3f56c16c 	.word	0x3f56c16c
 800b298:	5555554c 	.word	0x5555554c
 800b29c:	3fa55555 	.word	0x3fa55555
 800b2a0:	00000000 	.word	0x00000000
 800b2a4:	3ff00000 	.word	0x3ff00000
 800b2a8:	3fe00000 	.word	0x3fe00000
 800b2ac:	3fd33332 	.word	0x3fd33332
 800b2b0:	3ff00000 	.word	0x3ff00000
 800b2b4:	3fe90000 	.word	0x3fe90000
 800b2b8:	3fd20000 	.word	0x3fd20000
 800b2bc:	00000000 	.word	0x00000000

0800b2c0 <__kernel_sin>:
 800b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c4:	ed2d 8b04 	vpush	{d8-d9}
 800b2c8:	eeb0 8a41 	vmov.f32	s16, s2
 800b2cc:	eef0 8a61 	vmov.f32	s17, s3
 800b2d0:	ec55 4b10 	vmov	r4, r5, d0
 800b2d4:	b083      	sub	sp, #12
 800b2d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b2da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b2de:	9001      	str	r0, [sp, #4]
 800b2e0:	da06      	bge.n	800b2f0 <__kernel_sin+0x30>
 800b2e2:	ee10 0a10 	vmov	r0, s0
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7f5 fc4e 	bl	8000b88 <__aeabi_d2iz>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d051      	beq.n	800b394 <__kernel_sin+0xd4>
 800b2f0:	4622      	mov	r2, r4
 800b2f2:	462b      	mov	r3, r5
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	f7f5 f996 	bl	8000628 <__aeabi_dmul>
 800b2fc:	4682      	mov	sl, r0
 800b2fe:	468b      	mov	fp, r1
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4620      	mov	r0, r4
 800b306:	4629      	mov	r1, r5
 800b308:	f7f5 f98e 	bl	8000628 <__aeabi_dmul>
 800b30c:	a341      	add	r3, pc, #260	; (adr r3, 800b414 <__kernel_sin+0x154>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	4680      	mov	r8, r0
 800b314:	4689      	mov	r9, r1
 800b316:	4650      	mov	r0, sl
 800b318:	4659      	mov	r1, fp
 800b31a:	f7f5 f985 	bl	8000628 <__aeabi_dmul>
 800b31e:	a33f      	add	r3, pc, #252	; (adr r3, 800b41c <__kernel_sin+0x15c>)
 800b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b324:	f7f4 ffc8 	bl	80002b8 <__aeabi_dsub>
 800b328:	4652      	mov	r2, sl
 800b32a:	465b      	mov	r3, fp
 800b32c:	f7f5 f97c 	bl	8000628 <__aeabi_dmul>
 800b330:	a33c      	add	r3, pc, #240	; (adr r3, 800b424 <__kernel_sin+0x164>)
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f7f4 ffc1 	bl	80002bc <__adddf3>
 800b33a:	4652      	mov	r2, sl
 800b33c:	465b      	mov	r3, fp
 800b33e:	f7f5 f973 	bl	8000628 <__aeabi_dmul>
 800b342:	a33a      	add	r3, pc, #232	; (adr r3, 800b42c <__kernel_sin+0x16c>)
 800b344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b348:	f7f4 ffb6 	bl	80002b8 <__aeabi_dsub>
 800b34c:	4652      	mov	r2, sl
 800b34e:	465b      	mov	r3, fp
 800b350:	f7f5 f96a 	bl	8000628 <__aeabi_dmul>
 800b354:	a337      	add	r3, pc, #220	; (adr r3, 800b434 <__kernel_sin+0x174>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	f7f4 ffaf 	bl	80002bc <__adddf3>
 800b35e:	9b01      	ldr	r3, [sp, #4]
 800b360:	4606      	mov	r6, r0
 800b362:	460f      	mov	r7, r1
 800b364:	b9eb      	cbnz	r3, 800b3a2 <__kernel_sin+0xe2>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	4650      	mov	r0, sl
 800b36c:	4659      	mov	r1, fp
 800b36e:	f7f5 f95b 	bl	8000628 <__aeabi_dmul>
 800b372:	a325      	add	r3, pc, #148	; (adr r3, 800b408 <__kernel_sin+0x148>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	f7f4 ff9e 	bl	80002b8 <__aeabi_dsub>
 800b37c:	4642      	mov	r2, r8
 800b37e:	464b      	mov	r3, r9
 800b380:	f7f5 f952 	bl	8000628 <__aeabi_dmul>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4620      	mov	r0, r4
 800b38a:	4629      	mov	r1, r5
 800b38c:	f7f4 ff96 	bl	80002bc <__adddf3>
 800b390:	4604      	mov	r4, r0
 800b392:	460d      	mov	r5, r1
 800b394:	ec45 4b10 	vmov	d0, r4, r5
 800b398:	b003      	add	sp, #12
 800b39a:	ecbd 8b04 	vpop	{d8-d9}
 800b39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a2:	4b1b      	ldr	r3, [pc, #108]	; (800b410 <__kernel_sin+0x150>)
 800b3a4:	ec51 0b18 	vmov	r0, r1, d8
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f7f5 f93d 	bl	8000628 <__aeabi_dmul>
 800b3ae:	4632      	mov	r2, r6
 800b3b0:	ec41 0b19 	vmov	d9, r0, r1
 800b3b4:	463b      	mov	r3, r7
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	f7f5 f935 	bl	8000628 <__aeabi_dmul>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	ec51 0b19 	vmov	r0, r1, d9
 800b3c6:	f7f4 ff77 	bl	80002b8 <__aeabi_dsub>
 800b3ca:	4652      	mov	r2, sl
 800b3cc:	465b      	mov	r3, fp
 800b3ce:	f7f5 f92b 	bl	8000628 <__aeabi_dmul>
 800b3d2:	ec53 2b18 	vmov	r2, r3, d8
 800b3d6:	f7f4 ff6f 	bl	80002b8 <__aeabi_dsub>
 800b3da:	a30b      	add	r3, pc, #44	; (adr r3, 800b408 <__kernel_sin+0x148>)
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	460f      	mov	r7, r1
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	4649      	mov	r1, r9
 800b3e8:	f7f5 f91e 	bl	8000628 <__aeabi_dmul>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	f7f4 ff62 	bl	80002bc <__adddf3>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f4 ff5a 	bl	80002b8 <__aeabi_dsub>
 800b404:	e7c4      	b.n	800b390 <__kernel_sin+0xd0>
 800b406:	bf00      	nop
 800b408:	55555549 	.word	0x55555549
 800b40c:	3fc55555 	.word	0x3fc55555
 800b410:	3fe00000 	.word	0x3fe00000
 800b414:	5acfd57c 	.word	0x5acfd57c
 800b418:	3de5d93a 	.word	0x3de5d93a
 800b41c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b420:	3e5ae5e6 	.word	0x3e5ae5e6
 800b424:	57b1fe7d 	.word	0x57b1fe7d
 800b428:	3ec71de3 	.word	0x3ec71de3
 800b42c:	19c161d5 	.word	0x19c161d5
 800b430:	3f2a01a0 	.word	0x3f2a01a0
 800b434:	1110f8a6 	.word	0x1110f8a6
 800b438:	3f811111 	.word	0x3f811111
 800b43c:	00000000 	.word	0x00000000

0800b440 <__ieee754_atan2>:
 800b440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b444:	ec57 6b11 	vmov	r6, r7, d1
 800b448:	4273      	negs	r3, r6
 800b44a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b5c8 <__ieee754_atan2+0x188>
 800b44e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b452:	4333      	orrs	r3, r6
 800b454:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b458:	4543      	cmp	r3, r8
 800b45a:	ec51 0b10 	vmov	r0, r1, d0
 800b45e:	ee11 5a10 	vmov	r5, s2
 800b462:	d80a      	bhi.n	800b47a <__ieee754_atan2+0x3a>
 800b464:	4244      	negs	r4, r0
 800b466:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b46a:	4304      	orrs	r4, r0
 800b46c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b470:	4544      	cmp	r4, r8
 800b472:	ee10 9a10 	vmov	r9, s0
 800b476:	468e      	mov	lr, r1
 800b478:	d907      	bls.n	800b48a <__ieee754_atan2+0x4a>
 800b47a:	4632      	mov	r2, r6
 800b47c:	463b      	mov	r3, r7
 800b47e:	f7f4 ff1d 	bl	80002bc <__adddf3>
 800b482:	ec41 0b10 	vmov	d0, r0, r1
 800b486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b48a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b48e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b492:	4334      	orrs	r4, r6
 800b494:	d103      	bne.n	800b49e <__ieee754_atan2+0x5e>
 800b496:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b49a:	f000 baa1 	b.w	800b9e0 <atan>
 800b49e:	17bc      	asrs	r4, r7, #30
 800b4a0:	f004 0402 	and.w	r4, r4, #2
 800b4a4:	ea53 0909 	orrs.w	r9, r3, r9
 800b4a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b4ac:	d107      	bne.n	800b4be <__ieee754_atan2+0x7e>
 800b4ae:	2c02      	cmp	r4, #2
 800b4b0:	d05f      	beq.n	800b572 <__ieee754_atan2+0x132>
 800b4b2:	2c03      	cmp	r4, #3
 800b4b4:	d1e5      	bne.n	800b482 <__ieee754_atan2+0x42>
 800b4b6:	a140      	add	r1, pc, #256	; (adr r1, 800b5b8 <__ieee754_atan2+0x178>)
 800b4b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4bc:	e7e1      	b.n	800b482 <__ieee754_atan2+0x42>
 800b4be:	4315      	orrs	r5, r2
 800b4c0:	d106      	bne.n	800b4d0 <__ieee754_atan2+0x90>
 800b4c2:	f1be 0f00 	cmp.w	lr, #0
 800b4c6:	da5f      	bge.n	800b588 <__ieee754_atan2+0x148>
 800b4c8:	a13d      	add	r1, pc, #244	; (adr r1, 800b5c0 <__ieee754_atan2+0x180>)
 800b4ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4ce:	e7d8      	b.n	800b482 <__ieee754_atan2+0x42>
 800b4d0:	4542      	cmp	r2, r8
 800b4d2:	d10f      	bne.n	800b4f4 <__ieee754_atan2+0xb4>
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b4da:	d107      	bne.n	800b4ec <__ieee754_atan2+0xac>
 800b4dc:	2c02      	cmp	r4, #2
 800b4de:	d84c      	bhi.n	800b57a <__ieee754_atan2+0x13a>
 800b4e0:	4b33      	ldr	r3, [pc, #204]	; (800b5b0 <__ieee754_atan2+0x170>)
 800b4e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4ea:	e7ca      	b.n	800b482 <__ieee754_atan2+0x42>
 800b4ec:	2c02      	cmp	r4, #2
 800b4ee:	d848      	bhi.n	800b582 <__ieee754_atan2+0x142>
 800b4f0:	4b30      	ldr	r3, [pc, #192]	; (800b5b4 <__ieee754_atan2+0x174>)
 800b4f2:	e7f6      	b.n	800b4e2 <__ieee754_atan2+0xa2>
 800b4f4:	4543      	cmp	r3, r8
 800b4f6:	d0e4      	beq.n	800b4c2 <__ieee754_atan2+0x82>
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b4fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b502:	da1e      	bge.n	800b542 <__ieee754_atan2+0x102>
 800b504:	2f00      	cmp	r7, #0
 800b506:	da01      	bge.n	800b50c <__ieee754_atan2+0xcc>
 800b508:	323c      	adds	r2, #60	; 0x3c
 800b50a:	db1e      	blt.n	800b54a <__ieee754_atan2+0x10a>
 800b50c:	4632      	mov	r2, r6
 800b50e:	463b      	mov	r3, r7
 800b510:	f7f5 f9b4 	bl	800087c <__aeabi_ddiv>
 800b514:	ec41 0b10 	vmov	d0, r0, r1
 800b518:	f000 fc02 	bl	800bd20 <fabs>
 800b51c:	f000 fa60 	bl	800b9e0 <atan>
 800b520:	ec51 0b10 	vmov	r0, r1, d0
 800b524:	2c01      	cmp	r4, #1
 800b526:	d013      	beq.n	800b550 <__ieee754_atan2+0x110>
 800b528:	2c02      	cmp	r4, #2
 800b52a:	d015      	beq.n	800b558 <__ieee754_atan2+0x118>
 800b52c:	2c00      	cmp	r4, #0
 800b52e:	d0a8      	beq.n	800b482 <__ieee754_atan2+0x42>
 800b530:	a317      	add	r3, pc, #92	; (adr r3, 800b590 <__ieee754_atan2+0x150>)
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	f7f4 febf 	bl	80002b8 <__aeabi_dsub>
 800b53a:	a317      	add	r3, pc, #92	; (adr r3, 800b598 <__ieee754_atan2+0x158>)
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	e014      	b.n	800b56c <__ieee754_atan2+0x12c>
 800b542:	a117      	add	r1, pc, #92	; (adr r1, 800b5a0 <__ieee754_atan2+0x160>)
 800b544:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b548:	e7ec      	b.n	800b524 <__ieee754_atan2+0xe4>
 800b54a:	2000      	movs	r0, #0
 800b54c:	2100      	movs	r1, #0
 800b54e:	e7e9      	b.n	800b524 <__ieee754_atan2+0xe4>
 800b550:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b554:	4619      	mov	r1, r3
 800b556:	e794      	b.n	800b482 <__ieee754_atan2+0x42>
 800b558:	a30d      	add	r3, pc, #52	; (adr r3, 800b590 <__ieee754_atan2+0x150>)
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	f7f4 feab 	bl	80002b8 <__aeabi_dsub>
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	a10c      	add	r1, pc, #48	; (adr r1, 800b598 <__ieee754_atan2+0x158>)
 800b568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b56c:	f7f4 fea4 	bl	80002b8 <__aeabi_dsub>
 800b570:	e787      	b.n	800b482 <__ieee754_atan2+0x42>
 800b572:	a109      	add	r1, pc, #36	; (adr r1, 800b598 <__ieee754_atan2+0x158>)
 800b574:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b578:	e783      	b.n	800b482 <__ieee754_atan2+0x42>
 800b57a:	a10b      	add	r1, pc, #44	; (adr r1, 800b5a8 <__ieee754_atan2+0x168>)
 800b57c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b580:	e77f      	b.n	800b482 <__ieee754_atan2+0x42>
 800b582:	2000      	movs	r0, #0
 800b584:	2100      	movs	r1, #0
 800b586:	e77c      	b.n	800b482 <__ieee754_atan2+0x42>
 800b588:	a105      	add	r1, pc, #20	; (adr r1, 800b5a0 <__ieee754_atan2+0x160>)
 800b58a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b58e:	e778      	b.n	800b482 <__ieee754_atan2+0x42>
 800b590:	33145c07 	.word	0x33145c07
 800b594:	3ca1a626 	.word	0x3ca1a626
 800b598:	54442d18 	.word	0x54442d18
 800b59c:	400921fb 	.word	0x400921fb
 800b5a0:	54442d18 	.word	0x54442d18
 800b5a4:	3ff921fb 	.word	0x3ff921fb
 800b5a8:	54442d18 	.word	0x54442d18
 800b5ac:	3fe921fb 	.word	0x3fe921fb
 800b5b0:	0800cad0 	.word	0x0800cad0
 800b5b4:	0800cae8 	.word	0x0800cae8
 800b5b8:	54442d18 	.word	0x54442d18
 800b5bc:	c00921fb 	.word	0xc00921fb
 800b5c0:	54442d18 	.word	0x54442d18
 800b5c4:	bff921fb 	.word	0xbff921fb
 800b5c8:	7ff00000 	.word	0x7ff00000
 800b5cc:	00000000 	.word	0x00000000

0800b5d0 <__ieee754_rem_pio2>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	ed2d 8b02 	vpush	{d8}
 800b5d8:	ec55 4b10 	vmov	r4, r5, d0
 800b5dc:	4bca      	ldr	r3, [pc, #808]	; (800b908 <__ieee754_rem_pio2+0x338>)
 800b5de:	b08b      	sub	sp, #44	; 0x2c
 800b5e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b5e4:	4598      	cmp	r8, r3
 800b5e6:	4682      	mov	sl, r0
 800b5e8:	9502      	str	r5, [sp, #8]
 800b5ea:	dc08      	bgt.n	800b5fe <__ieee754_rem_pio2+0x2e>
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	ed80 0b00 	vstr	d0, [r0]
 800b5f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b5f8:	f04f 0b00 	mov.w	fp, #0
 800b5fc:	e028      	b.n	800b650 <__ieee754_rem_pio2+0x80>
 800b5fe:	4bc3      	ldr	r3, [pc, #780]	; (800b90c <__ieee754_rem_pio2+0x33c>)
 800b600:	4598      	cmp	r8, r3
 800b602:	dc78      	bgt.n	800b6f6 <__ieee754_rem_pio2+0x126>
 800b604:	9b02      	ldr	r3, [sp, #8]
 800b606:	4ec2      	ldr	r6, [pc, #776]	; (800b910 <__ieee754_rem_pio2+0x340>)
 800b608:	2b00      	cmp	r3, #0
 800b60a:	ee10 0a10 	vmov	r0, s0
 800b60e:	a3b0      	add	r3, pc, #704	; (adr r3, 800b8d0 <__ieee754_rem_pio2+0x300>)
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	4629      	mov	r1, r5
 800b616:	dd39      	ble.n	800b68c <__ieee754_rem_pio2+0xbc>
 800b618:	f7f4 fe4e 	bl	80002b8 <__aeabi_dsub>
 800b61c:	45b0      	cmp	r8, r6
 800b61e:	4604      	mov	r4, r0
 800b620:	460d      	mov	r5, r1
 800b622:	d01b      	beq.n	800b65c <__ieee754_rem_pio2+0x8c>
 800b624:	a3ac      	add	r3, pc, #688	; (adr r3, 800b8d8 <__ieee754_rem_pio2+0x308>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	f7f4 fe45 	bl	80002b8 <__aeabi_dsub>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	e9ca 2300 	strd	r2, r3, [sl]
 800b636:	4620      	mov	r0, r4
 800b638:	4629      	mov	r1, r5
 800b63a:	f7f4 fe3d 	bl	80002b8 <__aeabi_dsub>
 800b63e:	a3a6      	add	r3, pc, #664	; (adr r3, 800b8d8 <__ieee754_rem_pio2+0x308>)
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	f7f4 fe38 	bl	80002b8 <__aeabi_dsub>
 800b648:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b64c:	f04f 0b01 	mov.w	fp, #1
 800b650:	4658      	mov	r0, fp
 800b652:	b00b      	add	sp, #44	; 0x2c
 800b654:	ecbd 8b02 	vpop	{d8}
 800b658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65c:	a3a0      	add	r3, pc, #640	; (adr r3, 800b8e0 <__ieee754_rem_pio2+0x310>)
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f7f4 fe29 	bl	80002b8 <__aeabi_dsub>
 800b666:	a3a0      	add	r3, pc, #640	; (adr r3, 800b8e8 <__ieee754_rem_pio2+0x318>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	4604      	mov	r4, r0
 800b66e:	460d      	mov	r5, r1
 800b670:	f7f4 fe22 	bl	80002b8 <__aeabi_dsub>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	e9ca 2300 	strd	r2, r3, [sl]
 800b67c:	4620      	mov	r0, r4
 800b67e:	4629      	mov	r1, r5
 800b680:	f7f4 fe1a 	bl	80002b8 <__aeabi_dsub>
 800b684:	a398      	add	r3, pc, #608	; (adr r3, 800b8e8 <__ieee754_rem_pio2+0x318>)
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	e7db      	b.n	800b644 <__ieee754_rem_pio2+0x74>
 800b68c:	f7f4 fe16 	bl	80002bc <__adddf3>
 800b690:	45b0      	cmp	r8, r6
 800b692:	4604      	mov	r4, r0
 800b694:	460d      	mov	r5, r1
 800b696:	d016      	beq.n	800b6c6 <__ieee754_rem_pio2+0xf6>
 800b698:	a38f      	add	r3, pc, #572	; (adr r3, 800b8d8 <__ieee754_rem_pio2+0x308>)
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	f7f4 fe0d 	bl	80002bc <__adddf3>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	e9ca 2300 	strd	r2, r3, [sl]
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	f7f4 fe03 	bl	80002b8 <__aeabi_dsub>
 800b6b2:	a389      	add	r3, pc, #548	; (adr r3, 800b8d8 <__ieee754_rem_pio2+0x308>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7f4 fe00 	bl	80002bc <__adddf3>
 800b6bc:	f04f 3bff 	mov.w	fp, #4294967295
 800b6c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6c4:	e7c4      	b.n	800b650 <__ieee754_rem_pio2+0x80>
 800b6c6:	a386      	add	r3, pc, #536	; (adr r3, 800b8e0 <__ieee754_rem_pio2+0x310>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f7f4 fdf6 	bl	80002bc <__adddf3>
 800b6d0:	a385      	add	r3, pc, #532	; (adr r3, 800b8e8 <__ieee754_rem_pio2+0x318>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	460d      	mov	r5, r1
 800b6da:	f7f4 fdef 	bl	80002bc <__adddf3>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	e9ca 2300 	strd	r2, r3, [sl]
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	f7f4 fde5 	bl	80002b8 <__aeabi_dsub>
 800b6ee:	a37e      	add	r3, pc, #504	; (adr r3, 800b8e8 <__ieee754_rem_pio2+0x318>)
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	e7e0      	b.n	800b6b8 <__ieee754_rem_pio2+0xe8>
 800b6f6:	4b87      	ldr	r3, [pc, #540]	; (800b914 <__ieee754_rem_pio2+0x344>)
 800b6f8:	4598      	cmp	r8, r3
 800b6fa:	f300 80d8 	bgt.w	800b8ae <__ieee754_rem_pio2+0x2de>
 800b6fe:	f000 fb0f 	bl	800bd20 <fabs>
 800b702:	ec55 4b10 	vmov	r4, r5, d0
 800b706:	ee10 0a10 	vmov	r0, s0
 800b70a:	a379      	add	r3, pc, #484	; (adr r3, 800b8f0 <__ieee754_rem_pio2+0x320>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	4629      	mov	r1, r5
 800b712:	f7f4 ff89 	bl	8000628 <__aeabi_dmul>
 800b716:	4b80      	ldr	r3, [pc, #512]	; (800b918 <__ieee754_rem_pio2+0x348>)
 800b718:	2200      	movs	r2, #0
 800b71a:	f7f4 fdcf 	bl	80002bc <__adddf3>
 800b71e:	f7f5 fa33 	bl	8000b88 <__aeabi_d2iz>
 800b722:	4683      	mov	fp, r0
 800b724:	f7f4 ff16 	bl	8000554 <__aeabi_i2d>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	ec43 2b18 	vmov	d8, r2, r3
 800b730:	a367      	add	r3, pc, #412	; (adr r3, 800b8d0 <__ieee754_rem_pio2+0x300>)
 800b732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b736:	f7f4 ff77 	bl	8000628 <__aeabi_dmul>
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	4620      	mov	r0, r4
 800b740:	4629      	mov	r1, r5
 800b742:	f7f4 fdb9 	bl	80002b8 <__aeabi_dsub>
 800b746:	a364      	add	r3, pc, #400	; (adr r3, 800b8d8 <__ieee754_rem_pio2+0x308>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	4606      	mov	r6, r0
 800b74e:	460f      	mov	r7, r1
 800b750:	ec51 0b18 	vmov	r0, r1, d8
 800b754:	f7f4 ff68 	bl	8000628 <__aeabi_dmul>
 800b758:	f1bb 0f1f 	cmp.w	fp, #31
 800b75c:	4604      	mov	r4, r0
 800b75e:	460d      	mov	r5, r1
 800b760:	dc0d      	bgt.n	800b77e <__ieee754_rem_pio2+0x1ae>
 800b762:	4b6e      	ldr	r3, [pc, #440]	; (800b91c <__ieee754_rem_pio2+0x34c>)
 800b764:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76c:	4543      	cmp	r3, r8
 800b76e:	d006      	beq.n	800b77e <__ieee754_rem_pio2+0x1ae>
 800b770:	4622      	mov	r2, r4
 800b772:	462b      	mov	r3, r5
 800b774:	4630      	mov	r0, r6
 800b776:	4639      	mov	r1, r7
 800b778:	f7f4 fd9e 	bl	80002b8 <__aeabi_dsub>
 800b77c:	e00e      	b.n	800b79c <__ieee754_rem_pio2+0x1cc>
 800b77e:	462b      	mov	r3, r5
 800b780:	4622      	mov	r2, r4
 800b782:	4630      	mov	r0, r6
 800b784:	4639      	mov	r1, r7
 800b786:	f7f4 fd97 	bl	80002b8 <__aeabi_dsub>
 800b78a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b78e:	9303      	str	r3, [sp, #12]
 800b790:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b794:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b798:	2b10      	cmp	r3, #16
 800b79a:	dc02      	bgt.n	800b7a2 <__ieee754_rem_pio2+0x1d2>
 800b79c:	e9ca 0100 	strd	r0, r1, [sl]
 800b7a0:	e039      	b.n	800b816 <__ieee754_rem_pio2+0x246>
 800b7a2:	a34f      	add	r3, pc, #316	; (adr r3, 800b8e0 <__ieee754_rem_pio2+0x310>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	ec51 0b18 	vmov	r0, r1, d8
 800b7ac:	f7f4 ff3c 	bl	8000628 <__aeabi_dmul>
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	460d      	mov	r5, r1
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	f7f4 fd7c 	bl	80002b8 <__aeabi_dsub>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	4689      	mov	r9, r1
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	f7f4 fd74 	bl	80002b8 <__aeabi_dsub>
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	462b      	mov	r3, r5
 800b7d4:	f7f4 fd70 	bl	80002b8 <__aeabi_dsub>
 800b7d8:	a343      	add	r3, pc, #268	; (adr r3, 800b8e8 <__ieee754_rem_pio2+0x318>)
 800b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7de:	4604      	mov	r4, r0
 800b7e0:	460d      	mov	r5, r1
 800b7e2:	ec51 0b18 	vmov	r0, r1, d8
 800b7e6:	f7f4 ff1f 	bl	8000628 <__aeabi_dmul>
 800b7ea:	4622      	mov	r2, r4
 800b7ec:	462b      	mov	r3, r5
 800b7ee:	f7f4 fd63 	bl	80002b8 <__aeabi_dsub>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f4 fd5b 	bl	80002b8 <__aeabi_dsub>
 800b802:	9a03      	ldr	r2, [sp, #12]
 800b804:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	2b31      	cmp	r3, #49	; 0x31
 800b80c:	dc24      	bgt.n	800b858 <__ieee754_rem_pio2+0x288>
 800b80e:	e9ca 0100 	strd	r0, r1, [sl]
 800b812:	4646      	mov	r6, r8
 800b814:	464f      	mov	r7, r9
 800b816:	e9da 8900 	ldrd	r8, r9, [sl]
 800b81a:	4630      	mov	r0, r6
 800b81c:	4642      	mov	r2, r8
 800b81e:	464b      	mov	r3, r9
 800b820:	4639      	mov	r1, r7
 800b822:	f7f4 fd49 	bl	80002b8 <__aeabi_dsub>
 800b826:	462b      	mov	r3, r5
 800b828:	4622      	mov	r2, r4
 800b82a:	f7f4 fd45 	bl	80002b8 <__aeabi_dsub>
 800b82e:	9b02      	ldr	r3, [sp, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b836:	f6bf af0b 	bge.w	800b650 <__ieee754_rem_pio2+0x80>
 800b83a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b83e:	f8ca 3004 	str.w	r3, [sl, #4]
 800b842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b846:	f8ca 8000 	str.w	r8, [sl]
 800b84a:	f8ca 0008 	str.w	r0, [sl, #8]
 800b84e:	f8ca 300c 	str.w	r3, [sl, #12]
 800b852:	f1cb 0b00 	rsb	fp, fp, #0
 800b856:	e6fb      	b.n	800b650 <__ieee754_rem_pio2+0x80>
 800b858:	a327      	add	r3, pc, #156	; (adr r3, 800b8f8 <__ieee754_rem_pio2+0x328>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	ec51 0b18 	vmov	r0, r1, d8
 800b862:	f7f4 fee1 	bl	8000628 <__aeabi_dmul>
 800b866:	4604      	mov	r4, r0
 800b868:	460d      	mov	r5, r1
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4640      	mov	r0, r8
 800b870:	4649      	mov	r1, r9
 800b872:	f7f4 fd21 	bl	80002b8 <__aeabi_dsub>
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	4606      	mov	r6, r0
 800b87c:	460f      	mov	r7, r1
 800b87e:	4640      	mov	r0, r8
 800b880:	4649      	mov	r1, r9
 800b882:	f7f4 fd19 	bl	80002b8 <__aeabi_dsub>
 800b886:	4622      	mov	r2, r4
 800b888:	462b      	mov	r3, r5
 800b88a:	f7f4 fd15 	bl	80002b8 <__aeabi_dsub>
 800b88e:	a31c      	add	r3, pc, #112	; (adr r3, 800b900 <__ieee754_rem_pio2+0x330>)
 800b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b894:	4604      	mov	r4, r0
 800b896:	460d      	mov	r5, r1
 800b898:	ec51 0b18 	vmov	r0, r1, d8
 800b89c:	f7f4 fec4 	bl	8000628 <__aeabi_dmul>
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	462b      	mov	r3, r5
 800b8a4:	f7f4 fd08 	bl	80002b8 <__aeabi_dsub>
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	e760      	b.n	800b770 <__ieee754_rem_pio2+0x1a0>
 800b8ae:	4b1c      	ldr	r3, [pc, #112]	; (800b920 <__ieee754_rem_pio2+0x350>)
 800b8b0:	4598      	cmp	r8, r3
 800b8b2:	dd37      	ble.n	800b924 <__ieee754_rem_pio2+0x354>
 800b8b4:	ee10 2a10 	vmov	r2, s0
 800b8b8:	462b      	mov	r3, r5
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	f7f4 fcfb 	bl	80002b8 <__aeabi_dsub>
 800b8c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b8c6:	e9ca 0100 	strd	r0, r1, [sl]
 800b8ca:	e695      	b.n	800b5f8 <__ieee754_rem_pio2+0x28>
 800b8cc:	f3af 8000 	nop.w
 800b8d0:	54400000 	.word	0x54400000
 800b8d4:	3ff921fb 	.word	0x3ff921fb
 800b8d8:	1a626331 	.word	0x1a626331
 800b8dc:	3dd0b461 	.word	0x3dd0b461
 800b8e0:	1a600000 	.word	0x1a600000
 800b8e4:	3dd0b461 	.word	0x3dd0b461
 800b8e8:	2e037073 	.word	0x2e037073
 800b8ec:	3ba3198a 	.word	0x3ba3198a
 800b8f0:	6dc9c883 	.word	0x6dc9c883
 800b8f4:	3fe45f30 	.word	0x3fe45f30
 800b8f8:	2e000000 	.word	0x2e000000
 800b8fc:	3ba3198a 	.word	0x3ba3198a
 800b900:	252049c1 	.word	0x252049c1
 800b904:	397b839a 	.word	0x397b839a
 800b908:	3fe921fb 	.word	0x3fe921fb
 800b90c:	4002d97b 	.word	0x4002d97b
 800b910:	3ff921fb 	.word	0x3ff921fb
 800b914:	413921fb 	.word	0x413921fb
 800b918:	3fe00000 	.word	0x3fe00000
 800b91c:	0800cb00 	.word	0x0800cb00
 800b920:	7fefffff 	.word	0x7fefffff
 800b924:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b928:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b92c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b930:	4620      	mov	r0, r4
 800b932:	460d      	mov	r5, r1
 800b934:	f7f5 f928 	bl	8000b88 <__aeabi_d2iz>
 800b938:	f7f4 fe0c 	bl	8000554 <__aeabi_i2d>
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	4620      	mov	r0, r4
 800b942:	4629      	mov	r1, r5
 800b944:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b948:	f7f4 fcb6 	bl	80002b8 <__aeabi_dsub>
 800b94c:	4b21      	ldr	r3, [pc, #132]	; (800b9d4 <__ieee754_rem_pio2+0x404>)
 800b94e:	2200      	movs	r2, #0
 800b950:	f7f4 fe6a 	bl	8000628 <__aeabi_dmul>
 800b954:	460d      	mov	r5, r1
 800b956:	4604      	mov	r4, r0
 800b958:	f7f5 f916 	bl	8000b88 <__aeabi_d2iz>
 800b95c:	f7f4 fdfa 	bl	8000554 <__aeabi_i2d>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4620      	mov	r0, r4
 800b966:	4629      	mov	r1, r5
 800b968:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b96c:	f7f4 fca4 	bl	80002b8 <__aeabi_dsub>
 800b970:	4b18      	ldr	r3, [pc, #96]	; (800b9d4 <__ieee754_rem_pio2+0x404>)
 800b972:	2200      	movs	r2, #0
 800b974:	f7f4 fe58 	bl	8000628 <__aeabi_dmul>
 800b978:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b97c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b980:	2703      	movs	r7, #3
 800b982:	2400      	movs	r4, #0
 800b984:	2500      	movs	r5, #0
 800b986:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800b98a:	4622      	mov	r2, r4
 800b98c:	462b      	mov	r3, r5
 800b98e:	46b9      	mov	r9, r7
 800b990:	3f01      	subs	r7, #1
 800b992:	f7f5 f8b1 	bl	8000af8 <__aeabi_dcmpeq>
 800b996:	2800      	cmp	r0, #0
 800b998:	d1f5      	bne.n	800b986 <__ieee754_rem_pio2+0x3b6>
 800b99a:	4b0f      	ldr	r3, [pc, #60]	; (800b9d8 <__ieee754_rem_pio2+0x408>)
 800b99c:	9301      	str	r3, [sp, #4]
 800b99e:	2302      	movs	r3, #2
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	4632      	mov	r2, r6
 800b9a4:	464b      	mov	r3, r9
 800b9a6:	4651      	mov	r1, sl
 800b9a8:	a804      	add	r0, sp, #16
 800b9aa:	f000 f9c5 	bl	800bd38 <__kernel_rem_pio2>
 800b9ae:	9b02      	ldr	r3, [sp, #8]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	4683      	mov	fp, r0
 800b9b4:	f6bf ae4c 	bge.w	800b650 <__ieee754_rem_pio2+0x80>
 800b9b8:	e9da 2100 	ldrd	r2, r1, [sl]
 800b9bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9c0:	e9ca 2300 	strd	r2, r3, [sl]
 800b9c4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b9c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9cc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b9d0:	e73f      	b.n	800b852 <__ieee754_rem_pio2+0x282>
 800b9d2:	bf00      	nop
 800b9d4:	41700000 	.word	0x41700000
 800b9d8:	0800cb80 	.word	0x0800cb80
 800b9dc:	00000000 	.word	0x00000000

0800b9e0 <atan>:
 800b9e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e4:	ec55 4b10 	vmov	r4, r5, d0
 800b9e8:	4bc3      	ldr	r3, [pc, #780]	; (800bcf8 <atan+0x318>)
 800b9ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b9ee:	429e      	cmp	r6, r3
 800b9f0:	46ab      	mov	fp, r5
 800b9f2:	dd18      	ble.n	800ba26 <atan+0x46>
 800b9f4:	4bc1      	ldr	r3, [pc, #772]	; (800bcfc <atan+0x31c>)
 800b9f6:	429e      	cmp	r6, r3
 800b9f8:	dc01      	bgt.n	800b9fe <atan+0x1e>
 800b9fa:	d109      	bne.n	800ba10 <atan+0x30>
 800b9fc:	b144      	cbz	r4, 800ba10 <atan+0x30>
 800b9fe:	4622      	mov	r2, r4
 800ba00:	462b      	mov	r3, r5
 800ba02:	4620      	mov	r0, r4
 800ba04:	4629      	mov	r1, r5
 800ba06:	f7f4 fc59 	bl	80002bc <__adddf3>
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	460d      	mov	r5, r1
 800ba0e:	e006      	b.n	800ba1e <atan+0x3e>
 800ba10:	f1bb 0f00 	cmp.w	fp, #0
 800ba14:	f300 8131 	bgt.w	800bc7a <atan+0x29a>
 800ba18:	a59b      	add	r5, pc, #620	; (adr r5, 800bc88 <atan+0x2a8>)
 800ba1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba1e:	ec45 4b10 	vmov	d0, r4, r5
 800ba22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba26:	4bb6      	ldr	r3, [pc, #728]	; (800bd00 <atan+0x320>)
 800ba28:	429e      	cmp	r6, r3
 800ba2a:	dc14      	bgt.n	800ba56 <atan+0x76>
 800ba2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ba30:	429e      	cmp	r6, r3
 800ba32:	dc0d      	bgt.n	800ba50 <atan+0x70>
 800ba34:	a396      	add	r3, pc, #600	; (adr r3, 800bc90 <atan+0x2b0>)
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	ee10 0a10 	vmov	r0, s0
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f7f4 fc3c 	bl	80002bc <__adddf3>
 800ba44:	4baf      	ldr	r3, [pc, #700]	; (800bd04 <atan+0x324>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	f7f5 f87e 	bl	8000b48 <__aeabi_dcmpgt>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d1e6      	bne.n	800ba1e <atan+0x3e>
 800ba50:	f04f 3aff 	mov.w	sl, #4294967295
 800ba54:	e02b      	b.n	800baae <atan+0xce>
 800ba56:	f000 f963 	bl	800bd20 <fabs>
 800ba5a:	4bab      	ldr	r3, [pc, #684]	; (800bd08 <atan+0x328>)
 800ba5c:	429e      	cmp	r6, r3
 800ba5e:	ec55 4b10 	vmov	r4, r5, d0
 800ba62:	f300 80bf 	bgt.w	800bbe4 <atan+0x204>
 800ba66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ba6a:	429e      	cmp	r6, r3
 800ba6c:	f300 80a0 	bgt.w	800bbb0 <atan+0x1d0>
 800ba70:	ee10 2a10 	vmov	r2, s0
 800ba74:	ee10 0a10 	vmov	r0, s0
 800ba78:	462b      	mov	r3, r5
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	f7f4 fc1e 	bl	80002bc <__adddf3>
 800ba80:	4ba0      	ldr	r3, [pc, #640]	; (800bd04 <atan+0x324>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	f7f4 fc18 	bl	80002b8 <__aeabi_dsub>
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	460f      	mov	r7, r1
 800ba8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba92:	4620      	mov	r0, r4
 800ba94:	4629      	mov	r1, r5
 800ba96:	f7f4 fc11 	bl	80002bc <__adddf3>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	4630      	mov	r0, r6
 800baa0:	4639      	mov	r1, r7
 800baa2:	f7f4 feeb 	bl	800087c <__aeabi_ddiv>
 800baa6:	f04f 0a00 	mov.w	sl, #0
 800baaa:	4604      	mov	r4, r0
 800baac:	460d      	mov	r5, r1
 800baae:	4622      	mov	r2, r4
 800bab0:	462b      	mov	r3, r5
 800bab2:	4620      	mov	r0, r4
 800bab4:	4629      	mov	r1, r5
 800bab6:	f7f4 fdb7 	bl	8000628 <__aeabi_dmul>
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	4680      	mov	r8, r0
 800bac0:	4689      	mov	r9, r1
 800bac2:	f7f4 fdb1 	bl	8000628 <__aeabi_dmul>
 800bac6:	a374      	add	r3, pc, #464	; (adr r3, 800bc98 <atan+0x2b8>)
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	4606      	mov	r6, r0
 800bace:	460f      	mov	r7, r1
 800bad0:	f7f4 fdaa 	bl	8000628 <__aeabi_dmul>
 800bad4:	a372      	add	r3, pc, #456	; (adr r3, 800bca0 <atan+0x2c0>)
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	f7f4 fbef 	bl	80002bc <__adddf3>
 800bade:	4632      	mov	r2, r6
 800bae0:	463b      	mov	r3, r7
 800bae2:	f7f4 fda1 	bl	8000628 <__aeabi_dmul>
 800bae6:	a370      	add	r3, pc, #448	; (adr r3, 800bca8 <atan+0x2c8>)
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	f7f4 fbe6 	bl	80002bc <__adddf3>
 800baf0:	4632      	mov	r2, r6
 800baf2:	463b      	mov	r3, r7
 800baf4:	f7f4 fd98 	bl	8000628 <__aeabi_dmul>
 800baf8:	a36d      	add	r3, pc, #436	; (adr r3, 800bcb0 <atan+0x2d0>)
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	f7f4 fbdd 	bl	80002bc <__adddf3>
 800bb02:	4632      	mov	r2, r6
 800bb04:	463b      	mov	r3, r7
 800bb06:	f7f4 fd8f 	bl	8000628 <__aeabi_dmul>
 800bb0a:	a36b      	add	r3, pc, #428	; (adr r3, 800bcb8 <atan+0x2d8>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f7f4 fbd4 	bl	80002bc <__adddf3>
 800bb14:	4632      	mov	r2, r6
 800bb16:	463b      	mov	r3, r7
 800bb18:	f7f4 fd86 	bl	8000628 <__aeabi_dmul>
 800bb1c:	a368      	add	r3, pc, #416	; (adr r3, 800bcc0 <atan+0x2e0>)
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	f7f4 fbcb 	bl	80002bc <__adddf3>
 800bb26:	4642      	mov	r2, r8
 800bb28:	464b      	mov	r3, r9
 800bb2a:	f7f4 fd7d 	bl	8000628 <__aeabi_dmul>
 800bb2e:	a366      	add	r3, pc, #408	; (adr r3, 800bcc8 <atan+0x2e8>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	4680      	mov	r8, r0
 800bb36:	4689      	mov	r9, r1
 800bb38:	4630      	mov	r0, r6
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	f7f4 fd74 	bl	8000628 <__aeabi_dmul>
 800bb40:	a363      	add	r3, pc, #396	; (adr r3, 800bcd0 <atan+0x2f0>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f7f4 fbb7 	bl	80002b8 <__aeabi_dsub>
 800bb4a:	4632      	mov	r2, r6
 800bb4c:	463b      	mov	r3, r7
 800bb4e:	f7f4 fd6b 	bl	8000628 <__aeabi_dmul>
 800bb52:	a361      	add	r3, pc, #388	; (adr r3, 800bcd8 <atan+0x2f8>)
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	f7f4 fbae 	bl	80002b8 <__aeabi_dsub>
 800bb5c:	4632      	mov	r2, r6
 800bb5e:	463b      	mov	r3, r7
 800bb60:	f7f4 fd62 	bl	8000628 <__aeabi_dmul>
 800bb64:	a35e      	add	r3, pc, #376	; (adr r3, 800bce0 <atan+0x300>)
 800bb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6a:	f7f4 fba5 	bl	80002b8 <__aeabi_dsub>
 800bb6e:	4632      	mov	r2, r6
 800bb70:	463b      	mov	r3, r7
 800bb72:	f7f4 fd59 	bl	8000628 <__aeabi_dmul>
 800bb76:	a35c      	add	r3, pc, #368	; (adr r3, 800bce8 <atan+0x308>)
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	f7f4 fb9c 	bl	80002b8 <__aeabi_dsub>
 800bb80:	4632      	mov	r2, r6
 800bb82:	463b      	mov	r3, r7
 800bb84:	f7f4 fd50 	bl	8000628 <__aeabi_dmul>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	4649      	mov	r1, r9
 800bb90:	f7f4 fb94 	bl	80002bc <__adddf3>
 800bb94:	4622      	mov	r2, r4
 800bb96:	462b      	mov	r3, r5
 800bb98:	f7f4 fd46 	bl	8000628 <__aeabi_dmul>
 800bb9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	d14b      	bne.n	800bc3e <atan+0x25e>
 800bba6:	4620      	mov	r0, r4
 800bba8:	4629      	mov	r1, r5
 800bbaa:	f7f4 fb85 	bl	80002b8 <__aeabi_dsub>
 800bbae:	e72c      	b.n	800ba0a <atan+0x2a>
 800bbb0:	ee10 0a10 	vmov	r0, s0
 800bbb4:	4b53      	ldr	r3, [pc, #332]	; (800bd04 <atan+0x324>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4629      	mov	r1, r5
 800bbba:	f7f4 fb7d 	bl	80002b8 <__aeabi_dsub>
 800bbbe:	4b51      	ldr	r3, [pc, #324]	; (800bd04 <atan+0x324>)
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	460f      	mov	r7, r1
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7f4 fb77 	bl	80002bc <__adddf3>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	f7f4 fe51 	bl	800087c <__aeabi_ddiv>
 800bbda:	f04f 0a01 	mov.w	sl, #1
 800bbde:	4604      	mov	r4, r0
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	e764      	b.n	800baae <atan+0xce>
 800bbe4:	4b49      	ldr	r3, [pc, #292]	; (800bd0c <atan+0x32c>)
 800bbe6:	429e      	cmp	r6, r3
 800bbe8:	da1d      	bge.n	800bc26 <atan+0x246>
 800bbea:	ee10 0a10 	vmov	r0, s0
 800bbee:	4b48      	ldr	r3, [pc, #288]	; (800bd10 <atan+0x330>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	f7f4 fb60 	bl	80002b8 <__aeabi_dsub>
 800bbf8:	4b45      	ldr	r3, [pc, #276]	; (800bd10 <atan+0x330>)
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460f      	mov	r7, r1
 800bbfe:	2200      	movs	r2, #0
 800bc00:	4620      	mov	r0, r4
 800bc02:	4629      	mov	r1, r5
 800bc04:	f7f4 fd10 	bl	8000628 <__aeabi_dmul>
 800bc08:	4b3e      	ldr	r3, [pc, #248]	; (800bd04 <atan+0x324>)
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f7f4 fb56 	bl	80002bc <__adddf3>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4630      	mov	r0, r6
 800bc16:	4639      	mov	r1, r7
 800bc18:	f7f4 fe30 	bl	800087c <__aeabi_ddiv>
 800bc1c:	f04f 0a02 	mov.w	sl, #2
 800bc20:	4604      	mov	r4, r0
 800bc22:	460d      	mov	r5, r1
 800bc24:	e743      	b.n	800baae <atan+0xce>
 800bc26:	462b      	mov	r3, r5
 800bc28:	ee10 2a10 	vmov	r2, s0
 800bc2c:	4939      	ldr	r1, [pc, #228]	; (800bd14 <atan+0x334>)
 800bc2e:	2000      	movs	r0, #0
 800bc30:	f7f4 fe24 	bl	800087c <__aeabi_ddiv>
 800bc34:	f04f 0a03 	mov.w	sl, #3
 800bc38:	4604      	mov	r4, r0
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	e737      	b.n	800baae <atan+0xce>
 800bc3e:	4b36      	ldr	r3, [pc, #216]	; (800bd18 <atan+0x338>)
 800bc40:	4e36      	ldr	r6, [pc, #216]	; (800bd1c <atan+0x33c>)
 800bc42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	f7f4 fb35 	bl	80002b8 <__aeabi_dsub>
 800bc4e:	4622      	mov	r2, r4
 800bc50:	462b      	mov	r3, r5
 800bc52:	f7f4 fb31 	bl	80002b8 <__aeabi_dsub>
 800bc56:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bc62:	f7f4 fb29 	bl	80002b8 <__aeabi_dsub>
 800bc66:	f1bb 0f00 	cmp.w	fp, #0
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	460d      	mov	r5, r1
 800bc6e:	f6bf aed6 	bge.w	800ba1e <atan+0x3e>
 800bc72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc76:	461d      	mov	r5, r3
 800bc78:	e6d1      	b.n	800ba1e <atan+0x3e>
 800bc7a:	a51d      	add	r5, pc, #116	; (adr r5, 800bcf0 <atan+0x310>)
 800bc7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc80:	e6cd      	b.n	800ba1e <atan+0x3e>
 800bc82:	bf00      	nop
 800bc84:	f3af 8000 	nop.w
 800bc88:	54442d18 	.word	0x54442d18
 800bc8c:	bff921fb 	.word	0xbff921fb
 800bc90:	8800759c 	.word	0x8800759c
 800bc94:	7e37e43c 	.word	0x7e37e43c
 800bc98:	e322da11 	.word	0xe322da11
 800bc9c:	3f90ad3a 	.word	0x3f90ad3a
 800bca0:	24760deb 	.word	0x24760deb
 800bca4:	3fa97b4b 	.word	0x3fa97b4b
 800bca8:	a0d03d51 	.word	0xa0d03d51
 800bcac:	3fb10d66 	.word	0x3fb10d66
 800bcb0:	c54c206e 	.word	0xc54c206e
 800bcb4:	3fb745cd 	.word	0x3fb745cd
 800bcb8:	920083ff 	.word	0x920083ff
 800bcbc:	3fc24924 	.word	0x3fc24924
 800bcc0:	5555550d 	.word	0x5555550d
 800bcc4:	3fd55555 	.word	0x3fd55555
 800bcc8:	2c6a6c2f 	.word	0x2c6a6c2f
 800bccc:	bfa2b444 	.word	0xbfa2b444
 800bcd0:	52defd9a 	.word	0x52defd9a
 800bcd4:	3fadde2d 	.word	0x3fadde2d
 800bcd8:	af749a6d 	.word	0xaf749a6d
 800bcdc:	3fb3b0f2 	.word	0x3fb3b0f2
 800bce0:	fe231671 	.word	0xfe231671
 800bce4:	3fbc71c6 	.word	0x3fbc71c6
 800bce8:	9998ebc4 	.word	0x9998ebc4
 800bcec:	3fc99999 	.word	0x3fc99999
 800bcf0:	54442d18 	.word	0x54442d18
 800bcf4:	3ff921fb 	.word	0x3ff921fb
 800bcf8:	440fffff 	.word	0x440fffff
 800bcfc:	7ff00000 	.word	0x7ff00000
 800bd00:	3fdbffff 	.word	0x3fdbffff
 800bd04:	3ff00000 	.word	0x3ff00000
 800bd08:	3ff2ffff 	.word	0x3ff2ffff
 800bd0c:	40038000 	.word	0x40038000
 800bd10:	3ff80000 	.word	0x3ff80000
 800bd14:	bff00000 	.word	0xbff00000
 800bd18:	0800cca8 	.word	0x0800cca8
 800bd1c:	0800cc88 	.word	0x0800cc88

0800bd20 <fabs>:
 800bd20:	ec51 0b10 	vmov	r0, r1, d0
 800bd24:	ee10 2a10 	vmov	r2, s0
 800bd28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd2c:	ec43 2b10 	vmov	d0, r2, r3
 800bd30:	4770      	bx	lr
 800bd32:	0000      	movs	r0, r0
 800bd34:	0000      	movs	r0, r0
	...

0800bd38 <__kernel_rem_pio2>:
 800bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3c:	ed2d 8b02 	vpush	{d8}
 800bd40:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bd44:	f112 0f14 	cmn.w	r2, #20
 800bd48:	9306      	str	r3, [sp, #24]
 800bd4a:	9104      	str	r1, [sp, #16]
 800bd4c:	4bc2      	ldr	r3, [pc, #776]	; (800c058 <__kernel_rem_pio2+0x320>)
 800bd4e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800bd50:	9009      	str	r0, [sp, #36]	; 0x24
 800bd52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	9b06      	ldr	r3, [sp, #24]
 800bd5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd5e:	bfa8      	it	ge
 800bd60:	1ed4      	subge	r4, r2, #3
 800bd62:	9305      	str	r3, [sp, #20]
 800bd64:	bfb2      	itee	lt
 800bd66:	2400      	movlt	r4, #0
 800bd68:	2318      	movge	r3, #24
 800bd6a:	fb94 f4f3 	sdivge	r4, r4, r3
 800bd6e:	f06f 0317 	mvn.w	r3, #23
 800bd72:	fb04 3303 	mla	r3, r4, r3, r3
 800bd76:	eb03 0a02 	add.w	sl, r3, r2
 800bd7a:	9b00      	ldr	r3, [sp, #0]
 800bd7c:	9a05      	ldr	r2, [sp, #20]
 800bd7e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800c048 <__kernel_rem_pio2+0x310>
 800bd82:	eb03 0802 	add.w	r8, r3, r2
 800bd86:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bd88:	1aa7      	subs	r7, r4, r2
 800bd8a:	ae20      	add	r6, sp, #128	; 0x80
 800bd8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bd90:	2500      	movs	r5, #0
 800bd92:	4545      	cmp	r5, r8
 800bd94:	dd13      	ble.n	800bdbe <__kernel_rem_pio2+0x86>
 800bd96:	9b06      	ldr	r3, [sp, #24]
 800bd98:	aa20      	add	r2, sp, #128	; 0x80
 800bd9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bd9e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800bda2:	f04f 0800 	mov.w	r8, #0
 800bda6:	9b00      	ldr	r3, [sp, #0]
 800bda8:	4598      	cmp	r8, r3
 800bdaa:	dc31      	bgt.n	800be10 <__kernel_rem_pio2+0xd8>
 800bdac:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800c048 <__kernel_rem_pio2+0x310>
 800bdb0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bdb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bdb8:	462f      	mov	r7, r5
 800bdba:	2600      	movs	r6, #0
 800bdbc:	e01b      	b.n	800bdf6 <__kernel_rem_pio2+0xbe>
 800bdbe:	42ef      	cmn	r7, r5
 800bdc0:	d407      	bmi.n	800bdd2 <__kernel_rem_pio2+0x9a>
 800bdc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bdc6:	f7f4 fbc5 	bl	8000554 <__aeabi_i2d>
 800bdca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bdce:	3501      	adds	r5, #1
 800bdd0:	e7df      	b.n	800bd92 <__kernel_rem_pio2+0x5a>
 800bdd2:	ec51 0b18 	vmov	r0, r1, d8
 800bdd6:	e7f8      	b.n	800bdca <__kernel_rem_pio2+0x92>
 800bdd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bddc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bde0:	f7f4 fc22 	bl	8000628 <__aeabi_dmul>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdec:	f7f4 fa66 	bl	80002bc <__adddf3>
 800bdf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdf4:	3601      	adds	r6, #1
 800bdf6:	9b05      	ldr	r3, [sp, #20]
 800bdf8:	429e      	cmp	r6, r3
 800bdfa:	f1a7 0708 	sub.w	r7, r7, #8
 800bdfe:	ddeb      	ble.n	800bdd8 <__kernel_rem_pio2+0xa0>
 800be00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be04:	f108 0801 	add.w	r8, r8, #1
 800be08:	ecab 7b02 	vstmia	fp!, {d7}
 800be0c:	3508      	adds	r5, #8
 800be0e:	e7ca      	b.n	800bda6 <__kernel_rem_pio2+0x6e>
 800be10:	9b00      	ldr	r3, [sp, #0]
 800be12:	aa0c      	add	r2, sp, #48	; 0x30
 800be14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be18:	930b      	str	r3, [sp, #44]	; 0x2c
 800be1a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800be1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800be20:	9c00      	ldr	r4, [sp, #0]
 800be22:	930a      	str	r3, [sp, #40]	; 0x28
 800be24:	00e3      	lsls	r3, r4, #3
 800be26:	9308      	str	r3, [sp, #32]
 800be28:	ab98      	add	r3, sp, #608	; 0x260
 800be2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be2e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800be32:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800be36:	ab70      	add	r3, sp, #448	; 0x1c0
 800be38:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800be3c:	46c3      	mov	fp, r8
 800be3e:	46a1      	mov	r9, r4
 800be40:	f1b9 0f00 	cmp.w	r9, #0
 800be44:	f1a5 0508 	sub.w	r5, r5, #8
 800be48:	dc77      	bgt.n	800bf3a <__kernel_rem_pio2+0x202>
 800be4a:	ec47 6b10 	vmov	d0, r6, r7
 800be4e:	4650      	mov	r0, sl
 800be50:	f000 fac2 	bl	800c3d8 <scalbn>
 800be54:	ec57 6b10 	vmov	r6, r7, d0
 800be58:	2200      	movs	r2, #0
 800be5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800be5e:	ee10 0a10 	vmov	r0, s0
 800be62:	4639      	mov	r1, r7
 800be64:	f7f4 fbe0 	bl	8000628 <__aeabi_dmul>
 800be68:	ec41 0b10 	vmov	d0, r0, r1
 800be6c:	f000 fb34 	bl	800c4d8 <floor>
 800be70:	4b7a      	ldr	r3, [pc, #488]	; (800c05c <__kernel_rem_pio2+0x324>)
 800be72:	ec51 0b10 	vmov	r0, r1, d0
 800be76:	2200      	movs	r2, #0
 800be78:	f7f4 fbd6 	bl	8000628 <__aeabi_dmul>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	4630      	mov	r0, r6
 800be82:	4639      	mov	r1, r7
 800be84:	f7f4 fa18 	bl	80002b8 <__aeabi_dsub>
 800be88:	460f      	mov	r7, r1
 800be8a:	4606      	mov	r6, r0
 800be8c:	f7f4 fe7c 	bl	8000b88 <__aeabi_d2iz>
 800be90:	9002      	str	r0, [sp, #8]
 800be92:	f7f4 fb5f 	bl	8000554 <__aeabi_i2d>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	4630      	mov	r0, r6
 800be9c:	4639      	mov	r1, r7
 800be9e:	f7f4 fa0b 	bl	80002b8 <__aeabi_dsub>
 800bea2:	f1ba 0f00 	cmp.w	sl, #0
 800bea6:	4606      	mov	r6, r0
 800bea8:	460f      	mov	r7, r1
 800beaa:	dd6d      	ble.n	800bf88 <__kernel_rem_pio2+0x250>
 800beac:	1e61      	subs	r1, r4, #1
 800beae:	ab0c      	add	r3, sp, #48	; 0x30
 800beb0:	9d02      	ldr	r5, [sp, #8]
 800beb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800beb6:	f1ca 0018 	rsb	r0, sl, #24
 800beba:	fa43 f200 	asr.w	r2, r3, r0
 800bebe:	4415      	add	r5, r2
 800bec0:	4082      	lsls	r2, r0
 800bec2:	1a9b      	subs	r3, r3, r2
 800bec4:	aa0c      	add	r2, sp, #48	; 0x30
 800bec6:	9502      	str	r5, [sp, #8]
 800bec8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800becc:	f1ca 0217 	rsb	r2, sl, #23
 800bed0:	fa43 fb02 	asr.w	fp, r3, r2
 800bed4:	f1bb 0f00 	cmp.w	fp, #0
 800bed8:	dd65      	ble.n	800bfa6 <__kernel_rem_pio2+0x26e>
 800beda:	9b02      	ldr	r3, [sp, #8]
 800bedc:	2200      	movs	r2, #0
 800bede:	3301      	adds	r3, #1
 800bee0:	9302      	str	r3, [sp, #8]
 800bee2:	4615      	mov	r5, r2
 800bee4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bee8:	4294      	cmp	r4, r2
 800beea:	f300 809f 	bgt.w	800c02c <__kernel_rem_pio2+0x2f4>
 800beee:	f1ba 0f00 	cmp.w	sl, #0
 800bef2:	dd07      	ble.n	800bf04 <__kernel_rem_pio2+0x1cc>
 800bef4:	f1ba 0f01 	cmp.w	sl, #1
 800bef8:	f000 80c1 	beq.w	800c07e <__kernel_rem_pio2+0x346>
 800befc:	f1ba 0f02 	cmp.w	sl, #2
 800bf00:	f000 80c7 	beq.w	800c092 <__kernel_rem_pio2+0x35a>
 800bf04:	f1bb 0f02 	cmp.w	fp, #2
 800bf08:	d14d      	bne.n	800bfa6 <__kernel_rem_pio2+0x26e>
 800bf0a:	4632      	mov	r2, r6
 800bf0c:	463b      	mov	r3, r7
 800bf0e:	4954      	ldr	r1, [pc, #336]	; (800c060 <__kernel_rem_pio2+0x328>)
 800bf10:	2000      	movs	r0, #0
 800bf12:	f7f4 f9d1 	bl	80002b8 <__aeabi_dsub>
 800bf16:	4606      	mov	r6, r0
 800bf18:	460f      	mov	r7, r1
 800bf1a:	2d00      	cmp	r5, #0
 800bf1c:	d043      	beq.n	800bfa6 <__kernel_rem_pio2+0x26e>
 800bf1e:	4650      	mov	r0, sl
 800bf20:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c050 <__kernel_rem_pio2+0x318>
 800bf24:	f000 fa58 	bl	800c3d8 <scalbn>
 800bf28:	4630      	mov	r0, r6
 800bf2a:	4639      	mov	r1, r7
 800bf2c:	ec53 2b10 	vmov	r2, r3, d0
 800bf30:	f7f4 f9c2 	bl	80002b8 <__aeabi_dsub>
 800bf34:	4606      	mov	r6, r0
 800bf36:	460f      	mov	r7, r1
 800bf38:	e035      	b.n	800bfa6 <__kernel_rem_pio2+0x26e>
 800bf3a:	4b4a      	ldr	r3, [pc, #296]	; (800c064 <__kernel_rem_pio2+0x32c>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	4630      	mov	r0, r6
 800bf40:	4639      	mov	r1, r7
 800bf42:	f7f4 fb71 	bl	8000628 <__aeabi_dmul>
 800bf46:	f7f4 fe1f 	bl	8000b88 <__aeabi_d2iz>
 800bf4a:	f7f4 fb03 	bl	8000554 <__aeabi_i2d>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	ec43 2b18 	vmov	d8, r2, r3
 800bf56:	4b44      	ldr	r3, [pc, #272]	; (800c068 <__kernel_rem_pio2+0x330>)
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f7f4 fb65 	bl	8000628 <__aeabi_dmul>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	4630      	mov	r0, r6
 800bf64:	4639      	mov	r1, r7
 800bf66:	f7f4 f9a7 	bl	80002b8 <__aeabi_dsub>
 800bf6a:	f7f4 fe0d 	bl	8000b88 <__aeabi_d2iz>
 800bf6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf72:	f84b 0b04 	str.w	r0, [fp], #4
 800bf76:	ec51 0b18 	vmov	r0, r1, d8
 800bf7a:	f7f4 f99f 	bl	80002bc <__adddf3>
 800bf7e:	f109 39ff 	add.w	r9, r9, #4294967295
 800bf82:	4606      	mov	r6, r0
 800bf84:	460f      	mov	r7, r1
 800bf86:	e75b      	b.n	800be40 <__kernel_rem_pio2+0x108>
 800bf88:	d106      	bne.n	800bf98 <__kernel_rem_pio2+0x260>
 800bf8a:	1e63      	subs	r3, r4, #1
 800bf8c:	aa0c      	add	r2, sp, #48	; 0x30
 800bf8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf92:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800bf96:	e79d      	b.n	800bed4 <__kernel_rem_pio2+0x19c>
 800bf98:	4b34      	ldr	r3, [pc, #208]	; (800c06c <__kernel_rem_pio2+0x334>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f7f4 fdca 	bl	8000b34 <__aeabi_dcmpge>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d140      	bne.n	800c026 <__kernel_rem_pio2+0x2ee>
 800bfa4:	4683      	mov	fp, r0
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4630      	mov	r0, r6
 800bfac:	4639      	mov	r1, r7
 800bfae:	f7f4 fda3 	bl	8000af8 <__aeabi_dcmpeq>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	f000 80c1 	beq.w	800c13a <__kernel_rem_pio2+0x402>
 800bfb8:	1e65      	subs	r5, r4, #1
 800bfba:	462b      	mov	r3, r5
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	9900      	ldr	r1, [sp, #0]
 800bfc0:	428b      	cmp	r3, r1
 800bfc2:	da6d      	bge.n	800c0a0 <__kernel_rem_pio2+0x368>
 800bfc4:	2a00      	cmp	r2, #0
 800bfc6:	f000 808a 	beq.w	800c0de <__kernel_rem_pio2+0x3a6>
 800bfca:	ab0c      	add	r3, sp, #48	; 0x30
 800bfcc:	f1aa 0a18 	sub.w	sl, sl, #24
 800bfd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f000 80ae 	beq.w	800c136 <__kernel_rem_pio2+0x3fe>
 800bfda:	4650      	mov	r0, sl
 800bfdc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c050 <__kernel_rem_pio2+0x318>
 800bfe0:	f000 f9fa 	bl	800c3d8 <scalbn>
 800bfe4:	1c6b      	adds	r3, r5, #1
 800bfe6:	00da      	lsls	r2, r3, #3
 800bfe8:	9205      	str	r2, [sp, #20]
 800bfea:	ec57 6b10 	vmov	r6, r7, d0
 800bfee:	aa70      	add	r2, sp, #448	; 0x1c0
 800bff0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800c064 <__kernel_rem_pio2+0x32c>
 800bff4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800bff8:	462c      	mov	r4, r5
 800bffa:	f04f 0800 	mov.w	r8, #0
 800bffe:	2c00      	cmp	r4, #0
 800c000:	f280 80d4 	bge.w	800c1ac <__kernel_rem_pio2+0x474>
 800c004:	462c      	mov	r4, r5
 800c006:	2c00      	cmp	r4, #0
 800c008:	f2c0 8102 	blt.w	800c210 <__kernel_rem_pio2+0x4d8>
 800c00c:	4b18      	ldr	r3, [pc, #96]	; (800c070 <__kernel_rem_pio2+0x338>)
 800c00e:	461e      	mov	r6, r3
 800c010:	ab70      	add	r3, sp, #448	; 0x1c0
 800c012:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800c016:	1b2b      	subs	r3, r5, r4
 800c018:	f04f 0900 	mov.w	r9, #0
 800c01c:	f04f 0a00 	mov.w	sl, #0
 800c020:	2700      	movs	r7, #0
 800c022:	9306      	str	r3, [sp, #24]
 800c024:	e0e6      	b.n	800c1f4 <__kernel_rem_pio2+0x4bc>
 800c026:	f04f 0b02 	mov.w	fp, #2
 800c02a:	e756      	b.n	800beda <__kernel_rem_pio2+0x1a2>
 800c02c:	f8d8 3000 	ldr.w	r3, [r8]
 800c030:	bb05      	cbnz	r5, 800c074 <__kernel_rem_pio2+0x33c>
 800c032:	b123      	cbz	r3, 800c03e <__kernel_rem_pio2+0x306>
 800c034:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c038:	f8c8 3000 	str.w	r3, [r8]
 800c03c:	2301      	movs	r3, #1
 800c03e:	3201      	adds	r2, #1
 800c040:	f108 0804 	add.w	r8, r8, #4
 800c044:	461d      	mov	r5, r3
 800c046:	e74f      	b.n	800bee8 <__kernel_rem_pio2+0x1b0>
	...
 800c054:	3ff00000 	.word	0x3ff00000
 800c058:	0800cd08 	.word	0x0800cd08
 800c05c:	40200000 	.word	0x40200000
 800c060:	3ff00000 	.word	0x3ff00000
 800c064:	3e700000 	.word	0x3e700000
 800c068:	41700000 	.word	0x41700000
 800c06c:	3fe00000 	.word	0x3fe00000
 800c070:	0800ccc8 	.word	0x0800ccc8
 800c074:	1acb      	subs	r3, r1, r3
 800c076:	f8c8 3000 	str.w	r3, [r8]
 800c07a:	462b      	mov	r3, r5
 800c07c:	e7df      	b.n	800c03e <__kernel_rem_pio2+0x306>
 800c07e:	1e62      	subs	r2, r4, #1
 800c080:	ab0c      	add	r3, sp, #48	; 0x30
 800c082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c086:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c08a:	a90c      	add	r1, sp, #48	; 0x30
 800c08c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c090:	e738      	b.n	800bf04 <__kernel_rem_pio2+0x1cc>
 800c092:	1e62      	subs	r2, r4, #1
 800c094:	ab0c      	add	r3, sp, #48	; 0x30
 800c096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c09a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c09e:	e7f4      	b.n	800c08a <__kernel_rem_pio2+0x352>
 800c0a0:	a90c      	add	r1, sp, #48	; 0x30
 800c0a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	430a      	orrs	r2, r1
 800c0aa:	e788      	b.n	800bfbe <__kernel_rem_pio2+0x286>
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c0b2:	2900      	cmp	r1, #0
 800c0b4:	d0fa      	beq.n	800c0ac <__kernel_rem_pio2+0x374>
 800c0b6:	9a08      	ldr	r2, [sp, #32]
 800c0b8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800c0bc:	446a      	add	r2, sp
 800c0be:	3a98      	subs	r2, #152	; 0x98
 800c0c0:	9208      	str	r2, [sp, #32]
 800c0c2:	9a06      	ldr	r2, [sp, #24]
 800c0c4:	a920      	add	r1, sp, #128	; 0x80
 800c0c6:	18a2      	adds	r2, r4, r2
 800c0c8:	18e3      	adds	r3, r4, r3
 800c0ca:	f104 0801 	add.w	r8, r4, #1
 800c0ce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c0d2:	9302      	str	r3, [sp, #8]
 800c0d4:	9b02      	ldr	r3, [sp, #8]
 800c0d6:	4543      	cmp	r3, r8
 800c0d8:	da04      	bge.n	800c0e4 <__kernel_rem_pio2+0x3ac>
 800c0da:	461c      	mov	r4, r3
 800c0dc:	e6a2      	b.n	800be24 <__kernel_rem_pio2+0xec>
 800c0de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e7e4      	b.n	800c0ae <__kernel_rem_pio2+0x376>
 800c0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c0ea:	f7f4 fa33 	bl	8000554 <__aeabi_i2d>
 800c0ee:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f4:	46ab      	mov	fp, r5
 800c0f6:	461c      	mov	r4, r3
 800c0f8:	f04f 0900 	mov.w	r9, #0
 800c0fc:	2600      	movs	r6, #0
 800c0fe:	2700      	movs	r7, #0
 800c100:	9b05      	ldr	r3, [sp, #20]
 800c102:	4599      	cmp	r9, r3
 800c104:	dd06      	ble.n	800c114 <__kernel_rem_pio2+0x3dc>
 800c106:	9b08      	ldr	r3, [sp, #32]
 800c108:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c10c:	f108 0801 	add.w	r8, r8, #1
 800c110:	9308      	str	r3, [sp, #32]
 800c112:	e7df      	b.n	800c0d4 <__kernel_rem_pio2+0x39c>
 800c114:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c118:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c11c:	f7f4 fa84 	bl	8000628 <__aeabi_dmul>
 800c120:	4602      	mov	r2, r0
 800c122:	460b      	mov	r3, r1
 800c124:	4630      	mov	r0, r6
 800c126:	4639      	mov	r1, r7
 800c128:	f7f4 f8c8 	bl	80002bc <__adddf3>
 800c12c:	f109 0901 	add.w	r9, r9, #1
 800c130:	4606      	mov	r6, r0
 800c132:	460f      	mov	r7, r1
 800c134:	e7e4      	b.n	800c100 <__kernel_rem_pio2+0x3c8>
 800c136:	3d01      	subs	r5, #1
 800c138:	e747      	b.n	800bfca <__kernel_rem_pio2+0x292>
 800c13a:	ec47 6b10 	vmov	d0, r6, r7
 800c13e:	f1ca 0000 	rsb	r0, sl, #0
 800c142:	f000 f949 	bl	800c3d8 <scalbn>
 800c146:	ec57 6b10 	vmov	r6, r7, d0
 800c14a:	4ba0      	ldr	r3, [pc, #640]	; (800c3cc <__kernel_rem_pio2+0x694>)
 800c14c:	ee10 0a10 	vmov	r0, s0
 800c150:	2200      	movs	r2, #0
 800c152:	4639      	mov	r1, r7
 800c154:	f7f4 fcee 	bl	8000b34 <__aeabi_dcmpge>
 800c158:	b1f8      	cbz	r0, 800c19a <__kernel_rem_pio2+0x462>
 800c15a:	4b9d      	ldr	r3, [pc, #628]	; (800c3d0 <__kernel_rem_pio2+0x698>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	4630      	mov	r0, r6
 800c160:	4639      	mov	r1, r7
 800c162:	f7f4 fa61 	bl	8000628 <__aeabi_dmul>
 800c166:	f7f4 fd0f 	bl	8000b88 <__aeabi_d2iz>
 800c16a:	4680      	mov	r8, r0
 800c16c:	f7f4 f9f2 	bl	8000554 <__aeabi_i2d>
 800c170:	4b96      	ldr	r3, [pc, #600]	; (800c3cc <__kernel_rem_pio2+0x694>)
 800c172:	2200      	movs	r2, #0
 800c174:	f7f4 fa58 	bl	8000628 <__aeabi_dmul>
 800c178:	460b      	mov	r3, r1
 800c17a:	4602      	mov	r2, r0
 800c17c:	4639      	mov	r1, r7
 800c17e:	4630      	mov	r0, r6
 800c180:	f7f4 f89a 	bl	80002b8 <__aeabi_dsub>
 800c184:	f7f4 fd00 	bl	8000b88 <__aeabi_d2iz>
 800c188:	1c65      	adds	r5, r4, #1
 800c18a:	ab0c      	add	r3, sp, #48	; 0x30
 800c18c:	f10a 0a18 	add.w	sl, sl, #24
 800c190:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c194:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c198:	e71f      	b.n	800bfda <__kernel_rem_pio2+0x2a2>
 800c19a:	4630      	mov	r0, r6
 800c19c:	4639      	mov	r1, r7
 800c19e:	f7f4 fcf3 	bl	8000b88 <__aeabi_d2iz>
 800c1a2:	ab0c      	add	r3, sp, #48	; 0x30
 800c1a4:	4625      	mov	r5, r4
 800c1a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c1aa:	e716      	b.n	800bfda <__kernel_rem_pio2+0x2a2>
 800c1ac:	ab0c      	add	r3, sp, #48	; 0x30
 800c1ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c1b2:	f7f4 f9cf 	bl	8000554 <__aeabi_i2d>
 800c1b6:	4632      	mov	r2, r6
 800c1b8:	463b      	mov	r3, r7
 800c1ba:	f7f4 fa35 	bl	8000628 <__aeabi_dmul>
 800c1be:	4642      	mov	r2, r8
 800c1c0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c1c4:	464b      	mov	r3, r9
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	4639      	mov	r1, r7
 800c1ca:	f7f4 fa2d 	bl	8000628 <__aeabi_dmul>
 800c1ce:	3c01      	subs	r4, #1
 800c1d0:	4606      	mov	r6, r0
 800c1d2:	460f      	mov	r7, r1
 800c1d4:	e713      	b.n	800bffe <__kernel_rem_pio2+0x2c6>
 800c1d6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c1da:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800c1de:	f7f4 fa23 	bl	8000628 <__aeabi_dmul>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4648      	mov	r0, r9
 800c1e8:	4651      	mov	r1, sl
 800c1ea:	f7f4 f867 	bl	80002bc <__adddf3>
 800c1ee:	3701      	adds	r7, #1
 800c1f0:	4681      	mov	r9, r0
 800c1f2:	468a      	mov	sl, r1
 800c1f4:	9b00      	ldr	r3, [sp, #0]
 800c1f6:	429f      	cmp	r7, r3
 800c1f8:	dc02      	bgt.n	800c200 <__kernel_rem_pio2+0x4c8>
 800c1fa:	9b06      	ldr	r3, [sp, #24]
 800c1fc:	429f      	cmp	r7, r3
 800c1fe:	ddea      	ble.n	800c1d6 <__kernel_rem_pio2+0x49e>
 800c200:	9a06      	ldr	r2, [sp, #24]
 800c202:	ab48      	add	r3, sp, #288	; 0x120
 800c204:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800c208:	e9c6 9a00 	strd	r9, sl, [r6]
 800c20c:	3c01      	subs	r4, #1
 800c20e:	e6fa      	b.n	800c006 <__kernel_rem_pio2+0x2ce>
 800c210:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c212:	2b02      	cmp	r3, #2
 800c214:	dc0b      	bgt.n	800c22e <__kernel_rem_pio2+0x4f6>
 800c216:	2b00      	cmp	r3, #0
 800c218:	dc39      	bgt.n	800c28e <__kernel_rem_pio2+0x556>
 800c21a:	d05d      	beq.n	800c2d8 <__kernel_rem_pio2+0x5a0>
 800c21c:	9b02      	ldr	r3, [sp, #8]
 800c21e:	f003 0007 	and.w	r0, r3, #7
 800c222:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c226:	ecbd 8b02 	vpop	{d8}
 800c22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c22e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c230:	2b03      	cmp	r3, #3
 800c232:	d1f3      	bne.n	800c21c <__kernel_rem_pio2+0x4e4>
 800c234:	9b05      	ldr	r3, [sp, #20]
 800c236:	9500      	str	r5, [sp, #0]
 800c238:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c23c:	eb0d 0403 	add.w	r4, sp, r3
 800c240:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800c244:	46a2      	mov	sl, r4
 800c246:	9b00      	ldr	r3, [sp, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f1aa 0a08 	sub.w	sl, sl, #8
 800c24e:	dc69      	bgt.n	800c324 <__kernel_rem_pio2+0x5ec>
 800c250:	46aa      	mov	sl, r5
 800c252:	f1ba 0f01 	cmp.w	sl, #1
 800c256:	f1a4 0408 	sub.w	r4, r4, #8
 800c25a:	f300 8083 	bgt.w	800c364 <__kernel_rem_pio2+0x62c>
 800c25e:	9c05      	ldr	r4, [sp, #20]
 800c260:	ab48      	add	r3, sp, #288	; 0x120
 800c262:	441c      	add	r4, r3
 800c264:	2000      	movs	r0, #0
 800c266:	2100      	movs	r1, #0
 800c268:	2d01      	cmp	r5, #1
 800c26a:	f300 809a 	bgt.w	800c3a2 <__kernel_rem_pio2+0x66a>
 800c26e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800c272:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c276:	f1bb 0f00 	cmp.w	fp, #0
 800c27a:	f040 8098 	bne.w	800c3ae <__kernel_rem_pio2+0x676>
 800c27e:	9b04      	ldr	r3, [sp, #16]
 800c280:	e9c3 7800 	strd	r7, r8, [r3]
 800c284:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c288:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c28c:	e7c6      	b.n	800c21c <__kernel_rem_pio2+0x4e4>
 800c28e:	9e05      	ldr	r6, [sp, #20]
 800c290:	ab48      	add	r3, sp, #288	; 0x120
 800c292:	441e      	add	r6, r3
 800c294:	462c      	mov	r4, r5
 800c296:	2000      	movs	r0, #0
 800c298:	2100      	movs	r1, #0
 800c29a:	2c00      	cmp	r4, #0
 800c29c:	da33      	bge.n	800c306 <__kernel_rem_pio2+0x5ce>
 800c29e:	f1bb 0f00 	cmp.w	fp, #0
 800c2a2:	d036      	beq.n	800c312 <__kernel_rem_pio2+0x5da>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2aa:	9c04      	ldr	r4, [sp, #16]
 800c2ac:	e9c4 2300 	strd	r2, r3, [r4]
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c2b8:	f7f3 fffe 	bl	80002b8 <__aeabi_dsub>
 800c2bc:	ae4a      	add	r6, sp, #296	; 0x128
 800c2be:	2401      	movs	r4, #1
 800c2c0:	42a5      	cmp	r5, r4
 800c2c2:	da29      	bge.n	800c318 <__kernel_rem_pio2+0x5e0>
 800c2c4:	f1bb 0f00 	cmp.w	fp, #0
 800c2c8:	d002      	beq.n	800c2d0 <__kernel_rem_pio2+0x598>
 800c2ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	9b04      	ldr	r3, [sp, #16]
 800c2d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c2d6:	e7a1      	b.n	800c21c <__kernel_rem_pio2+0x4e4>
 800c2d8:	9c05      	ldr	r4, [sp, #20]
 800c2da:	ab48      	add	r3, sp, #288	; 0x120
 800c2dc:	441c      	add	r4, r3
 800c2de:	2000      	movs	r0, #0
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	2d00      	cmp	r5, #0
 800c2e4:	da09      	bge.n	800c2fa <__kernel_rem_pio2+0x5c2>
 800c2e6:	f1bb 0f00 	cmp.w	fp, #0
 800c2ea:	d002      	beq.n	800c2f2 <__kernel_rem_pio2+0x5ba>
 800c2ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	9b04      	ldr	r3, [sp, #16]
 800c2f4:	e9c3 0100 	strd	r0, r1, [r3]
 800c2f8:	e790      	b.n	800c21c <__kernel_rem_pio2+0x4e4>
 800c2fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c2fe:	f7f3 ffdd 	bl	80002bc <__adddf3>
 800c302:	3d01      	subs	r5, #1
 800c304:	e7ed      	b.n	800c2e2 <__kernel_rem_pio2+0x5aa>
 800c306:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c30a:	f7f3 ffd7 	bl	80002bc <__adddf3>
 800c30e:	3c01      	subs	r4, #1
 800c310:	e7c3      	b.n	800c29a <__kernel_rem_pio2+0x562>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	e7c8      	b.n	800c2aa <__kernel_rem_pio2+0x572>
 800c318:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c31c:	f7f3 ffce 	bl	80002bc <__adddf3>
 800c320:	3401      	adds	r4, #1
 800c322:	e7cd      	b.n	800c2c0 <__kernel_rem_pio2+0x588>
 800c324:	e9da 8900 	ldrd	r8, r9, [sl]
 800c328:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c32c:	9b00      	ldr	r3, [sp, #0]
 800c32e:	3b01      	subs	r3, #1
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	4632      	mov	r2, r6
 800c334:	463b      	mov	r3, r7
 800c336:	4640      	mov	r0, r8
 800c338:	4649      	mov	r1, r9
 800c33a:	f7f3 ffbf 	bl	80002bc <__adddf3>
 800c33e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	4640      	mov	r0, r8
 800c348:	4649      	mov	r1, r9
 800c34a:	f7f3 ffb5 	bl	80002b8 <__aeabi_dsub>
 800c34e:	4632      	mov	r2, r6
 800c350:	463b      	mov	r3, r7
 800c352:	f7f3 ffb3 	bl	80002bc <__adddf3>
 800c356:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c35a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c35e:	ed8a 7b00 	vstr	d7, [sl]
 800c362:	e770      	b.n	800c246 <__kernel_rem_pio2+0x50e>
 800c364:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c368:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c36c:	4640      	mov	r0, r8
 800c36e:	4632      	mov	r2, r6
 800c370:	463b      	mov	r3, r7
 800c372:	4649      	mov	r1, r9
 800c374:	f7f3 ffa2 	bl	80002bc <__adddf3>
 800c378:	e9cd 0100 	strd	r0, r1, [sp]
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4640      	mov	r0, r8
 800c382:	4649      	mov	r1, r9
 800c384:	f7f3 ff98 	bl	80002b8 <__aeabi_dsub>
 800c388:	4632      	mov	r2, r6
 800c38a:	463b      	mov	r3, r7
 800c38c:	f7f3 ff96 	bl	80002bc <__adddf3>
 800c390:	ed9d 7b00 	vldr	d7, [sp]
 800c394:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c398:	ed84 7b00 	vstr	d7, [r4]
 800c39c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3a0:	e757      	b.n	800c252 <__kernel_rem_pio2+0x51a>
 800c3a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c3a6:	f7f3 ff89 	bl	80002bc <__adddf3>
 800c3aa:	3d01      	subs	r5, #1
 800c3ac:	e75c      	b.n	800c268 <__kernel_rem_pio2+0x530>
 800c3ae:	9b04      	ldr	r3, [sp, #16]
 800c3b0:	9a04      	ldr	r2, [sp, #16]
 800c3b2:	601f      	str	r7, [r3, #0]
 800c3b4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c3b8:	605c      	str	r4, [r3, #4]
 800c3ba:	609d      	str	r5, [r3, #8]
 800c3bc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c3c0:	60d3      	str	r3, [r2, #12]
 800c3c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3c6:	6110      	str	r0, [r2, #16]
 800c3c8:	6153      	str	r3, [r2, #20]
 800c3ca:	e727      	b.n	800c21c <__kernel_rem_pio2+0x4e4>
 800c3cc:	41700000 	.word	0x41700000
 800c3d0:	3e700000 	.word	0x3e700000
 800c3d4:	00000000 	.word	0x00000000

0800c3d8 <scalbn>:
 800c3d8:	b570      	push	{r4, r5, r6, lr}
 800c3da:	ec55 4b10 	vmov	r4, r5, d0
 800c3de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c3e2:	4606      	mov	r6, r0
 800c3e4:	462b      	mov	r3, r5
 800c3e6:	b999      	cbnz	r1, 800c410 <scalbn+0x38>
 800c3e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c3ec:	4323      	orrs	r3, r4
 800c3ee:	d03f      	beq.n	800c470 <scalbn+0x98>
 800c3f0:	4b35      	ldr	r3, [pc, #212]	; (800c4c8 <scalbn+0xf0>)
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	ee10 0a10 	vmov	r0, s0
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f7f4 f915 	bl	8000628 <__aeabi_dmul>
 800c3fe:	4b33      	ldr	r3, [pc, #204]	; (800c4cc <scalbn+0xf4>)
 800c400:	429e      	cmp	r6, r3
 800c402:	4604      	mov	r4, r0
 800c404:	460d      	mov	r5, r1
 800c406:	da10      	bge.n	800c42a <scalbn+0x52>
 800c408:	a327      	add	r3, pc, #156	; (adr r3, 800c4a8 <scalbn+0xd0>)
 800c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40e:	e01f      	b.n	800c450 <scalbn+0x78>
 800c410:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c414:	4291      	cmp	r1, r2
 800c416:	d10c      	bne.n	800c432 <scalbn+0x5a>
 800c418:	ee10 2a10 	vmov	r2, s0
 800c41c:	4620      	mov	r0, r4
 800c41e:	4629      	mov	r1, r5
 800c420:	f7f3 ff4c 	bl	80002bc <__adddf3>
 800c424:	4604      	mov	r4, r0
 800c426:	460d      	mov	r5, r1
 800c428:	e022      	b.n	800c470 <scalbn+0x98>
 800c42a:	460b      	mov	r3, r1
 800c42c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c430:	3936      	subs	r1, #54	; 0x36
 800c432:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c436:	4296      	cmp	r6, r2
 800c438:	dd0d      	ble.n	800c456 <scalbn+0x7e>
 800c43a:	2d00      	cmp	r5, #0
 800c43c:	a11c      	add	r1, pc, #112	; (adr r1, 800c4b0 <scalbn+0xd8>)
 800c43e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c442:	da02      	bge.n	800c44a <scalbn+0x72>
 800c444:	a11c      	add	r1, pc, #112	; (adr r1, 800c4b8 <scalbn+0xe0>)
 800c446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c44a:	a319      	add	r3, pc, #100	; (adr r3, 800c4b0 <scalbn+0xd8>)
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	f7f4 f8ea 	bl	8000628 <__aeabi_dmul>
 800c454:	e7e6      	b.n	800c424 <scalbn+0x4c>
 800c456:	1872      	adds	r2, r6, r1
 800c458:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c45c:	428a      	cmp	r2, r1
 800c45e:	dcec      	bgt.n	800c43a <scalbn+0x62>
 800c460:	2a00      	cmp	r2, #0
 800c462:	dd08      	ble.n	800c476 <scalbn+0x9e>
 800c464:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c468:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c46c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c470:	ec45 4b10 	vmov	d0, r4, r5
 800c474:	bd70      	pop	{r4, r5, r6, pc}
 800c476:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c47a:	da08      	bge.n	800c48e <scalbn+0xb6>
 800c47c:	2d00      	cmp	r5, #0
 800c47e:	a10a      	add	r1, pc, #40	; (adr r1, 800c4a8 <scalbn+0xd0>)
 800c480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c484:	dac0      	bge.n	800c408 <scalbn+0x30>
 800c486:	a10e      	add	r1, pc, #56	; (adr r1, 800c4c0 <scalbn+0xe8>)
 800c488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c48c:	e7bc      	b.n	800c408 <scalbn+0x30>
 800c48e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c492:	3236      	adds	r2, #54	; 0x36
 800c494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c498:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c49c:	4620      	mov	r0, r4
 800c49e:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <scalbn+0xf8>)
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	e7d5      	b.n	800c450 <scalbn+0x78>
 800c4a4:	f3af 8000 	nop.w
 800c4a8:	c2f8f359 	.word	0xc2f8f359
 800c4ac:	01a56e1f 	.word	0x01a56e1f
 800c4b0:	8800759c 	.word	0x8800759c
 800c4b4:	7e37e43c 	.word	0x7e37e43c
 800c4b8:	8800759c 	.word	0x8800759c
 800c4bc:	fe37e43c 	.word	0xfe37e43c
 800c4c0:	c2f8f359 	.word	0xc2f8f359
 800c4c4:	81a56e1f 	.word	0x81a56e1f
 800c4c8:	43500000 	.word	0x43500000
 800c4cc:	ffff3cb0 	.word	0xffff3cb0
 800c4d0:	3c900000 	.word	0x3c900000
 800c4d4:	00000000 	.word	0x00000000

0800c4d8 <floor>:
 800c4d8:	ec51 0b10 	vmov	r0, r1, d0
 800c4dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c4e8:	2e13      	cmp	r6, #19
 800c4ea:	ee10 5a10 	vmov	r5, s0
 800c4ee:	ee10 8a10 	vmov	r8, s0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	dc31      	bgt.n	800c55a <floor+0x82>
 800c4f6:	2e00      	cmp	r6, #0
 800c4f8:	da14      	bge.n	800c524 <floor+0x4c>
 800c4fa:	a333      	add	r3, pc, #204	; (adr r3, 800c5c8 <floor+0xf0>)
 800c4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c500:	f7f3 fedc 	bl	80002bc <__adddf3>
 800c504:	2200      	movs	r2, #0
 800c506:	2300      	movs	r3, #0
 800c508:	f7f4 fb1e 	bl	8000b48 <__aeabi_dcmpgt>
 800c50c:	b138      	cbz	r0, 800c51e <floor+0x46>
 800c50e:	2c00      	cmp	r4, #0
 800c510:	da53      	bge.n	800c5ba <floor+0xe2>
 800c512:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c516:	4325      	orrs	r5, r4
 800c518:	d052      	beq.n	800c5c0 <floor+0xe8>
 800c51a:	4c2d      	ldr	r4, [pc, #180]	; (800c5d0 <floor+0xf8>)
 800c51c:	2500      	movs	r5, #0
 800c51e:	4621      	mov	r1, r4
 800c520:	4628      	mov	r0, r5
 800c522:	e024      	b.n	800c56e <floor+0x96>
 800c524:	4f2b      	ldr	r7, [pc, #172]	; (800c5d4 <floor+0xfc>)
 800c526:	4137      	asrs	r7, r6
 800c528:	ea01 0307 	and.w	r3, r1, r7
 800c52c:	4303      	orrs	r3, r0
 800c52e:	d01e      	beq.n	800c56e <floor+0x96>
 800c530:	a325      	add	r3, pc, #148	; (adr r3, 800c5c8 <floor+0xf0>)
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	f7f3 fec1 	bl	80002bc <__adddf3>
 800c53a:	2200      	movs	r2, #0
 800c53c:	2300      	movs	r3, #0
 800c53e:	f7f4 fb03 	bl	8000b48 <__aeabi_dcmpgt>
 800c542:	2800      	cmp	r0, #0
 800c544:	d0eb      	beq.n	800c51e <floor+0x46>
 800c546:	2c00      	cmp	r4, #0
 800c548:	bfbe      	ittt	lt
 800c54a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c54e:	4133      	asrlt	r3, r6
 800c550:	18e4      	addlt	r4, r4, r3
 800c552:	ea24 0407 	bic.w	r4, r4, r7
 800c556:	2500      	movs	r5, #0
 800c558:	e7e1      	b.n	800c51e <floor+0x46>
 800c55a:	2e33      	cmp	r6, #51	; 0x33
 800c55c:	dd0b      	ble.n	800c576 <floor+0x9e>
 800c55e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c562:	d104      	bne.n	800c56e <floor+0x96>
 800c564:	ee10 2a10 	vmov	r2, s0
 800c568:	460b      	mov	r3, r1
 800c56a:	f7f3 fea7 	bl	80002bc <__adddf3>
 800c56e:	ec41 0b10 	vmov	d0, r0, r1
 800c572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c576:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800c57a:	f04f 37ff 	mov.w	r7, #4294967295
 800c57e:	40df      	lsrs	r7, r3
 800c580:	4238      	tst	r0, r7
 800c582:	d0f4      	beq.n	800c56e <floor+0x96>
 800c584:	a310      	add	r3, pc, #64	; (adr r3, 800c5c8 <floor+0xf0>)
 800c586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58a:	f7f3 fe97 	bl	80002bc <__adddf3>
 800c58e:	2200      	movs	r2, #0
 800c590:	2300      	movs	r3, #0
 800c592:	f7f4 fad9 	bl	8000b48 <__aeabi_dcmpgt>
 800c596:	2800      	cmp	r0, #0
 800c598:	d0c1      	beq.n	800c51e <floor+0x46>
 800c59a:	2c00      	cmp	r4, #0
 800c59c:	da0a      	bge.n	800c5b4 <floor+0xdc>
 800c59e:	2e14      	cmp	r6, #20
 800c5a0:	d101      	bne.n	800c5a6 <floor+0xce>
 800c5a2:	3401      	adds	r4, #1
 800c5a4:	e006      	b.n	800c5b4 <floor+0xdc>
 800c5a6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	40b3      	lsls	r3, r6
 800c5ae:	441d      	add	r5, r3
 800c5b0:	45a8      	cmp	r8, r5
 800c5b2:	d8f6      	bhi.n	800c5a2 <floor+0xca>
 800c5b4:	ea25 0507 	bic.w	r5, r5, r7
 800c5b8:	e7b1      	b.n	800c51e <floor+0x46>
 800c5ba:	2500      	movs	r5, #0
 800c5bc:	462c      	mov	r4, r5
 800c5be:	e7ae      	b.n	800c51e <floor+0x46>
 800c5c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c5c4:	e7ab      	b.n	800c51e <floor+0x46>
 800c5c6:	bf00      	nop
 800c5c8:	8800759c 	.word	0x8800759c
 800c5cc:	7e37e43c 	.word	0x7e37e43c
 800c5d0:	bff00000 	.word	0xbff00000
 800c5d4:	000fffff 	.word	0x000fffff

0800c5d8 <_init>:
 800c5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5da:	bf00      	nop
 800c5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5de:	bc08      	pop	{r3}
 800c5e0:	469e      	mov	lr, r3
 800c5e2:	4770      	bx	lr

0800c5e4 <_fini>:
 800c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e6:	bf00      	nop
 800c5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ea:	bc08      	pop	{r3}
 800c5ec:	469e      	mov	lr, r3
 800c5ee:	4770      	bx	lr
