
follower_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c940  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800cae0  0800cae0  0001cae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1e8  0800d1e8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1e8  0800d1e8  0001d1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1f0  0800d1f0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1f0  0800d1f0  0001d1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1f4  0800d1f4  0001d1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d1f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200001e8  0800d3e0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800d3e0  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7a5  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002265  00000000  00000000  0002ea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00030c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af2  00000000  00000000  00031a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c0b  00000000  00000000  00032572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001000d  00000000  00000000  0004a17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090b3e  00000000  00000000  0005a18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055d8  00000000  00000000  000eacc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000f02a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cac8 	.word	0x0800cac8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800cac8 	.word	0x0800cac8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <init_Robot>:



/// initial robot parameter

void init_Robot(Robot* robot){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    robot->x = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
    robot->y = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
    robot->theta = 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
    robot->omega = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
    robot->v = 0.05;//60rpm = 0.2041 50 = 0.17
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <init_Robot+0x7c>)
 800104c:	60da      	str	r2, [r3, #12]
//    robot->v = 0.0;//60rpm = 0.2041 50 = 0.17

    robot->v_r = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
    robot->v_l = 0;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
    robot->v_r_rpm = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
    robot->v_l_rpm = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
    robot->v_r_PWM = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
    robot->v_l_PWM = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
    robot->S_distance = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
    strcpy(robot->cmd,"STP");
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	331c      	adds	r3, #28
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <init_Robot+0x80>)
 800108c:	6810      	ldr	r0, [r2, #0]
 800108e:	6018      	str	r0, [r3, #0]

}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	3d4ccccd 	.word	0x3d4ccccd
 80010a0:	0800cae0 	.word	0x0800cae0
 80010a4:	00000000 	.word	0x00000000

080010a8 <update_Position>:
/// @brief calculat new posstion of Robot from encoder value
/// @param robot
/// @param encoder_Right_Value
/// @param encoder_Left_Value
void update_Position(Robot* robot, int encoder_difference_left, int encoder_difference_right,float delta_t){
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	ed2d 8b02 	vpush	{d8}
 80010b0:	b088      	sub	sp, #32
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	ed87 0a00 	vstr	s0, [r7]
		float D_r  = (float) pi*d*(encoder_difference_right)/N;
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fa48 	bl	8000554 <__aeabi_i2d>
 80010c4:	a378      	add	r3, pc, #480	; (adr r3, 80012a8 <update_Position+0x200>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff faad 	bl	8000628 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	a376      	add	r3, pc, #472	; (adr r3, 80012b0 <update_Position+0x208>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fbce 	bl	800087c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fd96 	bl	8000c18 <__aeabi_d2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	61fb      	str	r3, [r7, #28]
		float D_l = (float) pi*d*(encoder_difference_left)/N;
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	f7ff fa2f 	bl	8000554 <__aeabi_i2d>
 80010f6:	a36c      	add	r3, pc, #432	; (adr r3, 80012a8 <update_Position+0x200>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff fa94 	bl	8000628 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	a369      	add	r3, pc, #420	; (adr r3, 80012b0 <update_Position+0x208>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fbb5 	bl	800087c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd7d 	bl	8000c18 <__aeabi_d2f>
 800111e:	4603      	mov	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]
		float D_c = (D_r + D_l)/2;
 8001122:	ed97 7a07 	vldr	s14, [r7, #28]
 8001126:	edd7 7a06 	vldr	s15, [r7, #24]
 800112a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800112e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001136:	edc7 7a05 	vstr	s15, [r7, #20]

      robot->x += D_c*cos(robot->theta);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa1a 	bl	8000578 <__aeabi_f2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	4680      	mov	r8, r0
 8001150:	4689      	mov	r9, r1
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fa0e 	bl	8000578 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	ec43 2b10 	vmov	d0, r2, r3
 8001164:	f00a f8d4 	bl	800b310 <cos>
 8001168:	ec53 2b10 	vmov	r2, r3, d0
 800116c:	4640      	mov	r0, r8
 800116e:	4649      	mov	r1, r9
 8001170:	f7ff fa5a 	bl	8000628 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff f89e 	bl	80002bc <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fd46 	bl	8000c18 <__aeabi_d2f>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]
      robot->y += D_c*sin(robot->theta);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9ee 	bl	8000578 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	6978      	ldr	r0, [r7, #20]
 80011a2:	f7ff f9e9 	bl	8000578 <__aeabi_f2d>
 80011a6:	4680      	mov	r8, r0
 80011a8:	4689      	mov	r9, r1
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9e2 	bl	8000578 <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	ec43 2b10 	vmov	d0, r2, r3
 80011bc:	f00a f8fc 	bl	800b3b8 <sin>
 80011c0:	ec53 2b10 	vmov	r2, r3, d0
 80011c4:	4640      	mov	r0, r8
 80011c6:	4649      	mov	r1, r9
 80011c8:	f7ff fa2e 	bl	8000628 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4620      	mov	r0, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	f7ff f872 	bl	80002bc <__adddf3>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fd1a 	bl	8000c18 <__aeabi_d2f>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	605a      	str	r2, [r3, #4]
      robot->theta += (D_r -D_l)/(L);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9c2 	bl	8000578 <__aeabi_f2d>
 80011f4:	4604      	mov	r4, r0
 80011f6:	460d      	mov	r5, r1
 80011f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ee17 0a90 	vmov	r0, s15
 8001208:	f7ff f9b6 	bl	8000578 <__aeabi_f2d>
 800120c:	a32a      	add	r3, pc, #168	; (adr r3, 80012b8 <update_Position+0x210>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff fb33 	bl	800087c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7ff f84d 	bl	80002bc <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fcf5 	bl	8000c18 <__aeabi_d2f>
 800122e:	4602      	mov	r2, r0
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	609a      	str	r2, [r3, #8]
//      robot->v = 0.1*robot->omega;
//      robot->theta = robot->omega* delta_t;
      robot->theta = atan2(sin(robot->theta),cos(robot->theta)) ;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f99d 	bl	8000578 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	ec43 2b10 	vmov	d0, r2, r3
 8001246:	f00a f8b7 	bl	800b3b8 <sin>
 800124a:	eeb0 8a40 	vmov.f32	s16, s0
 800124e:	eef0 8a60 	vmov.f32	s17, s1
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f98e 	bl	8000578 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	ec43 2b10 	vmov	d0, r2, r3
 8001264:	f00a f854 	bl	800b310 <cos>
 8001268:	eeb0 7a40 	vmov.f32	s14, s0
 800126c:	eef0 7a60 	vmov.f32	s15, s1
 8001270:	eeb0 1a47 	vmov.f32	s2, s14
 8001274:	eef0 1a67 	vmov.f32	s3, s15
 8001278:	eeb0 0a48 	vmov.f32	s0, s16
 800127c:	eef0 0a68 	vmov.f32	s1, s17
 8001280:	f00a f816 	bl	800b2b0 <atan2>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fcc4 	bl	8000c18 <__aeabi_d2f>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	609a      	str	r2, [r3, #8]
//      if (robot->phi > 2 * pi) robot->phi -= 2 * pi;
//      else if (robot->phi < 0) robot->phi += 2 * pi;
}
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	ecbd 8b02 	vpop	{d8}
 80012a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012a4:	f3af 8000 	nop.w
 80012a8:	c7ae147b 	.word	0xc7ae147b
 80012ac:	3fca2324 	.word	0x3fca2324
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40901800 	.word	0x40901800
 80012b8:	70a3d70a 	.word	0x70a3d70a
 80012bc:	3fc70a3d 	.word	0x3fc70a3d

080012c0 <desired_point_init>:
 *  Created on: Mar 31, 2024
 *      Author: Nghia
 */
#include "decoding_frame.h"
#include "string.h"
void desired_point_init(desired_point* my_desired_point){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	my_desired_point->x_d = 0;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
	my_desired_point->y_d = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
	my_desired_point->phi_d = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
	strcpy(my_desired_point->cmd_d, "stp");
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <desired_point_init+0x34>)
 80012e4:	6810      	ldr	r0, [r2, #0]
 80012e6:	6018      	str	r0, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	0800cae4 	.word	0x0800cae4

080012f8 <split_frame>:
void split_frame(char *frame, desired_point* my_desired_point) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
    // Sử dụng sscanf để trích xuất giá trị từ chuỗi
    sscanf(frame, "!cmd:%[^#]#x:%f#y:%f#phi:%f#\n", my_desired_point->cmd_d, &my_desired_point->x_d, &my_desired_point->y_d, &my_desired_point->phi_d);
 8001302:	6839      	ldr	r1, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	1d18      	adds	r0, r3, #4
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	3308      	adds	r3, #8
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	320c      	adds	r2, #12
 8001310:	9201      	str	r2, [sp, #4]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4603      	mov	r3, r0
 8001316:	460a      	mov	r2, r1
 8001318:	4903      	ldr	r1, [pc, #12]	; (8001328 <split_frame+0x30>)
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f005 ff0a 	bl	8007134 <siscanf>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0800cae8 	.word	0x0800cae8

0800132c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart2.Instance){
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_UART_RxCpltCallback+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d122      	bne.n	8001386 <HAL_UART_RxCpltCallback+0x5a>
//		receive_data(Rx);
		if(Rx == '\n'){
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_UART_RxCpltCallback+0x68>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b0a      	cmp	r3, #10
 8001346:	d10e      	bne.n	8001366 <HAL_UART_RxCpltCallback+0x3a>
			uart_flag =1;
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_UART_RxCpltCallback+0x6c>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]
			uart_buff[uart_len++] = Rx;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_UART_RxCpltCallback+0x70>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	b2d1      	uxtb	r1, r2
 8001356:	4a11      	ldr	r2, [pc, #68]	; (800139c <HAL_UART_RxCpltCallback+0x70>)
 8001358:	7011      	strb	r1, [r2, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_UART_RxCpltCallback+0x68>)
 800135e:	7819      	ldrb	r1, [r3, #0]
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_UART_RxCpltCallback+0x74>)
 8001362:	5499      	strb	r1, [r3, r2]
 8001364:	e00a      	b.n	800137c <HAL_UART_RxCpltCallback+0x50>
		}

		else{
			uart_buff[uart_len++]= Rx;
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_UART_RxCpltCallback+0x70>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	b2d1      	uxtb	r1, r2
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <HAL_UART_RxCpltCallback+0x70>)
 8001370:	7011      	strb	r1, [r2, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_UART_RxCpltCallback+0x68>)
 8001376:	7819      	ldrb	r1, [r3, #0]
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_UART_RxCpltCallback+0x74>)
 800137a:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&huart2, &Rx, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	4905      	ldr	r1, [pc, #20]	; (8001394 <HAL_UART_RxCpltCallback+0x68>)
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <HAL_UART_RxCpltCallback+0x64>)
 8001382:	f003 ff15 	bl	80051b0 <HAL_UART_Receive_IT>
	}
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200003f4 	.word	0x200003f4
 8001394:	20000204 	.word	0x20000204
 8001398:	2000023c 	.word	0x2000023c
 800139c:	20000240 	.word	0x20000240
 80013a0:	20000208 	.word	0x20000208
 80013a4:	00000000 	.word	0x00000000

080013a8 <HAL_TIM_PeriodElapsedCallback>:
// todo timer interuppt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a60      	ldr	r2, [pc, #384]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	f040 80b3 	bne.w	8001522 <HAL_TIM_PeriodElapsedCallback+0x17a>
		//doc encoder
		if(count >= 0.1 ){
 80013bc:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f340 80a9 	ble.w	8001518 <HAL_TIM_PeriodElapsedCallback+0x170>

			encoder_value_left = -1*__HAL_TIM_GET_COUNTER(&htim2);
 80013c6:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	425b      	negs	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80013d2:	601a      	str	r2, [r3, #0]
			encoder_value_right =__HAL_TIM_GET_COUNTER(&htim5);
 80013d4:	4b5c      	ldr	r3, [pc, #368]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	461a      	mov	r2, r3
 80013dc:	4b5b      	ldr	r3, [pc, #364]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80013de:	601a      	str	r2, [r3, #0]
			encoder_difference_left = encoder_value_left - pre_encoder_value_left;
 80013e0:	4b58      	ldr	r3, [pc, #352]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b5a      	ldr	r3, [pc, #360]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	4a5a      	ldr	r2, [pc, #360]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80013ec:	6013      	str	r3, [r2, #0]
			encoder_difference_right = encoder_value_right - pre_encoder_value_right;
 80013ee:	4b57      	ldr	r3, [pc, #348]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b59      	ldr	r3, [pc, #356]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80013fa:	6013      	str	r3, [r2, #0]
			pre_encoder_value_right = encoder_value_right ;
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a55      	ldr	r2, [pc, #340]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001402:	6013      	str	r3, [r2, #0]
			pre_encoder_value_left = encoder_value_left ;
 8001404:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a51      	ldr	r2, [pc, #324]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800140a:	6013      	str	r3, [r2, #0]
//
			update_Position(&myRobot, encoder_difference_left, encoder_difference_right,0.1);
 800140c:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a52      	ldr	r2, [pc, #328]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001560 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8001418:	4619      	mov	r1, r3
 800141a:	4852      	ldr	r0, [pc, #328]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800141c:	f7ff fe44 	bl	80010a8 <update_Position>
//			update_Position_base_velocity(&myRobot, encoder_difference_left, encoder_difference_right,0.1);//delta time is 0.1
			//ennable PID calculation
			en_PID =1;
 8001420:	4b51      	ldr	r3, [pc, #324]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

			//end condition
			distance_to_goals =sqrt((myRobot.x-my_desired_point.x_d)*(myRobot.x - my_desired_point.x_d)+(myRobot.y - my_desired_point.y_d)*(myRobot.y-my_desired_point.y_d));
 8001426:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800142e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001432:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001438:	edd3 6a00 	vldr	s13, [r3]
 800143c:	4b4b      	ldr	r3, [pc, #300]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800143e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001442:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800144c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001452:	edd3 7a02 	vldr	s15, [r3, #8]
 8001456:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800145a:	4b42      	ldr	r3, [pc, #264]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800145c:	ed93 6a01 	vldr	s12, [r3, #4]
 8001460:	4b42      	ldr	r3, [pc, #264]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001462:	edd3 7a02 	vldr	s15, [r3, #8]
 8001466:	ee76 7a67 	vsub.f32	s15, s12, s15
 800146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001472:	ee17 0a90 	vmov	r0, s15
 8001476:	f7ff f87f 	bl	8000578 <__aeabi_f2d>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	ec43 2b10 	vmov	d0, r2, r3
 8001482:	f009 ff17 	bl	800b2b4 <sqrt>
 8001486:	ec53 2b10 	vmov	r2, r3, d0
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbc3 	bl	8000c18 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a36      	ldr	r2, [pc, #216]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001496:	6013      	str	r3, [r2, #0]
			//sprintf(data,"!distance:%.2f#\n",distance_to_goals);
			//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));()abs(myRobot.x - my_desired_point.x_d) < 0.01) &(abs(myRobot.y - my_desired_point.y_d) <0.01
			if((distance_to_goals < 0.03) ){
 8001498:	4b35      	ldr	r3, [pc, #212]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f86b 	bl	8000578 <__aeabi_f2d>
 80014a2:	a323      	add	r3, pc, #140	; (adr r3, 8001530 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff fb30 	bl	8000b0c <__aeabi_dcmplt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_TIM_PeriodElapsedCallback+0x11c>
				HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port,PE10_EN_DRIVER_Pin,RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b8:	482e      	ldr	r0, [pc, #184]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80014ba:	f002 f879 	bl	80035b0 <HAL_GPIO_WritePin>
				en_run = 0;
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
			//return PWM
//			sprintf(data,"!W_L_PWM:%.2f#W_R_PWM:%.2f#\n",myRobot.v_l_PWM,myRobot.v_r_PWM);
//			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));


			if(strcmp(myRobot.cmd,"RUN")== 0 ){
 80014c4:	492d      	ldr	r1, [pc, #180]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80014c6:	482e      	ldr	r0, [pc, #184]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80014c8:	f7fe fe8a 	bl	80001e0 <strcmp>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d11f      	bne.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x16a>
//				sprintf(data,"!cmd:%s#x:%.2f#y:%.2f#phi:%.2f#\n",myRobot.cmd,myRobot.x,myRobot.y,rad_to_degree(myRobot.theta));
//				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));


				//return PWM
				sprintf(data,"!W_L_PWM:%.2f#W_R_PWM:%.2f#\n",myRobot.v_l_PWM,myRobot.v_r_PWM);
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f84e 	bl	8000578 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f847 	bl	8000578 <__aeabi_f2d>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	e9cd 2300 	strd	r2, r3, [sp]
 80014f2:	4622      	mov	r2, r4
 80014f4:	462b      	mov	r3, r5
 80014f6:	4923      	ldr	r1, [pc, #140]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80014f8:	4823      	ldr	r0, [pc, #140]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80014fa:	f005 fdfb 	bl	80070f4 <siprintf>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
 80014fe:	4822      	ldr	r0, [pc, #136]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001500:	f7fe fece 	bl	80002a0 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	b29b      	uxth	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	491f      	ldr	r1, [pc, #124]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800150c:	481f      	ldr	r0, [pc, #124]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800150e:	f003 fe75 	bl	80051fc <HAL_UART_Transmit_DMA>
//			return x y phi; !cmd:RUN#x:0.00#y:0.00#phi:0.00#
//			sprintf(data,"!cmd:%s#x:%.2f#y:%.2f#phi:%.2f#\n",myRobot.cmd,myRobot.x,myRobot.y,rad_to_degree(myRobot.theta));
//			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));

			//reset count
			count=0;
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

		}
		count++;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001520:	6013      	str	r3, [r2, #0]
	}
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bdb0      	pop	{r4, r5, r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	eb851eb8 	.word	0xeb851eb8
 8001534:	3f9eb851 	.word	0x3f9eb851
 8001538:	40000400 	.word	0x40000400
 800153c:	200002c8 	.word	0x200002c8
 8001540:	2000031c 	.word	0x2000031c
 8001544:	20000244 	.word	0x20000244
 8001548:	200003ac 	.word	0x200003ac
 800154c:	20000248 	.word	0x20000248
 8001550:	2000024c 	.word	0x2000024c
 8001554:	20000254 	.word	0x20000254
 8001558:	20000250 	.word	0x20000250
 800155c:	20000258 	.word	0x20000258
 8001560:	3dcccccd 	.word	0x3dcccccd
 8001564:	2000049c 	.word	0x2000049c
 8001568:	200002c4 	.word	0x200002c4
 800156c:	200004f8 	.word	0x200004f8
 8001570:	200002d0 	.word	0x200002d0
 8001574:	40021000 	.word	0x40021000
 8001578:	200002c0 	.word	0x200002c0
 800157c:	0800cb08 	.word	0x0800cb08
 8001580:	200004b8 	.word	0x200004b8
 8001584:	0800cb0c 	.word	0x0800cb0c
 8001588:	2000025c 	.word	0x2000025c
 800158c:	200003f4 	.word	0x200003f4

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f001 f8de 	bl	8002754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 fa0e 	bl	80019b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f000 fc6e 	bl	8001e7c <MX_GPIO_Init>
  MX_DMA_Init();
 80015a0:	f000 fc4c 	bl	8001e3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015a4:	f000 fc20 	bl	8001de8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80015a8:	f000 fa64 	bl	8001a74 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015ac:	f000 fb26 	bl	8001bfc <MX_TIM2_Init>
  MX_TIM3_Init();
 80015b0:	f000 fb78 	bl	8001ca4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80015b4:	f000 fbc4 	bl	8001d40 <MX_TIM5_Init>


  /* USER CODE BEGIN 2 */
  //start  uart2 interupt
  // todo
  init_Robot(&myRobot);
 80015b8:	489c      	ldr	r0, [pc, #624]	; (800182c <main+0x29c>)
 80015ba:	f7ff fd31 	bl	8001020 <init_Robot>
  desired_point_init(&my_desired_point);
 80015be:	489c      	ldr	r0, [pc, #624]	; (8001830 <main+0x2a0>)
 80015c0:	f7ff fe7e 	bl	80012c0 <desired_point_init>
  HAL_UART_Receive_IT(&huart2, &Rx, 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	499b      	ldr	r1, [pc, #620]	; (8001834 <main+0x2a4>)
 80015c8:	489b      	ldr	r0, [pc, #620]	; (8001838 <main+0x2a8>)
 80015ca:	f003 fdf1 	bl	80051b0 <HAL_UART_Receive_IT>
  //ref KP KI KD
//  pid_set_Kp_Ki_Kd(&hpid,1.55, 0.055, 0.025,0.1);
  pid_set_Kp_Ki_Kd(&hpid, 5, 0.13, 0.025,0.1);
 80015ce:	eddf 1a9b 	vldr	s3, [pc, #620]	; 800183c <main+0x2ac>
 80015d2:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8001840 <main+0x2b0>
 80015d6:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8001844 <main+0x2b4>
 80015da:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80015de:	489a      	ldr	r0, [pc, #616]	; (8001848 <main+0x2b8>)
 80015e0:	f000 fcd2 	bl	8001f88 <pid_set_Kp_Ki_Kd>
  //start PWM TIM1; chanel 1,2 for left motor ; chanel 3,4 for right  motor
  //chanel 1 PE9 ;chanel 2 PE11; chanel 3 PE23 ; chanel 4 PE14;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015e4:	2100      	movs	r1, #0
 80015e6:	4899      	ldr	r0, [pc, #612]	; (800184c <main+0x2bc>)
 80015e8:	f002 fd60 	bl	80040ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015ec:	2104      	movs	r1, #4
 80015ee:	4897      	ldr	r0, [pc, #604]	; (800184c <main+0x2bc>)
 80015f0:	f002 fd5c 	bl	80040ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80015f4:	2108      	movs	r1, #8
 80015f6:	4895      	ldr	r0, [pc, #596]	; (800184c <main+0x2bc>)
 80015f8:	f002 fd58 	bl	80040ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80015fc:	210c      	movs	r1, #12
 80015fe:	4893      	ldr	r0, [pc, #588]	; (800184c <main+0x2bc>)
 8001600:	f002 fd54 	bl	80040ac <HAL_TIM_PWM_Start>
  //start encoder Mode
  // TIM2 For encoder of left motor , TIM5 for encoder of Right motor
  // TIM2:PA5,PB3 ; TIM5 PA0,PA1
//  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
//  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1|TIM_CHANNEL_2);
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8001604:	2104      	movs	r1, #4
 8001606:	4892      	ldr	r0, [pc, #584]	; (8001850 <main+0x2c0>)
 8001608:	f002 fea6 	bl	8004358 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 800160c:	2100      	movs	r1, #0
 800160e:	4891      	ldr	r0, [pc, #580]	; (8001854 <main+0x2c4>)
 8001610:	f002 fea2 	bl	8004358 <HAL_TIM_Encoder_Start>
  //start interrupt timer 3
  HAL_TIM_Base_Start_IT(&htim3);
 8001614:	4890      	ldr	r0, [pc, #576]	; (8001858 <main+0x2c8>)
 8001616:	f002 fc8d 	bl	8003f34 <HAL_TIM_Base_Start_IT>
//	  HAL_UART_Transmit(&huart2, tx_buff, sizeof(tx_buff),100);
//	  HAL_Delay(100);
// todo pid

	  // transmit data when stm32 recieved data form PC
	  if(uart_flag == 1){
 800161a:	4b90      	ldr	r3, [pc, #576]	; (800185c <main+0x2cc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d12a      	bne.n	8001678 <main+0xe8>
		  //decoding frame data;
		  split_frame((char*)uart_buff, &my_desired_point);
 8001622:	4983      	ldr	r1, [pc, #524]	; (8001830 <main+0x2a0>)
 8001624:	488e      	ldr	r0, [pc, #568]	; (8001860 <main+0x2d0>)
 8001626:	f7ff fe67 	bl	80012f8 <split_frame>

		  if(strcmp(my_desired_point.cmd_d, "RUN") == 0){
 800162a:	498e      	ldr	r1, [pc, #568]	; (8001864 <main+0x2d4>)
 800162c:	4880      	ldr	r0, [pc, #512]	; (8001830 <main+0x2a0>)
 800162e:	f7fe fdd7 	bl	80001e0 <strcmp>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10d      	bne.n	8001654 <main+0xc4>
			  strcpy(myRobot.cmd,my_desired_point.cmd_d);
 8001638:	497d      	ldr	r1, [pc, #500]	; (8001830 <main+0x2a0>)
 800163a:	488b      	ldr	r0, [pc, #556]	; (8001868 <main+0x2d8>)
 800163c:	f005 fe6b 	bl	8007316 <strcpy>
			  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port,PE10_EN_DRIVER_Pin,SET);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001646:	4889      	ldr	r0, [pc, #548]	; (800186c <main+0x2dc>)
 8001648:	f001 ffb2 	bl	80035b0 <HAL_GPIO_WritePin>
			  en_run = 1;
 800164c:	4b88      	ldr	r3, [pc, #544]	; (8001870 <main+0x2e0>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e008      	b.n	8001666 <main+0xd6>
		  }
		  else{
			  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port,PE10_EN_DRIVER_Pin,RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165a:	4884      	ldr	r0, [pc, #528]	; (800186c <main+0x2dc>)
 800165c:	f001 ffa8 	bl	80035b0 <HAL_GPIO_WritePin>
			  en_run = 0;
 8001660:	4b83      	ldr	r3, [pc, #524]	; (8001870 <main+0x2e0>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]


		  //send data to check desire point: !cmd:RUN#x:0.00#y:0.00#phi:0.00#
//		  sprintf(data,"!cmd_d:%s#x_d:%.2f#y_d:%.2f#phi_d:%.2f#\n",my_desired_point.cmd_d,my_desired_point.x_d,my_desired_point.y_d,my_desired_point.phi_d);
//		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
		  HAL_Delay(100);
 8001666:	2064      	movs	r0, #100	; 0x64
 8001668:	f001 f8e6 	bl	8002838 <HAL_Delay>
		  uart_len = 0;
 800166c:	4b81      	ldr	r3, [pc, #516]	; (8001874 <main+0x2e4>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
		  uart_flag =0;
 8001672:	4b7a      	ldr	r3, [pc, #488]	; (800185c <main+0x2cc>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
	  }
		 // PID and control motor
	  	  if(en_PID ==1){
 8001678:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <main+0x2e8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	f040 8125 	bne.w	80018cc <main+0x33c>
		  	  // cal phi desired (rad/s)
			  phid_pid = atan2((my_desired_point.y_d - myRobot.y),(my_desired_point.x_d - myRobot.x));
 8001682:	4b6b      	ldr	r3, [pc, #428]	; (8001830 <main+0x2a0>)
 8001684:	ed93 7a02 	vldr	s14, [r3, #8]
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <main+0x29c>)
 800168a:	edd3 7a01 	vldr	s15, [r3, #4]
 800168e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001692:	ee17 0a90 	vmov	r0, s15
 8001696:	f7fe ff6f 	bl	8000578 <__aeabi_f2d>
 800169a:	4604      	mov	r4, r0
 800169c:	460d      	mov	r5, r1
 800169e:	4b64      	ldr	r3, [pc, #400]	; (8001830 <main+0x2a0>)
 80016a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80016a4:	4b61      	ldr	r3, [pc, #388]	; (800182c <main+0x29c>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ae:	ee17 0a90 	vmov	r0, s15
 80016b2:	f7fe ff61 	bl	8000578 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	ec43 2b11 	vmov	d1, r2, r3
 80016be:	ec45 4b10 	vmov	d0, r4, r5
 80016c2:	f009 fdf5 	bl	800b2b0 <atan2>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff faa3 	bl	8000c18 <__aeabi_d2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a69      	ldr	r2, [pc, #420]	; (800187c <main+0x2ec>)
 80016d6:	6013      	str	r3, [r2, #0]
			  hpid.setpoint = phid_pid;
 80016d8:	4b68      	ldr	r3, [pc, #416]	; (800187c <main+0x2ec>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a5a      	ldr	r2, [pc, #360]	; (8001848 <main+0x2b8>)
 80016de:	6113      	str	r3, [r2, #16]
			  hpid.current = myRobot.theta;
 80016e0:	4b52      	ldr	r3, [pc, #328]	; (800182c <main+0x29c>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a58      	ldr	r2, [pc, #352]	; (8001848 <main+0x2b8>)
 80016e6:	6153      	str	r3, [r2, #20]
		  	  //calculate output PID
		  	  myRobot.omega = calculate_pid_output(&hpid);//rad/s
 80016e8:	4857      	ldr	r0, [pc, #348]	; (8001848 <main+0x2b8>)
 80016ea:	f000 fc6b 	bl	8001fc4 <calculate_pid_output>
 80016ee:	eef0 7a40 	vmov.f32	s15, s0
 80016f2:	4b4e      	ldr	r3, [pc, #312]	; (800182c <main+0x29c>)
 80016f4:	edc3 7a06 	vstr	s15, [r3, #24]

		  	  //calspeed : write a function in pid_module to call angular vel of 2 motor anf convert it to PWM signal
		  	  myRobot.v_r = cal_speed_right_motor(myRobot.omega, myRobot.v);// m/s
 80016f8:	4b4c      	ldr	r3, [pc, #304]	; (800182c <main+0x29c>)
 80016fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80016fe:	4b4b      	ldr	r3, [pc, #300]	; (800182c <main+0x29c>)
 8001700:	ed93 7a03 	vldr	s14, [r3, #12]
 8001704:	eef0 0a47 	vmov.f32	s1, s14
 8001708:	eeb0 0a67 	vmov.f32	s0, s15
 800170c:	f000 fce4 	bl	80020d8 <cal_speed_right_motor>
 8001710:	eef0 7a40 	vmov.f32	s15, s0
 8001714:	4b45      	ldr	r3, [pc, #276]	; (800182c <main+0x29c>)
 8001716:	edc3 7a05 	vstr	s15, [r3, #20]
		  	  myRobot.v_l = cal_speed_left_motor(myRobot.omega, myRobot.v);//m/s
 800171a:	4b44      	ldr	r3, [pc, #272]	; (800182c <main+0x29c>)
 800171c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <main+0x29c>)
 8001722:	ed93 7a03 	vldr	s14, [r3, #12]
 8001726:	eef0 0a47 	vmov.f32	s1, s14
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	f000 fc9b 	bl	8002068 <cal_speed_left_motor>
 8001732:	eef0 7a40 	vmov.f32	s15, s0
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <main+0x29c>)
 8001738:	edc3 7a04 	vstr	s15, [r3, #16]

		  	  //limint vr vl
		  	  if(abs(myRobot.v_r) > v_max){
 800173c:	4b3b      	ldr	r3, [pc, #236]	; (800182c <main+0x29c>)
 800173e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001746:	ee17 3a90 	vmov	r3, s15
 800174a:	2b00      	cmp	r3, #0
 800174c:	bfb8      	it	lt
 800174e:	425b      	neglt	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	dd0f      	ble.n	8001774 <main+0x1e4>
		  		  if(myRobot.v_r >= 0 )
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <main+0x29c>)
 8001756:	edd3 7a05 	vldr	s15, [r3, #20]
 800175a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	db03      	blt.n	800176c <main+0x1dc>
		  			  myRobot.v_r  = (float) v_max;
 8001764:	4b31      	ldr	r3, [pc, #196]	; (800182c <main+0x29c>)
 8001766:	4a46      	ldr	r2, [pc, #280]	; (8001880 <main+0x2f0>)
 8001768:	615a      	str	r2, [r3, #20]
 800176a:	e024      	b.n	80017b6 <main+0x226>
		  		  else
		  			  myRobot.v_r  = (float)-1* v_max;
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <main+0x29c>)
 800176e:	4a45      	ldr	r2, [pc, #276]	; (8001884 <main+0x2f4>)
 8001770:	615a      	str	r2, [r3, #20]
 8001772:	e020      	b.n	80017b6 <main+0x226>
		  	  }
		  	  else if(abs(myRobot.v_r) <v_min ){
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <main+0x29c>)
 8001776:	edd3 7a05 	vldr	s15, [r3, #20]
 800177a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800177e:	ee17 3a90 	vmov	r3, s15
 8001782:	2b00      	cmp	r3, #0
 8001784:	db17      	blt.n	80017b6 <main+0x226>
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <main+0x29c>)
 8001788:	edd3 7a05 	vldr	s15, [r3, #20]
 800178c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001790:	ee17 3a90 	vmov	r3, s15
 8001794:	2b00      	cmp	r3, #0
 8001796:	dc0e      	bgt.n	80017b6 <main+0x226>
		  		  if(myRobot.v_r >= 0 )
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <main+0x29c>)
 800179a:	edd3 7a05 	vldr	s15, [r3, #20]
 800179e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	db03      	blt.n	80017b0 <main+0x220>
		  			  myRobot.v_r  = (float)v_min;
 80017a8:	4b20      	ldr	r3, [pc, #128]	; (800182c <main+0x29c>)
 80017aa:	4a37      	ldr	r2, [pc, #220]	; (8001888 <main+0x2f8>)
 80017ac:	615a      	str	r2, [r3, #20]
 80017ae:	e002      	b.n	80017b6 <main+0x226>
		  		  else
		  			  myRobot.v_r = (float)-v_min ;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <main+0x29c>)
 80017b2:	4a36      	ldr	r2, [pc, #216]	; (800188c <main+0x2fc>)
 80017b4:	615a      	str	r2, [r3, #20]
		  	  }
		  	  if(abs(myRobot.v_l) > v_max){
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <main+0x29c>)
 80017b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80017bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c0:	ee17 3a90 	vmov	r3, s15
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bfb8      	it	lt
 80017c8:	425b      	neglt	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	dd0f      	ble.n	80017ee <main+0x25e>
		  		  if(myRobot.v_l > 0 )
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <main+0x29c>)
 80017d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80017d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	dd03      	ble.n	80017e6 <main+0x256>
		  			  myRobot.v_l  = (float)v_max;
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <main+0x29c>)
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <main+0x2f0>)
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	e057      	b.n	8001896 <main+0x306>
		  		  else
		  			  myRobot.v_l  = (float)-1* v_max;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <main+0x29c>)
 80017e8:	4a26      	ldr	r2, [pc, #152]	; (8001884 <main+0x2f4>)
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	e053      	b.n	8001896 <main+0x306>
		  	  }
		  	  else if(abs(myRobot.v_l) < v_min ){
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <main+0x29c>)
 80017f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80017f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f8:	ee17 3a90 	vmov	r3, s15
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db4a      	blt.n	8001896 <main+0x306>
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <main+0x29c>)
 8001802:	edd3 7a04 	vldr	s15, [r3, #16]
 8001806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800180a:	ee17 3a90 	vmov	r3, s15
 800180e:	2b00      	cmp	r3, #0
 8001810:	dc41      	bgt.n	8001896 <main+0x306>
		  		  if(myRobot.v_l > 0 )
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <main+0x29c>)
 8001814:	edd3 7a04 	vldr	s15, [r3, #16]
 8001818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	dd36      	ble.n	8001890 <main+0x300>
		  			  myRobot.v_l  =(float) v_min;
 8001822:	4b02      	ldr	r3, [pc, #8]	; (800182c <main+0x29c>)
 8001824:	4a18      	ldr	r2, [pc, #96]	; (8001888 <main+0x2f8>)
 8001826:	611a      	str	r2, [r3, #16]
 8001828:	e035      	b.n	8001896 <main+0x306>
 800182a:	bf00      	nop
 800182c:	2000049c 	.word	0x2000049c
 8001830:	200004f8 	.word	0x200004f8
 8001834:	20000204 	.word	0x20000204
 8001838:	200003f4 	.word	0x200003f4
 800183c:	3dcccccd 	.word	0x3dcccccd
 8001840:	3ccccccd 	.word	0x3ccccccd
 8001844:	3e051eb8 	.word	0x3e051eb8
 8001848:	200004d0 	.word	0x200004d0
 800184c:	200002d4 	.word	0x200002d4
 8001850:	2000031c 	.word	0x2000031c
 8001854:	200003ac 	.word	0x200003ac
 8001858:	20000364 	.word	0x20000364
 800185c:	2000023c 	.word	0x2000023c
 8001860:	20000208 	.word	0x20000208
 8001864:	0800cb08 	.word	0x0800cb08
 8001868:	200004b8 	.word	0x200004b8
 800186c:	40021000 	.word	0x40021000
 8001870:	200002c0 	.word	0x200002c0
 8001874:	20000240 	.word	0x20000240
 8001878:	200002c4 	.word	0x200002c4
 800187c:	200002cc 	.word	0x200002cc
 8001880:	3e4ccccd 	.word	0x3e4ccccd
 8001884:	be4ccccd 	.word	0xbe4ccccd
 8001888:	3df5c28f 	.word	0x3df5c28f
 800188c:	bdf5c28f 	.word	0xbdf5c28f
		  		  else
		  			  myRobot.v_l = (float)-v_min ;
 8001890:	4b42      	ldr	r3, [pc, #264]	; (800199c <main+0x40c>)
 8001892:	4a43      	ldr	r2, [pc, #268]	; (80019a0 <main+0x410>)
 8001894:	611a      	str	r2, [r3, #16]
		  	  }
		  	  // limit max min PWM for motor
		  	  myRobot.v_l_PWM = mps_to_PWM(myRobot.v_l);
 8001896:	4b41      	ldr	r3, [pc, #260]	; (800199c <main+0x40c>)
 8001898:	edd3 7a04 	vldr	s15, [r3, #16]
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	f000 fb46 	bl	8001f30 <mps_to_PWM>
 80018a4:	eef0 7a40 	vmov.f32	s15, s0
 80018a8:	4b3c      	ldr	r3, [pc, #240]	; (800199c <main+0x40c>)
 80018aa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		  	  myRobot.v_r_PWM = mps_to_PWM(myRobot.v_r );
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <main+0x40c>)
 80018b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	f000 fb3a 	bl	8001f30 <mps_to_PWM>
 80018bc:	eef0 7a40 	vmov.f32	s15, s0
 80018c0:	4b36      	ldr	r3, [pc, #216]	; (800199c <main+0x40c>)
 80018c2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	  		  en_PID =0;
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <main+0x414>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
	  	  }


		  // PWM cho 2 motor
		  if(en_run == 1){
 80018cc:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <main+0x418>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d14e      	bne.n	8001972 <main+0x3e2>
			  //left motor
			  // clockwise
			  if(myRobot.v_l_PWM > 0){
 80018d4:	4b31      	ldr	r3, [pc, #196]	; (800199c <main+0x40c>)
 80018d6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	dd0e      	ble.n	8001902 <main+0x372>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,(int)myRobot.v_l_PWM);//
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <main+0x40c>)
 80018e6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <main+0x41c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	ee17 2a90 	vmov	r2, s15
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80018f8:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <main+0x41c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001900:	e00f      	b.n	8001922 <main+0x392>
			  }
			  //counter Clokwise
			  else{
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);//
 8001902:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <main+0x41c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,(int)-myRobot.v_l_PWM);
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <main+0x40c>)
 800190c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001910:	eef1 7a67 	vneg.f32	s15, s15
 8001914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <main+0x41c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	ee17 2a90 	vmov	r2, s15
 8001920:	639a      	str	r2, [r3, #56]	; 0x38
			  }
			  //right motor
			  // clockwise
			  if(myRobot.v_r_PWM > 0){
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <main+0x40c>)
 8001924:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001928:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	dd0e      	ble.n	8001950 <main+0x3c0>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,(int)myRobot.v_r_PWM);//
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <main+0x40c>)
 8001934:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <main+0x41c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	ee17 2a90 	vmov	r2, s15
 8001944:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <main+0x41c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
 800194e:	e664      	b.n	800161a <main+0x8a>
			  }
			  //counter Clokwise
			  else{
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);//
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <main+0x41c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2200      	movs	r2, #0
 8001956:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,(int)-1*myRobot.v_r_PWM);
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <main+0x40c>)
 800195a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800195e:	eef1 7a67 	vneg.f32	s15, s15
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <main+0x41c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196a:	ee17 2a90 	vmov	r2, s15
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
 8001970:	e653      	b.n	800161a <main+0x8a>
//			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, abs(myRobot.v_r_PWM));//
//			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);

		  }
		  else{
			  strcpy(myRobot.cmd,"STP");
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <main+0x420>)
 8001974:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <main+0x424>)
 8001976:	601a      	str	r2, [r3, #0]
//			  myRobot.theta = 0.0;
//			  init_Robot(&myRobot);
			  //left motor
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);//
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <main+0x41c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2200      	movs	r2, #0
 800197e:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <main+0x41c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2200      	movs	r2, #0
 8001986:	639a      	str	r2, [r3, #56]	; 0x38
			  //right motor
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);//
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <main+0x41c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2200      	movs	r2, #0
 800198e:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <main+0x41c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2200      	movs	r2, #0
 8001996:	641a      	str	r2, [r3, #64]	; 0x40
	  if(uart_flag == 1){
 8001998:	e63f      	b.n	800161a <main+0x8a>
 800199a:	bf00      	nop
 800199c:	2000049c 	.word	0x2000049c
 80019a0:	bdf5c28f 	.word	0xbdf5c28f
 80019a4:	200002c4 	.word	0x200002c4
 80019a8:	200002c0 	.word	0x200002c0
 80019ac:	200002d4 	.word	0x200002d4
 80019b0:	200004b8 	.word	0x200004b8
 80019b4:	00505453 	.word	0x00505453

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b094      	sub	sp, #80	; 0x50
 80019bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019be:	f107 0320 	add.w	r3, r7, #32
 80019c2:	2230      	movs	r2, #48	; 0x30
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f005 fc25 	bl	8007216 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <SystemClock_Config+0xb4>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <SystemClock_Config+0xb4>)
 80019e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ea:	6413      	str	r3, [r2, #64]	; 0x40
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <SystemClock_Config+0xb4>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <SystemClock_Config+0xb8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <SystemClock_Config+0xb8>)
 8001a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <SystemClock_Config+0xb8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a14:	2302      	movs	r3, #2
 8001a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 fddb 	bl	80035e4 <HAL_RCC_OscConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a34:	f000 fa74 	bl	8001f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a38:	230f      	movs	r3, #15
 8001a3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 f83e 	bl	8003ad4 <HAL_RCC_ClockConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001a5e:	f000 fa5f 	bl	8001f20 <Error_Handler>
  }
}
 8001a62:	bf00      	nop
 8001a64:	3750      	adds	r7, #80	; 0x50
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40007000 	.word	0x40007000

08001a74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b096      	sub	sp, #88	; 0x58
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]
 8001aa2:	615a      	str	r2, [r3, #20]
 8001aa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f005 fbb2 	bl	8007216 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ab2:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001ab4:	4a50      	ldr	r2, [pc, #320]	; (8001bf8 <MX_TIM1_Init+0x184>)
 8001ab6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001ab8:	4b4e      	ldr	r3, [pc, #312]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001aba:	220f      	movs	r2, #15
 8001abc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001ac4:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001ac6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ad2:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad8:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ade:	4845      	ldr	r0, [pc, #276]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001ae0:	f002 f9d8 	bl	8003e94 <HAL_TIM_Base_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001aea:	f000 fa19 	bl	8001f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001af4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001af8:	4619      	mov	r1, r3
 8001afa:	483e      	ldr	r0, [pc, #248]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001afc:	f002 fe6c 	bl	80047d8 <HAL_TIM_ConfigClockSource>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b06:	f000 fa0b 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b0a:	483a      	ldr	r0, [pc, #232]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001b0c:	f002 fa74 	bl	8003ff8 <HAL_TIM_PWM_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b16:	f000 fa03 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b26:	4619      	mov	r1, r3
 8001b28:	4832      	ldr	r0, [pc, #200]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001b2a:	f003 fa1d 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b34:	f000 f9f4 	bl	8001f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b38:	2360      	movs	r3, #96	; 0x60
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4825      	ldr	r0, [pc, #148]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001b5e:	f002 fd79 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b68:	f000 f9da 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	2204      	movs	r2, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	481f      	ldr	r0, [pc, #124]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001b76:	f002 fd6d 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001b80:	f000 f9ce 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	2208      	movs	r2, #8
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4819      	ldr	r0, [pc, #100]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001b8e:	f002 fd61 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001b98:	f000 f9c2 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001ba6:	f002 fd55 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001bb0:	f000 f9b6 	bl	8001f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4807      	ldr	r0, [pc, #28]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001bd8:	f003 fa34 	bl	8005044 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001be2:	f000 f99d 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001be6:	4803      	ldr	r0, [pc, #12]	; (8001bf4 <MX_TIM1_Init+0x180>)
 8001be8:	f000 fbae 	bl	8002348 <HAL_TIM_MspPostInit>

}
 8001bec:	bf00      	nop
 8001bee:	3758      	adds	r7, #88	; 0x58
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200002d4 	.word	0x200002d4
 8001bf8:	40010000 	.word	0x40010000

08001bfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	; 0x30
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	2224      	movs	r2, #36	; 0x24
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 fb03 	bl	8007216 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <MX_TIM2_Init+0xa4>)
 8001c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <MX_TIM2_Init+0xa4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <MX_TIM2_Init+0xa4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <MX_TIM2_Init+0xa4>)
 8001c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <MX_TIM2_Init+0xa4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <MX_TIM2_Init+0xa4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <MX_TIM2_Init+0xa4>)
 8001c6c:	f002 face 	bl	800420c <HAL_TIM_Encoder_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c76:	f000 f953 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <MX_TIM2_Init+0xa4>)
 8001c88:	f003 f96e 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c92:	f000 f945 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	3730      	adds	r7, #48	; 0x30
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000031c 	.word	0x2000031c

08001ca4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	463b      	mov	r3, r7
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <MX_TIM3_Init+0x94>)
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <MX_TIM3_Init+0x98>)
 8001cc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <MX_TIM3_Init+0x94>)
 8001cc8:	229f      	movs	r2, #159	; 0x9f
 8001cca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <MX_TIM3_Init+0x94>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <MX_TIM3_Init+0x94>)
 8001cd4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <MX_TIM3_Init+0x94>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_TIM3_Init+0x94>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ce6:	4814      	ldr	r0, [pc, #80]	; (8001d38 <MX_TIM3_Init+0x94>)
 8001ce8:	f002 f8d4 	bl	8003e94 <HAL_TIM_Base_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001cf2:	f000 f915 	bl	8001f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	4619      	mov	r1, r3
 8001d02:	480d      	ldr	r0, [pc, #52]	; (8001d38 <MX_TIM3_Init+0x94>)
 8001d04:	f002 fd68 	bl	80047d8 <HAL_TIM_ConfigClockSource>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d0e:	f000 f907 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <MX_TIM3_Init+0x94>)
 8001d20:	f003 f922 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d2a:	f000 f8f9 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000364 	.word	0x20000364
 8001d3c:	40000400 	.word	0x40000400

08001d40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	; 0x30
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2224      	movs	r2, #36	; 0x24
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f005 fa61 	bl	8007216 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <MX_TIM5_Init+0xa0>)
 8001d5e:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <MX_TIM5_Init+0xa4>)
 8001d60:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_TIM5_Init+0xa0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_TIM5_Init+0xa0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <MX_TIM5_Init+0xa0>)
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_TIM5_Init+0xa0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <MX_TIM5_Init+0xa0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	4619      	mov	r1, r3
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <MX_TIM5_Init+0xa0>)
 8001dae:	f002 fa2d 	bl	800420c <HAL_TIM_Encoder_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001db8:	f000 f8b2 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_TIM5_Init+0xa0>)
 8001dca:	f003 f8cd 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001dd4:	f000 f8a4 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3730      	adds	r7, #48	; 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200003ac 	.word	0x200003ac
 8001de4:	40000c00 	.word	0x40000c00

08001de8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <MX_USART2_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e20:	f003 f976 	bl	8005110 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f000 f879 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200003f4 	.word	0x200003f4
 8001e38:	40004400 	.word	0x40004400

08001e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_DMA_Init+0x3c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <MX_DMA_Init+0x3c>)
 8001e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_DMA_Init+0x3c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2011      	movs	r0, #17
 8001e64:	f000 fde7 	bl	8002a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001e68:	2011      	movs	r0, #17
 8001e6a:	f000 fe00 	bl	8002a6e <HAL_NVIC_EnableIRQ>

}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <MX_GPIO_Init+0x9c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <MX_GPIO_Init+0x9c>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_GPIO_Init+0x9c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_GPIO_Init+0x9c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <MX_GPIO_Init+0x9c>)
 8001eb8:	f043 0310 	orr.w	r3, r3, #16
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_GPIO_Init+0x9c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_GPIO_Init+0x9c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a11      	ldr	r2, [pc, #68]	; (8001f18 <MX_GPIO_Init+0x9c>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_GPIO_Init+0x9c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port, PE10_EN_DRIVER_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eec:	480b      	ldr	r0, [pc, #44]	; (8001f1c <MX_GPIO_Init+0xa0>)
 8001eee:	f001 fb5f 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10_EN_DRIVER_Pin */
  GPIO_InitStruct.Pin = PE10_EN_DRIVER_Pin;
 8001ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PE10_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4804      	ldr	r0, [pc, #16]	; (8001f1c <MX_GPIO_Init+0xa0>)
 8001f0c:	f001 f9cc 	bl	80032a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40021000 	.word	0x40021000

08001f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f24:	b672      	cpsid	i
}
 8001f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <Error_Handler+0x8>
 8001f2a:	0000      	movs	r0, r0
 8001f2c:	0000      	movs	r0, r0
	...

08001f30 <mps_to_PWM>:
	return (float)rpm*pi*d/60;
}
float rpm_to_pwm(float rpm){
	return (float)rpm*1000/80.167;
}
float mps_to_PWM(float mps){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	ed87 0a01 	vstr	s0, [r7, #4]
	return (float) mps*(60/(3.14*d))*(1000/80.167);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fb1c 	bl	8000578 <__aeabi_f2d>
 8001f40:	a30d      	add	r3, pc, #52	; (adr r3, 8001f78 <mps_to_PWM+0x48>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe fb6f 	bl	8000628 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	a30b      	add	r3, pc, #44	; (adr r3, 8001f80 <mps_to_PWM+0x50>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fb66 	bl	8000628 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fe58 	bl	8000c18 <__aeabi_d2f>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	ee07 3a90 	vmov	s15, r3
}
 8001f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	a12d0766 	.word	0xa12d0766
 8001f7c:	40725f93 	.word	0x40725f93
 8001f80:	f6f74f9a 	.word	0xf6f74f9a
 8001f84:	4028f2aa 	.word	0x4028f2aa

08001f88 <pid_set_Kp_Ki_Kd>:

// initial pid
void pid_set_Kp_Ki_Kd(PID_handleTypedef* hpid,float Kp,float Ki,float Kd, float delta_t){
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6178      	str	r0, [r7, #20]
 8001f90:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f94:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f98:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f9c:	edc7 1a01 	vstr	s3, [r7, #4]
    hpid->Kp = Kp;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	601a      	str	r2, [r3, #0]
    hpid->Ki = Ki;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
    hpid->Kd = Kd;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	609a      	str	r2, [r3, #8]
    hpid->delta_t = delta_t;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	60da      	str	r2, [r3, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <calculate_pid_output>:

float calculate_pid_output(PID_handleTypedef* hpid){
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    hpid->error = (hpid->setpoint -hpid->current);//rad
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	edc3 7a06 	vstr	s15, [r3, #24]
    hpid->integral += hpid->error;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	ed93 7a08 	vldr	s14, [r3, #32]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	edc3 7a08 	vstr	s15, [r3, #32]
    hpid->derivative = hpid->error - hpid->pre_error;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	edd3 7a07 	vldr	s15, [r3, #28]
 8002004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    float output_pid = (hpid->Kp*hpid->error) + (hpid->Ki*hpid->integral)+ (hpid->Kd*hpid->derivative);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	ed93 7a00 	vldr	s14, [r3]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	edd3 7a06 	vldr	s15, [r3, #24]
 800201a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	edd3 6a01 	vldr	s13, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	edd3 7a08 	vldr	s15, [r3, #32]
 800202a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	edd3 6a02 	vldr	s13, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800203e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002046:	edc7 7a03 	vstr	s15, [r7, #12]
    hpid->pre_error = hpid->error;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	61da      	str	r2, [r3, #28]
//    return degree_to_rad(ouput_pid);//rad/s
    return output_pid;//0.8
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	ee07 3a90 	vmov	s15, r3
}
 8002058:	eeb0 0a67 	vmov.f32	s0, s15
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <cal_speed_left_motor>:

float cal_speed_left_motor(float pid_output,float v_speed){
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002072:	edc7 0a00 	vstr	s1, [r7]
	return (float)(2*v_speed - pid_output*L)/(2) ;
 8002076:	edd7 7a00 	vldr	s15, [r7]
 800207a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800207e:	ee17 0a90 	vmov	r0, s15
 8002082:	f7fe fa79 	bl	8000578 <__aeabi_f2d>
 8002086:	4604      	mov	r4, r0
 8002088:	460d      	mov	r5, r1
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fa74 	bl	8000578 <__aeabi_f2d>
 8002090:	a30f      	add	r3, pc, #60	; (adr r3, 80020d0 <cal_speed_left_motor+0x68>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe fac7 	bl	8000628 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4620      	mov	r0, r4
 80020a0:	4629      	mov	r1, r5
 80020a2:	f7fe f909 	bl	80002b8 <__aeabi_dsub>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fdb3 	bl	8000c18 <__aeabi_d2f>
 80020b2:	ee06 0a90 	vmov	s13, r0
 80020b6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80020ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020be:	eef0 7a47 	vmov.f32	s15, s14
}
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bdb0      	pop	{r4, r5, r7, pc}
 80020cc:	f3af 8000 	nop.w
 80020d0:	70a3d70a 	.word	0x70a3d70a
 80020d4:	3fc70a3d 	.word	0x3fc70a3d

080020d8 <cal_speed_right_motor>:
float cal_speed_right_motor(float pid_output,float v_speed){
 80020d8:	b5b0      	push	{r4, r5, r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	ed87 0a01 	vstr	s0, [r7, #4]
 80020e2:	edc7 0a00 	vstr	s1, [r7]
	return (float)(2*v_speed + pid_output*L)/(2) ;
 80020e6:	edd7 7a00 	vldr	s15, [r7]
 80020ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ee:	ee17 0a90 	vmov	r0, s15
 80020f2:	f7fe fa41 	bl	8000578 <__aeabi_f2d>
 80020f6:	4604      	mov	r4, r0
 80020f8:	460d      	mov	r5, r1
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fa3c 	bl	8000578 <__aeabi_f2d>
 8002100:	a30f      	add	r3, pc, #60	; (adr r3, 8002140 <cal_speed_right_motor+0x68>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe fa8f 	bl	8000628 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4620      	mov	r0, r4
 8002110:	4629      	mov	r1, r5
 8002112:	f7fe f8d3 	bl	80002bc <__adddf3>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f7fe fd7b 	bl	8000c18 <__aeabi_d2f>
 8002122:	ee06 0a90 	vmov	s13, r0
 8002126:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800212a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212e:	eef0 7a47 	vmov.f32	s15, s14
}
 8002132:	eeb0 0a67 	vmov.f32	s0, s15
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bdb0      	pop	{r4, r5, r7, pc}
 800213c:	f3af 8000 	nop.w
 8002140:	70a3d70a 	.word	0x70a3d70a
 8002144:	3fc70a3d 	.word	0x3fc70a3d

08002148 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_MspInit+0x4c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_MspInit+0x4c>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_MspInit+0x4c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_MspInit+0x4c>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_TIM_Base_MspInit+0x70>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10e      	bne.n	80021c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_TIM_Base_MspInit+0x74>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_TIM_Base_MspInit+0x74>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_TIM_Base_MspInit+0x74>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021c6:	e01a      	b.n	80021fe <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_TIM_Base_MspInit+0x78>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d115      	bne.n	80021fe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_TIM_Base_MspInit+0x74>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a0c      	ldr	r2, [pc, #48]	; (800220c <HAL_TIM_Base_MspInit+0x74>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_TIM_Base_MspInit+0x74>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2101      	movs	r1, #1
 80021f2:	201d      	movs	r0, #29
 80021f4:	f000 fc1f 	bl	8002a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021f8:	201d      	movs	r0, #29
 80021fa:	f000 fc38 	bl	8002a6e <HAL_NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40010000 	.word	0x40010000
 800220c:	40023800 	.word	0x40023800
 8002210:	40000400 	.word	0x40000400

08002214 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d14a      	bne.n	80022cc <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a3e      	ldr	r2, [pc, #248]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a37      	ldr	r2, [pc, #220]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b35      	ldr	r3, [pc, #212]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a30      	ldr	r2, [pc, #192]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800228a:	2320      	movs	r3, #32
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800229a:	2301      	movs	r3, #1
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4825      	ldr	r0, [pc, #148]	; (800233c <HAL_TIM_Encoder_MspInit+0x128>)
 80022a6:	f000 ffff 	bl	80032a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022aa:	2308      	movs	r3, #8
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022ba:	2301      	movs	r3, #1
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	481e      	ldr	r0, [pc, #120]	; (8002340 <HAL_TIM_Encoder_MspInit+0x12c>)
 80022c6:	f000 ffef 	bl	80032a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022ca:	e030      	b.n	800232e <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_TIM_Encoder_MspInit+0x130>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d12b      	bne.n	800232e <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 80022e0:	f043 0308 	orr.w	r3, r3, #8
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_TIM_Encoder_MspInit+0x124>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800230e:	2303      	movs	r3, #3
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800231e:	2302      	movs	r3, #2
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	4619      	mov	r1, r3
 8002328:	4804      	ldr	r0, [pc, #16]	; (800233c <HAL_TIM_Encoder_MspInit+0x128>)
 800232a:	f000 ffbd 	bl	80032a8 <HAL_GPIO_Init>
}
 800232e:	bf00      	nop
 8002330:	3730      	adds	r7, #48	; 0x30
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000
 8002340:	40020400 	.word	0x40020400
 8002344:	40000c00 	.word	0x40000c00

08002348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <HAL_TIM_MspPostInit+0x68>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11e      	bne.n	80023a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 8002374:	f043 0310 	orr.w	r3, r3, #16
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002386:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800238a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002398:	2301      	movs	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	4619      	mov	r1, r3
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <HAL_TIM_MspPostInit+0x70>)
 80023a4:	f000 ff80 	bl	80032a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023a8:	bf00      	nop
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40010000 	.word	0x40010000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40021000 	.word	0x40021000

080023bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a34      	ldr	r2, [pc, #208]	; (80024ac <HAL_UART_MspInit+0xf0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d161      	bne.n	80024a2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_UART_MspInit+0xf4>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a32      	ldr	r2, [pc, #200]	; (80024b0 <HAL_UART_MspInit+0xf4>)
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_UART_MspInit+0xf4>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_UART_MspInit+0xf4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a2b      	ldr	r2, [pc, #172]	; (80024b0 <HAL_UART_MspInit+0xf4>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_UART_MspInit+0xf4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002416:	230c      	movs	r3, #12
 8002418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002422:	2303      	movs	r3, #3
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002426:	2307      	movs	r3, #7
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4820      	ldr	r0, [pc, #128]	; (80024b4 <HAL_UART_MspInit+0xf8>)
 8002432:	f000 ff39 	bl	80032a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002438:	4a20      	ldr	r2, [pc, #128]	; (80024bc <HAL_UART_MspInit+0x100>)
 800243a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 800243e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002442:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002444:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002446:	2240      	movs	r2, #64	; 0x40
 8002448:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 800244c:	2200      	movs	r2, #0
 800244e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002456:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 800245a:	2200      	movs	r2, #0
 800245c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002472:	2200      	movs	r2, #0
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002476:	4810      	ldr	r0, [pc, #64]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 8002478:	f000 fb14 	bl	8002aa4 <HAL_DMA_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002482:	f7ff fd4d 	bl	8001f20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_UART_MspInit+0xfc>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2026      	movs	r0, #38	; 0x26
 8002498:	f000 facd 	bl	8002a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800249c:	2026      	movs	r0, #38	; 0x26
 800249e:	f000 fae6 	bl	8002a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024a2:	bf00      	nop
 80024a4:	3728      	adds	r7, #40	; 0x28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40004400 	.word	0x40004400
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	2000043c 	.word	0x2000043c
 80024bc:	400260a0 	.word	0x400260a0

080024c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024c4:	e7fe      	b.n	80024c4 <NMI_Handler+0x4>

080024c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <HardFault_Handler+0x4>

080024cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <MemManage_Handler+0x4>

080024d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <BusFault_Handler+0x4>

080024d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <UsageFault_Handler+0x4>

080024de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250c:	f000 f974 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}

08002514 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <DMA1_Stream6_IRQHandler+0x10>)
 800251a:	f000 fc5b 	bl	8002dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000043c 	.word	0x2000043c

08002528 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <TIM3_IRQHandler+0x10>)
 800252e:	f001 ffa1 	bl	8004474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000364 	.word	0x20000364

0800253c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <USART2_IRQHandler+0x10>)
 8002542:	f002 fecb 	bl	80052dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200003f4 	.word	0x200003f4

08002550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return 1;
 8002554:	2301      	movs	r3, #1
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_kill>:

int _kill(int pid, int sig)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800256a:	f004 fea7 	bl	80072bc <__errno>
 800256e:	4603      	mov	r3, r0
 8002570:	2216      	movs	r2, #22
 8002572:	601a      	str	r2, [r3, #0]
  return -1;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_exit>:

void _exit (int status)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ffe7 	bl	8002560 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002592:	e7fe      	b.n	8002592 <_exit+0x12>

08002594 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e00a      	b.n	80025bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025a6:	f3af 8000 	nop.w
 80025aa:	4601      	mov	r1, r0
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	60ba      	str	r2, [r7, #8]
 80025b2:	b2ca      	uxtb	r2, r1
 80025b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	dbf0      	blt.n	80025a6 <_read+0x12>
  }

  return len;
 80025c4:	687b      	ldr	r3, [r7, #4]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e009      	b.n	80025f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	60ba      	str	r2, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	dbf1      	blt.n	80025e0 <_write+0x12>
  }
  return len;
 80025fc:	687b      	ldr	r3, [r7, #4]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_close>:

int _close(int file)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800262e:	605a      	str	r2, [r3, #4]
  return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <_isatty>:

int _isatty(int file)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f004 fe0c 	bl	80072bc <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20020000 	.word	0x20020000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	20000508 	.word	0x20000508
 80026d8:	20000660 	.word	0x20000660

080026dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <SystemInit+0x20>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <SystemInit+0x20>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002738 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002704:	f7ff ffea 	bl	80026dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002708:	480c      	ldr	r0, [pc, #48]	; (800273c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800270a:	490d      	ldr	r1, [pc, #52]	; (8002740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002720:	4c0a      	ldr	r4, [pc, #40]	; (800274c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800272e:	f004 fdcb 	bl	80072c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002732:	f7fe ff2d 	bl	8001590 <main>
  bx  lr    
 8002736:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800273c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002740:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002744:	0800d1f8 	.word	0x0800d1f8
  ldr r2, =_sbss
 8002748:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800274c:	2000065c 	.word	0x2000065c

08002750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002750:	e7fe      	b.n	8002750 <ADC_IRQHandler>
	...

08002754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_Init+0x40>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <HAL_Init+0x40>)
 800275e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_Init+0x40>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_Init+0x40>)
 800276a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800276e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_Init+0x40>)
 8002776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f000 f94f 	bl	8002a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002782:	200f      	movs	r0, #15
 8002784:	f000 f808 	bl	8002798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002788:	f7ff fcde 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023c00 	.word	0x40023c00

08002798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_InitTick+0x54>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_InitTick+0x58>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f967 	bl	8002a8a <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00e      	b.n	80027e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d80a      	bhi.n	80027e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f000 f92f 	bl	8002a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <HAL_InitTick+0x5c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20000008 	.word	0x20000008
 80027f4:	20000004 	.word	0x20000004

080027f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x20>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_IncTick+0x24>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_IncTick+0x24>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000008 	.word	0x20000008
 800281c:	2000050c 	.word	0x2000050c

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	2000050c 	.word	0x2000050c

08002838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff ffee 	bl	8002820 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d005      	beq.n	800285e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_Delay+0x44>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800285e:	bf00      	nop
 8002860:	f7ff ffde 	bl	8002820 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d8f7      	bhi.n	8002860 <HAL_Delay+0x28>
  {
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000008 	.word	0x20000008

08002880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800289c:	4013      	ands	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	f003 0307 	and.w	r3, r3, #7
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	db0b      	blt.n	800290e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	f003 021f 	and.w	r2, r3, #31
 80028fc:	4907      	ldr	r1, [pc, #28]	; (800291c <__NVIC_EnableIRQ+0x38>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2001      	movs	r0, #1
 8002906:	fa00 f202 	lsl.w	r2, r0, r2
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000e100 	.word	0xe000e100

08002920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	2b00      	cmp	r3, #0
 8002932:	db0a      	blt.n	800294a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	490c      	ldr	r1, [pc, #48]	; (800296c <__NVIC_SetPriority+0x4c>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	440b      	add	r3, r1
 8002944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002948:	e00a      	b.n	8002960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4908      	ldr	r1, [pc, #32]	; (8002970 <__NVIC_SetPriority+0x50>)
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	3b04      	subs	r3, #4
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	440b      	add	r3, r1
 800295e:	761a      	strb	r2, [r3, #24]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000e100 	.word	0xe000e100
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f1c3 0307 	rsb	r3, r3, #7
 800298e:	2b04      	cmp	r3, #4
 8002990:	bf28      	it	cs
 8002992:	2304      	movcs	r3, #4
 8002994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3304      	adds	r3, #4
 800299a:	2b06      	cmp	r3, #6
 800299c:	d902      	bls.n	80029a4 <NVIC_EncodePriority+0x30>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3b03      	subs	r3, #3
 80029a2:	e000      	b.n	80029a6 <NVIC_EncodePriority+0x32>
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	401a      	ands	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029bc:	f04f 31ff 	mov.w	r1, #4294967295
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43d9      	mvns	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	4313      	orrs	r3, r2
         );
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3724      	adds	r7, #36	; 0x24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ec:	d301      	bcc.n	80029f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00f      	b.n	8002a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <SysTick_Config+0x40>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fa:	210f      	movs	r1, #15
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	f7ff ff8e 	bl	8002920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <SysTick_Config+0x40>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a0a:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <SysTick_Config+0x40>)
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	e000e010 	.word	0xe000e010

08002a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff29 	bl	8002880 <__NVIC_SetPriorityGrouping>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a48:	f7ff ff3e 	bl	80028c8 <__NVIC_GetPriorityGrouping>
 8002a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f7ff ff8e 	bl	8002974 <NVIC_EncodePriority>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff5d 	bl	8002920 <__NVIC_SetPriority>
}
 8002a66:	bf00      	nop
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff31 	bl	80028e4 <__NVIC_EnableIRQ>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ffa2 	bl	80029dc <SysTick_Config>
 8002a98:	4603      	mov	r3, r0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff feb6 	bl	8002820 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e099      	b.n	8002bf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae0:	e00f      	b.n	8002b02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ae2:	f7ff fe9d 	bl	8002820 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d908      	bls.n	8002b02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2203      	movs	r2, #3
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e078      	b.n	8002bf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e8      	bne.n	8002ae2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <HAL_DMA_Init+0x158>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d107      	bne.n	8002b6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	4313      	orrs	r3, r2
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0307 	bic.w	r3, r3, #7
 8002b82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d117      	bne.n	8002bc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fb01 	bl	80031b0 <DMA_CheckFifoParam>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2240      	movs	r2, #64	; 0x40
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e016      	b.n	8002bf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fab8 	bl	8003144 <DMA_CalcBaseAndBitshift>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	223f      	movs	r2, #63	; 0x3f
 8002bde:	409a      	lsls	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	f010803f 	.word	0xf010803f

08002c00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_DMA_Start_IT+0x26>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e040      	b.n	8002ca8 <HAL_DMA_Start_IT+0xa8>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d12f      	bne.n	8002c9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fa4a 	bl	80030e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c58:	223f      	movs	r2, #63	; 0x3f
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0216 	orr.w	r2, r2, #22
 8002c6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0208 	orr.w	r2, r2, #8
 8002c86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e005      	b.n	8002ca6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cbe:	f7ff fdaf 	bl	8002820 <HAL_GetTick>
 8002cc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d008      	beq.n	8002ce2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2280      	movs	r2, #128	; 0x80
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e052      	b.n	8002d88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0216 	bic.w	r2, r2, #22
 8002cf0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <HAL_DMA_Abort+0x62>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0208 	bic.w	r2, r2, #8
 8002d20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d32:	e013      	b.n	8002d5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d34:	f7ff fd74 	bl	8002820 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d90c      	bls.n	8002d5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e015      	b.n	8002d88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e4      	bne.n	8002d34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	223f      	movs	r2, #63	; 0x3f
 8002d70:	409a      	lsls	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d004      	beq.n	8002dae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00c      	b.n	8002dc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2205      	movs	r2, #5
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002de0:	4b8e      	ldr	r3, [pc, #568]	; (800301c <HAL_DMA_IRQHandler+0x248>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a8e      	ldr	r2, [pc, #568]	; (8003020 <HAL_DMA_IRQHandler+0x24c>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0a9b      	lsrs	r3, r3, #10
 8002dec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfe:	2208      	movs	r2, #8
 8002e00:	409a      	lsls	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01a      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0204 	bic.w	r2, r2, #4
 8002e26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	2201      	movs	r2, #1
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d012      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	2201      	movs	r2, #1
 8002e64:	409a      	lsls	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d012      	beq.n	8002eac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00b      	beq.n	8002eac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	2204      	movs	r2, #4
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f043 0204 	orr.w	r2, r3, #4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d043      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03c      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	2210      	movs	r2, #16
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d018      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d108      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d024      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
 8002f02:	e01f      	b.n	8002f44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01b      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
 8002f14:	e016      	b.n	8002f44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d107      	bne.n	8002f34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0208 	bic.w	r2, r2, #8
 8002f32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	2220      	movs	r2, #32
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 808f 	beq.w	8003074 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8087 	beq.w	8003074 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d136      	bne.n	8002fec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0216 	bic.w	r2, r2, #22
 8002f8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <HAL_DMA_IRQHandler+0x1da>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0208 	bic.w	r2, r2, #8
 8002fbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	223f      	movs	r2, #63	; 0x3f
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d07e      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
        }
        return;
 8002fea:	e079      	b.n	80030e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01d      	beq.n	8003036 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10d      	bne.n	8003024 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	2b00      	cmp	r3, #0
 800300e:	d031      	beq.n	8003074 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
 8003018:	e02c      	b.n	8003074 <HAL_DMA_IRQHandler+0x2a0>
 800301a:	bf00      	nop
 800301c:	20000000 	.word	0x20000000
 8003020:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d023      	beq.n	8003074 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
 8003034:	e01e      	b.n	8003074 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10f      	bne.n	8003064 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0210 	bic.w	r2, r2, #16
 8003052:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	2b00      	cmp	r3, #0
 800307a:	d032      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d022      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2205      	movs	r2, #5
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d307      	bcc.n	80030bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f2      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x2cc>
 80030ba:	e000      	b.n	80030be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
 80030de:	e000      	b.n	80030e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030e0:	bf00      	nop
    }
  }
}
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003104:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d108      	bne.n	8003128 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003126:	e007      	b.n	8003138 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	60da      	str	r2, [r3, #12]
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	3b10      	subs	r3, #16
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800315e:	4a13      	ldr	r2, [pc, #76]	; (80031ac <DMA_CalcBaseAndBitshift+0x68>)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d909      	bls.n	8003186 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	1d1a      	adds	r2, r3, #4
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	659a      	str	r2, [r3, #88]	; 0x58
 8003184:	e007      	b.n	8003196 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	aaaaaaab 	.word	0xaaaaaaab
 80031ac:	0800cb50 	.word	0x0800cb50

080031b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d11f      	bne.n	800320a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d856      	bhi.n	800327e <DMA_CheckFifoParam+0xce>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <DMA_CheckFifoParam+0x28>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031fb 	.word	0x080031fb
 80031e0:	080031e9 	.word	0x080031e9
 80031e4:	0800327f 	.word	0x0800327f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d046      	beq.n	8003282 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f8:	e043      	b.n	8003282 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003202:	d140      	bne.n	8003286 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003208:	e03d      	b.n	8003286 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003212:	d121      	bne.n	8003258 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d837      	bhi.n	800328a <DMA_CheckFifoParam+0xda>
 800321a:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <DMA_CheckFifoParam+0x70>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003231 	.word	0x08003231
 8003224:	08003237 	.word	0x08003237
 8003228:	08003231 	.word	0x08003231
 800322c:	08003249 	.word	0x08003249
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e030      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d025      	beq.n	800328e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003246:	e022      	b.n	800328e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003250:	d11f      	bne.n	8003292 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003256:	e01c      	b.n	8003292 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d903      	bls.n	8003266 <DMA_CheckFifoParam+0xb6>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d003      	beq.n	800326c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003264:	e018      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
      break;
 800326a:	e015      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00e      	beq.n	8003296 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
      break;
 800327c:	e00b      	b.n	8003296 <DMA_CheckFifoParam+0xe6>
      break;
 800327e:	bf00      	nop
 8003280:	e00a      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
 8003284:	e008      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
 8003288:	e006      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 800328a:	bf00      	nop
 800328c:	e004      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
 8003290:	e002      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;   
 8003292:	bf00      	nop
 8003294:	e000      	b.n	8003298 <DMA_CheckFifoParam+0xe8>
      break;
 8003296:	bf00      	nop
    }
  } 
  
  return status; 
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop

080032a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	; 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	e159      	b.n	8003578 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032c4:	2201      	movs	r2, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	429a      	cmp	r2, r3
 80032de:	f040 8148 	bne.w	8003572 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d005      	beq.n	80032fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d130      	bne.n	800335c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	2203      	movs	r2, #3
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003330:	2201      	movs	r2, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 0201 	and.w	r2, r3, #1
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b03      	cmp	r3, #3
 8003366:	d017      	beq.n	8003398 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2203      	movs	r2, #3
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d123      	bne.n	80033ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	08da      	lsrs	r2, r3, #3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3208      	adds	r2, #8
 80033ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	220f      	movs	r2, #15
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	08da      	lsrs	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3208      	adds	r2, #8
 80033e6:	69b9      	ldr	r1, [r7, #24]
 80033e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0203 	and.w	r2, r3, #3
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80a2 	beq.w	8003572 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	4b57      	ldr	r3, [pc, #348]	; (8003590 <HAL_GPIO_Init+0x2e8>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	4a56      	ldr	r2, [pc, #344]	; (8003590 <HAL_GPIO_Init+0x2e8>)
 8003438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800343c:	6453      	str	r3, [r2, #68]	; 0x44
 800343e:	4b54      	ldr	r3, [pc, #336]	; (8003590 <HAL_GPIO_Init+0x2e8>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800344a:	4a52      	ldr	r2, [pc, #328]	; (8003594 <HAL_GPIO_Init+0x2ec>)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	089b      	lsrs	r3, r3, #2
 8003450:	3302      	adds	r3, #2
 8003452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	220f      	movs	r2, #15
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a49      	ldr	r2, [pc, #292]	; (8003598 <HAL_GPIO_Init+0x2f0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d019      	beq.n	80034aa <HAL_GPIO_Init+0x202>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a48      	ldr	r2, [pc, #288]	; (800359c <HAL_GPIO_Init+0x2f4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_GPIO_Init+0x1fe>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a47      	ldr	r2, [pc, #284]	; (80035a0 <HAL_GPIO_Init+0x2f8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00d      	beq.n	80034a2 <HAL_GPIO_Init+0x1fa>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a46      	ldr	r2, [pc, #280]	; (80035a4 <HAL_GPIO_Init+0x2fc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <HAL_GPIO_Init+0x1f6>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a45      	ldr	r2, [pc, #276]	; (80035a8 <HAL_GPIO_Init+0x300>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_GPIO_Init+0x1f2>
 8003496:	2304      	movs	r3, #4
 8003498:	e008      	b.n	80034ac <HAL_GPIO_Init+0x204>
 800349a:	2307      	movs	r3, #7
 800349c:	e006      	b.n	80034ac <HAL_GPIO_Init+0x204>
 800349e:	2303      	movs	r3, #3
 80034a0:	e004      	b.n	80034ac <HAL_GPIO_Init+0x204>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e002      	b.n	80034ac <HAL_GPIO_Init+0x204>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_GPIO_Init+0x204>
 80034aa:	2300      	movs	r3, #0
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	f002 0203 	and.w	r2, r2, #3
 80034b2:	0092      	lsls	r2, r2, #2
 80034b4:	4093      	lsls	r3, r2
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034bc:	4935      	ldr	r1, [pc, #212]	; (8003594 <HAL_GPIO_Init+0x2ec>)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	3302      	adds	r3, #2
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_GPIO_Init+0x304>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ee:	4a2f      	ldr	r2, [pc, #188]	; (80035ac <HAL_GPIO_Init+0x304>)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f4:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <HAL_GPIO_Init+0x304>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003518:	4a24      	ldr	r2, [pc, #144]	; (80035ac <HAL_GPIO_Init+0x304>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800351e:	4b23      	ldr	r3, [pc, #140]	; (80035ac <HAL_GPIO_Init+0x304>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003542:	4a1a      	ldr	r2, [pc, #104]	; (80035ac <HAL_GPIO_Init+0x304>)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_GPIO_Init+0x304>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800356c:	4a0f      	ldr	r2, [pc, #60]	; (80035ac <HAL_GPIO_Init+0x304>)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3301      	adds	r3, #1
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b0f      	cmp	r3, #15
 800357c:	f67f aea2 	bls.w	80032c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	3724      	adds	r7, #36	; 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800
 8003594:	40013800 	.word	0x40013800
 8003598:	40020000 	.word	0x40020000
 800359c:	40020400 	.word	0x40020400
 80035a0:	40020800 	.word	0x40020800
 80035a4:	40020c00 	.word	0x40020c00
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40013c00 	.word	0x40013c00

080035b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
 80035bc:	4613      	mov	r3, r2
 80035be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035cc:	e003      	b.n	80035d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ce:	887b      	ldrh	r3, [r7, #2]
 80035d0:	041a      	lsls	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	619a      	str	r2, [r3, #24]
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e267      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d075      	beq.n	80036ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003602:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b04      	cmp	r3, #4
 800360c:	d00c      	beq.n	8003628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360e:	4b85      	ldr	r3, [pc, #532]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003616:	2b08      	cmp	r3, #8
 8003618:	d112      	bne.n	8003640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361a:	4b82      	ldr	r3, [pc, #520]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003626:	d10b      	bne.n	8003640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	4b7e      	ldr	r3, [pc, #504]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d05b      	beq.n	80036ec <HAL_RCC_OscConfig+0x108>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d157      	bne.n	80036ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e242      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003648:	d106      	bne.n	8003658 <HAL_RCC_OscConfig+0x74>
 800364a:	4b76      	ldr	r3, [pc, #472]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a75      	ldr	r2, [pc, #468]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e01d      	b.n	8003694 <HAL_RCC_OscConfig+0xb0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x98>
 8003662:	4b70      	ldr	r3, [pc, #448]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a6f      	ldr	r2, [pc, #444]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b6d      	ldr	r3, [pc, #436]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6c      	ldr	r2, [pc, #432]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0xb0>
 800367c:	4b69      	ldr	r3, [pc, #420]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a68      	ldr	r2, [pc, #416]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b66      	ldr	r3, [pc, #408]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a65      	ldr	r2, [pc, #404]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 800368e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d013      	beq.n	80036c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7ff f8c0 	bl	8002820 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a4:	f7ff f8bc 	bl	8002820 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e207      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b5b      	ldr	r3, [pc, #364]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0xc0>
 80036c2:	e014      	b.n	80036ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7ff f8ac 	bl	8002820 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036cc:	f7ff f8a8 	bl	8002820 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e1f3      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	4b51      	ldr	r3, [pc, #324]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0xe8>
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d063      	beq.n	80037c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fa:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b47      	ldr	r3, [pc, #284]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370e:	2b08      	cmp	r3, #8
 8003710:	d11c      	bne.n	800374c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003712:	4b44      	ldr	r3, [pc, #272]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d116      	bne.n	800374c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	4b41      	ldr	r3, [pc, #260]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_RCC_OscConfig+0x152>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e1c7      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003736:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4937      	ldr	r1, [pc, #220]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374a:	e03a      	b.n	80037c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003754:	4b34      	ldr	r3, [pc, #208]	; (8003828 <HAL_RCC_OscConfig+0x244>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7ff f861 	bl	8002820 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003762:	f7ff f85d 	bl	8002820 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e1a8      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b28      	ldr	r3, [pc, #160]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4925      	ldr	r1, [pc, #148]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCC_OscConfig+0x244>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7ff f840 	bl	8002820 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a4:	f7ff f83c 	bl	8002820 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e187      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d036      	beq.n	800383c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <HAL_RCC_OscConfig+0x248>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7ff f820 	bl	8002820 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e4:	f7ff f81c 	bl	8002820 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e167      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_RCC_OscConfig+0x240>)
 80037f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x200>
 8003802:	e01b      	b.n	800383c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <HAL_RCC_OscConfig+0x248>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380a:	f7ff f809 	bl	8002820 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	e00e      	b.n	8003830 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003812:	f7ff f805 	bl	8002820 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d907      	bls.n	8003830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e150      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
 8003824:	40023800 	.word	0x40023800
 8003828:	42470000 	.word	0x42470000
 800382c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	4b88      	ldr	r3, [pc, #544]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1ea      	bne.n	8003812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8097 	beq.w	8003978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384e:	4b81      	ldr	r3, [pc, #516]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	4b7d      	ldr	r3, [pc, #500]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	4a7c      	ldr	r2, [pc, #496]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	6413      	str	r3, [r2, #64]	; 0x40
 800386a:	4b7a      	ldr	r3, [pc, #488]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387a:	4b77      	ldr	r3, [pc, #476]	; (8003a58 <HAL_RCC_OscConfig+0x474>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d118      	bne.n	80038b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003886:	4b74      	ldr	r3, [pc, #464]	; (8003a58 <HAL_RCC_OscConfig+0x474>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a73      	ldr	r2, [pc, #460]	; (8003a58 <HAL_RCC_OscConfig+0x474>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003892:	f7fe ffc5 	bl	8002820 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389a:	f7fe ffc1 	bl	8002820 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e10c      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	4b6a      	ldr	r3, [pc, #424]	; (8003a58 <HAL_RCC_OscConfig+0x474>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d106      	bne.n	80038ce <HAL_RCC_OscConfig+0x2ea>
 80038c0:	4b64      	ldr	r3, [pc, #400]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	4a63      	ldr	r2, [pc, #396]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6713      	str	r3, [r2, #112]	; 0x70
 80038cc:	e01c      	b.n	8003908 <HAL_RCC_OscConfig+0x324>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x30c>
 80038d6:	4b5f      	ldr	r3, [pc, #380]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	4a5e      	ldr	r2, [pc, #376]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038dc:	f043 0304 	orr.w	r3, r3, #4
 80038e0:	6713      	str	r3, [r2, #112]	; 0x70
 80038e2:	4b5c      	ldr	r3, [pc, #368]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a5b      	ldr	r2, [pc, #364]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
 80038ee:	e00b      	b.n	8003908 <HAL_RCC_OscConfig+0x324>
 80038f0:	4b58      	ldr	r3, [pc, #352]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a57      	ldr	r2, [pc, #348]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
 80038fc:	4b55      	ldr	r3, [pc, #340]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	4a54      	ldr	r2, [pc, #336]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003902:	f023 0304 	bic.w	r3, r3, #4
 8003906:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d015      	beq.n	800393c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fe ff86 	bl	8002820 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fe ff82 	bl	8002820 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0cb      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	4b49      	ldr	r3, [pc, #292]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ee      	beq.n	8003918 <HAL_RCC_OscConfig+0x334>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393c:	f7fe ff70 	bl	8002820 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003942:	e00a      	b.n	800395a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003944:	f7fe ff6c 	bl	8002820 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e0b5      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395a:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ee      	bne.n	8003944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b39      	ldr	r3, [pc, #228]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	4a38      	ldr	r2, [pc, #224]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003976:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80a1 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003982:	4b34      	ldr	r3, [pc, #208]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b08      	cmp	r3, #8
 800398c:	d05c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d141      	bne.n	8003a1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b31      	ldr	r3, [pc, #196]	; (8003a5c <HAL_RCC_OscConfig+0x478>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe ff40 	bl	8002820 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fe ff3c 	bl	8002820 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e087      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	3b01      	subs	r3, #1
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	061b      	lsls	r3, r3, #24
 80039e6:	491b      	ldr	r1, [pc, #108]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_RCC_OscConfig+0x478>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fe ff15 	bl	8002820 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fe ff11 	bl	8002820 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e05c      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x416>
 8003a18:	e054      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <HAL_RCC_OscConfig+0x478>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fe fefe 	bl	8002820 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fe fefa 	bl	8002820 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e045      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x444>
 8003a46:	e03d      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e038      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40007000 	.word	0x40007000
 8003a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCC_OscConfig+0x4ec>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d028      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d121      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d11a      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800

08003ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0cc      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b68      	ldr	r3, [pc, #416]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d90c      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b65      	ldr	r3, [pc, #404]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b63      	ldr	r3, [pc, #396]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0b8      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d020      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b28:	4b59      	ldr	r3, [pc, #356]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a58      	ldr	r2, [pc, #352]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b40:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4c:	4b50      	ldr	r3, [pc, #320]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	494d      	ldr	r1, [pc, #308]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d044      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d119      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e07f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b92:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e06f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e067      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb2:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 0203 	bic.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4934      	ldr	r1, [pc, #208]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc4:	f7fe fe2c 	bl	8002820 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bcc:	f7fe fe28 	bl	8002820 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e04f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 020c 	and.w	r2, r3, #12
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1eb      	bne.n	8003bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d20c      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e032      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c28:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4916      	ldr	r1, [pc, #88]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c46:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	490e      	ldr	r1, [pc, #56]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c5a:	f000 f821 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	490a      	ldr	r1, [pc, #40]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	5ccb      	ldrb	r3, [r1, r3]
 8003c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fd8c 	bl	8002798 <HAL_InitTick>

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023c00 	.word	0x40023c00
 8003c90:	40023800 	.word	0x40023800
 8003c94:	0800cb38 	.word	0x0800cb38
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	20000004 	.word	0x20000004

08003ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca4:	b090      	sub	sp, #64	; 0x40
 8003ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
 8003cac:	2300      	movs	r3, #0
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb8:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	f200 80a1 	bhi.w	8003e0c <HAL_RCC_GetSysClockFreq+0x16c>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0x3a>
 8003cd2:	e09b      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b53      	ldr	r3, [pc, #332]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cd6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003cd8:	e09b      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cda:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cde:	e098      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce0:	4b4f      	ldr	r3, [pc, #316]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cea:	4b4d      	ldr	r3, [pc, #308]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d028      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf6:	4b4a      	ldr	r3, [pc, #296]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	099b      	lsrs	r3, r3, #6
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	623b      	str	r3, [r7, #32]
 8003d00:	627a      	str	r2, [r7, #36]	; 0x24
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d0c:	fb03 f201 	mul.w	r2, r3, r1
 8003d10:	2300      	movs	r3, #0
 8003d12:	fb00 f303 	mul.w	r3, r0, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	4a43      	ldr	r2, [pc, #268]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d1a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d20:	460a      	mov	r2, r1
 8003d22:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d26:	4413      	add	r3, r2
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	61fa      	str	r2, [r7, #28]
 8003d32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d3a:	f7fc ffbd 	bl	8000cb8 <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4613      	mov	r3, r2
 8003d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d46:	e053      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d48:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	2200      	movs	r2, #0
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	617a      	str	r2, [r7, #20]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d5a:	f04f 0b00 	mov.w	fp, #0
 8003d5e:	4652      	mov	r2, sl
 8003d60:	465b      	mov	r3, fp
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	0159      	lsls	r1, r3, #5
 8003d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d70:	0150      	lsls	r0, r2, #5
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	ebb2 080a 	subs.w	r8, r2, sl
 8003d7a:	eb63 090b 	sbc.w	r9, r3, fp
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d92:	ebb2 0408 	subs.w	r4, r2, r8
 8003d96:	eb63 0509 	sbc.w	r5, r3, r9
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	00eb      	lsls	r3, r5, #3
 8003da4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003da8:	00e2      	lsls	r2, r4, #3
 8003daa:	4614      	mov	r4, r2
 8003dac:	461d      	mov	r5, r3
 8003dae:	eb14 030a 	adds.w	r3, r4, sl
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	eb45 030b 	adc.w	r3, r5, fp
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	028b      	lsls	r3, r1, #10
 8003dca:	4621      	mov	r1, r4
 8003dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	028a      	lsls	r2, r1, #10
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dda:	2200      	movs	r2, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	60fa      	str	r2, [r7, #12]
 8003de0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003de4:	f7fc ff68 	bl	8000cb8 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4613      	mov	r3, r2
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e0a:	e002      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3740      	adds	r7, #64	; 0x40
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	00f42400 	.word	0x00f42400
 8003e28:	017d7840 	.word	0x017d7840

08003e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000000 	.word	0x20000000

08003e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e48:	f7ff fff0 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	0a9b      	lsrs	r3, r3, #10
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	4903      	ldr	r1, [pc, #12]	; (8003e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40023800 	.word	0x40023800
 8003e68:	0800cb48 	.word	0x0800cb48

08003e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e70:	f7ff ffdc 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	0b5b      	lsrs	r3, r3, #13
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4903      	ldr	r1, [pc, #12]	; (8003e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	0800cb48 	.word	0x0800cb48

08003e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e041      	b.n	8003f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fe f96c 	bl	8002198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 fd70 	bl	80049b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d001      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e044      	b.n	8003fd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1e      	ldr	r2, [pc, #120]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d018      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f76:	d013      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1a      	ldr	r2, [pc, #104]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00e      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a19      	ldr	r2, [pc, #100]	; (8003fec <HAL_TIM_Base_Start_IT+0xb8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d009      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a16      	ldr	r2, [pc, #88]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d111      	bne.n	8003fc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b06      	cmp	r3, #6
 8003fb0:	d010      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc2:	e007      	b.n	8003fd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40000c00 	.word	0x40000c00
 8003ff4:	40014000 	.word	0x40014000

08003ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e041      	b.n	800408e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f839 	bl	8004096 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 fcbe 	bl	80049b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_TIM_PWM_Start+0x24>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e022      	b.n	8004116 <HAL_TIM_PWM_Start+0x6a>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d109      	bne.n	80040ea <HAL_TIM_PWM_Start+0x3e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	bf14      	ite	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	2300      	moveq	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e015      	b.n	8004116 <HAL_TIM_PWM_Start+0x6a>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d109      	bne.n	8004104 <HAL_TIM_PWM_Start+0x58>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e008      	b.n	8004116 <HAL_TIM_PWM_Start+0x6a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	bf14      	ite	ne
 8004110:	2301      	movne	r3, #1
 8004112:	2300      	moveq	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e068      	b.n	80041f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <HAL_TIM_PWM_Start+0x82>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800412c:	e013      	b.n	8004156 <HAL_TIM_PWM_Start+0xaa>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d104      	bne.n	800413e <HAL_TIM_PWM_Start+0x92>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800413c:	e00b      	b.n	8004156 <HAL_TIM_PWM_Start+0xaa>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b08      	cmp	r3, #8
 8004142:	d104      	bne.n	800414e <HAL_TIM_PWM_Start+0xa2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414c:	e003      	b.n	8004156 <HAL_TIM_PWM_Start+0xaa>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2201      	movs	r2, #1
 800415c:	6839      	ldr	r1, [r7, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fedc 	bl	8004f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <HAL_TIM_PWM_Start+0x14c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d107      	bne.n	800417e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <HAL_TIM_PWM_Start+0x14c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d018      	beq.n	80041ba <HAL_TIM_PWM_Start+0x10e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004190:	d013      	beq.n	80041ba <HAL_TIM_PWM_Start+0x10e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a19      	ldr	r2, [pc, #100]	; (80041fc <HAL_TIM_PWM_Start+0x150>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_TIM_PWM_Start+0x10e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a17      	ldr	r2, [pc, #92]	; (8004200 <HAL_TIM_PWM_Start+0x154>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_TIM_PWM_Start+0x10e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a16      	ldr	r2, [pc, #88]	; (8004204 <HAL_TIM_PWM_Start+0x158>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_TIM_PWM_Start+0x10e>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a14      	ldr	r2, [pc, #80]	; (8004208 <HAL_TIM_PWM_Start+0x15c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d111      	bne.n	80041de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b06      	cmp	r3, #6
 80041ca:	d010      	beq.n	80041ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041dc:	e007      	b.n	80041ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40014000 	.word	0x40014000

0800420c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e097      	b.n	8004350 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fd ffed 	bl	8002214 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004250:	f023 0307 	bic.w	r3, r3, #7
 8004254:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	4619      	mov	r1, r3
 8004260:	4610      	mov	r0, r2
 8004262:	f000 fba9 	bl	80049b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	4313      	orrs	r3, r2
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042ac:	f023 030c 	bic.w	r3, r3, #12
 80042b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4313      	orrs	r3, r2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	011a      	lsls	r2, r3, #4
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	031b      	lsls	r3, r3, #12
 80042dc:	4313      	orrs	r3, r2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	4313      	orrs	r3, r2
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004368:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004370:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004378:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004380:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d110      	bne.n	80043aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d102      	bne.n	8004394 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800438e:	7b7b      	ldrb	r3, [r7, #13]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d001      	beq.n	8004398 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e069      	b.n	800446c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a8:	e031      	b.n	800440e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d110      	bne.n	80043d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043b0:	7bbb      	ldrb	r3, [r7, #14]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d102      	bne.n	80043bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043b6:	7b3b      	ldrb	r3, [r7, #12]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d001      	beq.n	80043c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e055      	b.n	800446c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d0:	e01d      	b.n	800440e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d108      	bne.n	80043ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d8:	7bbb      	ldrb	r3, [r7, #14]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d105      	bne.n	80043ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043de:	7b7b      	ldrb	r3, [r7, #13]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d102      	bne.n	80043ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043e4:	7b3b      	ldrb	r3, [r7, #12]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d001      	beq.n	80043ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e03e      	b.n	800446c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_TIM_Encoder_Start+0xc4>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b04      	cmp	r3, #4
 8004418:	d008      	beq.n	800442c <HAL_TIM_Encoder_Start+0xd4>
 800441a:	e00f      	b.n	800443c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2201      	movs	r2, #1
 8004422:	2100      	movs	r1, #0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fd79 	bl	8004f1c <TIM_CCxChannelCmd>
      break;
 800442a:	e016      	b.n	800445a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2201      	movs	r2, #1
 8004432:	2104      	movs	r1, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fd71 	bl	8004f1c <TIM_CCxChannelCmd>
      break;
 800443a:	e00e      	b.n	800445a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fd69 	bl	8004f1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2201      	movs	r2, #1
 8004450:	2104      	movs	r1, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fd62 	bl	8004f1c <TIM_CCxChannelCmd>
      break;
 8004458:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d020      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01b      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0202 	mvn.w	r2, #2
 80044a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fa5b 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa4d 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fa5e 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d020      	beq.n	8004524 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0204 	mvn.w	r2, #4
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa35 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa27 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fa38 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0208 	mvn.w	r2, #8
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2204      	movs	r2, #4
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa0f 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa01 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa12 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b00      	cmp	r3, #0
 8004578:	d020      	beq.n	80045bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0210 	mvn.w	r2, #16
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2208      	movs	r2, #8
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f9e9 	bl	800497a <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9db 	bl	8004966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f9ec 	bl	800498e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0201 	mvn.w	r2, #1
 80045d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fee4 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00c      	beq.n	8004604 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fd7c 	bl	80050fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00c      	beq.n	8004628 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9bd 	bl	80049a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00c      	beq.n	800464c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0220 	mvn.w	r2, #32
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fd4e 	bl	80050e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800466e:	2302      	movs	r3, #2
 8004670:	e0ae      	b.n	80047d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b0c      	cmp	r3, #12
 800467e:	f200 809f 	bhi.w	80047c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004682:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080047c1 	.word	0x080047c1
 8004690:	080047c1 	.word	0x080047c1
 8004694:	080047c1 	.word	0x080047c1
 8004698:	080046fd 	.word	0x080046fd
 800469c:	080047c1 	.word	0x080047c1
 80046a0:	080047c1 	.word	0x080047c1
 80046a4:	080047c1 	.word	0x080047c1
 80046a8:	0800473f 	.word	0x0800473f
 80046ac:	080047c1 	.word	0x080047c1
 80046b0:	080047c1 	.word	0x080047c1
 80046b4:	080047c1 	.word	0x080047c1
 80046b8:	0800477f 	.word	0x0800477f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa04 	bl	8004ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0204 	bic.w	r2, r2, #4
 80046e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6999      	ldr	r1, [r3, #24]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	619a      	str	r2, [r3, #24]
      break;
 80046fa:	e064      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fa4a 	bl	8004b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	619a      	str	r2, [r3, #24]
      break;
 800473c:	e043      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fa95 	bl	8004c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0208 	orr.w	r2, r2, #8
 8004758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0204 	bic.w	r2, r2, #4
 8004768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69d9      	ldr	r1, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	61da      	str	r2, [r3, #28]
      break;
 800477c:	e023      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fadf 	bl	8004d48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	021a      	lsls	r2, r3, #8
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	61da      	str	r2, [r3, #28]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
      break;
 80047c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_TIM_ConfigClockSource+0x1c>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e0b4      	b.n	800495e <HAL_TIM_ConfigClockSource+0x186>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800481a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482c:	d03e      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0xd4>
 800482e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004832:	f200 8087 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483a:	f000 8086 	beq.w	800494a <HAL_TIM_ConfigClockSource+0x172>
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004842:	d87f      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b70      	cmp	r3, #112	; 0x70
 8004846:	d01a      	beq.n	800487e <HAL_TIM_ConfigClockSource+0xa6>
 8004848:	2b70      	cmp	r3, #112	; 0x70
 800484a:	d87b      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b60      	cmp	r3, #96	; 0x60
 800484e:	d050      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004850:	2b60      	cmp	r3, #96	; 0x60
 8004852:	d877      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b50      	cmp	r3, #80	; 0x50
 8004856:	d03c      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004858:	2b50      	cmp	r3, #80	; 0x50
 800485a:	d873      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d058      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x13a>
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d86f      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b30      	cmp	r3, #48	; 0x30
 8004866:	d064      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 8004868:	2b30      	cmp	r3, #48	; 0x30
 800486a:	d86b      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d060      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 8004870:	2b20      	cmp	r3, #32
 8004872:	d867      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d05c      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 8004878:	2b10      	cmp	r3, #16
 800487a:	d05a      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x15a>
 800487c:	e062      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800488e:	f000 fb25 	bl	8004edc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	609a      	str	r2, [r3, #8]
      break;
 80048aa:	e04f      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048bc:	f000 fb0e 	bl	8004edc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ce:	609a      	str	r2, [r3, #8]
      break;
 80048d0:	e03c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	461a      	mov	r2, r3
 80048e0:	f000 fa82 	bl	8004de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2150      	movs	r1, #80	; 0x50
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fadb 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 80048f0:	e02c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 faa1 	bl	8004e46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2160      	movs	r1, #96	; 0x60
 800490a:	4618      	mov	r0, r3
 800490c:	f000 facb 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004910:	e01c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	461a      	mov	r2, r3
 8004920:	f000 fa62 	bl	8004de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2140      	movs	r1, #64	; 0x40
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fabb 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004930:	e00c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f000 fab2 	bl	8004ea6 <TIM_ITRx_SetConfig>
      break;
 8004942:	e003      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      break;
 8004948:	e000      	b.n	800494c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800494a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3a      	ldr	r2, [pc, #232]	; (8004ab4 <TIM_Base_SetConfig+0xfc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00f      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d6:	d00b      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a37      	ldr	r2, [pc, #220]	; (8004ab8 <TIM_Base_SetConfig+0x100>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a36      	ldr	r2, [pc, #216]	; (8004abc <TIM_Base_SetConfig+0x104>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a35      	ldr	r2, [pc, #212]	; (8004ac0 <TIM_Base_SetConfig+0x108>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <TIM_Base_SetConfig+0xfc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01b      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a10:	d017      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <TIM_Base_SetConfig+0x100>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a27      	ldr	r2, [pc, #156]	; (8004abc <TIM_Base_SetConfig+0x104>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00f      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <TIM_Base_SetConfig+0x108>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00b      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a25      	ldr	r2, [pc, #148]	; (8004ac4 <TIM_Base_SetConfig+0x10c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d007      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a24      	ldr	r2, [pc, #144]	; (8004ac8 <TIM_Base_SetConfig+0x110>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d003      	beq.n	8004a42 <TIM_Base_SetConfig+0x8a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <TIM_Base_SetConfig+0x114>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <TIM_Base_SetConfig+0xfc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d105      	bne.n	8004aa6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f023 0201 	bic.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	611a      	str	r2, [r3, #16]
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f023 0201 	bic.w	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 0302 	bic.w	r3, r3, #2
 8004b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <TIM_OC1_SetConfig+0xc8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d10c      	bne.n	8004b46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0308 	bic.w	r3, r3, #8
 8004b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <TIM_OC1_SetConfig+0xc8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d111      	bne.n	8004b72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	621a      	str	r2, [r3, #32]
}
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40010000 	.word	0x40010000

08004b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f023 0210 	bic.w	r2, r3, #16
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f023 0320 	bic.w	r3, r3, #32
 8004be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a1e      	ldr	r2, [pc, #120]	; (8004c70 <TIM_OC2_SetConfig+0xd4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10d      	bne.n	8004c18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <TIM_OC2_SetConfig+0xd4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d113      	bne.n	8004c48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	621a      	str	r2, [r3, #32]
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40010000 	.word	0x40010000

08004c74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <TIM_OC3_SetConfig+0xd0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10d      	bne.n	8004cee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a14      	ldr	r2, [pc, #80]	; (8004d44 <TIM_OC3_SetConfig+0xd0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d113      	bne.n	8004d1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	621a      	str	r2, [r3, #32]
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40010000 	.word	0x40010000

08004d48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	031b      	lsls	r3, r3, #12
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a10      	ldr	r2, [pc, #64]	; (8004de4 <TIM_OC4_SetConfig+0x9c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d109      	bne.n	8004dbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	019b      	lsls	r3, r3, #6
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000

08004de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 030a 	bic.w	r3, r3, #10
 8004e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f023 0210 	bic.w	r2, r3, #16
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f043 0307 	orr.w	r3, r3, #7
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	021a      	lsls	r2, r3, #8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2201      	movs	r2, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1a      	ldr	r2, [r3, #32]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	fa01 f303 	lsl.w	r3, r1, r3
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e050      	b.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d018      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d013      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a18      	ldr	r2, [pc, #96]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a16      	ldr	r2, [pc, #88]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a15      	ldr	r2, [pc, #84]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a13      	ldr	r2, [pc, #76]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10c      	bne.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4313      	orrs	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40010000 	.word	0x40010000
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00
 8005040:	40014000 	.word	0x40014000

08005044 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800505c:	2302      	movs	r3, #2
 800505e:	e03d      	b.n	80050dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e042      	b.n	80051a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fd f940 	bl	80023bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	; 0x24
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fe21 	bl	8005d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695a      	ldr	r2, [r3, #20]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d112      	bne.n	80051f0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_UART_Receive_IT+0x26>
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e00b      	b.n	80051f2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	461a      	mov	r2, r3
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fbd9 	bl	800599e <UART_Start_Receive_IT>
 80051ec:	4603      	mov	r3, r0
 80051ee:	e000      	b.n	80051f2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08c      	sub	sp, #48	; 0x30
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b20      	cmp	r3, #32
 8005214:	d156      	bne.n	80052c4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_UART_Transmit_DMA+0x26>
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e04f      	b.n	80052c6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	88fa      	ldrh	r2, [r7, #6]
 8005236:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2221      	movs	r2, #33	; 0x21
 8005242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <HAL_UART_Transmit_DMA+0xd4>)
 800524c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <HAL_UART_Transmit_DMA+0xd8>)
 8005254:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <HAL_UART_Transmit_DMA+0xdc>)
 800525c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	2200      	movs	r2, #0
 8005264:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3304      	adds	r3, #4
 800527a:	461a      	mov	r2, r3
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	f7fd fcbf 	bl	8002c00 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800528a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	617b      	str	r3, [r7, #20]
   return(result);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ac:	627a      	str	r2, [r7, #36]	; 0x24
 80052ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6a39      	ldr	r1, [r7, #32]
 80052b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3730      	adds	r7, #48	; 0x30
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	08005855 	.word	0x08005855
 80052d4:	080058ef 	.word	0x080058ef
 80052d8:	0800590b 	.word	0x0800590b

080052dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b0ba      	sub	sp, #232	; 0xe8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005302:	2300      	movs	r3, #0
 8005304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005308:	2300      	movs	r3, #0
 800530a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800531a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10f      	bne.n	8005342 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <HAL_UART_IRQHandler+0x66>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fc70 	bl	8005c20 <UART_Receive_IT>
      return;
 8005340:	e25b      	b.n	80057fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80de 	beq.w	8005508 <HAL_UART_IRQHandler+0x22c>
 800534c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80d1 	beq.w	8005508 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <HAL_UART_IRQHandler+0xae>
 8005372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	f043 0201 	orr.w	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <HAL_UART_IRQHandler+0xd2>
 8005396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	f043 0202 	orr.w	r2, r3, #2
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_UART_IRQHandler+0xf6>
 80053ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	f043 0204 	orr.w	r2, r3, #4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d011      	beq.n	8005402 <HAL_UART_IRQHandler+0x126>
 80053de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fa:	f043 0208 	orr.w	r2, r3, #8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 81f2 	beq.w	80057f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800540c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_UART_IRQHandler+0x14e>
 8005418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fbfb 	bl	8005c20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <HAL_UART_IRQHandler+0x17a>
 800544e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005452:	2b00      	cmp	r3, #0
 8005454:	d04f      	beq.n	80054f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fb03 	bl	8005a62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d141      	bne.n	80054ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3314      	adds	r3, #20
 8005470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005496:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800549a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1d9      	bne.n	800546a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d013      	beq.n	80054e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c2:	4a7e      	ldr	r2, [pc, #504]	; (80056bc <HAL_UART_IRQHandler+0x3e0>)
 80054c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fd fc60 	bl	8002d90 <HAL_DMA_Abort_IT>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054e0:	4610      	mov	r0, r2
 80054e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e4:	e00e      	b.n	8005504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f99e 	bl	8005828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	e00a      	b.n	8005504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f99a 	bl	8005828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f4:	e006      	b.n	8005504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f996 	bl	8005828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005502:	e175      	b.n	80057f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	bf00      	nop
    return;
 8005506:	e173      	b.n	80057f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	2b01      	cmp	r3, #1
 800550e:	f040 814f 	bne.w	80057b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8148 	beq.w	80057b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 8141 	beq.w	80057b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	f040 80b6 	bne.w	80056c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8145 	beq.w	80057f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800556e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005572:	429a      	cmp	r2, r3
 8005574:	f080 813e 	bcs.w	80057f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800557e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558a:	f000 8088 	beq.w	800569e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	330c      	adds	r3, #12
 8005594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1d9      	bne.n	800558e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3314      	adds	r3, #20
 80055fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005602:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005606:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e1      	bne.n	80055da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3314      	adds	r3, #20
 800561c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3314      	adds	r3, #20
 8005636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800563a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800563c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e3      	bne.n	8005616 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800566c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800566e:	f023 0310 	bic.w	r3, r3, #16
 8005672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	330c      	adds	r3, #12
 800567c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005680:	65ba      	str	r2, [r7, #88]	; 0x58
 8005682:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800568e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e3      	bne.n	800565c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005698:	4618      	mov	r0, r3
 800569a:	f7fd fb09 	bl	8002cb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f8c1 	bl	800583c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056ba:	e09b      	b.n	80057f4 <HAL_UART_IRQHandler+0x518>
 80056bc:	08005b29 	.word	0x08005b29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 808e 	beq.w	80057f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80056dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8089 	beq.w	80057f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	330c      	adds	r3, #12
 80056ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800570a:	647a      	str	r2, [r7, #68]	; 0x44
 800570c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e3      	bne.n	80056e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3314      	adds	r3, #20
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	623b      	str	r3, [r7, #32]
   return(result);
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3314      	adds	r3, #20
 800573e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005742:	633a      	str	r2, [r7, #48]	; 0x30
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e3      	bne.n	800571e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	60fb      	str	r3, [r7, #12]
   return(result);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0310 	bic.w	r3, r3, #16
 800577a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005788:	61fa      	str	r2, [r7, #28]
 800578a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	69b9      	ldr	r1, [r7, #24]
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	617b      	str	r3, [r7, #20]
   return(result);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e3      	bne.n	8005764 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f847 	bl	800583c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057ae:	e023      	b.n	80057f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <HAL_UART_IRQHandler+0x4f4>
 80057bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f9c1 	bl	8005b50 <UART_Transmit_IT>
    return;
 80057ce:	e014      	b.n	80057fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00e      	beq.n	80057fa <HAL_UART_IRQHandler+0x51e>
 80057dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa01 	bl	8005bf0 <UART_EndTransmit_IT>
    return;
 80057ee:	e004      	b.n	80057fa <HAL_UART_IRQHandler+0x51e>
    return;
 80057f0:	bf00      	nop
 80057f2:	e002      	b.n	80057fa <HAL_UART_IRQHandler+0x51e>
      return;
 80057f4:	bf00      	nop
 80057f6:	e000      	b.n	80057fa <HAL_UART_IRQHandler+0x51e>
      return;
 80057f8:	bf00      	nop
  }
}
 80057fa:	37e8      	adds	r7, #232	; 0xe8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b090      	sub	sp, #64	; 0x40
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d137      	bne.n	80058e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005872:	2200      	movs	r2, #0
 8005874:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3314      	adds	r3, #20
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	623b      	str	r3, [r7, #32]
   return(result);
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
 800588e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3314      	adds	r3, #20
 8005894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005896:	633a      	str	r2, [r7, #48]	; 0x30
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800589c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e5      	bne.n	8005876 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	330c      	adds	r3, #12
 80058b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
 80058c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	330c      	adds	r3, #12
 80058c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ca:	61fa      	str	r2, [r7, #28]
 80058cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	69b9      	ldr	r1, [r7, #24]
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	617b      	str	r3, [r7, #20]
   return(result);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e5      	bne.n	80058aa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058de:	e002      	b.n	80058e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80058e2:	f7ff ff8d 	bl	8005800 <HAL_UART_TxCpltCallback>
}
 80058e6:	bf00      	nop
 80058e8:	3740      	adds	r7, #64	; 0x40
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff ff89 	bl	8005814 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b80      	cmp	r3, #128	; 0x80
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b21      	cmp	r3, #33	; 0x21
 800593c:	d108      	bne.n	8005950 <UART_DMAError+0x46>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800594a:	68b8      	ldr	r0, [r7, #8]
 800594c:	f000 f861 	bl	8005a12 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b22      	cmp	r3, #34	; 0x22
 8005970:	d108      	bne.n	8005984 <UART_DMAError+0x7a>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2200      	movs	r2, #0
 800597c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800597e:	68b8      	ldr	r0, [r7, #8]
 8005980:	f000 f86f 	bl	8005a62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005988:	f043 0210 	orr.w	r2, r3, #16
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005990:	68b8      	ldr	r0, [r7, #8]
 8005992:	f7ff ff49 	bl	8005828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	4613      	mov	r3, r2
 80059aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	88fa      	ldrh	r2, [r7, #6]
 80059b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	88fa      	ldrh	r2, [r7, #6]
 80059bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2222      	movs	r2, #34	; 0x22
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0220 	orr.w	r2, r2, #32
 8005a02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b089      	sub	sp, #36	; 0x24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	61ba      	str	r2, [r7, #24]
 8005a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6979      	ldr	r1, [r7, #20]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	613b      	str	r3, [r7, #16]
   return(result);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e5      	bne.n	8005a1a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005a56:	bf00      	nop
 8005a58:	3724      	adds	r7, #36	; 0x24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b095      	sub	sp, #84	; 0x54
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	330c      	adds	r3, #12
 8005a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a8a:	643a      	str	r2, [r7, #64]	; 0x40
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3314      	adds	r3, #20
 8005aa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3314      	adds	r3, #20
 8005abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e5      	bne.n	8005a9e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d119      	bne.n	8005b0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	330c      	adds	r3, #12
 8005ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f023 0310 	bic.w	r3, r3, #16
 8005af0:	647b      	str	r3, [r7, #68]	; 0x44
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	330c      	adds	r3, #12
 8005af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005afa:	61ba      	str	r2, [r7, #24]
 8005afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6979      	ldr	r1, [r7, #20]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	613b      	str	r3, [r7, #16]
   return(result);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e5      	bne.n	8005ada <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b1c:	bf00      	nop
 8005b1e:	3754      	adds	r7, #84	; 0x54
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fe70 	bl	8005828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b21      	cmp	r3, #33	; 0x21
 8005b62:	d13e      	bne.n	8005be2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6c:	d114      	bne.n	8005b98 <UART_Transmit_IT+0x48>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d110      	bne.n	8005b98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	1c9a      	adds	r2, r3, #2
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]
 8005b96:	e008      	b.n	8005baa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	1c59      	adds	r1, r3, #1
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6211      	str	r1, [r2, #32]
 8005ba2:	781a      	ldrb	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10f      	bne.n	8005bde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff fdf5 	bl	8005800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08c      	sub	sp, #48	; 0x30
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b22      	cmp	r3, #34	; 0x22
 8005c32:	f040 80ae 	bne.w	8005d92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d117      	bne.n	8005c70 <UART_Receive_IT+0x50>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d113      	bne.n	8005c70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	1c9a      	adds	r2, r3, #2
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	629a      	str	r2, [r3, #40]	; 0x28
 8005c6e:	e026      	b.n	8005cbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c82:	d007      	beq.n	8005c94 <UART_Receive_IT+0x74>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <UART_Receive_IT+0x82>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d106      	bne.n	8005ca2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	e008      	b.n	8005cb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d15d      	bne.n	8005d8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0220 	bic.w	r2, r2, #32
 8005ce0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0201 	bic.w	r2, r2, #1
 8005d00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d135      	bne.n	8005d84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f023 0310 	bic.w	r3, r3, #16
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	330c      	adds	r3, #12
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3e:	623a      	str	r2, [r7, #32]
 8005d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	69f9      	ldr	r1, [r7, #28]
 8005d44:	6a3a      	ldr	r2, [r7, #32]
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e5      	bne.n	8005d1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d10a      	bne.n	8005d76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff fd5d 	bl	800583c <HAL_UARTEx_RxEventCallback>
 8005d82:	e002      	b.n	8005d8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fb fad1 	bl	800132c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e002      	b.n	8005d94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3730      	adds	r7, #48	; 0x30
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da0:	b0c0      	sub	sp, #256	; 0x100
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db8:	68d9      	ldr	r1, [r3, #12]
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	ea40 0301 	orr.w	r3, r0, r1
 8005dc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005df4:	f021 010c 	bic.w	r1, r1, #12
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e02:	430b      	orrs	r3, r1
 8005e04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	6999      	ldr	r1, [r3, #24]
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	ea40 0301 	orr.w	r3, r0, r1
 8005e22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b8f      	ldr	r3, [pc, #572]	; (8006068 <UART_SetConfig+0x2cc>)
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d005      	beq.n	8005e3c <UART_SetConfig+0xa0>
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b8d      	ldr	r3, [pc, #564]	; (800606c <UART_SetConfig+0x2d0>)
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d104      	bne.n	8005e46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e3c:	f7fe f816 	bl	8003e6c <HAL_RCC_GetPCLK2Freq>
 8005e40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e44:	e003      	b.n	8005e4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e46:	f7fd fffd 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8005e4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e58:	f040 810c 	bne.w	8006074 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e6e:	4622      	mov	r2, r4
 8005e70:	462b      	mov	r3, r5
 8005e72:	1891      	adds	r1, r2, r2
 8005e74:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e76:	415b      	adcs	r3, r3
 8005e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e7e:	4621      	mov	r1, r4
 8005e80:	eb12 0801 	adds.w	r8, r2, r1
 8005e84:	4629      	mov	r1, r5
 8005e86:	eb43 0901 	adc.w	r9, r3, r1
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e9e:	4690      	mov	r8, r2
 8005ea0:	4699      	mov	r9, r3
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	eb18 0303 	adds.w	r3, r8, r3
 8005ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eac:	462b      	mov	r3, r5
 8005eae:	eb49 0303 	adc.w	r3, r9, r3
 8005eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ec2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ec6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005eca:	460b      	mov	r3, r1
 8005ecc:	18db      	adds	r3, r3, r3
 8005ece:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	eb42 0303 	adc.w	r3, r2, r3
 8005ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ed8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005edc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ee0:	f7fa feea 	bl	8000cb8 <__aeabi_uldivmod>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4b61      	ldr	r3, [pc, #388]	; (8006070 <UART_SetConfig+0x2d4>)
 8005eea:	fba3 2302 	umull	r2, r3, r3, r2
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	011c      	lsls	r4, r3, #4
 8005ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005efc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	1891      	adds	r1, r2, r2
 8005f0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f0c:	415b      	adcs	r3, r3
 8005f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f14:	4641      	mov	r1, r8
 8005f16:	eb12 0a01 	adds.w	sl, r2, r1
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f34:	4692      	mov	sl, r2
 8005f36:	469b      	mov	fp, r3
 8005f38:	4643      	mov	r3, r8
 8005f3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f42:	464b      	mov	r3, r9
 8005f44:	eb4b 0303 	adc.w	r3, fp, r3
 8005f48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f60:	460b      	mov	r3, r1
 8005f62:	18db      	adds	r3, r3, r3
 8005f64:	643b      	str	r3, [r7, #64]	; 0x40
 8005f66:	4613      	mov	r3, r2
 8005f68:	eb42 0303 	adc.w	r3, r2, r3
 8005f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f76:	f7fa fe9f 	bl	8000cb8 <__aeabi_uldivmod>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4b3b      	ldr	r3, [pc, #236]	; (8006070 <UART_SetConfig+0x2d4>)
 8005f82:	fba3 2301 	umull	r2, r3, r3, r1
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	2264      	movs	r2, #100	; 0x64
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	1acb      	subs	r3, r1, r3
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f96:	4b36      	ldr	r3, [pc, #216]	; (8006070 <UART_SetConfig+0x2d4>)
 8005f98:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fa4:	441c      	add	r4, r3
 8005fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fb8:	4642      	mov	r2, r8
 8005fba:	464b      	mov	r3, r9
 8005fbc:	1891      	adds	r1, r2, r2
 8005fbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fc0:	415b      	adcs	r3, r3
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fc8:	4641      	mov	r1, r8
 8005fca:	1851      	adds	r1, r2, r1
 8005fcc:	6339      	str	r1, [r7, #48]	; 0x30
 8005fce:	4649      	mov	r1, r9
 8005fd0:	414b      	adcs	r3, r1
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	00cb      	lsls	r3, r1, #3
 8005fe4:	4651      	mov	r1, sl
 8005fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fea:	4651      	mov	r1, sl
 8005fec:	00ca      	lsls	r2, r1, #3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	189b      	adds	r3, r3, r2
 8005ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	460a      	mov	r2, r1
 8006000:	eb42 0303 	adc.w	r3, r2, r3
 8006004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006014:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006018:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800601c:	460b      	mov	r3, r1
 800601e:	18db      	adds	r3, r3, r3
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
 8006022:	4613      	mov	r3, r2
 8006024:	eb42 0303 	adc.w	r3, r2, r3
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800602a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800602e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006032:	f7fa fe41 	bl	8000cb8 <__aeabi_uldivmod>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <UART_SetConfig+0x2d4>)
 800603c:	fba3 1302 	umull	r1, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2164      	movs	r1, #100	; 0x64
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	3332      	adds	r3, #50	; 0x32
 800604e:	4a08      	ldr	r2, [pc, #32]	; (8006070 <UART_SetConfig+0x2d4>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f003 0207 	and.w	r2, r3, #7
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4422      	add	r2, r4
 8006062:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006064:	e106      	b.n	8006274 <UART_SetConfig+0x4d8>
 8006066:	bf00      	nop
 8006068:	40011000 	.word	0x40011000
 800606c:	40011400 	.word	0x40011400
 8006070:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006078:	2200      	movs	r2, #0
 800607a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800607e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006082:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006086:	4642      	mov	r2, r8
 8006088:	464b      	mov	r3, r9
 800608a:	1891      	adds	r1, r2, r2
 800608c:	6239      	str	r1, [r7, #32]
 800608e:	415b      	adcs	r3, r3
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
 8006092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006096:	4641      	mov	r1, r8
 8006098:	1854      	adds	r4, r2, r1
 800609a:	4649      	mov	r1, r9
 800609c:	eb43 0501 	adc.w	r5, r3, r1
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	00eb      	lsls	r3, r5, #3
 80060aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ae:	00e2      	lsls	r2, r4, #3
 80060b0:	4614      	mov	r4, r2
 80060b2:	461d      	mov	r5, r3
 80060b4:	4643      	mov	r3, r8
 80060b6:	18e3      	adds	r3, r4, r3
 80060b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060bc:	464b      	mov	r3, r9
 80060be:	eb45 0303 	adc.w	r3, r5, r3
 80060c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060e2:	4629      	mov	r1, r5
 80060e4:	008b      	lsls	r3, r1, #2
 80060e6:	4621      	mov	r1, r4
 80060e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ec:	4621      	mov	r1, r4
 80060ee:	008a      	lsls	r2, r1, #2
 80060f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060f4:	f7fa fde0 	bl	8000cb8 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4b60      	ldr	r3, [pc, #384]	; (8006280 <UART_SetConfig+0x4e4>)
 80060fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	011c      	lsls	r4, r3, #4
 8006106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800610a:	2200      	movs	r2, #0
 800610c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006110:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006114:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006118:	4642      	mov	r2, r8
 800611a:	464b      	mov	r3, r9
 800611c:	1891      	adds	r1, r2, r2
 800611e:	61b9      	str	r1, [r7, #24]
 8006120:	415b      	adcs	r3, r3
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006128:	4641      	mov	r1, r8
 800612a:	1851      	adds	r1, r2, r1
 800612c:	6139      	str	r1, [r7, #16]
 800612e:	4649      	mov	r1, r9
 8006130:	414b      	adcs	r3, r1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006140:	4659      	mov	r1, fp
 8006142:	00cb      	lsls	r3, r1, #3
 8006144:	4651      	mov	r1, sl
 8006146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800614a:	4651      	mov	r1, sl
 800614c:	00ca      	lsls	r2, r1, #3
 800614e:	4610      	mov	r0, r2
 8006150:	4619      	mov	r1, r3
 8006152:	4603      	mov	r3, r0
 8006154:	4642      	mov	r2, r8
 8006156:	189b      	adds	r3, r3, r2
 8006158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800615c:	464b      	mov	r3, r9
 800615e:	460a      	mov	r2, r1
 8006160:	eb42 0303 	adc.w	r3, r2, r3
 8006164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	67bb      	str	r3, [r7, #120]	; 0x78
 8006172:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006180:	4649      	mov	r1, r9
 8006182:	008b      	lsls	r3, r1, #2
 8006184:	4641      	mov	r1, r8
 8006186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800618a:	4641      	mov	r1, r8
 800618c:	008a      	lsls	r2, r1, #2
 800618e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006192:	f7fa fd91 	bl	8000cb8 <__aeabi_uldivmod>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4611      	mov	r1, r2
 800619c:	4b38      	ldr	r3, [pc, #224]	; (8006280 <UART_SetConfig+0x4e4>)
 800619e:	fba3 2301 	umull	r2, r3, r3, r1
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	2264      	movs	r2, #100	; 0x64
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	1acb      	subs	r3, r1, r3
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	3332      	adds	r3, #50	; 0x32
 80061b0:	4a33      	ldr	r2, [pc, #204]	; (8006280 <UART_SetConfig+0x4e4>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061bc:	441c      	add	r4, r3
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	673b      	str	r3, [r7, #112]	; 0x70
 80061c6:	677a      	str	r2, [r7, #116]	; 0x74
 80061c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061cc:	4642      	mov	r2, r8
 80061ce:	464b      	mov	r3, r9
 80061d0:	1891      	adds	r1, r2, r2
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	415b      	adcs	r3, r3
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061dc:	4641      	mov	r1, r8
 80061de:	1851      	adds	r1, r2, r1
 80061e0:	6039      	str	r1, [r7, #0]
 80061e2:	4649      	mov	r1, r9
 80061e4:	414b      	adcs	r3, r1
 80061e6:	607b      	str	r3, [r7, #4]
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061f4:	4659      	mov	r1, fp
 80061f6:	00cb      	lsls	r3, r1, #3
 80061f8:	4651      	mov	r1, sl
 80061fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061fe:	4651      	mov	r1, sl
 8006200:	00ca      	lsls	r2, r1, #3
 8006202:	4610      	mov	r0, r2
 8006204:	4619      	mov	r1, r3
 8006206:	4603      	mov	r3, r0
 8006208:	4642      	mov	r2, r8
 800620a:	189b      	adds	r3, r3, r2
 800620c:	66bb      	str	r3, [r7, #104]	; 0x68
 800620e:	464b      	mov	r3, r9
 8006210:	460a      	mov	r2, r1
 8006212:	eb42 0303 	adc.w	r3, r2, r3
 8006216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	663b      	str	r3, [r7, #96]	; 0x60
 8006222:	667a      	str	r2, [r7, #100]	; 0x64
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006230:	4649      	mov	r1, r9
 8006232:	008b      	lsls	r3, r1, #2
 8006234:	4641      	mov	r1, r8
 8006236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800623a:	4641      	mov	r1, r8
 800623c:	008a      	lsls	r2, r1, #2
 800623e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006242:	f7fa fd39 	bl	8000cb8 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <UART_SetConfig+0x4e4>)
 800624c:	fba3 1302 	umull	r1, r3, r3, r2
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	2164      	movs	r1, #100	; 0x64
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	3332      	adds	r3, #50	; 0x32
 800625e:	4a08      	ldr	r2, [pc, #32]	; (8006280 <UART_SetConfig+0x4e4>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4422      	add	r2, r4
 8006272:	609a      	str	r2, [r3, #8]
}
 8006274:	bf00      	nop
 8006276:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800627a:	46bd      	mov	sp, r7
 800627c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006280:	51eb851f 	.word	0x51eb851f

08006284 <__cvt>:
 8006284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	ec55 4b10 	vmov	r4, r5, d0
 800628c:	2d00      	cmp	r5, #0
 800628e:	460e      	mov	r6, r1
 8006290:	4619      	mov	r1, r3
 8006292:	462b      	mov	r3, r5
 8006294:	bfbb      	ittet	lt
 8006296:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800629a:	461d      	movlt	r5, r3
 800629c:	2300      	movge	r3, #0
 800629e:	232d      	movlt	r3, #45	; 0x2d
 80062a0:	700b      	strb	r3, [r1, #0]
 80062a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062a8:	4691      	mov	r9, r2
 80062aa:	f023 0820 	bic.w	r8, r3, #32
 80062ae:	bfbc      	itt	lt
 80062b0:	4622      	movlt	r2, r4
 80062b2:	4614      	movlt	r4, r2
 80062b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062b8:	d005      	beq.n	80062c6 <__cvt+0x42>
 80062ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062be:	d100      	bne.n	80062c2 <__cvt+0x3e>
 80062c0:	3601      	adds	r6, #1
 80062c2:	2102      	movs	r1, #2
 80062c4:	e000      	b.n	80062c8 <__cvt+0x44>
 80062c6:	2103      	movs	r1, #3
 80062c8:	ab03      	add	r3, sp, #12
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	ab02      	add	r3, sp, #8
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	ec45 4b10 	vmov	d0, r4, r5
 80062d4:	4653      	mov	r3, sl
 80062d6:	4632      	mov	r2, r6
 80062d8:	f001 f8b6 	bl	8007448 <_dtoa_r>
 80062dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062e0:	4607      	mov	r7, r0
 80062e2:	d102      	bne.n	80062ea <__cvt+0x66>
 80062e4:	f019 0f01 	tst.w	r9, #1
 80062e8:	d022      	beq.n	8006330 <__cvt+0xac>
 80062ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062ee:	eb07 0906 	add.w	r9, r7, r6
 80062f2:	d110      	bne.n	8006316 <__cvt+0x92>
 80062f4:	783b      	ldrb	r3, [r7, #0]
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	d10a      	bne.n	8006310 <__cvt+0x8c>
 80062fa:	2200      	movs	r2, #0
 80062fc:	2300      	movs	r3, #0
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa fbf9 	bl	8000af8 <__aeabi_dcmpeq>
 8006306:	b918      	cbnz	r0, 8006310 <__cvt+0x8c>
 8006308:	f1c6 0601 	rsb	r6, r6, #1
 800630c:	f8ca 6000 	str.w	r6, [sl]
 8006310:	f8da 3000 	ldr.w	r3, [sl]
 8006314:	4499      	add	r9, r3
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa fbeb 	bl	8000af8 <__aeabi_dcmpeq>
 8006322:	b108      	cbz	r0, 8006328 <__cvt+0xa4>
 8006324:	f8cd 900c 	str.w	r9, [sp, #12]
 8006328:	2230      	movs	r2, #48	; 0x30
 800632a:	9b03      	ldr	r3, [sp, #12]
 800632c:	454b      	cmp	r3, r9
 800632e:	d307      	bcc.n	8006340 <__cvt+0xbc>
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006334:	1bdb      	subs	r3, r3, r7
 8006336:	4638      	mov	r0, r7
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	b004      	add	sp, #16
 800633c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	9103      	str	r1, [sp, #12]
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e7f0      	b.n	800632a <__cvt+0xa6>

08006348 <__exponent>:
 8006348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800634a:	4603      	mov	r3, r0
 800634c:	2900      	cmp	r1, #0
 800634e:	bfb8      	it	lt
 8006350:	4249      	neglt	r1, r1
 8006352:	f803 2b02 	strb.w	r2, [r3], #2
 8006356:	bfb4      	ite	lt
 8006358:	222d      	movlt	r2, #45	; 0x2d
 800635a:	222b      	movge	r2, #43	; 0x2b
 800635c:	2909      	cmp	r1, #9
 800635e:	7042      	strb	r2, [r0, #1]
 8006360:	dd2a      	ble.n	80063b8 <__exponent+0x70>
 8006362:	f10d 0207 	add.w	r2, sp, #7
 8006366:	4617      	mov	r7, r2
 8006368:	260a      	movs	r6, #10
 800636a:	4694      	mov	ip, r2
 800636c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006370:	fb06 1415 	mls	r4, r6, r5, r1
 8006374:	3430      	adds	r4, #48	; 0x30
 8006376:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800637a:	460c      	mov	r4, r1
 800637c:	2c63      	cmp	r4, #99	; 0x63
 800637e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006382:	4629      	mov	r1, r5
 8006384:	dcf1      	bgt.n	800636a <__exponent+0x22>
 8006386:	3130      	adds	r1, #48	; 0x30
 8006388:	f1ac 0402 	sub.w	r4, ip, #2
 800638c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006390:	1c41      	adds	r1, r0, #1
 8006392:	4622      	mov	r2, r4
 8006394:	42ba      	cmp	r2, r7
 8006396:	d30a      	bcc.n	80063ae <__exponent+0x66>
 8006398:	f10d 0209 	add.w	r2, sp, #9
 800639c:	eba2 020c 	sub.w	r2, r2, ip
 80063a0:	42bc      	cmp	r4, r7
 80063a2:	bf88      	it	hi
 80063a4:	2200      	movhi	r2, #0
 80063a6:	4413      	add	r3, r2
 80063a8:	1a18      	subs	r0, r3, r0
 80063aa:	b003      	add	sp, #12
 80063ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80063b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80063b6:	e7ed      	b.n	8006394 <__exponent+0x4c>
 80063b8:	2330      	movs	r3, #48	; 0x30
 80063ba:	3130      	adds	r1, #48	; 0x30
 80063bc:	7083      	strb	r3, [r0, #2]
 80063be:	70c1      	strb	r1, [r0, #3]
 80063c0:	1d03      	adds	r3, r0, #4
 80063c2:	e7f1      	b.n	80063a8 <__exponent+0x60>

080063c4 <_printf_float>:
 80063c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c8:	ed2d 8b02 	vpush	{d8}
 80063cc:	b08d      	sub	sp, #52	; 0x34
 80063ce:	460c      	mov	r4, r1
 80063d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063d4:	4616      	mov	r6, r2
 80063d6:	461f      	mov	r7, r3
 80063d8:	4605      	mov	r5, r0
 80063da:	f000 ff25 	bl	8007228 <_localeconv_r>
 80063de:	f8d0 a000 	ldr.w	sl, [r0]
 80063e2:	4650      	mov	r0, sl
 80063e4:	f7f9 ff5c 	bl	80002a0 <strlen>
 80063e8:	2300      	movs	r3, #0
 80063ea:	930a      	str	r3, [sp, #40]	; 0x28
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	9305      	str	r3, [sp, #20]
 80063f0:	f8d8 3000 	ldr.w	r3, [r8]
 80063f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80063f8:	3307      	adds	r3, #7
 80063fa:	f023 0307 	bic.w	r3, r3, #7
 80063fe:	f103 0208 	add.w	r2, r3, #8
 8006402:	f8c8 2000 	str.w	r2, [r8]
 8006406:	e9d3 8900 	ldrd	r8, r9, [r3]
 800640a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800640e:	9307      	str	r3, [sp, #28]
 8006410:	f8cd 8018 	str.w	r8, [sp, #24]
 8006414:	ee08 0a10 	vmov	s16, r0
 8006418:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800641c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006420:	4b9e      	ldr	r3, [pc, #632]	; (800669c <_printf_float+0x2d8>)
 8006422:	f04f 32ff 	mov.w	r2, #4294967295
 8006426:	f7fa fb99 	bl	8000b5c <__aeabi_dcmpun>
 800642a:	bb88      	cbnz	r0, 8006490 <_printf_float+0xcc>
 800642c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006430:	4b9a      	ldr	r3, [pc, #616]	; (800669c <_printf_float+0x2d8>)
 8006432:	f04f 32ff 	mov.w	r2, #4294967295
 8006436:	f7fa fb73 	bl	8000b20 <__aeabi_dcmple>
 800643a:	bb48      	cbnz	r0, 8006490 <_printf_float+0xcc>
 800643c:	2200      	movs	r2, #0
 800643e:	2300      	movs	r3, #0
 8006440:	4640      	mov	r0, r8
 8006442:	4649      	mov	r1, r9
 8006444:	f7fa fb62 	bl	8000b0c <__aeabi_dcmplt>
 8006448:	b110      	cbz	r0, 8006450 <_printf_float+0x8c>
 800644a:	232d      	movs	r3, #45	; 0x2d
 800644c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006450:	4a93      	ldr	r2, [pc, #588]	; (80066a0 <_printf_float+0x2dc>)
 8006452:	4b94      	ldr	r3, [pc, #592]	; (80066a4 <_printf_float+0x2e0>)
 8006454:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006458:	bf94      	ite	ls
 800645a:	4690      	movls	r8, r2
 800645c:	4698      	movhi	r8, r3
 800645e:	2303      	movs	r3, #3
 8006460:	6123      	str	r3, [r4, #16]
 8006462:	9b05      	ldr	r3, [sp, #20]
 8006464:	f023 0304 	bic.w	r3, r3, #4
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	f04f 0900 	mov.w	r9, #0
 800646e:	9700      	str	r7, [sp, #0]
 8006470:	4633      	mov	r3, r6
 8006472:	aa0b      	add	r2, sp, #44	; 0x2c
 8006474:	4621      	mov	r1, r4
 8006476:	4628      	mov	r0, r5
 8006478:	f000 f9da 	bl	8006830 <_printf_common>
 800647c:	3001      	adds	r0, #1
 800647e:	f040 8090 	bne.w	80065a2 <_printf_float+0x1de>
 8006482:	f04f 30ff 	mov.w	r0, #4294967295
 8006486:	b00d      	add	sp, #52	; 0x34
 8006488:	ecbd 8b02 	vpop	{d8}
 800648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006490:	4642      	mov	r2, r8
 8006492:	464b      	mov	r3, r9
 8006494:	4640      	mov	r0, r8
 8006496:	4649      	mov	r1, r9
 8006498:	f7fa fb60 	bl	8000b5c <__aeabi_dcmpun>
 800649c:	b140      	cbz	r0, 80064b0 <_printf_float+0xec>
 800649e:	464b      	mov	r3, r9
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bfbc      	itt	lt
 80064a4:	232d      	movlt	r3, #45	; 0x2d
 80064a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064aa:	4a7f      	ldr	r2, [pc, #508]	; (80066a8 <_printf_float+0x2e4>)
 80064ac:	4b7f      	ldr	r3, [pc, #508]	; (80066ac <_printf_float+0x2e8>)
 80064ae:	e7d1      	b.n	8006454 <_printf_float+0x90>
 80064b0:	6863      	ldr	r3, [r4, #4]
 80064b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064b6:	9206      	str	r2, [sp, #24]
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	d13f      	bne.n	800653c <_printf_float+0x178>
 80064bc:	2306      	movs	r3, #6
 80064be:	6063      	str	r3, [r4, #4]
 80064c0:	9b05      	ldr	r3, [sp, #20]
 80064c2:	6861      	ldr	r1, [r4, #4]
 80064c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064c8:	2300      	movs	r3, #0
 80064ca:	9303      	str	r3, [sp, #12]
 80064cc:	ab0a      	add	r3, sp, #40	; 0x28
 80064ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064d2:	ab09      	add	r3, sp, #36	; 0x24
 80064d4:	ec49 8b10 	vmov	d0, r8, r9
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	6022      	str	r2, [r4, #0]
 80064dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064e0:	4628      	mov	r0, r5
 80064e2:	f7ff fecf 	bl	8006284 <__cvt>
 80064e6:	9b06      	ldr	r3, [sp, #24]
 80064e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064ea:	2b47      	cmp	r3, #71	; 0x47
 80064ec:	4680      	mov	r8, r0
 80064ee:	d108      	bne.n	8006502 <_printf_float+0x13e>
 80064f0:	1cc8      	adds	r0, r1, #3
 80064f2:	db02      	blt.n	80064fa <_printf_float+0x136>
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	4299      	cmp	r1, r3
 80064f8:	dd41      	ble.n	800657e <_printf_float+0x1ba>
 80064fa:	f1ab 0302 	sub.w	r3, fp, #2
 80064fe:	fa5f fb83 	uxtb.w	fp, r3
 8006502:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006506:	d820      	bhi.n	800654a <_printf_float+0x186>
 8006508:	3901      	subs	r1, #1
 800650a:	465a      	mov	r2, fp
 800650c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006510:	9109      	str	r1, [sp, #36]	; 0x24
 8006512:	f7ff ff19 	bl	8006348 <__exponent>
 8006516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006518:	1813      	adds	r3, r2, r0
 800651a:	2a01      	cmp	r2, #1
 800651c:	4681      	mov	r9, r0
 800651e:	6123      	str	r3, [r4, #16]
 8006520:	dc02      	bgt.n	8006528 <_printf_float+0x164>
 8006522:	6822      	ldr	r2, [r4, #0]
 8006524:	07d2      	lsls	r2, r2, #31
 8006526:	d501      	bpl.n	800652c <_printf_float+0x168>
 8006528:	3301      	adds	r3, #1
 800652a:	6123      	str	r3, [r4, #16]
 800652c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006530:	2b00      	cmp	r3, #0
 8006532:	d09c      	beq.n	800646e <_printf_float+0xaa>
 8006534:	232d      	movs	r3, #45	; 0x2d
 8006536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653a:	e798      	b.n	800646e <_printf_float+0xaa>
 800653c:	9a06      	ldr	r2, [sp, #24]
 800653e:	2a47      	cmp	r2, #71	; 0x47
 8006540:	d1be      	bne.n	80064c0 <_printf_float+0xfc>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1bc      	bne.n	80064c0 <_printf_float+0xfc>
 8006546:	2301      	movs	r3, #1
 8006548:	e7b9      	b.n	80064be <_printf_float+0xfa>
 800654a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800654e:	d118      	bne.n	8006582 <_printf_float+0x1be>
 8006550:	2900      	cmp	r1, #0
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	dd0b      	ble.n	800656e <_printf_float+0x1aa>
 8006556:	6121      	str	r1, [r4, #16]
 8006558:	b913      	cbnz	r3, 8006560 <_printf_float+0x19c>
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	07d0      	lsls	r0, r2, #31
 800655e:	d502      	bpl.n	8006566 <_printf_float+0x1a2>
 8006560:	3301      	adds	r3, #1
 8006562:	440b      	add	r3, r1
 8006564:	6123      	str	r3, [r4, #16]
 8006566:	65a1      	str	r1, [r4, #88]	; 0x58
 8006568:	f04f 0900 	mov.w	r9, #0
 800656c:	e7de      	b.n	800652c <_printf_float+0x168>
 800656e:	b913      	cbnz	r3, 8006576 <_printf_float+0x1b2>
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	07d2      	lsls	r2, r2, #31
 8006574:	d501      	bpl.n	800657a <_printf_float+0x1b6>
 8006576:	3302      	adds	r3, #2
 8006578:	e7f4      	b.n	8006564 <_printf_float+0x1a0>
 800657a:	2301      	movs	r3, #1
 800657c:	e7f2      	b.n	8006564 <_printf_float+0x1a0>
 800657e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006584:	4299      	cmp	r1, r3
 8006586:	db05      	blt.n	8006594 <_printf_float+0x1d0>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	6121      	str	r1, [r4, #16]
 800658c:	07d8      	lsls	r0, r3, #31
 800658e:	d5ea      	bpl.n	8006566 <_printf_float+0x1a2>
 8006590:	1c4b      	adds	r3, r1, #1
 8006592:	e7e7      	b.n	8006564 <_printf_float+0x1a0>
 8006594:	2900      	cmp	r1, #0
 8006596:	bfd4      	ite	le
 8006598:	f1c1 0202 	rsble	r2, r1, #2
 800659c:	2201      	movgt	r2, #1
 800659e:	4413      	add	r3, r2
 80065a0:	e7e0      	b.n	8006564 <_printf_float+0x1a0>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	055a      	lsls	r2, r3, #21
 80065a6:	d407      	bmi.n	80065b8 <_printf_float+0x1f4>
 80065a8:	6923      	ldr	r3, [r4, #16]
 80065aa:	4642      	mov	r2, r8
 80065ac:	4631      	mov	r1, r6
 80065ae:	4628      	mov	r0, r5
 80065b0:	47b8      	blx	r7
 80065b2:	3001      	adds	r0, #1
 80065b4:	d12c      	bne.n	8006610 <_printf_float+0x24c>
 80065b6:	e764      	b.n	8006482 <_printf_float+0xbe>
 80065b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065bc:	f240 80e0 	bls.w	8006780 <_printf_float+0x3bc>
 80065c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065c4:	2200      	movs	r2, #0
 80065c6:	2300      	movs	r3, #0
 80065c8:	f7fa fa96 	bl	8000af8 <__aeabi_dcmpeq>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d034      	beq.n	800663a <_printf_float+0x276>
 80065d0:	4a37      	ldr	r2, [pc, #220]	; (80066b0 <_printf_float+0x2ec>)
 80065d2:	2301      	movs	r3, #1
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	47b8      	blx	r7
 80065da:	3001      	adds	r0, #1
 80065dc:	f43f af51 	beq.w	8006482 <_printf_float+0xbe>
 80065e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e4:	429a      	cmp	r2, r3
 80065e6:	db02      	blt.n	80065ee <_printf_float+0x22a>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	07d8      	lsls	r0, r3, #31
 80065ec:	d510      	bpl.n	8006610 <_printf_float+0x24c>
 80065ee:	ee18 3a10 	vmov	r3, s16
 80065f2:	4652      	mov	r2, sl
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f af41 	beq.w	8006482 <_printf_float+0xbe>
 8006600:	f04f 0800 	mov.w	r8, #0
 8006604:	f104 091a 	add.w	r9, r4, #26
 8006608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660a:	3b01      	subs	r3, #1
 800660c:	4543      	cmp	r3, r8
 800660e:	dc09      	bgt.n	8006624 <_printf_float+0x260>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	079b      	lsls	r3, r3, #30
 8006614:	f100 8107 	bmi.w	8006826 <_printf_float+0x462>
 8006618:	68e0      	ldr	r0, [r4, #12]
 800661a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800661c:	4298      	cmp	r0, r3
 800661e:	bfb8      	it	lt
 8006620:	4618      	movlt	r0, r3
 8006622:	e730      	b.n	8006486 <_printf_float+0xc2>
 8006624:	2301      	movs	r3, #1
 8006626:	464a      	mov	r2, r9
 8006628:	4631      	mov	r1, r6
 800662a:	4628      	mov	r0, r5
 800662c:	47b8      	blx	r7
 800662e:	3001      	adds	r0, #1
 8006630:	f43f af27 	beq.w	8006482 <_printf_float+0xbe>
 8006634:	f108 0801 	add.w	r8, r8, #1
 8006638:	e7e6      	b.n	8006608 <_printf_float+0x244>
 800663a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	dc39      	bgt.n	80066b4 <_printf_float+0x2f0>
 8006640:	4a1b      	ldr	r2, [pc, #108]	; (80066b0 <_printf_float+0x2ec>)
 8006642:	2301      	movs	r3, #1
 8006644:	4631      	mov	r1, r6
 8006646:	4628      	mov	r0, r5
 8006648:	47b8      	blx	r7
 800664a:	3001      	adds	r0, #1
 800664c:	f43f af19 	beq.w	8006482 <_printf_float+0xbe>
 8006650:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006654:	4313      	orrs	r3, r2
 8006656:	d102      	bne.n	800665e <_printf_float+0x29a>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	07d9      	lsls	r1, r3, #31
 800665c:	d5d8      	bpl.n	8006610 <_printf_float+0x24c>
 800665e:	ee18 3a10 	vmov	r3, s16
 8006662:	4652      	mov	r2, sl
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f af09 	beq.w	8006482 <_printf_float+0xbe>
 8006670:	f04f 0900 	mov.w	r9, #0
 8006674:	f104 0a1a 	add.w	sl, r4, #26
 8006678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667a:	425b      	negs	r3, r3
 800667c:	454b      	cmp	r3, r9
 800667e:	dc01      	bgt.n	8006684 <_printf_float+0x2c0>
 8006680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006682:	e792      	b.n	80065aa <_printf_float+0x1e6>
 8006684:	2301      	movs	r3, #1
 8006686:	4652      	mov	r2, sl
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f aef7 	beq.w	8006482 <_printf_float+0xbe>
 8006694:	f109 0901 	add.w	r9, r9, #1
 8006698:	e7ee      	b.n	8006678 <_printf_float+0x2b4>
 800669a:	bf00      	nop
 800669c:	7fefffff 	.word	0x7fefffff
 80066a0:	0800cb58 	.word	0x0800cb58
 80066a4:	0800cb5c 	.word	0x0800cb5c
 80066a8:	0800cb60 	.word	0x0800cb60
 80066ac:	0800cb64 	.word	0x0800cb64
 80066b0:	0800cef0 	.word	0x0800cef0
 80066b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066b8:	429a      	cmp	r2, r3
 80066ba:	bfa8      	it	ge
 80066bc:	461a      	movge	r2, r3
 80066be:	2a00      	cmp	r2, #0
 80066c0:	4691      	mov	r9, r2
 80066c2:	dc37      	bgt.n	8006734 <_printf_float+0x370>
 80066c4:	f04f 0b00 	mov.w	fp, #0
 80066c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066cc:	f104 021a 	add.w	r2, r4, #26
 80066d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066d2:	9305      	str	r3, [sp, #20]
 80066d4:	eba3 0309 	sub.w	r3, r3, r9
 80066d8:	455b      	cmp	r3, fp
 80066da:	dc33      	bgt.n	8006744 <_printf_float+0x380>
 80066dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066e0:	429a      	cmp	r2, r3
 80066e2:	db3b      	blt.n	800675c <_printf_float+0x398>
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	07da      	lsls	r2, r3, #31
 80066e8:	d438      	bmi.n	800675c <_printf_float+0x398>
 80066ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80066ee:	eba2 0903 	sub.w	r9, r2, r3
 80066f2:	9b05      	ldr	r3, [sp, #20]
 80066f4:	1ad2      	subs	r2, r2, r3
 80066f6:	4591      	cmp	r9, r2
 80066f8:	bfa8      	it	ge
 80066fa:	4691      	movge	r9, r2
 80066fc:	f1b9 0f00 	cmp.w	r9, #0
 8006700:	dc35      	bgt.n	800676e <_printf_float+0x3aa>
 8006702:	f04f 0800 	mov.w	r8, #0
 8006706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800670a:	f104 0a1a 	add.w	sl, r4, #26
 800670e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	eba3 0309 	sub.w	r3, r3, r9
 8006718:	4543      	cmp	r3, r8
 800671a:	f77f af79 	ble.w	8006610 <_printf_float+0x24c>
 800671e:	2301      	movs	r3, #1
 8006720:	4652      	mov	r2, sl
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	f43f aeaa 	beq.w	8006482 <_printf_float+0xbe>
 800672e:	f108 0801 	add.w	r8, r8, #1
 8006732:	e7ec      	b.n	800670e <_printf_float+0x34a>
 8006734:	4613      	mov	r3, r2
 8006736:	4631      	mov	r1, r6
 8006738:	4642      	mov	r2, r8
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	d1c0      	bne.n	80066c4 <_printf_float+0x300>
 8006742:	e69e      	b.n	8006482 <_printf_float+0xbe>
 8006744:	2301      	movs	r3, #1
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	9205      	str	r2, [sp, #20]
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	f43f ae97 	beq.w	8006482 <_printf_float+0xbe>
 8006754:	9a05      	ldr	r2, [sp, #20]
 8006756:	f10b 0b01 	add.w	fp, fp, #1
 800675a:	e7b9      	b.n	80066d0 <_printf_float+0x30c>
 800675c:	ee18 3a10 	vmov	r3, s16
 8006760:	4652      	mov	r2, sl
 8006762:	4631      	mov	r1, r6
 8006764:	4628      	mov	r0, r5
 8006766:	47b8      	blx	r7
 8006768:	3001      	adds	r0, #1
 800676a:	d1be      	bne.n	80066ea <_printf_float+0x326>
 800676c:	e689      	b.n	8006482 <_printf_float+0xbe>
 800676e:	9a05      	ldr	r2, [sp, #20]
 8006770:	464b      	mov	r3, r9
 8006772:	4442      	add	r2, r8
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	d1c1      	bne.n	8006702 <_printf_float+0x33e>
 800677e:	e680      	b.n	8006482 <_printf_float+0xbe>
 8006780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006782:	2a01      	cmp	r2, #1
 8006784:	dc01      	bgt.n	800678a <_printf_float+0x3c6>
 8006786:	07db      	lsls	r3, r3, #31
 8006788:	d53a      	bpl.n	8006800 <_printf_float+0x43c>
 800678a:	2301      	movs	r3, #1
 800678c:	4642      	mov	r2, r8
 800678e:	4631      	mov	r1, r6
 8006790:	4628      	mov	r0, r5
 8006792:	47b8      	blx	r7
 8006794:	3001      	adds	r0, #1
 8006796:	f43f ae74 	beq.w	8006482 <_printf_float+0xbe>
 800679a:	ee18 3a10 	vmov	r3, s16
 800679e:	4652      	mov	r2, sl
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	f43f ae6b 	beq.w	8006482 <_printf_float+0xbe>
 80067ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067b0:	2200      	movs	r2, #0
 80067b2:	2300      	movs	r3, #0
 80067b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80067b8:	f7fa f99e 	bl	8000af8 <__aeabi_dcmpeq>
 80067bc:	b9d8      	cbnz	r0, 80067f6 <_printf_float+0x432>
 80067be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80067c2:	f108 0201 	add.w	r2, r8, #1
 80067c6:	4631      	mov	r1, r6
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b8      	blx	r7
 80067cc:	3001      	adds	r0, #1
 80067ce:	d10e      	bne.n	80067ee <_printf_float+0x42a>
 80067d0:	e657      	b.n	8006482 <_printf_float+0xbe>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4652      	mov	r2, sl
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f ae50 	beq.w	8006482 <_printf_float+0xbe>
 80067e2:	f108 0801 	add.w	r8, r8, #1
 80067e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e8:	3b01      	subs	r3, #1
 80067ea:	4543      	cmp	r3, r8
 80067ec:	dcf1      	bgt.n	80067d2 <_printf_float+0x40e>
 80067ee:	464b      	mov	r3, r9
 80067f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067f4:	e6da      	b.n	80065ac <_printf_float+0x1e8>
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	f104 0a1a 	add.w	sl, r4, #26
 80067fe:	e7f2      	b.n	80067e6 <_printf_float+0x422>
 8006800:	2301      	movs	r3, #1
 8006802:	4642      	mov	r2, r8
 8006804:	e7df      	b.n	80067c6 <_printf_float+0x402>
 8006806:	2301      	movs	r3, #1
 8006808:	464a      	mov	r2, r9
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f ae36 	beq.w	8006482 <_printf_float+0xbe>
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800681e:	1a5b      	subs	r3, r3, r1
 8006820:	4543      	cmp	r3, r8
 8006822:	dcf0      	bgt.n	8006806 <_printf_float+0x442>
 8006824:	e6f8      	b.n	8006618 <_printf_float+0x254>
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	f104 0919 	add.w	r9, r4, #25
 800682e:	e7f4      	b.n	800681a <_printf_float+0x456>

08006830 <_printf_common>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	4616      	mov	r6, r2
 8006836:	4699      	mov	r9, r3
 8006838:	688a      	ldr	r2, [r1, #8]
 800683a:	690b      	ldr	r3, [r1, #16]
 800683c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006840:	4293      	cmp	r3, r2
 8006842:	bfb8      	it	lt
 8006844:	4613      	movlt	r3, r2
 8006846:	6033      	str	r3, [r6, #0]
 8006848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800684c:	4607      	mov	r7, r0
 800684e:	460c      	mov	r4, r1
 8006850:	b10a      	cbz	r2, 8006856 <_printf_common+0x26>
 8006852:	3301      	adds	r3, #1
 8006854:	6033      	str	r3, [r6, #0]
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	0699      	lsls	r1, r3, #26
 800685a:	bf42      	ittt	mi
 800685c:	6833      	ldrmi	r3, [r6, #0]
 800685e:	3302      	addmi	r3, #2
 8006860:	6033      	strmi	r3, [r6, #0]
 8006862:	6825      	ldr	r5, [r4, #0]
 8006864:	f015 0506 	ands.w	r5, r5, #6
 8006868:	d106      	bne.n	8006878 <_printf_common+0x48>
 800686a:	f104 0a19 	add.w	sl, r4, #25
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	6832      	ldr	r2, [r6, #0]
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	42ab      	cmp	r3, r5
 8006876:	dc26      	bgt.n	80068c6 <_printf_common+0x96>
 8006878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800687c:	1e13      	subs	r3, r2, #0
 800687e:	6822      	ldr	r2, [r4, #0]
 8006880:	bf18      	it	ne
 8006882:	2301      	movne	r3, #1
 8006884:	0692      	lsls	r2, r2, #26
 8006886:	d42b      	bmi.n	80068e0 <_printf_common+0xb0>
 8006888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800688c:	4649      	mov	r1, r9
 800688e:	4638      	mov	r0, r7
 8006890:	47c0      	blx	r8
 8006892:	3001      	adds	r0, #1
 8006894:	d01e      	beq.n	80068d4 <_printf_common+0xa4>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	6922      	ldr	r2, [r4, #16]
 800689a:	f003 0306 	and.w	r3, r3, #6
 800689e:	2b04      	cmp	r3, #4
 80068a0:	bf02      	ittt	eq
 80068a2:	68e5      	ldreq	r5, [r4, #12]
 80068a4:	6833      	ldreq	r3, [r6, #0]
 80068a6:	1aed      	subeq	r5, r5, r3
 80068a8:	68a3      	ldr	r3, [r4, #8]
 80068aa:	bf0c      	ite	eq
 80068ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b0:	2500      	movne	r5, #0
 80068b2:	4293      	cmp	r3, r2
 80068b4:	bfc4      	itt	gt
 80068b6:	1a9b      	subgt	r3, r3, r2
 80068b8:	18ed      	addgt	r5, r5, r3
 80068ba:	2600      	movs	r6, #0
 80068bc:	341a      	adds	r4, #26
 80068be:	42b5      	cmp	r5, r6
 80068c0:	d11a      	bne.n	80068f8 <_printf_common+0xc8>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e008      	b.n	80068d8 <_printf_common+0xa8>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4652      	mov	r2, sl
 80068ca:	4649      	mov	r1, r9
 80068cc:	4638      	mov	r0, r7
 80068ce:	47c0      	blx	r8
 80068d0:	3001      	adds	r0, #1
 80068d2:	d103      	bne.n	80068dc <_printf_common+0xac>
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068dc:	3501      	adds	r5, #1
 80068de:	e7c6      	b.n	800686e <_printf_common+0x3e>
 80068e0:	18e1      	adds	r1, r4, r3
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	2030      	movs	r0, #48	; 0x30
 80068e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ea:	4422      	add	r2, r4
 80068ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068f4:	3302      	adds	r3, #2
 80068f6:	e7c7      	b.n	8006888 <_printf_common+0x58>
 80068f8:	2301      	movs	r3, #1
 80068fa:	4622      	mov	r2, r4
 80068fc:	4649      	mov	r1, r9
 80068fe:	4638      	mov	r0, r7
 8006900:	47c0      	blx	r8
 8006902:	3001      	adds	r0, #1
 8006904:	d0e6      	beq.n	80068d4 <_printf_common+0xa4>
 8006906:	3601      	adds	r6, #1
 8006908:	e7d9      	b.n	80068be <_printf_common+0x8e>
	...

0800690c <_printf_i>:
 800690c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	7e0f      	ldrb	r7, [r1, #24]
 8006912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006914:	2f78      	cmp	r7, #120	; 0x78
 8006916:	4691      	mov	r9, r2
 8006918:	4680      	mov	r8, r0
 800691a:	460c      	mov	r4, r1
 800691c:	469a      	mov	sl, r3
 800691e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006922:	d807      	bhi.n	8006934 <_printf_i+0x28>
 8006924:	2f62      	cmp	r7, #98	; 0x62
 8006926:	d80a      	bhi.n	800693e <_printf_i+0x32>
 8006928:	2f00      	cmp	r7, #0
 800692a:	f000 80d4 	beq.w	8006ad6 <_printf_i+0x1ca>
 800692e:	2f58      	cmp	r7, #88	; 0x58
 8006930:	f000 80c0 	beq.w	8006ab4 <_printf_i+0x1a8>
 8006934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800693c:	e03a      	b.n	80069b4 <_printf_i+0xa8>
 800693e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006942:	2b15      	cmp	r3, #21
 8006944:	d8f6      	bhi.n	8006934 <_printf_i+0x28>
 8006946:	a101      	add	r1, pc, #4	; (adr r1, 800694c <_printf_i+0x40>)
 8006948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800694c:	080069a5 	.word	0x080069a5
 8006950:	080069b9 	.word	0x080069b9
 8006954:	08006935 	.word	0x08006935
 8006958:	08006935 	.word	0x08006935
 800695c:	08006935 	.word	0x08006935
 8006960:	08006935 	.word	0x08006935
 8006964:	080069b9 	.word	0x080069b9
 8006968:	08006935 	.word	0x08006935
 800696c:	08006935 	.word	0x08006935
 8006970:	08006935 	.word	0x08006935
 8006974:	08006935 	.word	0x08006935
 8006978:	08006abd 	.word	0x08006abd
 800697c:	080069e5 	.word	0x080069e5
 8006980:	08006a77 	.word	0x08006a77
 8006984:	08006935 	.word	0x08006935
 8006988:	08006935 	.word	0x08006935
 800698c:	08006adf 	.word	0x08006adf
 8006990:	08006935 	.word	0x08006935
 8006994:	080069e5 	.word	0x080069e5
 8006998:	08006935 	.word	0x08006935
 800699c:	08006935 	.word	0x08006935
 80069a0:	08006a7f 	.word	0x08006a7f
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	602a      	str	r2, [r5, #0]
 80069ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069b4:	2301      	movs	r3, #1
 80069b6:	e09f      	b.n	8006af8 <_printf_i+0x1ec>
 80069b8:	6820      	ldr	r0, [r4, #0]
 80069ba:	682b      	ldr	r3, [r5, #0]
 80069bc:	0607      	lsls	r7, r0, #24
 80069be:	f103 0104 	add.w	r1, r3, #4
 80069c2:	6029      	str	r1, [r5, #0]
 80069c4:	d501      	bpl.n	80069ca <_printf_i+0xbe>
 80069c6:	681e      	ldr	r6, [r3, #0]
 80069c8:	e003      	b.n	80069d2 <_printf_i+0xc6>
 80069ca:	0646      	lsls	r6, r0, #25
 80069cc:	d5fb      	bpl.n	80069c6 <_printf_i+0xba>
 80069ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	da03      	bge.n	80069de <_printf_i+0xd2>
 80069d6:	232d      	movs	r3, #45	; 0x2d
 80069d8:	4276      	negs	r6, r6
 80069da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069de:	485a      	ldr	r0, [pc, #360]	; (8006b48 <_printf_i+0x23c>)
 80069e0:	230a      	movs	r3, #10
 80069e2:	e012      	b.n	8006a0a <_printf_i+0xfe>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	6820      	ldr	r0, [r4, #0]
 80069e8:	1d19      	adds	r1, r3, #4
 80069ea:	6029      	str	r1, [r5, #0]
 80069ec:	0605      	lsls	r5, r0, #24
 80069ee:	d501      	bpl.n	80069f4 <_printf_i+0xe8>
 80069f0:	681e      	ldr	r6, [r3, #0]
 80069f2:	e002      	b.n	80069fa <_printf_i+0xee>
 80069f4:	0641      	lsls	r1, r0, #25
 80069f6:	d5fb      	bpl.n	80069f0 <_printf_i+0xe4>
 80069f8:	881e      	ldrh	r6, [r3, #0]
 80069fa:	4853      	ldr	r0, [pc, #332]	; (8006b48 <_printf_i+0x23c>)
 80069fc:	2f6f      	cmp	r7, #111	; 0x6f
 80069fe:	bf0c      	ite	eq
 8006a00:	2308      	moveq	r3, #8
 8006a02:	230a      	movne	r3, #10
 8006a04:	2100      	movs	r1, #0
 8006a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a0a:	6865      	ldr	r5, [r4, #4]
 8006a0c:	60a5      	str	r5, [r4, #8]
 8006a0e:	2d00      	cmp	r5, #0
 8006a10:	bfa2      	ittt	ge
 8006a12:	6821      	ldrge	r1, [r4, #0]
 8006a14:	f021 0104 	bicge.w	r1, r1, #4
 8006a18:	6021      	strge	r1, [r4, #0]
 8006a1a:	b90e      	cbnz	r6, 8006a20 <_printf_i+0x114>
 8006a1c:	2d00      	cmp	r5, #0
 8006a1e:	d04b      	beq.n	8006ab8 <_printf_i+0x1ac>
 8006a20:	4615      	mov	r5, r2
 8006a22:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a26:	fb03 6711 	mls	r7, r3, r1, r6
 8006a2a:	5dc7      	ldrb	r7, [r0, r7]
 8006a2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a30:	4637      	mov	r7, r6
 8006a32:	42bb      	cmp	r3, r7
 8006a34:	460e      	mov	r6, r1
 8006a36:	d9f4      	bls.n	8006a22 <_printf_i+0x116>
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d10b      	bne.n	8006a54 <_printf_i+0x148>
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	07de      	lsls	r6, r3, #31
 8006a40:	d508      	bpl.n	8006a54 <_printf_i+0x148>
 8006a42:	6923      	ldr	r3, [r4, #16]
 8006a44:	6861      	ldr	r1, [r4, #4]
 8006a46:	4299      	cmp	r1, r3
 8006a48:	bfde      	ittt	le
 8006a4a:	2330      	movle	r3, #48	; 0x30
 8006a4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a54:	1b52      	subs	r2, r2, r5
 8006a56:	6122      	str	r2, [r4, #16]
 8006a58:	f8cd a000 	str.w	sl, [sp]
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	aa03      	add	r2, sp, #12
 8006a60:	4621      	mov	r1, r4
 8006a62:	4640      	mov	r0, r8
 8006a64:	f7ff fee4 	bl	8006830 <_printf_common>
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d14a      	bne.n	8006b02 <_printf_i+0x1f6>
 8006a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a70:	b004      	add	sp, #16
 8006a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	f043 0320 	orr.w	r3, r3, #32
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	4833      	ldr	r0, [pc, #204]	; (8006b4c <_printf_i+0x240>)
 8006a80:	2778      	movs	r7, #120	; 0x78
 8006a82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	6829      	ldr	r1, [r5, #0]
 8006a8a:	061f      	lsls	r7, r3, #24
 8006a8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a90:	d402      	bmi.n	8006a98 <_printf_i+0x18c>
 8006a92:	065f      	lsls	r7, r3, #25
 8006a94:	bf48      	it	mi
 8006a96:	b2b6      	uxthmi	r6, r6
 8006a98:	07df      	lsls	r7, r3, #31
 8006a9a:	bf48      	it	mi
 8006a9c:	f043 0320 	orrmi.w	r3, r3, #32
 8006aa0:	6029      	str	r1, [r5, #0]
 8006aa2:	bf48      	it	mi
 8006aa4:	6023      	strmi	r3, [r4, #0]
 8006aa6:	b91e      	cbnz	r6, 8006ab0 <_printf_i+0x1a4>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	f023 0320 	bic.w	r3, r3, #32
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	e7a7      	b.n	8006a04 <_printf_i+0xf8>
 8006ab4:	4824      	ldr	r0, [pc, #144]	; (8006b48 <_printf_i+0x23c>)
 8006ab6:	e7e4      	b.n	8006a82 <_printf_i+0x176>
 8006ab8:	4615      	mov	r5, r2
 8006aba:	e7bd      	b.n	8006a38 <_printf_i+0x12c>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	6826      	ldr	r6, [r4, #0]
 8006ac0:	6961      	ldr	r1, [r4, #20]
 8006ac2:	1d18      	adds	r0, r3, #4
 8006ac4:	6028      	str	r0, [r5, #0]
 8006ac6:	0635      	lsls	r5, r6, #24
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	d501      	bpl.n	8006ad0 <_printf_i+0x1c4>
 8006acc:	6019      	str	r1, [r3, #0]
 8006ace:	e002      	b.n	8006ad6 <_printf_i+0x1ca>
 8006ad0:	0670      	lsls	r0, r6, #25
 8006ad2:	d5fb      	bpl.n	8006acc <_printf_i+0x1c0>
 8006ad4:	8019      	strh	r1, [r3, #0]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6123      	str	r3, [r4, #16]
 8006ada:	4615      	mov	r5, r2
 8006adc:	e7bc      	b.n	8006a58 <_printf_i+0x14c>
 8006ade:	682b      	ldr	r3, [r5, #0]
 8006ae0:	1d1a      	adds	r2, r3, #4
 8006ae2:	602a      	str	r2, [r5, #0]
 8006ae4:	681d      	ldr	r5, [r3, #0]
 8006ae6:	6862      	ldr	r2, [r4, #4]
 8006ae8:	2100      	movs	r1, #0
 8006aea:	4628      	mov	r0, r5
 8006aec:	f7f9 fb88 	bl	8000200 <memchr>
 8006af0:	b108      	cbz	r0, 8006af6 <_printf_i+0x1ea>
 8006af2:	1b40      	subs	r0, r0, r5
 8006af4:	6060      	str	r0, [r4, #4]
 8006af6:	6863      	ldr	r3, [r4, #4]
 8006af8:	6123      	str	r3, [r4, #16]
 8006afa:	2300      	movs	r3, #0
 8006afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b00:	e7aa      	b.n	8006a58 <_printf_i+0x14c>
 8006b02:	6923      	ldr	r3, [r4, #16]
 8006b04:	462a      	mov	r2, r5
 8006b06:	4649      	mov	r1, r9
 8006b08:	4640      	mov	r0, r8
 8006b0a:	47d0      	blx	sl
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d0ad      	beq.n	8006a6c <_printf_i+0x160>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	079b      	lsls	r3, r3, #30
 8006b14:	d413      	bmi.n	8006b3e <_printf_i+0x232>
 8006b16:	68e0      	ldr	r0, [r4, #12]
 8006b18:	9b03      	ldr	r3, [sp, #12]
 8006b1a:	4298      	cmp	r0, r3
 8006b1c:	bfb8      	it	lt
 8006b1e:	4618      	movlt	r0, r3
 8006b20:	e7a6      	b.n	8006a70 <_printf_i+0x164>
 8006b22:	2301      	movs	r3, #1
 8006b24:	4632      	mov	r2, r6
 8006b26:	4649      	mov	r1, r9
 8006b28:	4640      	mov	r0, r8
 8006b2a:	47d0      	blx	sl
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d09d      	beq.n	8006a6c <_printf_i+0x160>
 8006b30:	3501      	adds	r5, #1
 8006b32:	68e3      	ldr	r3, [r4, #12]
 8006b34:	9903      	ldr	r1, [sp, #12]
 8006b36:	1a5b      	subs	r3, r3, r1
 8006b38:	42ab      	cmp	r3, r5
 8006b3a:	dcf2      	bgt.n	8006b22 <_printf_i+0x216>
 8006b3c:	e7eb      	b.n	8006b16 <_printf_i+0x20a>
 8006b3e:	2500      	movs	r5, #0
 8006b40:	f104 0619 	add.w	r6, r4, #25
 8006b44:	e7f5      	b.n	8006b32 <_printf_i+0x226>
 8006b46:	bf00      	nop
 8006b48:	0800cb68 	.word	0x0800cb68
 8006b4c:	0800cb79 	.word	0x0800cb79

08006b50 <_scanf_float>:
 8006b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	b087      	sub	sp, #28
 8006b56:	4617      	mov	r7, r2
 8006b58:	9303      	str	r3, [sp, #12]
 8006b5a:	688b      	ldr	r3, [r1, #8]
 8006b5c:	1e5a      	subs	r2, r3, #1
 8006b5e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b62:	bf83      	ittte	hi
 8006b64:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006b68:	195b      	addhi	r3, r3, r5
 8006b6a:	9302      	strhi	r3, [sp, #8]
 8006b6c:	2300      	movls	r3, #0
 8006b6e:	bf86      	itte	hi
 8006b70:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b74:	608b      	strhi	r3, [r1, #8]
 8006b76:	9302      	strls	r3, [sp, #8]
 8006b78:	680b      	ldr	r3, [r1, #0]
 8006b7a:	468b      	mov	fp, r1
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006b82:	f84b 3b1c 	str.w	r3, [fp], #28
 8006b86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	460c      	mov	r4, r1
 8006b8e:	465e      	mov	r6, fp
 8006b90:	46aa      	mov	sl, r5
 8006b92:	46a9      	mov	r9, r5
 8006b94:	9501      	str	r5, [sp, #4]
 8006b96:	68a2      	ldr	r2, [r4, #8]
 8006b98:	b152      	cbz	r2, 8006bb0 <_scanf_float+0x60>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b4e      	cmp	r3, #78	; 0x4e
 8006ba0:	d864      	bhi.n	8006c6c <_scanf_float+0x11c>
 8006ba2:	2b40      	cmp	r3, #64	; 0x40
 8006ba4:	d83c      	bhi.n	8006c20 <_scanf_float+0xd0>
 8006ba6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006baa:	b2c8      	uxtb	r0, r1
 8006bac:	280e      	cmp	r0, #14
 8006bae:	d93a      	bls.n	8006c26 <_scanf_float+0xd6>
 8006bb0:	f1b9 0f00 	cmp.w	r9, #0
 8006bb4:	d003      	beq.n	8006bbe <_scanf_float+0x6e>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bc2:	f1ba 0f01 	cmp.w	sl, #1
 8006bc6:	f200 8113 	bhi.w	8006df0 <_scanf_float+0x2a0>
 8006bca:	455e      	cmp	r6, fp
 8006bcc:	f200 8105 	bhi.w	8006dda <_scanf_float+0x28a>
 8006bd0:	2501      	movs	r5, #1
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	b007      	add	sp, #28
 8006bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bda:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006bde:	2a0d      	cmp	r2, #13
 8006be0:	d8e6      	bhi.n	8006bb0 <_scanf_float+0x60>
 8006be2:	a101      	add	r1, pc, #4	; (adr r1, 8006be8 <_scanf_float+0x98>)
 8006be4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006be8:	08006d27 	.word	0x08006d27
 8006bec:	08006bb1 	.word	0x08006bb1
 8006bf0:	08006bb1 	.word	0x08006bb1
 8006bf4:	08006bb1 	.word	0x08006bb1
 8006bf8:	08006d87 	.word	0x08006d87
 8006bfc:	08006d5f 	.word	0x08006d5f
 8006c00:	08006bb1 	.word	0x08006bb1
 8006c04:	08006bb1 	.word	0x08006bb1
 8006c08:	08006d35 	.word	0x08006d35
 8006c0c:	08006bb1 	.word	0x08006bb1
 8006c10:	08006bb1 	.word	0x08006bb1
 8006c14:	08006bb1 	.word	0x08006bb1
 8006c18:	08006bb1 	.word	0x08006bb1
 8006c1c:	08006ced 	.word	0x08006ced
 8006c20:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006c24:	e7db      	b.n	8006bde <_scanf_float+0x8e>
 8006c26:	290e      	cmp	r1, #14
 8006c28:	d8c2      	bhi.n	8006bb0 <_scanf_float+0x60>
 8006c2a:	a001      	add	r0, pc, #4	; (adr r0, 8006c30 <_scanf_float+0xe0>)
 8006c2c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c30:	08006cdf 	.word	0x08006cdf
 8006c34:	08006bb1 	.word	0x08006bb1
 8006c38:	08006cdf 	.word	0x08006cdf
 8006c3c:	08006d73 	.word	0x08006d73
 8006c40:	08006bb1 	.word	0x08006bb1
 8006c44:	08006c8d 	.word	0x08006c8d
 8006c48:	08006cc9 	.word	0x08006cc9
 8006c4c:	08006cc9 	.word	0x08006cc9
 8006c50:	08006cc9 	.word	0x08006cc9
 8006c54:	08006cc9 	.word	0x08006cc9
 8006c58:	08006cc9 	.word	0x08006cc9
 8006c5c:	08006cc9 	.word	0x08006cc9
 8006c60:	08006cc9 	.word	0x08006cc9
 8006c64:	08006cc9 	.word	0x08006cc9
 8006c68:	08006cc9 	.word	0x08006cc9
 8006c6c:	2b6e      	cmp	r3, #110	; 0x6e
 8006c6e:	d809      	bhi.n	8006c84 <_scanf_float+0x134>
 8006c70:	2b60      	cmp	r3, #96	; 0x60
 8006c72:	d8b2      	bhi.n	8006bda <_scanf_float+0x8a>
 8006c74:	2b54      	cmp	r3, #84	; 0x54
 8006c76:	d077      	beq.n	8006d68 <_scanf_float+0x218>
 8006c78:	2b59      	cmp	r3, #89	; 0x59
 8006c7a:	d199      	bne.n	8006bb0 <_scanf_float+0x60>
 8006c7c:	2d07      	cmp	r5, #7
 8006c7e:	d197      	bne.n	8006bb0 <_scanf_float+0x60>
 8006c80:	2508      	movs	r5, #8
 8006c82:	e029      	b.n	8006cd8 <_scanf_float+0x188>
 8006c84:	2b74      	cmp	r3, #116	; 0x74
 8006c86:	d06f      	beq.n	8006d68 <_scanf_float+0x218>
 8006c88:	2b79      	cmp	r3, #121	; 0x79
 8006c8a:	e7f6      	b.n	8006c7a <_scanf_float+0x12a>
 8006c8c:	6821      	ldr	r1, [r4, #0]
 8006c8e:	05c8      	lsls	r0, r1, #23
 8006c90:	d51a      	bpl.n	8006cc8 <_scanf_float+0x178>
 8006c92:	9b02      	ldr	r3, [sp, #8]
 8006c94:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006c98:	6021      	str	r1, [r4, #0]
 8006c9a:	f109 0901 	add.w	r9, r9, #1
 8006c9e:	b11b      	cbz	r3, 8006ca8 <_scanf_float+0x158>
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	3201      	adds	r2, #1
 8006ca4:	9302      	str	r3, [sp, #8]
 8006ca6:	60a2      	str	r2, [r4, #8]
 8006ca8:	68a3      	ldr	r3, [r4, #8]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	60a3      	str	r3, [r4, #8]
 8006cae:	6923      	ldr	r3, [r4, #16]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	6123      	str	r3, [r4, #16]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	607b      	str	r3, [r7, #4]
 8006cbc:	f340 8084 	ble.w	8006dc8 <_scanf_float+0x278>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	603b      	str	r3, [r7, #0]
 8006cc6:	e766      	b.n	8006b96 <_scanf_float+0x46>
 8006cc8:	eb1a 0f05 	cmn.w	sl, r5
 8006ccc:	f47f af70 	bne.w	8006bb0 <_scanf_float+0x60>
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006cd6:	6022      	str	r2, [r4, #0]
 8006cd8:	f806 3b01 	strb.w	r3, [r6], #1
 8006cdc:	e7e4      	b.n	8006ca8 <_scanf_float+0x158>
 8006cde:	6822      	ldr	r2, [r4, #0]
 8006ce0:	0610      	lsls	r0, r2, #24
 8006ce2:	f57f af65 	bpl.w	8006bb0 <_scanf_float+0x60>
 8006ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cea:	e7f4      	b.n	8006cd6 <_scanf_float+0x186>
 8006cec:	f1ba 0f00 	cmp.w	sl, #0
 8006cf0:	d10e      	bne.n	8006d10 <_scanf_float+0x1c0>
 8006cf2:	f1b9 0f00 	cmp.w	r9, #0
 8006cf6:	d10e      	bne.n	8006d16 <_scanf_float+0x1c6>
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006cfe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d02:	d108      	bne.n	8006d16 <_scanf_float+0x1c6>
 8006d04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d08:	6022      	str	r2, [r4, #0]
 8006d0a:	f04f 0a01 	mov.w	sl, #1
 8006d0e:	e7e3      	b.n	8006cd8 <_scanf_float+0x188>
 8006d10:	f1ba 0f02 	cmp.w	sl, #2
 8006d14:	d055      	beq.n	8006dc2 <_scanf_float+0x272>
 8006d16:	2d01      	cmp	r5, #1
 8006d18:	d002      	beq.n	8006d20 <_scanf_float+0x1d0>
 8006d1a:	2d04      	cmp	r5, #4
 8006d1c:	f47f af48 	bne.w	8006bb0 <_scanf_float+0x60>
 8006d20:	3501      	adds	r5, #1
 8006d22:	b2ed      	uxtb	r5, r5
 8006d24:	e7d8      	b.n	8006cd8 <_scanf_float+0x188>
 8006d26:	f1ba 0f01 	cmp.w	sl, #1
 8006d2a:	f47f af41 	bne.w	8006bb0 <_scanf_float+0x60>
 8006d2e:	f04f 0a02 	mov.w	sl, #2
 8006d32:	e7d1      	b.n	8006cd8 <_scanf_float+0x188>
 8006d34:	b97d      	cbnz	r5, 8006d56 <_scanf_float+0x206>
 8006d36:	f1b9 0f00 	cmp.w	r9, #0
 8006d3a:	f47f af3c 	bne.w	8006bb6 <_scanf_float+0x66>
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d44:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d48:	f47f af39 	bne.w	8006bbe <_scanf_float+0x6e>
 8006d4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d50:	6022      	str	r2, [r4, #0]
 8006d52:	2501      	movs	r5, #1
 8006d54:	e7c0      	b.n	8006cd8 <_scanf_float+0x188>
 8006d56:	2d03      	cmp	r5, #3
 8006d58:	d0e2      	beq.n	8006d20 <_scanf_float+0x1d0>
 8006d5a:	2d05      	cmp	r5, #5
 8006d5c:	e7de      	b.n	8006d1c <_scanf_float+0x1cc>
 8006d5e:	2d02      	cmp	r5, #2
 8006d60:	f47f af26 	bne.w	8006bb0 <_scanf_float+0x60>
 8006d64:	2503      	movs	r5, #3
 8006d66:	e7b7      	b.n	8006cd8 <_scanf_float+0x188>
 8006d68:	2d06      	cmp	r5, #6
 8006d6a:	f47f af21 	bne.w	8006bb0 <_scanf_float+0x60>
 8006d6e:	2507      	movs	r5, #7
 8006d70:	e7b2      	b.n	8006cd8 <_scanf_float+0x188>
 8006d72:	6822      	ldr	r2, [r4, #0]
 8006d74:	0591      	lsls	r1, r2, #22
 8006d76:	f57f af1b 	bpl.w	8006bb0 <_scanf_float+0x60>
 8006d7a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006d7e:	6022      	str	r2, [r4, #0]
 8006d80:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d84:	e7a8      	b.n	8006cd8 <_scanf_float+0x188>
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006d8c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006d90:	d006      	beq.n	8006da0 <_scanf_float+0x250>
 8006d92:	0550      	lsls	r0, r2, #21
 8006d94:	f57f af0c 	bpl.w	8006bb0 <_scanf_float+0x60>
 8006d98:	f1b9 0f00 	cmp.w	r9, #0
 8006d9c:	f43f af0f 	beq.w	8006bbe <_scanf_float+0x6e>
 8006da0:	0591      	lsls	r1, r2, #22
 8006da2:	bf58      	it	pl
 8006da4:	9901      	ldrpl	r1, [sp, #4]
 8006da6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006daa:	bf58      	it	pl
 8006dac:	eba9 0101 	subpl.w	r1, r9, r1
 8006db0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006db4:	bf58      	it	pl
 8006db6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006dba:	6022      	str	r2, [r4, #0]
 8006dbc:	f04f 0900 	mov.w	r9, #0
 8006dc0:	e78a      	b.n	8006cd8 <_scanf_float+0x188>
 8006dc2:	f04f 0a03 	mov.w	sl, #3
 8006dc6:	e787      	b.n	8006cd8 <_scanf_float+0x188>
 8006dc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006dcc:	4639      	mov	r1, r7
 8006dce:	4640      	mov	r0, r8
 8006dd0:	4798      	blx	r3
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	f43f aedf 	beq.w	8006b96 <_scanf_float+0x46>
 8006dd8:	e6ea      	b.n	8006bb0 <_scanf_float+0x60>
 8006dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006de2:	463a      	mov	r2, r7
 8006de4:	4640      	mov	r0, r8
 8006de6:	4798      	blx	r3
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	e6ec      	b.n	8006bca <_scanf_float+0x7a>
 8006df0:	1e6b      	subs	r3, r5, #1
 8006df2:	2b06      	cmp	r3, #6
 8006df4:	d825      	bhi.n	8006e42 <_scanf_float+0x2f2>
 8006df6:	2d02      	cmp	r5, #2
 8006df8:	d836      	bhi.n	8006e68 <_scanf_float+0x318>
 8006dfa:	455e      	cmp	r6, fp
 8006dfc:	f67f aee8 	bls.w	8006bd0 <_scanf_float+0x80>
 8006e00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e04:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e08:	463a      	mov	r2, r7
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4798      	blx	r3
 8006e0e:	6923      	ldr	r3, [r4, #16]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	6123      	str	r3, [r4, #16]
 8006e14:	e7f1      	b.n	8006dfa <_scanf_float+0x2aa>
 8006e16:	9802      	ldr	r0, [sp, #8]
 8006e18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e1c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006e20:	9002      	str	r0, [sp, #8]
 8006e22:	463a      	mov	r2, r7
 8006e24:	4640      	mov	r0, r8
 8006e26:	4798      	blx	r3
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	6123      	str	r3, [r4, #16]
 8006e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e32:	fa5f fa8a 	uxtb.w	sl, sl
 8006e36:	f1ba 0f02 	cmp.w	sl, #2
 8006e3a:	d1ec      	bne.n	8006e16 <_scanf_float+0x2c6>
 8006e3c:	3d03      	subs	r5, #3
 8006e3e:	b2ed      	uxtb	r5, r5
 8006e40:	1b76      	subs	r6, r6, r5
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	05da      	lsls	r2, r3, #23
 8006e46:	d52f      	bpl.n	8006ea8 <_scanf_float+0x358>
 8006e48:	055b      	lsls	r3, r3, #21
 8006e4a:	d510      	bpl.n	8006e6e <_scanf_float+0x31e>
 8006e4c:	455e      	cmp	r6, fp
 8006e4e:	f67f aebf 	bls.w	8006bd0 <_scanf_float+0x80>
 8006e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e5a:	463a      	mov	r2, r7
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	4798      	blx	r3
 8006e60:	6923      	ldr	r3, [r4, #16]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	6123      	str	r3, [r4, #16]
 8006e66:	e7f1      	b.n	8006e4c <_scanf_float+0x2fc>
 8006e68:	46aa      	mov	sl, r5
 8006e6a:	9602      	str	r6, [sp, #8]
 8006e6c:	e7df      	b.n	8006e2e <_scanf_float+0x2de>
 8006e6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	2965      	cmp	r1, #101	; 0x65
 8006e76:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e7a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e7e:	6123      	str	r3, [r4, #16]
 8006e80:	d00c      	beq.n	8006e9c <_scanf_float+0x34c>
 8006e82:	2945      	cmp	r1, #69	; 0x45
 8006e84:	d00a      	beq.n	8006e9c <_scanf_float+0x34c>
 8006e86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e8a:	463a      	mov	r2, r7
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	4798      	blx	r3
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	1eb5      	subs	r5, r6, #2
 8006e9a:	6123      	str	r3, [r4, #16]
 8006e9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ea0:	463a      	mov	r2, r7
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4798      	blx	r3
 8006ea6:	462e      	mov	r6, r5
 8006ea8:	6825      	ldr	r5, [r4, #0]
 8006eaa:	f015 0510 	ands.w	r5, r5, #16
 8006eae:	d158      	bne.n	8006f62 <_scanf_float+0x412>
 8006eb0:	7035      	strb	r5, [r6, #0]
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebc:	d11c      	bne.n	8006ef8 <_scanf_float+0x3a8>
 8006ebe:	9b01      	ldr	r3, [sp, #4]
 8006ec0:	454b      	cmp	r3, r9
 8006ec2:	eba3 0209 	sub.w	r2, r3, r9
 8006ec6:	d124      	bne.n	8006f12 <_scanf_float+0x3c2>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	4659      	mov	r1, fp
 8006ecc:	4640      	mov	r0, r8
 8006ece:	f002 fc67 	bl	80097a0 <_strtod_r>
 8006ed2:	9b03      	ldr	r3, [sp, #12]
 8006ed4:	6821      	ldr	r1, [r4, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f011 0f02 	tst.w	r1, #2
 8006edc:	ec57 6b10 	vmov	r6, r7, d0
 8006ee0:	f103 0204 	add.w	r2, r3, #4
 8006ee4:	d020      	beq.n	8006f28 <_scanf_float+0x3d8>
 8006ee6:	9903      	ldr	r1, [sp, #12]
 8006ee8:	600a      	str	r2, [r1, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	e9c3 6700 	strd	r6, r7, [r3]
 8006ef0:	68e3      	ldr	r3, [r4, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60e3      	str	r3, [r4, #12]
 8006ef6:	e66c      	b.n	8006bd2 <_scanf_float+0x82>
 8006ef8:	9b04      	ldr	r3, [sp, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0e4      	beq.n	8006ec8 <_scanf_float+0x378>
 8006efe:	9905      	ldr	r1, [sp, #20]
 8006f00:	230a      	movs	r3, #10
 8006f02:	462a      	mov	r2, r5
 8006f04:	3101      	adds	r1, #1
 8006f06:	4640      	mov	r0, r8
 8006f08:	f002 fcd2 	bl	80098b0 <_strtol_r>
 8006f0c:	9b04      	ldr	r3, [sp, #16]
 8006f0e:	9e05      	ldr	r6, [sp, #20]
 8006f10:	1ac2      	subs	r2, r0, r3
 8006f12:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f16:	429e      	cmp	r6, r3
 8006f18:	bf28      	it	cs
 8006f1a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006f1e:	4912      	ldr	r1, [pc, #72]	; (8006f68 <_scanf_float+0x418>)
 8006f20:	4630      	mov	r0, r6
 8006f22:	f000 f8e7 	bl	80070f4 <siprintf>
 8006f26:	e7cf      	b.n	8006ec8 <_scanf_float+0x378>
 8006f28:	f011 0f04 	tst.w	r1, #4
 8006f2c:	9903      	ldr	r1, [sp, #12]
 8006f2e:	600a      	str	r2, [r1, #0]
 8006f30:	d1db      	bne.n	8006eea <_scanf_float+0x39a>
 8006f32:	f8d3 8000 	ldr.w	r8, [r3]
 8006f36:	ee10 2a10 	vmov	r2, s0
 8006f3a:	ee10 0a10 	vmov	r0, s0
 8006f3e:	463b      	mov	r3, r7
 8006f40:	4639      	mov	r1, r7
 8006f42:	f7f9 fe0b 	bl	8000b5c <__aeabi_dcmpun>
 8006f46:	b128      	cbz	r0, 8006f54 <_scanf_float+0x404>
 8006f48:	4808      	ldr	r0, [pc, #32]	; (8006f6c <_scanf_float+0x41c>)
 8006f4a:	f000 f9ed 	bl	8007328 <nanf>
 8006f4e:	ed88 0a00 	vstr	s0, [r8]
 8006f52:	e7cd      	b.n	8006ef0 <_scanf_float+0x3a0>
 8006f54:	4630      	mov	r0, r6
 8006f56:	4639      	mov	r1, r7
 8006f58:	f7f9 fe5e 	bl	8000c18 <__aeabi_d2f>
 8006f5c:	f8c8 0000 	str.w	r0, [r8]
 8006f60:	e7c6      	b.n	8006ef0 <_scanf_float+0x3a0>
 8006f62:	2500      	movs	r5, #0
 8006f64:	e635      	b.n	8006bd2 <_scanf_float+0x82>
 8006f66:	bf00      	nop
 8006f68:	0800cb8a 	.word	0x0800cb8a
 8006f6c:	0800cf38 	.word	0x0800cf38

08006f70 <std>:
 8006f70:	2300      	movs	r3, #0
 8006f72:	b510      	push	{r4, lr}
 8006f74:	4604      	mov	r4, r0
 8006f76:	e9c0 3300 	strd	r3, r3, [r0]
 8006f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f7e:	6083      	str	r3, [r0, #8]
 8006f80:	8181      	strh	r1, [r0, #12]
 8006f82:	6643      	str	r3, [r0, #100]	; 0x64
 8006f84:	81c2      	strh	r2, [r0, #14]
 8006f86:	6183      	str	r3, [r0, #24]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	2208      	movs	r2, #8
 8006f8c:	305c      	adds	r0, #92	; 0x5c
 8006f8e:	f000 f942 	bl	8007216 <memset>
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <std+0x58>)
 8006f94:	6263      	str	r3, [r4, #36]	; 0x24
 8006f96:	4b0d      	ldr	r3, [pc, #52]	; (8006fcc <std+0x5c>)
 8006f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <std+0x60>)
 8006f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f9e:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <std+0x64>)
 8006fa0:	6323      	str	r3, [r4, #48]	; 0x30
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <std+0x68>)
 8006fa4:	6224      	str	r4, [r4, #32]
 8006fa6:	429c      	cmp	r4, r3
 8006fa8:	d006      	beq.n	8006fb8 <std+0x48>
 8006faa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006fae:	4294      	cmp	r4, r2
 8006fb0:	d002      	beq.n	8006fb8 <std+0x48>
 8006fb2:	33d0      	adds	r3, #208	; 0xd0
 8006fb4:	429c      	cmp	r4, r3
 8006fb6:	d105      	bne.n	8006fc4 <std+0x54>
 8006fb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc0:	f000 b9a6 	b.w	8007310 <__retarget_lock_init_recursive>
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	bf00      	nop
 8006fc8:	0800718d 	.word	0x0800718d
 8006fcc:	080071b3 	.word	0x080071b3
 8006fd0:	080071eb 	.word	0x080071eb
 8006fd4:	0800720f 	.word	0x0800720f
 8006fd8:	20000510 	.word	0x20000510

08006fdc <stdio_exit_handler>:
 8006fdc:	4a02      	ldr	r2, [pc, #8]	; (8006fe8 <stdio_exit_handler+0xc>)
 8006fde:	4903      	ldr	r1, [pc, #12]	; (8006fec <stdio_exit_handler+0x10>)
 8006fe0:	4803      	ldr	r0, [pc, #12]	; (8006ff0 <stdio_exit_handler+0x14>)
 8006fe2:	f000 b869 	b.w	80070b8 <_fwalk_sglue>
 8006fe6:	bf00      	nop
 8006fe8:	2000000c 	.word	0x2000000c
 8006fec:	0800a2b1 	.word	0x0800a2b1
 8006ff0:	20000018 	.word	0x20000018

08006ff4 <cleanup_stdio>:
 8006ff4:	6841      	ldr	r1, [r0, #4]
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <cleanup_stdio+0x34>)
 8006ff8:	4299      	cmp	r1, r3
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	d001      	beq.n	8007004 <cleanup_stdio+0x10>
 8007000:	f003 f956 	bl	800a2b0 <_fflush_r>
 8007004:	68a1      	ldr	r1, [r4, #8]
 8007006:	4b09      	ldr	r3, [pc, #36]	; (800702c <cleanup_stdio+0x38>)
 8007008:	4299      	cmp	r1, r3
 800700a:	d002      	beq.n	8007012 <cleanup_stdio+0x1e>
 800700c:	4620      	mov	r0, r4
 800700e:	f003 f94f 	bl	800a2b0 <_fflush_r>
 8007012:	68e1      	ldr	r1, [r4, #12]
 8007014:	4b06      	ldr	r3, [pc, #24]	; (8007030 <cleanup_stdio+0x3c>)
 8007016:	4299      	cmp	r1, r3
 8007018:	d004      	beq.n	8007024 <cleanup_stdio+0x30>
 800701a:	4620      	mov	r0, r4
 800701c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007020:	f003 b946 	b.w	800a2b0 <_fflush_r>
 8007024:	bd10      	pop	{r4, pc}
 8007026:	bf00      	nop
 8007028:	20000510 	.word	0x20000510
 800702c:	20000578 	.word	0x20000578
 8007030:	200005e0 	.word	0x200005e0

08007034 <global_stdio_init.part.0>:
 8007034:	b510      	push	{r4, lr}
 8007036:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <global_stdio_init.part.0+0x30>)
 8007038:	4c0b      	ldr	r4, [pc, #44]	; (8007068 <global_stdio_init.part.0+0x34>)
 800703a:	4a0c      	ldr	r2, [pc, #48]	; (800706c <global_stdio_init.part.0+0x38>)
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	4620      	mov	r0, r4
 8007040:	2200      	movs	r2, #0
 8007042:	2104      	movs	r1, #4
 8007044:	f7ff ff94 	bl	8006f70 <std>
 8007048:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800704c:	2201      	movs	r2, #1
 800704e:	2109      	movs	r1, #9
 8007050:	f7ff ff8e 	bl	8006f70 <std>
 8007054:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007058:	2202      	movs	r2, #2
 800705a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800705e:	2112      	movs	r1, #18
 8007060:	f7ff bf86 	b.w	8006f70 <std>
 8007064:	20000648 	.word	0x20000648
 8007068:	20000510 	.word	0x20000510
 800706c:	08006fdd 	.word	0x08006fdd

08007070 <__sfp_lock_acquire>:
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <__sfp_lock_acquire+0x8>)
 8007072:	f000 b94e 	b.w	8007312 <__retarget_lock_acquire_recursive>
 8007076:	bf00      	nop
 8007078:	20000651 	.word	0x20000651

0800707c <__sfp_lock_release>:
 800707c:	4801      	ldr	r0, [pc, #4]	; (8007084 <__sfp_lock_release+0x8>)
 800707e:	f000 b949 	b.w	8007314 <__retarget_lock_release_recursive>
 8007082:	bf00      	nop
 8007084:	20000651 	.word	0x20000651

08007088 <__sinit>:
 8007088:	b510      	push	{r4, lr}
 800708a:	4604      	mov	r4, r0
 800708c:	f7ff fff0 	bl	8007070 <__sfp_lock_acquire>
 8007090:	6a23      	ldr	r3, [r4, #32]
 8007092:	b11b      	cbz	r3, 800709c <__sinit+0x14>
 8007094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007098:	f7ff bff0 	b.w	800707c <__sfp_lock_release>
 800709c:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <__sinit+0x28>)
 800709e:	6223      	str	r3, [r4, #32]
 80070a0:	4b04      	ldr	r3, [pc, #16]	; (80070b4 <__sinit+0x2c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f5      	bne.n	8007094 <__sinit+0xc>
 80070a8:	f7ff ffc4 	bl	8007034 <global_stdio_init.part.0>
 80070ac:	e7f2      	b.n	8007094 <__sinit+0xc>
 80070ae:	bf00      	nop
 80070b0:	08006ff5 	.word	0x08006ff5
 80070b4:	20000648 	.word	0x20000648

080070b8 <_fwalk_sglue>:
 80070b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070bc:	4607      	mov	r7, r0
 80070be:	4688      	mov	r8, r1
 80070c0:	4614      	mov	r4, r2
 80070c2:	2600      	movs	r6, #0
 80070c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070c8:	f1b9 0901 	subs.w	r9, r9, #1
 80070cc:	d505      	bpl.n	80070da <_fwalk_sglue+0x22>
 80070ce:	6824      	ldr	r4, [r4, #0]
 80070d0:	2c00      	cmp	r4, #0
 80070d2:	d1f7      	bne.n	80070c4 <_fwalk_sglue+0xc>
 80070d4:	4630      	mov	r0, r6
 80070d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070da:	89ab      	ldrh	r3, [r5, #12]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d907      	bls.n	80070f0 <_fwalk_sglue+0x38>
 80070e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070e4:	3301      	adds	r3, #1
 80070e6:	d003      	beq.n	80070f0 <_fwalk_sglue+0x38>
 80070e8:	4629      	mov	r1, r5
 80070ea:	4638      	mov	r0, r7
 80070ec:	47c0      	blx	r8
 80070ee:	4306      	orrs	r6, r0
 80070f0:	3568      	adds	r5, #104	; 0x68
 80070f2:	e7e9      	b.n	80070c8 <_fwalk_sglue+0x10>

080070f4 <siprintf>:
 80070f4:	b40e      	push	{r1, r2, r3}
 80070f6:	b500      	push	{lr}
 80070f8:	b09c      	sub	sp, #112	; 0x70
 80070fa:	ab1d      	add	r3, sp, #116	; 0x74
 80070fc:	9002      	str	r0, [sp, #8]
 80070fe:	9006      	str	r0, [sp, #24]
 8007100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007104:	4809      	ldr	r0, [pc, #36]	; (800712c <siprintf+0x38>)
 8007106:	9107      	str	r1, [sp, #28]
 8007108:	9104      	str	r1, [sp, #16]
 800710a:	4909      	ldr	r1, [pc, #36]	; (8007130 <siprintf+0x3c>)
 800710c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007110:	9105      	str	r1, [sp, #20]
 8007112:	6800      	ldr	r0, [r0, #0]
 8007114:	9301      	str	r3, [sp, #4]
 8007116:	a902      	add	r1, sp, #8
 8007118:	f002 fc26 	bl	8009968 <_svfiprintf_r>
 800711c:	9b02      	ldr	r3, [sp, #8]
 800711e:	2200      	movs	r2, #0
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	b01c      	add	sp, #112	; 0x70
 8007124:	f85d eb04 	ldr.w	lr, [sp], #4
 8007128:	b003      	add	sp, #12
 800712a:	4770      	bx	lr
 800712c:	20000064 	.word	0x20000064
 8007130:	ffff0208 	.word	0xffff0208

08007134 <siscanf>:
 8007134:	b40e      	push	{r1, r2, r3}
 8007136:	b510      	push	{r4, lr}
 8007138:	b09f      	sub	sp, #124	; 0x7c
 800713a:	ac21      	add	r4, sp, #132	; 0x84
 800713c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007140:	f854 2b04 	ldr.w	r2, [r4], #4
 8007144:	9201      	str	r2, [sp, #4]
 8007146:	f8ad 101c 	strh.w	r1, [sp, #28]
 800714a:	9004      	str	r0, [sp, #16]
 800714c:	9008      	str	r0, [sp, #32]
 800714e:	f7f9 f8a7 	bl	80002a0 <strlen>
 8007152:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <siscanf+0x50>)
 8007154:	9005      	str	r0, [sp, #20]
 8007156:	9009      	str	r0, [sp, #36]	; 0x24
 8007158:	930d      	str	r3, [sp, #52]	; 0x34
 800715a:	480b      	ldr	r0, [pc, #44]	; (8007188 <siscanf+0x54>)
 800715c:	9a01      	ldr	r2, [sp, #4]
 800715e:	6800      	ldr	r0, [r0, #0]
 8007160:	9403      	str	r4, [sp, #12]
 8007162:	2300      	movs	r3, #0
 8007164:	9311      	str	r3, [sp, #68]	; 0x44
 8007166:	9316      	str	r3, [sp, #88]	; 0x58
 8007168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800716c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007170:	a904      	add	r1, sp, #16
 8007172:	4623      	mov	r3, r4
 8007174:	f002 fd50 	bl	8009c18 <__ssvfiscanf_r>
 8007178:	b01f      	add	sp, #124	; 0x7c
 800717a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800717e:	b003      	add	sp, #12
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	080071af 	.word	0x080071af
 8007188:	20000064 	.word	0x20000064

0800718c <__sread>:
 800718c:	b510      	push	{r4, lr}
 800718e:	460c      	mov	r4, r1
 8007190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007194:	f000 f86e 	bl	8007274 <_read_r>
 8007198:	2800      	cmp	r0, #0
 800719a:	bfab      	itete	ge
 800719c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800719e:	89a3      	ldrhlt	r3, [r4, #12]
 80071a0:	181b      	addge	r3, r3, r0
 80071a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071a6:	bfac      	ite	ge
 80071a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80071aa:	81a3      	strhlt	r3, [r4, #12]
 80071ac:	bd10      	pop	{r4, pc}

080071ae <__seofread>:
 80071ae:	2000      	movs	r0, #0
 80071b0:	4770      	bx	lr

080071b2 <__swrite>:
 80071b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b6:	461f      	mov	r7, r3
 80071b8:	898b      	ldrh	r3, [r1, #12]
 80071ba:	05db      	lsls	r3, r3, #23
 80071bc:	4605      	mov	r5, r0
 80071be:	460c      	mov	r4, r1
 80071c0:	4616      	mov	r6, r2
 80071c2:	d505      	bpl.n	80071d0 <__swrite+0x1e>
 80071c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c8:	2302      	movs	r3, #2
 80071ca:	2200      	movs	r2, #0
 80071cc:	f000 f840 	bl	8007250 <_lseek_r>
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	4632      	mov	r2, r6
 80071de:	463b      	mov	r3, r7
 80071e0:	4628      	mov	r0, r5
 80071e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071e6:	f000 b857 	b.w	8007298 <_write_r>

080071ea <__sseek>:
 80071ea:	b510      	push	{r4, lr}
 80071ec:	460c      	mov	r4, r1
 80071ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f2:	f000 f82d 	bl	8007250 <_lseek_r>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	bf15      	itete	ne
 80071fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80071fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007206:	81a3      	strheq	r3, [r4, #12]
 8007208:	bf18      	it	ne
 800720a:	81a3      	strhne	r3, [r4, #12]
 800720c:	bd10      	pop	{r4, pc}

0800720e <__sclose>:
 800720e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007212:	f000 b80d 	b.w	8007230 <_close_r>

08007216 <memset>:
 8007216:	4402      	add	r2, r0
 8007218:	4603      	mov	r3, r0
 800721a:	4293      	cmp	r3, r2
 800721c:	d100      	bne.n	8007220 <memset+0xa>
 800721e:	4770      	bx	lr
 8007220:	f803 1b01 	strb.w	r1, [r3], #1
 8007224:	e7f9      	b.n	800721a <memset+0x4>
	...

08007228 <_localeconv_r>:
 8007228:	4800      	ldr	r0, [pc, #0]	; (800722c <_localeconv_r+0x4>)
 800722a:	4770      	bx	lr
 800722c:	20000158 	.word	0x20000158

08007230 <_close_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4d06      	ldr	r5, [pc, #24]	; (800724c <_close_r+0x1c>)
 8007234:	2300      	movs	r3, #0
 8007236:	4604      	mov	r4, r0
 8007238:	4608      	mov	r0, r1
 800723a:	602b      	str	r3, [r5, #0]
 800723c:	f7fb f9e3 	bl	8002606 <_close>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d102      	bne.n	800724a <_close_r+0x1a>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b103      	cbz	r3, 800724a <_close_r+0x1a>
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	2000064c 	.word	0x2000064c

08007250 <_lseek_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4d07      	ldr	r5, [pc, #28]	; (8007270 <_lseek_r+0x20>)
 8007254:	4604      	mov	r4, r0
 8007256:	4608      	mov	r0, r1
 8007258:	4611      	mov	r1, r2
 800725a:	2200      	movs	r2, #0
 800725c:	602a      	str	r2, [r5, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	f7fb f9f8 	bl	8002654 <_lseek>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d102      	bne.n	800726e <_lseek_r+0x1e>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	b103      	cbz	r3, 800726e <_lseek_r+0x1e>
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	2000064c 	.word	0x2000064c

08007274 <_read_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d07      	ldr	r5, [pc, #28]	; (8007294 <_read_r+0x20>)
 8007278:	4604      	mov	r4, r0
 800727a:	4608      	mov	r0, r1
 800727c:	4611      	mov	r1, r2
 800727e:	2200      	movs	r2, #0
 8007280:	602a      	str	r2, [r5, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	f7fb f986 	bl	8002594 <_read>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_read_r+0x1e>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_read_r+0x1e>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	2000064c 	.word	0x2000064c

08007298 <_write_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d07      	ldr	r5, [pc, #28]	; (80072b8 <_write_r+0x20>)
 800729c:	4604      	mov	r4, r0
 800729e:	4608      	mov	r0, r1
 80072a0:	4611      	mov	r1, r2
 80072a2:	2200      	movs	r2, #0
 80072a4:	602a      	str	r2, [r5, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f7fb f991 	bl	80025ce <_write>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_write_r+0x1e>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_write_r+0x1e>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	2000064c 	.word	0x2000064c

080072bc <__errno>:
 80072bc:	4b01      	ldr	r3, [pc, #4]	; (80072c4 <__errno+0x8>)
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20000064 	.word	0x20000064

080072c8 <__libc_init_array>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	4d0d      	ldr	r5, [pc, #52]	; (8007300 <__libc_init_array+0x38>)
 80072cc:	4c0d      	ldr	r4, [pc, #52]	; (8007304 <__libc_init_array+0x3c>)
 80072ce:	1b64      	subs	r4, r4, r5
 80072d0:	10a4      	asrs	r4, r4, #2
 80072d2:	2600      	movs	r6, #0
 80072d4:	42a6      	cmp	r6, r4
 80072d6:	d109      	bne.n	80072ec <__libc_init_array+0x24>
 80072d8:	4d0b      	ldr	r5, [pc, #44]	; (8007308 <__libc_init_array+0x40>)
 80072da:	4c0c      	ldr	r4, [pc, #48]	; (800730c <__libc_init_array+0x44>)
 80072dc:	f005 fbf4 	bl	800cac8 <_init>
 80072e0:	1b64      	subs	r4, r4, r5
 80072e2:	10a4      	asrs	r4, r4, #2
 80072e4:	2600      	movs	r6, #0
 80072e6:	42a6      	cmp	r6, r4
 80072e8:	d105      	bne.n	80072f6 <__libc_init_array+0x2e>
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f0:	4798      	blx	r3
 80072f2:	3601      	adds	r6, #1
 80072f4:	e7ee      	b.n	80072d4 <__libc_init_array+0xc>
 80072f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fa:	4798      	blx	r3
 80072fc:	3601      	adds	r6, #1
 80072fe:	e7f2      	b.n	80072e6 <__libc_init_array+0x1e>
 8007300:	0800d1f0 	.word	0x0800d1f0
 8007304:	0800d1f0 	.word	0x0800d1f0
 8007308:	0800d1f0 	.word	0x0800d1f0
 800730c:	0800d1f4 	.word	0x0800d1f4

08007310 <__retarget_lock_init_recursive>:
 8007310:	4770      	bx	lr

08007312 <__retarget_lock_acquire_recursive>:
 8007312:	4770      	bx	lr

08007314 <__retarget_lock_release_recursive>:
 8007314:	4770      	bx	lr

08007316 <strcpy>:
 8007316:	4603      	mov	r3, r0
 8007318:	f811 2b01 	ldrb.w	r2, [r1], #1
 800731c:	f803 2b01 	strb.w	r2, [r3], #1
 8007320:	2a00      	cmp	r2, #0
 8007322:	d1f9      	bne.n	8007318 <strcpy+0x2>
 8007324:	4770      	bx	lr
	...

08007328 <nanf>:
 8007328:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007330 <nanf+0x8>
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	7fc00000 	.word	0x7fc00000

08007334 <quorem>:
 8007334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	6903      	ldr	r3, [r0, #16]
 800733a:	690c      	ldr	r4, [r1, #16]
 800733c:	42a3      	cmp	r3, r4
 800733e:	4607      	mov	r7, r0
 8007340:	db7e      	blt.n	8007440 <quorem+0x10c>
 8007342:	3c01      	subs	r4, #1
 8007344:	f101 0814 	add.w	r8, r1, #20
 8007348:	f100 0514 	add.w	r5, r0, #20
 800734c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007356:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800735a:	3301      	adds	r3, #1
 800735c:	429a      	cmp	r2, r3
 800735e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007362:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007366:	fbb2 f6f3 	udiv	r6, r2, r3
 800736a:	d331      	bcc.n	80073d0 <quorem+0x9c>
 800736c:	f04f 0e00 	mov.w	lr, #0
 8007370:	4640      	mov	r0, r8
 8007372:	46ac      	mov	ip, r5
 8007374:	46f2      	mov	sl, lr
 8007376:	f850 2b04 	ldr.w	r2, [r0], #4
 800737a:	b293      	uxth	r3, r2
 800737c:	fb06 e303 	mla	r3, r6, r3, lr
 8007380:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007384:	0c1a      	lsrs	r2, r3, #16
 8007386:	b29b      	uxth	r3, r3
 8007388:	ebaa 0303 	sub.w	r3, sl, r3
 800738c:	f8dc a000 	ldr.w	sl, [ip]
 8007390:	fa13 f38a 	uxtah	r3, r3, sl
 8007394:	fb06 220e 	mla	r2, r6, lr, r2
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	9b00      	ldr	r3, [sp, #0]
 800739c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073a0:	b292      	uxth	r2, r2
 80073a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80073ae:	4581      	cmp	r9, r0
 80073b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073b4:	f84c 3b04 	str.w	r3, [ip], #4
 80073b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073bc:	d2db      	bcs.n	8007376 <quorem+0x42>
 80073be:	f855 300b 	ldr.w	r3, [r5, fp]
 80073c2:	b92b      	cbnz	r3, 80073d0 <quorem+0x9c>
 80073c4:	9b01      	ldr	r3, [sp, #4]
 80073c6:	3b04      	subs	r3, #4
 80073c8:	429d      	cmp	r5, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	d32c      	bcc.n	8007428 <quorem+0xf4>
 80073ce:	613c      	str	r4, [r7, #16]
 80073d0:	4638      	mov	r0, r7
 80073d2:	f001 f9f1 	bl	80087b8 <__mcmp>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	db22      	blt.n	8007420 <quorem+0xec>
 80073da:	3601      	adds	r6, #1
 80073dc:	4629      	mov	r1, r5
 80073de:	2000      	movs	r0, #0
 80073e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80073e4:	f8d1 c000 	ldr.w	ip, [r1]
 80073e8:	b293      	uxth	r3, r2
 80073ea:	1ac3      	subs	r3, r0, r3
 80073ec:	0c12      	lsrs	r2, r2, #16
 80073ee:	fa13 f38c 	uxtah	r3, r3, ip
 80073f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80073f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007400:	45c1      	cmp	r9, r8
 8007402:	f841 3b04 	str.w	r3, [r1], #4
 8007406:	ea4f 4022 	mov.w	r0, r2, asr #16
 800740a:	d2e9      	bcs.n	80073e0 <quorem+0xac>
 800740c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007410:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007414:	b922      	cbnz	r2, 8007420 <quorem+0xec>
 8007416:	3b04      	subs	r3, #4
 8007418:	429d      	cmp	r5, r3
 800741a:	461a      	mov	r2, r3
 800741c:	d30a      	bcc.n	8007434 <quorem+0x100>
 800741e:	613c      	str	r4, [r7, #16]
 8007420:	4630      	mov	r0, r6
 8007422:	b003      	add	sp, #12
 8007424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	3b04      	subs	r3, #4
 800742c:	2a00      	cmp	r2, #0
 800742e:	d1ce      	bne.n	80073ce <quorem+0x9a>
 8007430:	3c01      	subs	r4, #1
 8007432:	e7c9      	b.n	80073c8 <quorem+0x94>
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	3b04      	subs	r3, #4
 8007438:	2a00      	cmp	r2, #0
 800743a:	d1f0      	bne.n	800741e <quorem+0xea>
 800743c:	3c01      	subs	r4, #1
 800743e:	e7eb      	b.n	8007418 <quorem+0xe4>
 8007440:	2000      	movs	r0, #0
 8007442:	e7ee      	b.n	8007422 <quorem+0xee>
 8007444:	0000      	movs	r0, r0
	...

08007448 <_dtoa_r>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	ed2d 8b04 	vpush	{d8-d9}
 8007450:	69c5      	ldr	r5, [r0, #28]
 8007452:	b093      	sub	sp, #76	; 0x4c
 8007454:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007458:	ec57 6b10 	vmov	r6, r7, d0
 800745c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007460:	9107      	str	r1, [sp, #28]
 8007462:	4604      	mov	r4, r0
 8007464:	920a      	str	r2, [sp, #40]	; 0x28
 8007466:	930d      	str	r3, [sp, #52]	; 0x34
 8007468:	b975      	cbnz	r5, 8007488 <_dtoa_r+0x40>
 800746a:	2010      	movs	r0, #16
 800746c:	f000 fe2a 	bl	80080c4 <malloc>
 8007470:	4602      	mov	r2, r0
 8007472:	61e0      	str	r0, [r4, #28]
 8007474:	b920      	cbnz	r0, 8007480 <_dtoa_r+0x38>
 8007476:	4bae      	ldr	r3, [pc, #696]	; (8007730 <_dtoa_r+0x2e8>)
 8007478:	21ef      	movs	r1, #239	; 0xef
 800747a:	48ae      	ldr	r0, [pc, #696]	; (8007734 <_dtoa_r+0x2ec>)
 800747c:	f003 f808 	bl	800a490 <__assert_func>
 8007480:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007484:	6005      	str	r5, [r0, #0]
 8007486:	60c5      	str	r5, [r0, #12]
 8007488:	69e3      	ldr	r3, [r4, #28]
 800748a:	6819      	ldr	r1, [r3, #0]
 800748c:	b151      	cbz	r1, 80074a4 <_dtoa_r+0x5c>
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	604a      	str	r2, [r1, #4]
 8007492:	2301      	movs	r3, #1
 8007494:	4093      	lsls	r3, r2
 8007496:	608b      	str	r3, [r1, #8]
 8007498:	4620      	mov	r0, r4
 800749a:	f000 ff07 	bl	80082ac <_Bfree>
 800749e:	69e3      	ldr	r3, [r4, #28]
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	1e3b      	subs	r3, r7, #0
 80074a6:	bfbb      	ittet	lt
 80074a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074ac:	9303      	strlt	r3, [sp, #12]
 80074ae:	2300      	movge	r3, #0
 80074b0:	2201      	movlt	r2, #1
 80074b2:	bfac      	ite	ge
 80074b4:	f8c8 3000 	strge.w	r3, [r8]
 80074b8:	f8c8 2000 	strlt.w	r2, [r8]
 80074bc:	4b9e      	ldr	r3, [pc, #632]	; (8007738 <_dtoa_r+0x2f0>)
 80074be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80074c2:	ea33 0308 	bics.w	r3, r3, r8
 80074c6:	d11b      	bne.n	8007500 <_dtoa_r+0xb8>
 80074c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80074d4:	4333      	orrs	r3, r6
 80074d6:	f000 8593 	beq.w	8008000 <_dtoa_r+0xbb8>
 80074da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074dc:	b963      	cbnz	r3, 80074f8 <_dtoa_r+0xb0>
 80074de:	4b97      	ldr	r3, [pc, #604]	; (800773c <_dtoa_r+0x2f4>)
 80074e0:	e027      	b.n	8007532 <_dtoa_r+0xea>
 80074e2:	4b97      	ldr	r3, [pc, #604]	; (8007740 <_dtoa_r+0x2f8>)
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	3308      	adds	r3, #8
 80074e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	9800      	ldr	r0, [sp, #0]
 80074ee:	b013      	add	sp, #76	; 0x4c
 80074f0:	ecbd 8b04 	vpop	{d8-d9}
 80074f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f8:	4b90      	ldr	r3, [pc, #576]	; (800773c <_dtoa_r+0x2f4>)
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	3303      	adds	r3, #3
 80074fe:	e7f3      	b.n	80074e8 <_dtoa_r+0xa0>
 8007500:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	ec51 0b17 	vmov	r0, r1, d7
 800750a:	eeb0 8a47 	vmov.f32	s16, s14
 800750e:	eef0 8a67 	vmov.f32	s17, s15
 8007512:	2300      	movs	r3, #0
 8007514:	f7f9 faf0 	bl	8000af8 <__aeabi_dcmpeq>
 8007518:	4681      	mov	r9, r0
 800751a:	b160      	cbz	r0, 8007536 <_dtoa_r+0xee>
 800751c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800751e:	2301      	movs	r3, #1
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8568 	beq.w	8007ffa <_dtoa_r+0xbb2>
 800752a:	4b86      	ldr	r3, [pc, #536]	; (8007744 <_dtoa_r+0x2fc>)
 800752c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	3b01      	subs	r3, #1
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	e7da      	b.n	80074ec <_dtoa_r+0xa4>
 8007536:	aa10      	add	r2, sp, #64	; 0x40
 8007538:	a911      	add	r1, sp, #68	; 0x44
 800753a:	4620      	mov	r0, r4
 800753c:	eeb0 0a48 	vmov.f32	s0, s16
 8007540:	eef0 0a68 	vmov.f32	s1, s17
 8007544:	f001 fa4e 	bl	80089e4 <__d2b>
 8007548:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800754c:	4682      	mov	sl, r0
 800754e:	2d00      	cmp	r5, #0
 8007550:	d07f      	beq.n	8007652 <_dtoa_r+0x20a>
 8007552:	ee18 3a90 	vmov	r3, s17
 8007556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800755a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800755e:	ec51 0b18 	vmov	r0, r1, d8
 8007562:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800756a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800756e:	4619      	mov	r1, r3
 8007570:	2200      	movs	r2, #0
 8007572:	4b75      	ldr	r3, [pc, #468]	; (8007748 <_dtoa_r+0x300>)
 8007574:	f7f8 fea0 	bl	80002b8 <__aeabi_dsub>
 8007578:	a367      	add	r3, pc, #412	; (adr r3, 8007718 <_dtoa_r+0x2d0>)
 800757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757e:	f7f9 f853 	bl	8000628 <__aeabi_dmul>
 8007582:	a367      	add	r3, pc, #412	; (adr r3, 8007720 <_dtoa_r+0x2d8>)
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f7f8 fe98 	bl	80002bc <__adddf3>
 800758c:	4606      	mov	r6, r0
 800758e:	4628      	mov	r0, r5
 8007590:	460f      	mov	r7, r1
 8007592:	f7f8 ffdf 	bl	8000554 <__aeabi_i2d>
 8007596:	a364      	add	r3, pc, #400	; (adr r3, 8007728 <_dtoa_r+0x2e0>)
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f7f9 f844 	bl	8000628 <__aeabi_dmul>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4630      	mov	r0, r6
 80075a6:	4639      	mov	r1, r7
 80075a8:	f7f8 fe88 	bl	80002bc <__adddf3>
 80075ac:	4606      	mov	r6, r0
 80075ae:	460f      	mov	r7, r1
 80075b0:	f7f9 faea 	bl	8000b88 <__aeabi_d2iz>
 80075b4:	2200      	movs	r2, #0
 80075b6:	4683      	mov	fp, r0
 80075b8:	2300      	movs	r3, #0
 80075ba:	4630      	mov	r0, r6
 80075bc:	4639      	mov	r1, r7
 80075be:	f7f9 faa5 	bl	8000b0c <__aeabi_dcmplt>
 80075c2:	b148      	cbz	r0, 80075d8 <_dtoa_r+0x190>
 80075c4:	4658      	mov	r0, fp
 80075c6:	f7f8 ffc5 	bl	8000554 <__aeabi_i2d>
 80075ca:	4632      	mov	r2, r6
 80075cc:	463b      	mov	r3, r7
 80075ce:	f7f9 fa93 	bl	8000af8 <__aeabi_dcmpeq>
 80075d2:	b908      	cbnz	r0, 80075d8 <_dtoa_r+0x190>
 80075d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075d8:	f1bb 0f16 	cmp.w	fp, #22
 80075dc:	d857      	bhi.n	800768e <_dtoa_r+0x246>
 80075de:	4b5b      	ldr	r3, [pc, #364]	; (800774c <_dtoa_r+0x304>)
 80075e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	ec51 0b18 	vmov	r0, r1, d8
 80075ec:	f7f9 fa8e 	bl	8000b0c <__aeabi_dcmplt>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d04e      	beq.n	8007692 <_dtoa_r+0x24a>
 80075f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075f8:	2300      	movs	r3, #0
 80075fa:	930c      	str	r3, [sp, #48]	; 0x30
 80075fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075fe:	1b5b      	subs	r3, r3, r5
 8007600:	1e5a      	subs	r2, r3, #1
 8007602:	bf45      	ittet	mi
 8007604:	f1c3 0301 	rsbmi	r3, r3, #1
 8007608:	9305      	strmi	r3, [sp, #20]
 800760a:	2300      	movpl	r3, #0
 800760c:	2300      	movmi	r3, #0
 800760e:	9206      	str	r2, [sp, #24]
 8007610:	bf54      	ite	pl
 8007612:	9305      	strpl	r3, [sp, #20]
 8007614:	9306      	strmi	r3, [sp, #24]
 8007616:	f1bb 0f00 	cmp.w	fp, #0
 800761a:	db3c      	blt.n	8007696 <_dtoa_r+0x24e>
 800761c:	9b06      	ldr	r3, [sp, #24]
 800761e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007622:	445b      	add	r3, fp
 8007624:	9306      	str	r3, [sp, #24]
 8007626:	2300      	movs	r3, #0
 8007628:	9308      	str	r3, [sp, #32]
 800762a:	9b07      	ldr	r3, [sp, #28]
 800762c:	2b09      	cmp	r3, #9
 800762e:	d868      	bhi.n	8007702 <_dtoa_r+0x2ba>
 8007630:	2b05      	cmp	r3, #5
 8007632:	bfc4      	itt	gt
 8007634:	3b04      	subgt	r3, #4
 8007636:	9307      	strgt	r3, [sp, #28]
 8007638:	9b07      	ldr	r3, [sp, #28]
 800763a:	f1a3 0302 	sub.w	r3, r3, #2
 800763e:	bfcc      	ite	gt
 8007640:	2500      	movgt	r5, #0
 8007642:	2501      	movle	r5, #1
 8007644:	2b03      	cmp	r3, #3
 8007646:	f200 8085 	bhi.w	8007754 <_dtoa_r+0x30c>
 800764a:	e8df f003 	tbb	[pc, r3]
 800764e:	3b2e      	.short	0x3b2e
 8007650:	5839      	.short	0x5839
 8007652:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007656:	441d      	add	r5, r3
 8007658:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800765c:	2b20      	cmp	r3, #32
 800765e:	bfc1      	itttt	gt
 8007660:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007664:	fa08 f803 	lslgt.w	r8, r8, r3
 8007668:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800766c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007670:	bfd6      	itet	le
 8007672:	f1c3 0320 	rsble	r3, r3, #32
 8007676:	ea48 0003 	orrgt.w	r0, r8, r3
 800767a:	fa06 f003 	lslle.w	r0, r6, r3
 800767e:	f7f8 ff59 	bl	8000534 <__aeabi_ui2d>
 8007682:	2201      	movs	r2, #1
 8007684:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007688:	3d01      	subs	r5, #1
 800768a:	920e      	str	r2, [sp, #56]	; 0x38
 800768c:	e76f      	b.n	800756e <_dtoa_r+0x126>
 800768e:	2301      	movs	r3, #1
 8007690:	e7b3      	b.n	80075fa <_dtoa_r+0x1b2>
 8007692:	900c      	str	r0, [sp, #48]	; 0x30
 8007694:	e7b2      	b.n	80075fc <_dtoa_r+0x1b4>
 8007696:	9b05      	ldr	r3, [sp, #20]
 8007698:	eba3 030b 	sub.w	r3, r3, fp
 800769c:	9305      	str	r3, [sp, #20]
 800769e:	f1cb 0300 	rsb	r3, fp, #0
 80076a2:	9308      	str	r3, [sp, #32]
 80076a4:	2300      	movs	r3, #0
 80076a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076a8:	e7bf      	b.n	800762a <_dtoa_r+0x1e2>
 80076aa:	2300      	movs	r3, #0
 80076ac:	9309      	str	r3, [sp, #36]	; 0x24
 80076ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	dc52      	bgt.n	800775a <_dtoa_r+0x312>
 80076b4:	2301      	movs	r3, #1
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	9304      	str	r3, [sp, #16]
 80076ba:	461a      	mov	r2, r3
 80076bc:	920a      	str	r2, [sp, #40]	; 0x28
 80076be:	e00b      	b.n	80076d8 <_dtoa_r+0x290>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e7f3      	b.n	80076ac <_dtoa_r+0x264>
 80076c4:	2300      	movs	r3, #0
 80076c6:	9309      	str	r3, [sp, #36]	; 0x24
 80076c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ca:	445b      	add	r3, fp
 80076cc:	9301      	str	r3, [sp, #4]
 80076ce:	3301      	adds	r3, #1
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	bfb8      	it	lt
 80076d6:	2301      	movlt	r3, #1
 80076d8:	69e0      	ldr	r0, [r4, #28]
 80076da:	2100      	movs	r1, #0
 80076dc:	2204      	movs	r2, #4
 80076de:	f102 0614 	add.w	r6, r2, #20
 80076e2:	429e      	cmp	r6, r3
 80076e4:	d93d      	bls.n	8007762 <_dtoa_r+0x31a>
 80076e6:	6041      	str	r1, [r0, #4]
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 fd9f 	bl	800822c <_Balloc>
 80076ee:	9000      	str	r0, [sp, #0]
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d139      	bne.n	8007768 <_dtoa_r+0x320>
 80076f4:	4b16      	ldr	r3, [pc, #88]	; (8007750 <_dtoa_r+0x308>)
 80076f6:	4602      	mov	r2, r0
 80076f8:	f240 11af 	movw	r1, #431	; 0x1af
 80076fc:	e6bd      	b.n	800747a <_dtoa_r+0x32>
 80076fe:	2301      	movs	r3, #1
 8007700:	e7e1      	b.n	80076c6 <_dtoa_r+0x27e>
 8007702:	2501      	movs	r5, #1
 8007704:	2300      	movs	r3, #0
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	9509      	str	r5, [sp, #36]	; 0x24
 800770a:	f04f 33ff 	mov.w	r3, #4294967295
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	2200      	movs	r2, #0
 8007714:	2312      	movs	r3, #18
 8007716:	e7d1      	b.n	80076bc <_dtoa_r+0x274>
 8007718:	636f4361 	.word	0x636f4361
 800771c:	3fd287a7 	.word	0x3fd287a7
 8007720:	8b60c8b3 	.word	0x8b60c8b3
 8007724:	3fc68a28 	.word	0x3fc68a28
 8007728:	509f79fb 	.word	0x509f79fb
 800772c:	3fd34413 	.word	0x3fd34413
 8007730:	0800cb9c 	.word	0x0800cb9c
 8007734:	0800cbb3 	.word	0x0800cbb3
 8007738:	7ff00000 	.word	0x7ff00000
 800773c:	0800cb98 	.word	0x0800cb98
 8007740:	0800cb8f 	.word	0x0800cb8f
 8007744:	0800cef1 	.word	0x0800cef1
 8007748:	3ff80000 	.word	0x3ff80000
 800774c:	0800cca0 	.word	0x0800cca0
 8007750:	0800cc0b 	.word	0x0800cc0b
 8007754:	2301      	movs	r3, #1
 8007756:	9309      	str	r3, [sp, #36]	; 0x24
 8007758:	e7d7      	b.n	800770a <_dtoa_r+0x2c2>
 800775a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	9304      	str	r3, [sp, #16]
 8007760:	e7ba      	b.n	80076d8 <_dtoa_r+0x290>
 8007762:	3101      	adds	r1, #1
 8007764:	0052      	lsls	r2, r2, #1
 8007766:	e7ba      	b.n	80076de <_dtoa_r+0x296>
 8007768:	69e3      	ldr	r3, [r4, #28]
 800776a:	9a00      	ldr	r2, [sp, #0]
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	9b04      	ldr	r3, [sp, #16]
 8007770:	2b0e      	cmp	r3, #14
 8007772:	f200 80a8 	bhi.w	80078c6 <_dtoa_r+0x47e>
 8007776:	2d00      	cmp	r5, #0
 8007778:	f000 80a5 	beq.w	80078c6 <_dtoa_r+0x47e>
 800777c:	f1bb 0f00 	cmp.w	fp, #0
 8007780:	dd38      	ble.n	80077f4 <_dtoa_r+0x3ac>
 8007782:	4bc0      	ldr	r3, [pc, #768]	; (8007a84 <_dtoa_r+0x63c>)
 8007784:	f00b 020f 	and.w	r2, fp, #15
 8007788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800778c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007790:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007794:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007798:	d019      	beq.n	80077ce <_dtoa_r+0x386>
 800779a:	4bbb      	ldr	r3, [pc, #748]	; (8007a88 <_dtoa_r+0x640>)
 800779c:	ec51 0b18 	vmov	r0, r1, d8
 80077a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077a4:	f7f9 f86a 	bl	800087c <__aeabi_ddiv>
 80077a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ac:	f008 080f 	and.w	r8, r8, #15
 80077b0:	2503      	movs	r5, #3
 80077b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007a88 <_dtoa_r+0x640>
 80077b6:	f1b8 0f00 	cmp.w	r8, #0
 80077ba:	d10a      	bne.n	80077d2 <_dtoa_r+0x38a>
 80077bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c0:	4632      	mov	r2, r6
 80077c2:	463b      	mov	r3, r7
 80077c4:	f7f9 f85a 	bl	800087c <__aeabi_ddiv>
 80077c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077cc:	e02b      	b.n	8007826 <_dtoa_r+0x3de>
 80077ce:	2502      	movs	r5, #2
 80077d0:	e7ef      	b.n	80077b2 <_dtoa_r+0x36a>
 80077d2:	f018 0f01 	tst.w	r8, #1
 80077d6:	d008      	beq.n	80077ea <_dtoa_r+0x3a2>
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80077e0:	f7f8 ff22 	bl	8000628 <__aeabi_dmul>
 80077e4:	3501      	adds	r5, #1
 80077e6:	4606      	mov	r6, r0
 80077e8:	460f      	mov	r7, r1
 80077ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80077ee:	f109 0908 	add.w	r9, r9, #8
 80077f2:	e7e0      	b.n	80077b6 <_dtoa_r+0x36e>
 80077f4:	f000 809f 	beq.w	8007936 <_dtoa_r+0x4ee>
 80077f8:	f1cb 0600 	rsb	r6, fp, #0
 80077fc:	4ba1      	ldr	r3, [pc, #644]	; (8007a84 <_dtoa_r+0x63c>)
 80077fe:	4fa2      	ldr	r7, [pc, #648]	; (8007a88 <_dtoa_r+0x640>)
 8007800:	f006 020f 	and.w	r2, r6, #15
 8007804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	ec51 0b18 	vmov	r0, r1, d8
 8007810:	f7f8 ff0a 	bl	8000628 <__aeabi_dmul>
 8007814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007818:	1136      	asrs	r6, r6, #4
 800781a:	2300      	movs	r3, #0
 800781c:	2502      	movs	r5, #2
 800781e:	2e00      	cmp	r6, #0
 8007820:	d17e      	bne.n	8007920 <_dtoa_r+0x4d8>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1d0      	bne.n	80077c8 <_dtoa_r+0x380>
 8007826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007828:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8084 	beq.w	800793a <_dtoa_r+0x4f2>
 8007832:	4b96      	ldr	r3, [pc, #600]	; (8007a8c <_dtoa_r+0x644>)
 8007834:	2200      	movs	r2, #0
 8007836:	4640      	mov	r0, r8
 8007838:	4649      	mov	r1, r9
 800783a:	f7f9 f967 	bl	8000b0c <__aeabi_dcmplt>
 800783e:	2800      	cmp	r0, #0
 8007840:	d07b      	beq.n	800793a <_dtoa_r+0x4f2>
 8007842:	9b04      	ldr	r3, [sp, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d078      	beq.n	800793a <_dtoa_r+0x4f2>
 8007848:	9b01      	ldr	r3, [sp, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	dd39      	ble.n	80078c2 <_dtoa_r+0x47a>
 800784e:	4b90      	ldr	r3, [pc, #576]	; (8007a90 <_dtoa_r+0x648>)
 8007850:	2200      	movs	r2, #0
 8007852:	4640      	mov	r0, r8
 8007854:	4649      	mov	r1, r9
 8007856:	f7f8 fee7 	bl	8000628 <__aeabi_dmul>
 800785a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800785e:	9e01      	ldr	r6, [sp, #4]
 8007860:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007864:	3501      	adds	r5, #1
 8007866:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800786a:	4628      	mov	r0, r5
 800786c:	f7f8 fe72 	bl	8000554 <__aeabi_i2d>
 8007870:	4642      	mov	r2, r8
 8007872:	464b      	mov	r3, r9
 8007874:	f7f8 fed8 	bl	8000628 <__aeabi_dmul>
 8007878:	4b86      	ldr	r3, [pc, #536]	; (8007a94 <_dtoa_r+0x64c>)
 800787a:	2200      	movs	r2, #0
 800787c:	f7f8 fd1e 	bl	80002bc <__adddf3>
 8007880:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007888:	9303      	str	r3, [sp, #12]
 800788a:	2e00      	cmp	r6, #0
 800788c:	d158      	bne.n	8007940 <_dtoa_r+0x4f8>
 800788e:	4b82      	ldr	r3, [pc, #520]	; (8007a98 <_dtoa_r+0x650>)
 8007890:	2200      	movs	r2, #0
 8007892:	4640      	mov	r0, r8
 8007894:	4649      	mov	r1, r9
 8007896:	f7f8 fd0f 	bl	80002b8 <__aeabi_dsub>
 800789a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800789e:	4680      	mov	r8, r0
 80078a0:	4689      	mov	r9, r1
 80078a2:	f7f9 f951 	bl	8000b48 <__aeabi_dcmpgt>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f040 8296 	bne.w	8007dd8 <_dtoa_r+0x990>
 80078ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80078b0:	4640      	mov	r0, r8
 80078b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078b6:	4649      	mov	r1, r9
 80078b8:	f7f9 f928 	bl	8000b0c <__aeabi_dcmplt>
 80078bc:	2800      	cmp	r0, #0
 80078be:	f040 8289 	bne.w	8007dd4 <_dtoa_r+0x98c>
 80078c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80078c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f2c0 814e 	blt.w	8007b6a <_dtoa_r+0x722>
 80078ce:	f1bb 0f0e 	cmp.w	fp, #14
 80078d2:	f300 814a 	bgt.w	8007b6a <_dtoa_r+0x722>
 80078d6:	4b6b      	ldr	r3, [pc, #428]	; (8007a84 <_dtoa_r+0x63c>)
 80078d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f280 80dc 	bge.w	8007aa0 <_dtoa_r+0x658>
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f300 80d8 	bgt.w	8007aa0 <_dtoa_r+0x658>
 80078f0:	f040 826f 	bne.w	8007dd2 <_dtoa_r+0x98a>
 80078f4:	4b68      	ldr	r3, [pc, #416]	; (8007a98 <_dtoa_r+0x650>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	4640      	mov	r0, r8
 80078fa:	4649      	mov	r1, r9
 80078fc:	f7f8 fe94 	bl	8000628 <__aeabi_dmul>
 8007900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007904:	f7f9 f916 	bl	8000b34 <__aeabi_dcmpge>
 8007908:	9e04      	ldr	r6, [sp, #16]
 800790a:	4637      	mov	r7, r6
 800790c:	2800      	cmp	r0, #0
 800790e:	f040 8245 	bne.w	8007d9c <_dtoa_r+0x954>
 8007912:	9d00      	ldr	r5, [sp, #0]
 8007914:	2331      	movs	r3, #49	; 0x31
 8007916:	f805 3b01 	strb.w	r3, [r5], #1
 800791a:	f10b 0b01 	add.w	fp, fp, #1
 800791e:	e241      	b.n	8007da4 <_dtoa_r+0x95c>
 8007920:	07f2      	lsls	r2, r6, #31
 8007922:	d505      	bpl.n	8007930 <_dtoa_r+0x4e8>
 8007924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007928:	f7f8 fe7e 	bl	8000628 <__aeabi_dmul>
 800792c:	3501      	adds	r5, #1
 800792e:	2301      	movs	r3, #1
 8007930:	1076      	asrs	r6, r6, #1
 8007932:	3708      	adds	r7, #8
 8007934:	e773      	b.n	800781e <_dtoa_r+0x3d6>
 8007936:	2502      	movs	r5, #2
 8007938:	e775      	b.n	8007826 <_dtoa_r+0x3de>
 800793a:	9e04      	ldr	r6, [sp, #16]
 800793c:	465f      	mov	r7, fp
 800793e:	e792      	b.n	8007866 <_dtoa_r+0x41e>
 8007940:	9900      	ldr	r1, [sp, #0]
 8007942:	4b50      	ldr	r3, [pc, #320]	; (8007a84 <_dtoa_r+0x63c>)
 8007944:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007948:	4431      	add	r1, r6
 800794a:	9102      	str	r1, [sp, #8]
 800794c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800794e:	eeb0 9a47 	vmov.f32	s18, s14
 8007952:	eef0 9a67 	vmov.f32	s19, s15
 8007956:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800795a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800795e:	2900      	cmp	r1, #0
 8007960:	d044      	beq.n	80079ec <_dtoa_r+0x5a4>
 8007962:	494e      	ldr	r1, [pc, #312]	; (8007a9c <_dtoa_r+0x654>)
 8007964:	2000      	movs	r0, #0
 8007966:	f7f8 ff89 	bl	800087c <__aeabi_ddiv>
 800796a:	ec53 2b19 	vmov	r2, r3, d9
 800796e:	f7f8 fca3 	bl	80002b8 <__aeabi_dsub>
 8007972:	9d00      	ldr	r5, [sp, #0]
 8007974:	ec41 0b19 	vmov	d9, r0, r1
 8007978:	4649      	mov	r1, r9
 800797a:	4640      	mov	r0, r8
 800797c:	f7f9 f904 	bl	8000b88 <__aeabi_d2iz>
 8007980:	4606      	mov	r6, r0
 8007982:	f7f8 fde7 	bl	8000554 <__aeabi_i2d>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	4640      	mov	r0, r8
 800798c:	4649      	mov	r1, r9
 800798e:	f7f8 fc93 	bl	80002b8 <__aeabi_dsub>
 8007992:	3630      	adds	r6, #48	; 0x30
 8007994:	f805 6b01 	strb.w	r6, [r5], #1
 8007998:	ec53 2b19 	vmov	r2, r3, d9
 800799c:	4680      	mov	r8, r0
 800799e:	4689      	mov	r9, r1
 80079a0:	f7f9 f8b4 	bl	8000b0c <__aeabi_dcmplt>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d164      	bne.n	8007a72 <_dtoa_r+0x62a>
 80079a8:	4642      	mov	r2, r8
 80079aa:	464b      	mov	r3, r9
 80079ac:	4937      	ldr	r1, [pc, #220]	; (8007a8c <_dtoa_r+0x644>)
 80079ae:	2000      	movs	r0, #0
 80079b0:	f7f8 fc82 	bl	80002b8 <__aeabi_dsub>
 80079b4:	ec53 2b19 	vmov	r2, r3, d9
 80079b8:	f7f9 f8a8 	bl	8000b0c <__aeabi_dcmplt>
 80079bc:	2800      	cmp	r0, #0
 80079be:	f040 80b6 	bne.w	8007b2e <_dtoa_r+0x6e6>
 80079c2:	9b02      	ldr	r3, [sp, #8]
 80079c4:	429d      	cmp	r5, r3
 80079c6:	f43f af7c 	beq.w	80078c2 <_dtoa_r+0x47a>
 80079ca:	4b31      	ldr	r3, [pc, #196]	; (8007a90 <_dtoa_r+0x648>)
 80079cc:	ec51 0b19 	vmov	r0, r1, d9
 80079d0:	2200      	movs	r2, #0
 80079d2:	f7f8 fe29 	bl	8000628 <__aeabi_dmul>
 80079d6:	4b2e      	ldr	r3, [pc, #184]	; (8007a90 <_dtoa_r+0x648>)
 80079d8:	ec41 0b19 	vmov	d9, r0, r1
 80079dc:	2200      	movs	r2, #0
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f8 fe21 	bl	8000628 <__aeabi_dmul>
 80079e6:	4680      	mov	r8, r0
 80079e8:	4689      	mov	r9, r1
 80079ea:	e7c5      	b.n	8007978 <_dtoa_r+0x530>
 80079ec:	ec51 0b17 	vmov	r0, r1, d7
 80079f0:	f7f8 fe1a 	bl	8000628 <__aeabi_dmul>
 80079f4:	9b02      	ldr	r3, [sp, #8]
 80079f6:	9d00      	ldr	r5, [sp, #0]
 80079f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80079fa:	ec41 0b19 	vmov	d9, r0, r1
 80079fe:	4649      	mov	r1, r9
 8007a00:	4640      	mov	r0, r8
 8007a02:	f7f9 f8c1 	bl	8000b88 <__aeabi_d2iz>
 8007a06:	4606      	mov	r6, r0
 8007a08:	f7f8 fda4 	bl	8000554 <__aeabi_i2d>
 8007a0c:	3630      	adds	r6, #48	; 0x30
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4640      	mov	r0, r8
 8007a14:	4649      	mov	r1, r9
 8007a16:	f7f8 fc4f 	bl	80002b8 <__aeabi_dsub>
 8007a1a:	f805 6b01 	strb.w	r6, [r5], #1
 8007a1e:	9b02      	ldr	r3, [sp, #8]
 8007a20:	429d      	cmp	r5, r3
 8007a22:	4680      	mov	r8, r0
 8007a24:	4689      	mov	r9, r1
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	d124      	bne.n	8007a76 <_dtoa_r+0x62e>
 8007a2c:	4b1b      	ldr	r3, [pc, #108]	; (8007a9c <_dtoa_r+0x654>)
 8007a2e:	ec51 0b19 	vmov	r0, r1, d9
 8007a32:	f7f8 fc43 	bl	80002bc <__adddf3>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	f7f9 f883 	bl	8000b48 <__aeabi_dcmpgt>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d173      	bne.n	8007b2e <_dtoa_r+0x6e6>
 8007a46:	ec53 2b19 	vmov	r2, r3, d9
 8007a4a:	4914      	ldr	r1, [pc, #80]	; (8007a9c <_dtoa_r+0x654>)
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f7f8 fc33 	bl	80002b8 <__aeabi_dsub>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4640      	mov	r0, r8
 8007a58:	4649      	mov	r1, r9
 8007a5a:	f7f9 f857 	bl	8000b0c <__aeabi_dcmplt>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f43f af2f 	beq.w	80078c2 <_dtoa_r+0x47a>
 8007a64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a66:	1e6b      	subs	r3, r5, #1
 8007a68:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a6e:	2b30      	cmp	r3, #48	; 0x30
 8007a70:	d0f8      	beq.n	8007a64 <_dtoa_r+0x61c>
 8007a72:	46bb      	mov	fp, r7
 8007a74:	e04a      	b.n	8007b0c <_dtoa_r+0x6c4>
 8007a76:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <_dtoa_r+0x648>)
 8007a78:	f7f8 fdd6 	bl	8000628 <__aeabi_dmul>
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	4689      	mov	r9, r1
 8007a80:	e7bd      	b.n	80079fe <_dtoa_r+0x5b6>
 8007a82:	bf00      	nop
 8007a84:	0800cca0 	.word	0x0800cca0
 8007a88:	0800cc78 	.word	0x0800cc78
 8007a8c:	3ff00000 	.word	0x3ff00000
 8007a90:	40240000 	.word	0x40240000
 8007a94:	401c0000 	.word	0x401c0000
 8007a98:	40140000 	.word	0x40140000
 8007a9c:	3fe00000 	.word	0x3fe00000
 8007aa0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007aa4:	9d00      	ldr	r5, [sp, #0]
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	4630      	mov	r0, r6
 8007aac:	4639      	mov	r1, r7
 8007aae:	f7f8 fee5 	bl	800087c <__aeabi_ddiv>
 8007ab2:	f7f9 f869 	bl	8000b88 <__aeabi_d2iz>
 8007ab6:	9001      	str	r0, [sp, #4]
 8007ab8:	f7f8 fd4c 	bl	8000554 <__aeabi_i2d>
 8007abc:	4642      	mov	r2, r8
 8007abe:	464b      	mov	r3, r9
 8007ac0:	f7f8 fdb2 	bl	8000628 <__aeabi_dmul>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4630      	mov	r0, r6
 8007aca:	4639      	mov	r1, r7
 8007acc:	f7f8 fbf4 	bl	80002b8 <__aeabi_dsub>
 8007ad0:	9e01      	ldr	r6, [sp, #4]
 8007ad2:	9f04      	ldr	r7, [sp, #16]
 8007ad4:	3630      	adds	r6, #48	; 0x30
 8007ad6:	f805 6b01 	strb.w	r6, [r5], #1
 8007ada:	9e00      	ldr	r6, [sp, #0]
 8007adc:	1bae      	subs	r6, r5, r6
 8007ade:	42b7      	cmp	r7, r6
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	d134      	bne.n	8007b50 <_dtoa_r+0x708>
 8007ae6:	f7f8 fbe9 	bl	80002bc <__adddf3>
 8007aea:	4642      	mov	r2, r8
 8007aec:	464b      	mov	r3, r9
 8007aee:	4606      	mov	r6, r0
 8007af0:	460f      	mov	r7, r1
 8007af2:	f7f9 f829 	bl	8000b48 <__aeabi_dcmpgt>
 8007af6:	b9c8      	cbnz	r0, 8007b2c <_dtoa_r+0x6e4>
 8007af8:	4642      	mov	r2, r8
 8007afa:	464b      	mov	r3, r9
 8007afc:	4630      	mov	r0, r6
 8007afe:	4639      	mov	r1, r7
 8007b00:	f7f8 fffa 	bl	8000af8 <__aeabi_dcmpeq>
 8007b04:	b110      	cbz	r0, 8007b0c <_dtoa_r+0x6c4>
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	07db      	lsls	r3, r3, #31
 8007b0a:	d40f      	bmi.n	8007b2c <_dtoa_r+0x6e4>
 8007b0c:	4651      	mov	r1, sl
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 fbcc 	bl	80082ac <_Bfree>
 8007b14:	2300      	movs	r3, #0
 8007b16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b18:	702b      	strb	r3, [r5, #0]
 8007b1a:	f10b 0301 	add.w	r3, fp, #1
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f43f ace2 	beq.w	80074ec <_dtoa_r+0xa4>
 8007b28:	601d      	str	r5, [r3, #0]
 8007b2a:	e4df      	b.n	80074ec <_dtoa_r+0xa4>
 8007b2c:	465f      	mov	r7, fp
 8007b2e:	462b      	mov	r3, r5
 8007b30:	461d      	mov	r5, r3
 8007b32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b36:	2a39      	cmp	r2, #57	; 0x39
 8007b38:	d106      	bne.n	8007b48 <_dtoa_r+0x700>
 8007b3a:	9a00      	ldr	r2, [sp, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d1f7      	bne.n	8007b30 <_dtoa_r+0x6e8>
 8007b40:	9900      	ldr	r1, [sp, #0]
 8007b42:	2230      	movs	r2, #48	; 0x30
 8007b44:	3701      	adds	r7, #1
 8007b46:	700a      	strb	r2, [r1, #0]
 8007b48:	781a      	ldrb	r2, [r3, #0]
 8007b4a:	3201      	adds	r2, #1
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e790      	b.n	8007a72 <_dtoa_r+0x62a>
 8007b50:	4ba3      	ldr	r3, [pc, #652]	; (8007de0 <_dtoa_r+0x998>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	f7f8 fd68 	bl	8000628 <__aeabi_dmul>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	460f      	mov	r7, r1
 8007b60:	f7f8 ffca 	bl	8000af8 <__aeabi_dcmpeq>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d09e      	beq.n	8007aa6 <_dtoa_r+0x65e>
 8007b68:	e7d0      	b.n	8007b0c <_dtoa_r+0x6c4>
 8007b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b6c:	2a00      	cmp	r2, #0
 8007b6e:	f000 80ca 	beq.w	8007d06 <_dtoa_r+0x8be>
 8007b72:	9a07      	ldr	r2, [sp, #28]
 8007b74:	2a01      	cmp	r2, #1
 8007b76:	f300 80ad 	bgt.w	8007cd4 <_dtoa_r+0x88c>
 8007b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b7c:	2a00      	cmp	r2, #0
 8007b7e:	f000 80a5 	beq.w	8007ccc <_dtoa_r+0x884>
 8007b82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b86:	9e08      	ldr	r6, [sp, #32]
 8007b88:	9d05      	ldr	r5, [sp, #20]
 8007b8a:	9a05      	ldr	r2, [sp, #20]
 8007b8c:	441a      	add	r2, r3
 8007b8e:	9205      	str	r2, [sp, #20]
 8007b90:	9a06      	ldr	r2, [sp, #24]
 8007b92:	2101      	movs	r1, #1
 8007b94:	441a      	add	r2, r3
 8007b96:	4620      	mov	r0, r4
 8007b98:	9206      	str	r2, [sp, #24]
 8007b9a:	f000 fc87 	bl	80084ac <__i2b>
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	b165      	cbz	r5, 8007bbc <_dtoa_r+0x774>
 8007ba2:	9b06      	ldr	r3, [sp, #24]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	dd09      	ble.n	8007bbc <_dtoa_r+0x774>
 8007ba8:	42ab      	cmp	r3, r5
 8007baa:	9a05      	ldr	r2, [sp, #20]
 8007bac:	bfa8      	it	ge
 8007bae:	462b      	movge	r3, r5
 8007bb0:	1ad2      	subs	r2, r2, r3
 8007bb2:	9205      	str	r2, [sp, #20]
 8007bb4:	9a06      	ldr	r2, [sp, #24]
 8007bb6:	1aed      	subs	r5, r5, r3
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	9306      	str	r3, [sp, #24]
 8007bbc:	9b08      	ldr	r3, [sp, #32]
 8007bbe:	b1f3      	cbz	r3, 8007bfe <_dtoa_r+0x7b6>
 8007bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 80a3 	beq.w	8007d0e <_dtoa_r+0x8c6>
 8007bc8:	2e00      	cmp	r6, #0
 8007bca:	dd10      	ble.n	8007bee <_dtoa_r+0x7a6>
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4632      	mov	r2, r6
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 fd2b 	bl	800862c <__pow5mult>
 8007bd6:	4652      	mov	r2, sl
 8007bd8:	4601      	mov	r1, r0
 8007bda:	4607      	mov	r7, r0
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 fc7b 	bl	80084d8 <__multiply>
 8007be2:	4651      	mov	r1, sl
 8007be4:	4680      	mov	r8, r0
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 fb60 	bl	80082ac <_Bfree>
 8007bec:	46c2      	mov	sl, r8
 8007bee:	9b08      	ldr	r3, [sp, #32]
 8007bf0:	1b9a      	subs	r2, r3, r6
 8007bf2:	d004      	beq.n	8007bfe <_dtoa_r+0x7b6>
 8007bf4:	4651      	mov	r1, sl
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 fd18 	bl	800862c <__pow5mult>
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	2101      	movs	r1, #1
 8007c00:	4620      	mov	r0, r4
 8007c02:	f000 fc53 	bl	80084ac <__i2b>
 8007c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	f340 8081 	ble.w	8007d12 <_dtoa_r+0x8ca>
 8007c10:	461a      	mov	r2, r3
 8007c12:	4601      	mov	r1, r0
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 fd09 	bl	800862c <__pow5mult>
 8007c1a:	9b07      	ldr	r3, [sp, #28]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	4606      	mov	r6, r0
 8007c20:	dd7a      	ble.n	8007d18 <_dtoa_r+0x8d0>
 8007c22:	f04f 0800 	mov.w	r8, #0
 8007c26:	6933      	ldr	r3, [r6, #16]
 8007c28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c2c:	6918      	ldr	r0, [r3, #16]
 8007c2e:	f000 fbef 	bl	8008410 <__hi0bits>
 8007c32:	f1c0 0020 	rsb	r0, r0, #32
 8007c36:	9b06      	ldr	r3, [sp, #24]
 8007c38:	4418      	add	r0, r3
 8007c3a:	f010 001f 	ands.w	r0, r0, #31
 8007c3e:	f000 8094 	beq.w	8007d6a <_dtoa_r+0x922>
 8007c42:	f1c0 0320 	rsb	r3, r0, #32
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	f340 8085 	ble.w	8007d56 <_dtoa_r+0x90e>
 8007c4c:	9b05      	ldr	r3, [sp, #20]
 8007c4e:	f1c0 001c 	rsb	r0, r0, #28
 8007c52:	4403      	add	r3, r0
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	9b06      	ldr	r3, [sp, #24]
 8007c58:	4403      	add	r3, r0
 8007c5a:	4405      	add	r5, r0
 8007c5c:	9306      	str	r3, [sp, #24]
 8007c5e:	9b05      	ldr	r3, [sp, #20]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dd05      	ble.n	8007c70 <_dtoa_r+0x828>
 8007c64:	4651      	mov	r1, sl
 8007c66:	461a      	mov	r2, r3
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 fd39 	bl	80086e0 <__lshift>
 8007c6e:	4682      	mov	sl, r0
 8007c70:	9b06      	ldr	r3, [sp, #24]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	dd05      	ble.n	8007c82 <_dtoa_r+0x83a>
 8007c76:	4631      	mov	r1, r6
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 fd30 	bl	80086e0 <__lshift>
 8007c80:	4606      	mov	r6, r0
 8007c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d072      	beq.n	8007d6e <_dtoa_r+0x926>
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4650      	mov	r0, sl
 8007c8c:	f000 fd94 	bl	80087b8 <__mcmp>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	da6c      	bge.n	8007d6e <_dtoa_r+0x926>
 8007c94:	2300      	movs	r3, #0
 8007c96:	4651      	mov	r1, sl
 8007c98:	220a      	movs	r2, #10
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f000 fb28 	bl	80082f0 <__multadd>
 8007ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ca6:	4682      	mov	sl, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 81b0 	beq.w	800800e <_dtoa_r+0xbc6>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	220a      	movs	r2, #10
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f000 fb1b 	bl	80082f0 <__multadd>
 8007cba:	9b01      	ldr	r3, [sp, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	f300 8096 	bgt.w	8007df0 <_dtoa_r+0x9a8>
 8007cc4:	9b07      	ldr	r3, [sp, #28]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	dc59      	bgt.n	8007d7e <_dtoa_r+0x936>
 8007cca:	e091      	b.n	8007df0 <_dtoa_r+0x9a8>
 8007ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cd2:	e758      	b.n	8007b86 <_dtoa_r+0x73e>
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	1e5e      	subs	r6, r3, #1
 8007cd8:	9b08      	ldr	r3, [sp, #32]
 8007cda:	42b3      	cmp	r3, r6
 8007cdc:	bfbf      	itttt	lt
 8007cde:	9b08      	ldrlt	r3, [sp, #32]
 8007ce0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007ce2:	9608      	strlt	r6, [sp, #32]
 8007ce4:	1af3      	sublt	r3, r6, r3
 8007ce6:	bfb4      	ite	lt
 8007ce8:	18d2      	addlt	r2, r2, r3
 8007cea:	1b9e      	subge	r6, r3, r6
 8007cec:	9b04      	ldr	r3, [sp, #16]
 8007cee:	bfbc      	itt	lt
 8007cf0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007cf2:	2600      	movlt	r6, #0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bfb7      	itett	lt
 8007cf8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007cfc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007d00:	1a9d      	sublt	r5, r3, r2
 8007d02:	2300      	movlt	r3, #0
 8007d04:	e741      	b.n	8007b8a <_dtoa_r+0x742>
 8007d06:	9e08      	ldr	r6, [sp, #32]
 8007d08:	9d05      	ldr	r5, [sp, #20]
 8007d0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d0c:	e748      	b.n	8007ba0 <_dtoa_r+0x758>
 8007d0e:	9a08      	ldr	r2, [sp, #32]
 8007d10:	e770      	b.n	8007bf4 <_dtoa_r+0x7ac>
 8007d12:	9b07      	ldr	r3, [sp, #28]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	dc19      	bgt.n	8007d4c <_dtoa_r+0x904>
 8007d18:	9b02      	ldr	r3, [sp, #8]
 8007d1a:	b9bb      	cbnz	r3, 8007d4c <_dtoa_r+0x904>
 8007d1c:	9b03      	ldr	r3, [sp, #12]
 8007d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d22:	b99b      	cbnz	r3, 8007d4c <_dtoa_r+0x904>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d2a:	0d1b      	lsrs	r3, r3, #20
 8007d2c:	051b      	lsls	r3, r3, #20
 8007d2e:	b183      	cbz	r3, 8007d52 <_dtoa_r+0x90a>
 8007d30:	9b05      	ldr	r3, [sp, #20]
 8007d32:	3301      	adds	r3, #1
 8007d34:	9305      	str	r3, [sp, #20]
 8007d36:	9b06      	ldr	r3, [sp, #24]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	9306      	str	r3, [sp, #24]
 8007d3c:	f04f 0801 	mov.w	r8, #1
 8007d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f47f af6f 	bne.w	8007c26 <_dtoa_r+0x7de>
 8007d48:	2001      	movs	r0, #1
 8007d4a:	e774      	b.n	8007c36 <_dtoa_r+0x7ee>
 8007d4c:	f04f 0800 	mov.w	r8, #0
 8007d50:	e7f6      	b.n	8007d40 <_dtoa_r+0x8f8>
 8007d52:	4698      	mov	r8, r3
 8007d54:	e7f4      	b.n	8007d40 <_dtoa_r+0x8f8>
 8007d56:	d082      	beq.n	8007c5e <_dtoa_r+0x816>
 8007d58:	9a05      	ldr	r2, [sp, #20]
 8007d5a:	331c      	adds	r3, #28
 8007d5c:	441a      	add	r2, r3
 8007d5e:	9205      	str	r2, [sp, #20]
 8007d60:	9a06      	ldr	r2, [sp, #24]
 8007d62:	441a      	add	r2, r3
 8007d64:	441d      	add	r5, r3
 8007d66:	9206      	str	r2, [sp, #24]
 8007d68:	e779      	b.n	8007c5e <_dtoa_r+0x816>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	e7f4      	b.n	8007d58 <_dtoa_r+0x910>
 8007d6e:	9b04      	ldr	r3, [sp, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	dc37      	bgt.n	8007de4 <_dtoa_r+0x99c>
 8007d74:	9b07      	ldr	r3, [sp, #28]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	dd34      	ble.n	8007de4 <_dtoa_r+0x99c>
 8007d7a:	9b04      	ldr	r3, [sp, #16]
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	b963      	cbnz	r3, 8007d9c <_dtoa_r+0x954>
 8007d82:	4631      	mov	r1, r6
 8007d84:	2205      	movs	r2, #5
 8007d86:	4620      	mov	r0, r4
 8007d88:	f000 fab2 	bl	80082f0 <__multadd>
 8007d8c:	4601      	mov	r1, r0
 8007d8e:	4606      	mov	r6, r0
 8007d90:	4650      	mov	r0, sl
 8007d92:	f000 fd11 	bl	80087b8 <__mcmp>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	f73f adbb 	bgt.w	8007912 <_dtoa_r+0x4ca>
 8007d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9e:	9d00      	ldr	r5, [sp, #0]
 8007da0:	ea6f 0b03 	mvn.w	fp, r3
 8007da4:	f04f 0800 	mov.w	r8, #0
 8007da8:	4631      	mov	r1, r6
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 fa7e 	bl	80082ac <_Bfree>
 8007db0:	2f00      	cmp	r7, #0
 8007db2:	f43f aeab 	beq.w	8007b0c <_dtoa_r+0x6c4>
 8007db6:	f1b8 0f00 	cmp.w	r8, #0
 8007dba:	d005      	beq.n	8007dc8 <_dtoa_r+0x980>
 8007dbc:	45b8      	cmp	r8, r7
 8007dbe:	d003      	beq.n	8007dc8 <_dtoa_r+0x980>
 8007dc0:	4641      	mov	r1, r8
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f000 fa72 	bl	80082ac <_Bfree>
 8007dc8:	4639      	mov	r1, r7
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fa6e 	bl	80082ac <_Bfree>
 8007dd0:	e69c      	b.n	8007b0c <_dtoa_r+0x6c4>
 8007dd2:	2600      	movs	r6, #0
 8007dd4:	4637      	mov	r7, r6
 8007dd6:	e7e1      	b.n	8007d9c <_dtoa_r+0x954>
 8007dd8:	46bb      	mov	fp, r7
 8007dda:	4637      	mov	r7, r6
 8007ddc:	e599      	b.n	8007912 <_dtoa_r+0x4ca>
 8007dde:	bf00      	nop
 8007de0:	40240000 	.word	0x40240000
 8007de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 80c8 	beq.w	8007f7c <_dtoa_r+0xb34>
 8007dec:	9b04      	ldr	r3, [sp, #16]
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	dd05      	ble.n	8007e00 <_dtoa_r+0x9b8>
 8007df4:	4639      	mov	r1, r7
 8007df6:	462a      	mov	r2, r5
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fc71 	bl	80086e0 <__lshift>
 8007dfe:	4607      	mov	r7, r0
 8007e00:	f1b8 0f00 	cmp.w	r8, #0
 8007e04:	d05b      	beq.n	8007ebe <_dtoa_r+0xa76>
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 fa0f 	bl	800822c <_Balloc>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	b928      	cbnz	r0, 8007e1e <_dtoa_r+0x9d6>
 8007e12:	4b83      	ldr	r3, [pc, #524]	; (8008020 <_dtoa_r+0xbd8>)
 8007e14:	4602      	mov	r2, r0
 8007e16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007e1a:	f7ff bb2e 	b.w	800747a <_dtoa_r+0x32>
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	3202      	adds	r2, #2
 8007e22:	0092      	lsls	r2, r2, #2
 8007e24:	f107 010c 	add.w	r1, r7, #12
 8007e28:	300c      	adds	r0, #12
 8007e2a:	f002 fb19 	bl	800a460 <memcpy>
 8007e2e:	2201      	movs	r2, #1
 8007e30:	4629      	mov	r1, r5
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fc54 	bl	80086e0 <__lshift>
 8007e38:	9b00      	ldr	r3, [sp, #0]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	9304      	str	r3, [sp, #16]
 8007e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e42:	4413      	add	r3, r2
 8007e44:	9308      	str	r3, [sp, #32]
 8007e46:	9b02      	ldr	r3, [sp, #8]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	46b8      	mov	r8, r7
 8007e4e:	9306      	str	r3, [sp, #24]
 8007e50:	4607      	mov	r7, r0
 8007e52:	9b04      	ldr	r3, [sp, #16]
 8007e54:	4631      	mov	r1, r6
 8007e56:	3b01      	subs	r3, #1
 8007e58:	4650      	mov	r0, sl
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	f7ff fa6a 	bl	8007334 <quorem>
 8007e60:	4641      	mov	r1, r8
 8007e62:	9002      	str	r0, [sp, #8]
 8007e64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e68:	4650      	mov	r0, sl
 8007e6a:	f000 fca5 	bl	80087b8 <__mcmp>
 8007e6e:	463a      	mov	r2, r7
 8007e70:	9005      	str	r0, [sp, #20]
 8007e72:	4631      	mov	r1, r6
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 fcbb 	bl	80087f0 <__mdiff>
 8007e7a:	68c2      	ldr	r2, [r0, #12]
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	bb02      	cbnz	r2, 8007ec2 <_dtoa_r+0xa7a>
 8007e80:	4601      	mov	r1, r0
 8007e82:	4650      	mov	r0, sl
 8007e84:	f000 fc98 	bl	80087b8 <__mcmp>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e90:	f000 fa0c 	bl	80082ac <_Bfree>
 8007e94:	9b07      	ldr	r3, [sp, #28]
 8007e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e98:	9d04      	ldr	r5, [sp, #16]
 8007e9a:	ea43 0102 	orr.w	r1, r3, r2
 8007e9e:	9b06      	ldr	r3, [sp, #24]
 8007ea0:	4319      	orrs	r1, r3
 8007ea2:	d110      	bne.n	8007ec6 <_dtoa_r+0xa7e>
 8007ea4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ea8:	d029      	beq.n	8007efe <_dtoa_r+0xab6>
 8007eaa:	9b05      	ldr	r3, [sp, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dd02      	ble.n	8007eb6 <_dtoa_r+0xa6e>
 8007eb0:	9b02      	ldr	r3, [sp, #8]
 8007eb2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007eb6:	9b01      	ldr	r3, [sp, #4]
 8007eb8:	f883 9000 	strb.w	r9, [r3]
 8007ebc:	e774      	b.n	8007da8 <_dtoa_r+0x960>
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	e7ba      	b.n	8007e38 <_dtoa_r+0x9f0>
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	e7e1      	b.n	8007e8a <_dtoa_r+0xa42>
 8007ec6:	9b05      	ldr	r3, [sp, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	db04      	blt.n	8007ed6 <_dtoa_r+0xa8e>
 8007ecc:	9907      	ldr	r1, [sp, #28]
 8007ece:	430b      	orrs	r3, r1
 8007ed0:	9906      	ldr	r1, [sp, #24]
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	d120      	bne.n	8007f18 <_dtoa_r+0xad0>
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	dded      	ble.n	8007eb6 <_dtoa_r+0xa6e>
 8007eda:	4651      	mov	r1, sl
 8007edc:	2201      	movs	r2, #1
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 fbfe 	bl	80086e0 <__lshift>
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4682      	mov	sl, r0
 8007ee8:	f000 fc66 	bl	80087b8 <__mcmp>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	dc03      	bgt.n	8007ef8 <_dtoa_r+0xab0>
 8007ef0:	d1e1      	bne.n	8007eb6 <_dtoa_r+0xa6e>
 8007ef2:	f019 0f01 	tst.w	r9, #1
 8007ef6:	d0de      	beq.n	8007eb6 <_dtoa_r+0xa6e>
 8007ef8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007efc:	d1d8      	bne.n	8007eb0 <_dtoa_r+0xa68>
 8007efe:	9a01      	ldr	r2, [sp, #4]
 8007f00:	2339      	movs	r3, #57	; 0x39
 8007f02:	7013      	strb	r3, [r2, #0]
 8007f04:	462b      	mov	r3, r5
 8007f06:	461d      	mov	r5, r3
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f0e:	2a39      	cmp	r2, #57	; 0x39
 8007f10:	d06c      	beq.n	8007fec <_dtoa_r+0xba4>
 8007f12:	3201      	adds	r2, #1
 8007f14:	701a      	strb	r2, [r3, #0]
 8007f16:	e747      	b.n	8007da8 <_dtoa_r+0x960>
 8007f18:	2a00      	cmp	r2, #0
 8007f1a:	dd07      	ble.n	8007f2c <_dtoa_r+0xae4>
 8007f1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f20:	d0ed      	beq.n	8007efe <_dtoa_r+0xab6>
 8007f22:	9a01      	ldr	r2, [sp, #4]
 8007f24:	f109 0301 	add.w	r3, r9, #1
 8007f28:	7013      	strb	r3, [r2, #0]
 8007f2a:	e73d      	b.n	8007da8 <_dtoa_r+0x960>
 8007f2c:	9b04      	ldr	r3, [sp, #16]
 8007f2e:	9a08      	ldr	r2, [sp, #32]
 8007f30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d043      	beq.n	8007fc0 <_dtoa_r+0xb78>
 8007f38:	4651      	mov	r1, sl
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 f9d6 	bl	80082f0 <__multadd>
 8007f44:	45b8      	cmp	r8, r7
 8007f46:	4682      	mov	sl, r0
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	f04f 020a 	mov.w	r2, #10
 8007f50:	4641      	mov	r1, r8
 8007f52:	4620      	mov	r0, r4
 8007f54:	d107      	bne.n	8007f66 <_dtoa_r+0xb1e>
 8007f56:	f000 f9cb 	bl	80082f0 <__multadd>
 8007f5a:	4680      	mov	r8, r0
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	3301      	adds	r3, #1
 8007f62:	9304      	str	r3, [sp, #16]
 8007f64:	e775      	b.n	8007e52 <_dtoa_r+0xa0a>
 8007f66:	f000 f9c3 	bl	80082f0 <__multadd>
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	220a      	movs	r2, #10
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 f9bc 	bl	80082f0 <__multadd>
 8007f78:	4607      	mov	r7, r0
 8007f7a:	e7f0      	b.n	8007f5e <_dtoa_r+0xb16>
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	9d00      	ldr	r5, [sp, #0]
 8007f82:	4631      	mov	r1, r6
 8007f84:	4650      	mov	r0, sl
 8007f86:	f7ff f9d5 	bl	8007334 <quorem>
 8007f8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f8e:	9b00      	ldr	r3, [sp, #0]
 8007f90:	f805 9b01 	strb.w	r9, [r5], #1
 8007f94:	1aea      	subs	r2, r5, r3
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	dd07      	ble.n	8007fac <_dtoa_r+0xb64>
 8007f9c:	4651      	mov	r1, sl
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	220a      	movs	r2, #10
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 f9a4 	bl	80082f0 <__multadd>
 8007fa8:	4682      	mov	sl, r0
 8007faa:	e7ea      	b.n	8007f82 <_dtoa_r+0xb3a>
 8007fac:	9b01      	ldr	r3, [sp, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfc8      	it	gt
 8007fb2:	461d      	movgt	r5, r3
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	bfd8      	it	le
 8007fb8:	2501      	movle	r5, #1
 8007fba:	441d      	add	r5, r3
 8007fbc:	f04f 0800 	mov.w	r8, #0
 8007fc0:	4651      	mov	r1, sl
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f000 fb8b 	bl	80086e0 <__lshift>
 8007fca:	4631      	mov	r1, r6
 8007fcc:	4682      	mov	sl, r0
 8007fce:	f000 fbf3 	bl	80087b8 <__mcmp>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	dc96      	bgt.n	8007f04 <_dtoa_r+0xabc>
 8007fd6:	d102      	bne.n	8007fde <_dtoa_r+0xb96>
 8007fd8:	f019 0f01 	tst.w	r9, #1
 8007fdc:	d192      	bne.n	8007f04 <_dtoa_r+0xabc>
 8007fde:	462b      	mov	r3, r5
 8007fe0:	461d      	mov	r5, r3
 8007fe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fe6:	2a30      	cmp	r2, #48	; 0x30
 8007fe8:	d0fa      	beq.n	8007fe0 <_dtoa_r+0xb98>
 8007fea:	e6dd      	b.n	8007da8 <_dtoa_r+0x960>
 8007fec:	9a00      	ldr	r2, [sp, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d189      	bne.n	8007f06 <_dtoa_r+0xabe>
 8007ff2:	f10b 0b01 	add.w	fp, fp, #1
 8007ff6:	2331      	movs	r3, #49	; 0x31
 8007ff8:	e796      	b.n	8007f28 <_dtoa_r+0xae0>
 8007ffa:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <_dtoa_r+0xbdc>)
 8007ffc:	f7ff ba99 	b.w	8007532 <_dtoa_r+0xea>
 8008000:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008002:	2b00      	cmp	r3, #0
 8008004:	f47f aa6d 	bne.w	80074e2 <_dtoa_r+0x9a>
 8008008:	4b07      	ldr	r3, [pc, #28]	; (8008028 <_dtoa_r+0xbe0>)
 800800a:	f7ff ba92 	b.w	8007532 <_dtoa_r+0xea>
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	dcb5      	bgt.n	8007f80 <_dtoa_r+0xb38>
 8008014:	9b07      	ldr	r3, [sp, #28]
 8008016:	2b02      	cmp	r3, #2
 8008018:	f73f aeb1 	bgt.w	8007d7e <_dtoa_r+0x936>
 800801c:	e7b0      	b.n	8007f80 <_dtoa_r+0xb38>
 800801e:	bf00      	nop
 8008020:	0800cc0b 	.word	0x0800cc0b
 8008024:	0800cef0 	.word	0x0800cef0
 8008028:	0800cb8f 	.word	0x0800cb8f

0800802c <_free_r>:
 800802c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800802e:	2900      	cmp	r1, #0
 8008030:	d044      	beq.n	80080bc <_free_r+0x90>
 8008032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008036:	9001      	str	r0, [sp, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	f1a1 0404 	sub.w	r4, r1, #4
 800803e:	bfb8      	it	lt
 8008040:	18e4      	addlt	r4, r4, r3
 8008042:	f000 f8e7 	bl	8008214 <__malloc_lock>
 8008046:	4a1e      	ldr	r2, [pc, #120]	; (80080c0 <_free_r+0x94>)
 8008048:	9801      	ldr	r0, [sp, #4]
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	b933      	cbnz	r3, 800805c <_free_r+0x30>
 800804e:	6063      	str	r3, [r4, #4]
 8008050:	6014      	str	r4, [r2, #0]
 8008052:	b003      	add	sp, #12
 8008054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008058:	f000 b8e2 	b.w	8008220 <__malloc_unlock>
 800805c:	42a3      	cmp	r3, r4
 800805e:	d908      	bls.n	8008072 <_free_r+0x46>
 8008060:	6825      	ldr	r5, [r4, #0]
 8008062:	1961      	adds	r1, r4, r5
 8008064:	428b      	cmp	r3, r1
 8008066:	bf01      	itttt	eq
 8008068:	6819      	ldreq	r1, [r3, #0]
 800806a:	685b      	ldreq	r3, [r3, #4]
 800806c:	1949      	addeq	r1, r1, r5
 800806e:	6021      	streq	r1, [r4, #0]
 8008070:	e7ed      	b.n	800804e <_free_r+0x22>
 8008072:	461a      	mov	r2, r3
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	b10b      	cbz	r3, 800807c <_free_r+0x50>
 8008078:	42a3      	cmp	r3, r4
 800807a:	d9fa      	bls.n	8008072 <_free_r+0x46>
 800807c:	6811      	ldr	r1, [r2, #0]
 800807e:	1855      	adds	r5, r2, r1
 8008080:	42a5      	cmp	r5, r4
 8008082:	d10b      	bne.n	800809c <_free_r+0x70>
 8008084:	6824      	ldr	r4, [r4, #0]
 8008086:	4421      	add	r1, r4
 8008088:	1854      	adds	r4, r2, r1
 800808a:	42a3      	cmp	r3, r4
 800808c:	6011      	str	r1, [r2, #0]
 800808e:	d1e0      	bne.n	8008052 <_free_r+0x26>
 8008090:	681c      	ldr	r4, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	6053      	str	r3, [r2, #4]
 8008096:	440c      	add	r4, r1
 8008098:	6014      	str	r4, [r2, #0]
 800809a:	e7da      	b.n	8008052 <_free_r+0x26>
 800809c:	d902      	bls.n	80080a4 <_free_r+0x78>
 800809e:	230c      	movs	r3, #12
 80080a0:	6003      	str	r3, [r0, #0]
 80080a2:	e7d6      	b.n	8008052 <_free_r+0x26>
 80080a4:	6825      	ldr	r5, [r4, #0]
 80080a6:	1961      	adds	r1, r4, r5
 80080a8:	428b      	cmp	r3, r1
 80080aa:	bf04      	itt	eq
 80080ac:	6819      	ldreq	r1, [r3, #0]
 80080ae:	685b      	ldreq	r3, [r3, #4]
 80080b0:	6063      	str	r3, [r4, #4]
 80080b2:	bf04      	itt	eq
 80080b4:	1949      	addeq	r1, r1, r5
 80080b6:	6021      	streq	r1, [r4, #0]
 80080b8:	6054      	str	r4, [r2, #4]
 80080ba:	e7ca      	b.n	8008052 <_free_r+0x26>
 80080bc:	b003      	add	sp, #12
 80080be:	bd30      	pop	{r4, r5, pc}
 80080c0:	20000654 	.word	0x20000654

080080c4 <malloc>:
 80080c4:	4b02      	ldr	r3, [pc, #8]	; (80080d0 <malloc+0xc>)
 80080c6:	4601      	mov	r1, r0
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	f000 b823 	b.w	8008114 <_malloc_r>
 80080ce:	bf00      	nop
 80080d0:	20000064 	.word	0x20000064

080080d4 <sbrk_aligned>:
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	4e0e      	ldr	r6, [pc, #56]	; (8008110 <sbrk_aligned+0x3c>)
 80080d8:	460c      	mov	r4, r1
 80080da:	6831      	ldr	r1, [r6, #0]
 80080dc:	4605      	mov	r5, r0
 80080de:	b911      	cbnz	r1, 80080e6 <sbrk_aligned+0x12>
 80080e0:	f002 f9ae 	bl	800a440 <_sbrk_r>
 80080e4:	6030      	str	r0, [r6, #0]
 80080e6:	4621      	mov	r1, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f002 f9a9 	bl	800a440 <_sbrk_r>
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	d00a      	beq.n	8008108 <sbrk_aligned+0x34>
 80080f2:	1cc4      	adds	r4, r0, #3
 80080f4:	f024 0403 	bic.w	r4, r4, #3
 80080f8:	42a0      	cmp	r0, r4
 80080fa:	d007      	beq.n	800810c <sbrk_aligned+0x38>
 80080fc:	1a21      	subs	r1, r4, r0
 80080fe:	4628      	mov	r0, r5
 8008100:	f002 f99e 	bl	800a440 <_sbrk_r>
 8008104:	3001      	adds	r0, #1
 8008106:	d101      	bne.n	800810c <sbrk_aligned+0x38>
 8008108:	f04f 34ff 	mov.w	r4, #4294967295
 800810c:	4620      	mov	r0, r4
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	20000658 	.word	0x20000658

08008114 <_malloc_r>:
 8008114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008118:	1ccd      	adds	r5, r1, #3
 800811a:	f025 0503 	bic.w	r5, r5, #3
 800811e:	3508      	adds	r5, #8
 8008120:	2d0c      	cmp	r5, #12
 8008122:	bf38      	it	cc
 8008124:	250c      	movcc	r5, #12
 8008126:	2d00      	cmp	r5, #0
 8008128:	4607      	mov	r7, r0
 800812a:	db01      	blt.n	8008130 <_malloc_r+0x1c>
 800812c:	42a9      	cmp	r1, r5
 800812e:	d905      	bls.n	800813c <_malloc_r+0x28>
 8008130:	230c      	movs	r3, #12
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	2600      	movs	r6, #0
 8008136:	4630      	mov	r0, r6
 8008138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008210 <_malloc_r+0xfc>
 8008140:	f000 f868 	bl	8008214 <__malloc_lock>
 8008144:	f8d8 3000 	ldr.w	r3, [r8]
 8008148:	461c      	mov	r4, r3
 800814a:	bb5c      	cbnz	r4, 80081a4 <_malloc_r+0x90>
 800814c:	4629      	mov	r1, r5
 800814e:	4638      	mov	r0, r7
 8008150:	f7ff ffc0 	bl	80080d4 <sbrk_aligned>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	4604      	mov	r4, r0
 8008158:	d155      	bne.n	8008206 <_malloc_r+0xf2>
 800815a:	f8d8 4000 	ldr.w	r4, [r8]
 800815e:	4626      	mov	r6, r4
 8008160:	2e00      	cmp	r6, #0
 8008162:	d145      	bne.n	80081f0 <_malloc_r+0xdc>
 8008164:	2c00      	cmp	r4, #0
 8008166:	d048      	beq.n	80081fa <_malloc_r+0xe6>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	4631      	mov	r1, r6
 800816c:	4638      	mov	r0, r7
 800816e:	eb04 0903 	add.w	r9, r4, r3
 8008172:	f002 f965 	bl	800a440 <_sbrk_r>
 8008176:	4581      	cmp	r9, r0
 8008178:	d13f      	bne.n	80081fa <_malloc_r+0xe6>
 800817a:	6821      	ldr	r1, [r4, #0]
 800817c:	1a6d      	subs	r5, r5, r1
 800817e:	4629      	mov	r1, r5
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ffa7 	bl	80080d4 <sbrk_aligned>
 8008186:	3001      	adds	r0, #1
 8008188:	d037      	beq.n	80081fa <_malloc_r+0xe6>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	442b      	add	r3, r5
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	f8d8 3000 	ldr.w	r3, [r8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d038      	beq.n	800820a <_malloc_r+0xf6>
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	42a2      	cmp	r2, r4
 800819c:	d12b      	bne.n	80081f6 <_malloc_r+0xe2>
 800819e:	2200      	movs	r2, #0
 80081a0:	605a      	str	r2, [r3, #4]
 80081a2:	e00f      	b.n	80081c4 <_malloc_r+0xb0>
 80081a4:	6822      	ldr	r2, [r4, #0]
 80081a6:	1b52      	subs	r2, r2, r5
 80081a8:	d41f      	bmi.n	80081ea <_malloc_r+0xd6>
 80081aa:	2a0b      	cmp	r2, #11
 80081ac:	d917      	bls.n	80081de <_malloc_r+0xca>
 80081ae:	1961      	adds	r1, r4, r5
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	6025      	str	r5, [r4, #0]
 80081b4:	bf18      	it	ne
 80081b6:	6059      	strne	r1, [r3, #4]
 80081b8:	6863      	ldr	r3, [r4, #4]
 80081ba:	bf08      	it	eq
 80081bc:	f8c8 1000 	streq.w	r1, [r8]
 80081c0:	5162      	str	r2, [r4, r5]
 80081c2:	604b      	str	r3, [r1, #4]
 80081c4:	4638      	mov	r0, r7
 80081c6:	f104 060b 	add.w	r6, r4, #11
 80081ca:	f000 f829 	bl	8008220 <__malloc_unlock>
 80081ce:	f026 0607 	bic.w	r6, r6, #7
 80081d2:	1d23      	adds	r3, r4, #4
 80081d4:	1af2      	subs	r2, r6, r3
 80081d6:	d0ae      	beq.n	8008136 <_malloc_r+0x22>
 80081d8:	1b9b      	subs	r3, r3, r6
 80081da:	50a3      	str	r3, [r4, r2]
 80081dc:	e7ab      	b.n	8008136 <_malloc_r+0x22>
 80081de:	42a3      	cmp	r3, r4
 80081e0:	6862      	ldr	r2, [r4, #4]
 80081e2:	d1dd      	bne.n	80081a0 <_malloc_r+0x8c>
 80081e4:	f8c8 2000 	str.w	r2, [r8]
 80081e8:	e7ec      	b.n	80081c4 <_malloc_r+0xb0>
 80081ea:	4623      	mov	r3, r4
 80081ec:	6864      	ldr	r4, [r4, #4]
 80081ee:	e7ac      	b.n	800814a <_malloc_r+0x36>
 80081f0:	4634      	mov	r4, r6
 80081f2:	6876      	ldr	r6, [r6, #4]
 80081f4:	e7b4      	b.n	8008160 <_malloc_r+0x4c>
 80081f6:	4613      	mov	r3, r2
 80081f8:	e7cc      	b.n	8008194 <_malloc_r+0x80>
 80081fa:	230c      	movs	r3, #12
 80081fc:	603b      	str	r3, [r7, #0]
 80081fe:	4638      	mov	r0, r7
 8008200:	f000 f80e 	bl	8008220 <__malloc_unlock>
 8008204:	e797      	b.n	8008136 <_malloc_r+0x22>
 8008206:	6025      	str	r5, [r4, #0]
 8008208:	e7dc      	b.n	80081c4 <_malloc_r+0xb0>
 800820a:	605b      	str	r3, [r3, #4]
 800820c:	deff      	udf	#255	; 0xff
 800820e:	bf00      	nop
 8008210:	20000654 	.word	0x20000654

08008214 <__malloc_lock>:
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <__malloc_lock+0x8>)
 8008216:	f7ff b87c 	b.w	8007312 <__retarget_lock_acquire_recursive>
 800821a:	bf00      	nop
 800821c:	20000650 	.word	0x20000650

08008220 <__malloc_unlock>:
 8008220:	4801      	ldr	r0, [pc, #4]	; (8008228 <__malloc_unlock+0x8>)
 8008222:	f7ff b877 	b.w	8007314 <__retarget_lock_release_recursive>
 8008226:	bf00      	nop
 8008228:	20000650 	.word	0x20000650

0800822c <_Balloc>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	69c6      	ldr	r6, [r0, #28]
 8008230:	4604      	mov	r4, r0
 8008232:	460d      	mov	r5, r1
 8008234:	b976      	cbnz	r6, 8008254 <_Balloc+0x28>
 8008236:	2010      	movs	r0, #16
 8008238:	f7ff ff44 	bl	80080c4 <malloc>
 800823c:	4602      	mov	r2, r0
 800823e:	61e0      	str	r0, [r4, #28]
 8008240:	b920      	cbnz	r0, 800824c <_Balloc+0x20>
 8008242:	4b18      	ldr	r3, [pc, #96]	; (80082a4 <_Balloc+0x78>)
 8008244:	4818      	ldr	r0, [pc, #96]	; (80082a8 <_Balloc+0x7c>)
 8008246:	216b      	movs	r1, #107	; 0x6b
 8008248:	f002 f922 	bl	800a490 <__assert_func>
 800824c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008250:	6006      	str	r6, [r0, #0]
 8008252:	60c6      	str	r6, [r0, #12]
 8008254:	69e6      	ldr	r6, [r4, #28]
 8008256:	68f3      	ldr	r3, [r6, #12]
 8008258:	b183      	cbz	r3, 800827c <_Balloc+0x50>
 800825a:	69e3      	ldr	r3, [r4, #28]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008262:	b9b8      	cbnz	r0, 8008294 <_Balloc+0x68>
 8008264:	2101      	movs	r1, #1
 8008266:	fa01 f605 	lsl.w	r6, r1, r5
 800826a:	1d72      	adds	r2, r6, #5
 800826c:	0092      	lsls	r2, r2, #2
 800826e:	4620      	mov	r0, r4
 8008270:	f002 f92c 	bl	800a4cc <_calloc_r>
 8008274:	b160      	cbz	r0, 8008290 <_Balloc+0x64>
 8008276:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800827a:	e00e      	b.n	800829a <_Balloc+0x6e>
 800827c:	2221      	movs	r2, #33	; 0x21
 800827e:	2104      	movs	r1, #4
 8008280:	4620      	mov	r0, r4
 8008282:	f002 f923 	bl	800a4cc <_calloc_r>
 8008286:	69e3      	ldr	r3, [r4, #28]
 8008288:	60f0      	str	r0, [r6, #12]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e4      	bne.n	800825a <_Balloc+0x2e>
 8008290:	2000      	movs	r0, #0
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	6802      	ldr	r2, [r0, #0]
 8008296:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800829a:	2300      	movs	r3, #0
 800829c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082a0:	e7f7      	b.n	8008292 <_Balloc+0x66>
 80082a2:	bf00      	nop
 80082a4:	0800cb9c 	.word	0x0800cb9c
 80082a8:	0800cc1c 	.word	0x0800cc1c

080082ac <_Bfree>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	69c6      	ldr	r6, [r0, #28]
 80082b0:	4605      	mov	r5, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	b976      	cbnz	r6, 80082d4 <_Bfree+0x28>
 80082b6:	2010      	movs	r0, #16
 80082b8:	f7ff ff04 	bl	80080c4 <malloc>
 80082bc:	4602      	mov	r2, r0
 80082be:	61e8      	str	r0, [r5, #28]
 80082c0:	b920      	cbnz	r0, 80082cc <_Bfree+0x20>
 80082c2:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <_Bfree+0x3c>)
 80082c4:	4809      	ldr	r0, [pc, #36]	; (80082ec <_Bfree+0x40>)
 80082c6:	218f      	movs	r1, #143	; 0x8f
 80082c8:	f002 f8e2 	bl	800a490 <__assert_func>
 80082cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082d0:	6006      	str	r6, [r0, #0]
 80082d2:	60c6      	str	r6, [r0, #12]
 80082d4:	b13c      	cbz	r4, 80082e6 <_Bfree+0x3a>
 80082d6:	69eb      	ldr	r3, [r5, #28]
 80082d8:	6862      	ldr	r2, [r4, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082e0:	6021      	str	r1, [r4, #0]
 80082e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	0800cb9c 	.word	0x0800cb9c
 80082ec:	0800cc1c 	.word	0x0800cc1c

080082f0 <__multadd>:
 80082f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f4:	690d      	ldr	r5, [r1, #16]
 80082f6:	4607      	mov	r7, r0
 80082f8:	460c      	mov	r4, r1
 80082fa:	461e      	mov	r6, r3
 80082fc:	f101 0c14 	add.w	ip, r1, #20
 8008300:	2000      	movs	r0, #0
 8008302:	f8dc 3000 	ldr.w	r3, [ip]
 8008306:	b299      	uxth	r1, r3
 8008308:	fb02 6101 	mla	r1, r2, r1, r6
 800830c:	0c1e      	lsrs	r6, r3, #16
 800830e:	0c0b      	lsrs	r3, r1, #16
 8008310:	fb02 3306 	mla	r3, r2, r6, r3
 8008314:	b289      	uxth	r1, r1
 8008316:	3001      	adds	r0, #1
 8008318:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800831c:	4285      	cmp	r5, r0
 800831e:	f84c 1b04 	str.w	r1, [ip], #4
 8008322:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008326:	dcec      	bgt.n	8008302 <__multadd+0x12>
 8008328:	b30e      	cbz	r6, 800836e <__multadd+0x7e>
 800832a:	68a3      	ldr	r3, [r4, #8]
 800832c:	42ab      	cmp	r3, r5
 800832e:	dc19      	bgt.n	8008364 <__multadd+0x74>
 8008330:	6861      	ldr	r1, [r4, #4]
 8008332:	4638      	mov	r0, r7
 8008334:	3101      	adds	r1, #1
 8008336:	f7ff ff79 	bl	800822c <_Balloc>
 800833a:	4680      	mov	r8, r0
 800833c:	b928      	cbnz	r0, 800834a <__multadd+0x5a>
 800833e:	4602      	mov	r2, r0
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <__multadd+0x84>)
 8008342:	480d      	ldr	r0, [pc, #52]	; (8008378 <__multadd+0x88>)
 8008344:	21ba      	movs	r1, #186	; 0xba
 8008346:	f002 f8a3 	bl	800a490 <__assert_func>
 800834a:	6922      	ldr	r2, [r4, #16]
 800834c:	3202      	adds	r2, #2
 800834e:	f104 010c 	add.w	r1, r4, #12
 8008352:	0092      	lsls	r2, r2, #2
 8008354:	300c      	adds	r0, #12
 8008356:	f002 f883 	bl	800a460 <memcpy>
 800835a:	4621      	mov	r1, r4
 800835c:	4638      	mov	r0, r7
 800835e:	f7ff ffa5 	bl	80082ac <_Bfree>
 8008362:	4644      	mov	r4, r8
 8008364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008368:	3501      	adds	r5, #1
 800836a:	615e      	str	r6, [r3, #20]
 800836c:	6125      	str	r5, [r4, #16]
 800836e:	4620      	mov	r0, r4
 8008370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008374:	0800cc0b 	.word	0x0800cc0b
 8008378:	0800cc1c 	.word	0x0800cc1c

0800837c <__s2b>:
 800837c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008380:	460c      	mov	r4, r1
 8008382:	4615      	mov	r5, r2
 8008384:	461f      	mov	r7, r3
 8008386:	2209      	movs	r2, #9
 8008388:	3308      	adds	r3, #8
 800838a:	4606      	mov	r6, r0
 800838c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008390:	2100      	movs	r1, #0
 8008392:	2201      	movs	r2, #1
 8008394:	429a      	cmp	r2, r3
 8008396:	db09      	blt.n	80083ac <__s2b+0x30>
 8008398:	4630      	mov	r0, r6
 800839a:	f7ff ff47 	bl	800822c <_Balloc>
 800839e:	b940      	cbnz	r0, 80083b2 <__s2b+0x36>
 80083a0:	4602      	mov	r2, r0
 80083a2:	4b19      	ldr	r3, [pc, #100]	; (8008408 <__s2b+0x8c>)
 80083a4:	4819      	ldr	r0, [pc, #100]	; (800840c <__s2b+0x90>)
 80083a6:	21d3      	movs	r1, #211	; 0xd3
 80083a8:	f002 f872 	bl	800a490 <__assert_func>
 80083ac:	0052      	lsls	r2, r2, #1
 80083ae:	3101      	adds	r1, #1
 80083b0:	e7f0      	b.n	8008394 <__s2b+0x18>
 80083b2:	9b08      	ldr	r3, [sp, #32]
 80083b4:	6143      	str	r3, [r0, #20]
 80083b6:	2d09      	cmp	r5, #9
 80083b8:	f04f 0301 	mov.w	r3, #1
 80083bc:	6103      	str	r3, [r0, #16]
 80083be:	dd16      	ble.n	80083ee <__s2b+0x72>
 80083c0:	f104 0909 	add.w	r9, r4, #9
 80083c4:	46c8      	mov	r8, r9
 80083c6:	442c      	add	r4, r5
 80083c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80083cc:	4601      	mov	r1, r0
 80083ce:	3b30      	subs	r3, #48	; 0x30
 80083d0:	220a      	movs	r2, #10
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7ff ff8c 	bl	80082f0 <__multadd>
 80083d8:	45a0      	cmp	r8, r4
 80083da:	d1f5      	bne.n	80083c8 <__s2b+0x4c>
 80083dc:	f1a5 0408 	sub.w	r4, r5, #8
 80083e0:	444c      	add	r4, r9
 80083e2:	1b2d      	subs	r5, r5, r4
 80083e4:	1963      	adds	r3, r4, r5
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	db04      	blt.n	80083f4 <__s2b+0x78>
 80083ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ee:	340a      	adds	r4, #10
 80083f0:	2509      	movs	r5, #9
 80083f2:	e7f6      	b.n	80083e2 <__s2b+0x66>
 80083f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083f8:	4601      	mov	r1, r0
 80083fa:	3b30      	subs	r3, #48	; 0x30
 80083fc:	220a      	movs	r2, #10
 80083fe:	4630      	mov	r0, r6
 8008400:	f7ff ff76 	bl	80082f0 <__multadd>
 8008404:	e7ee      	b.n	80083e4 <__s2b+0x68>
 8008406:	bf00      	nop
 8008408:	0800cc0b 	.word	0x0800cc0b
 800840c:	0800cc1c 	.word	0x0800cc1c

08008410 <__hi0bits>:
 8008410:	0c03      	lsrs	r3, r0, #16
 8008412:	041b      	lsls	r3, r3, #16
 8008414:	b9d3      	cbnz	r3, 800844c <__hi0bits+0x3c>
 8008416:	0400      	lsls	r0, r0, #16
 8008418:	2310      	movs	r3, #16
 800841a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800841e:	bf04      	itt	eq
 8008420:	0200      	lsleq	r0, r0, #8
 8008422:	3308      	addeq	r3, #8
 8008424:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008428:	bf04      	itt	eq
 800842a:	0100      	lsleq	r0, r0, #4
 800842c:	3304      	addeq	r3, #4
 800842e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008432:	bf04      	itt	eq
 8008434:	0080      	lsleq	r0, r0, #2
 8008436:	3302      	addeq	r3, #2
 8008438:	2800      	cmp	r0, #0
 800843a:	db05      	blt.n	8008448 <__hi0bits+0x38>
 800843c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008440:	f103 0301 	add.w	r3, r3, #1
 8008444:	bf08      	it	eq
 8008446:	2320      	moveq	r3, #32
 8008448:	4618      	mov	r0, r3
 800844a:	4770      	bx	lr
 800844c:	2300      	movs	r3, #0
 800844e:	e7e4      	b.n	800841a <__hi0bits+0xa>

08008450 <__lo0bits>:
 8008450:	6803      	ldr	r3, [r0, #0]
 8008452:	f013 0207 	ands.w	r2, r3, #7
 8008456:	d00c      	beq.n	8008472 <__lo0bits+0x22>
 8008458:	07d9      	lsls	r1, r3, #31
 800845a:	d422      	bmi.n	80084a2 <__lo0bits+0x52>
 800845c:	079a      	lsls	r2, r3, #30
 800845e:	bf49      	itett	mi
 8008460:	085b      	lsrmi	r3, r3, #1
 8008462:	089b      	lsrpl	r3, r3, #2
 8008464:	6003      	strmi	r3, [r0, #0]
 8008466:	2201      	movmi	r2, #1
 8008468:	bf5c      	itt	pl
 800846a:	6003      	strpl	r3, [r0, #0]
 800846c:	2202      	movpl	r2, #2
 800846e:	4610      	mov	r0, r2
 8008470:	4770      	bx	lr
 8008472:	b299      	uxth	r1, r3
 8008474:	b909      	cbnz	r1, 800847a <__lo0bits+0x2a>
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	2210      	movs	r2, #16
 800847a:	b2d9      	uxtb	r1, r3
 800847c:	b909      	cbnz	r1, 8008482 <__lo0bits+0x32>
 800847e:	3208      	adds	r2, #8
 8008480:	0a1b      	lsrs	r3, r3, #8
 8008482:	0719      	lsls	r1, r3, #28
 8008484:	bf04      	itt	eq
 8008486:	091b      	lsreq	r3, r3, #4
 8008488:	3204      	addeq	r2, #4
 800848a:	0799      	lsls	r1, r3, #30
 800848c:	bf04      	itt	eq
 800848e:	089b      	lsreq	r3, r3, #2
 8008490:	3202      	addeq	r2, #2
 8008492:	07d9      	lsls	r1, r3, #31
 8008494:	d403      	bmi.n	800849e <__lo0bits+0x4e>
 8008496:	085b      	lsrs	r3, r3, #1
 8008498:	f102 0201 	add.w	r2, r2, #1
 800849c:	d003      	beq.n	80084a6 <__lo0bits+0x56>
 800849e:	6003      	str	r3, [r0, #0]
 80084a0:	e7e5      	b.n	800846e <__lo0bits+0x1e>
 80084a2:	2200      	movs	r2, #0
 80084a4:	e7e3      	b.n	800846e <__lo0bits+0x1e>
 80084a6:	2220      	movs	r2, #32
 80084a8:	e7e1      	b.n	800846e <__lo0bits+0x1e>
	...

080084ac <__i2b>:
 80084ac:	b510      	push	{r4, lr}
 80084ae:	460c      	mov	r4, r1
 80084b0:	2101      	movs	r1, #1
 80084b2:	f7ff febb 	bl	800822c <_Balloc>
 80084b6:	4602      	mov	r2, r0
 80084b8:	b928      	cbnz	r0, 80084c6 <__i2b+0x1a>
 80084ba:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <__i2b+0x24>)
 80084bc:	4805      	ldr	r0, [pc, #20]	; (80084d4 <__i2b+0x28>)
 80084be:	f240 1145 	movw	r1, #325	; 0x145
 80084c2:	f001 ffe5 	bl	800a490 <__assert_func>
 80084c6:	2301      	movs	r3, #1
 80084c8:	6144      	str	r4, [r0, #20]
 80084ca:	6103      	str	r3, [r0, #16]
 80084cc:	bd10      	pop	{r4, pc}
 80084ce:	bf00      	nop
 80084d0:	0800cc0b 	.word	0x0800cc0b
 80084d4:	0800cc1c 	.word	0x0800cc1c

080084d8 <__multiply>:
 80084d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	4691      	mov	r9, r2
 80084de:	690a      	ldr	r2, [r1, #16]
 80084e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	bfb8      	it	lt
 80084e8:	460b      	movlt	r3, r1
 80084ea:	460c      	mov	r4, r1
 80084ec:	bfbc      	itt	lt
 80084ee:	464c      	movlt	r4, r9
 80084f0:	4699      	movlt	r9, r3
 80084f2:	6927      	ldr	r7, [r4, #16]
 80084f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084f8:	68a3      	ldr	r3, [r4, #8]
 80084fa:	6861      	ldr	r1, [r4, #4]
 80084fc:	eb07 060a 	add.w	r6, r7, sl
 8008500:	42b3      	cmp	r3, r6
 8008502:	b085      	sub	sp, #20
 8008504:	bfb8      	it	lt
 8008506:	3101      	addlt	r1, #1
 8008508:	f7ff fe90 	bl	800822c <_Balloc>
 800850c:	b930      	cbnz	r0, 800851c <__multiply+0x44>
 800850e:	4602      	mov	r2, r0
 8008510:	4b44      	ldr	r3, [pc, #272]	; (8008624 <__multiply+0x14c>)
 8008512:	4845      	ldr	r0, [pc, #276]	; (8008628 <__multiply+0x150>)
 8008514:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008518:	f001 ffba 	bl	800a490 <__assert_func>
 800851c:	f100 0514 	add.w	r5, r0, #20
 8008520:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008524:	462b      	mov	r3, r5
 8008526:	2200      	movs	r2, #0
 8008528:	4543      	cmp	r3, r8
 800852a:	d321      	bcc.n	8008570 <__multiply+0x98>
 800852c:	f104 0314 	add.w	r3, r4, #20
 8008530:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008534:	f109 0314 	add.w	r3, r9, #20
 8008538:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800853c:	9202      	str	r2, [sp, #8]
 800853e:	1b3a      	subs	r2, r7, r4
 8008540:	3a15      	subs	r2, #21
 8008542:	f022 0203 	bic.w	r2, r2, #3
 8008546:	3204      	adds	r2, #4
 8008548:	f104 0115 	add.w	r1, r4, #21
 800854c:	428f      	cmp	r7, r1
 800854e:	bf38      	it	cc
 8008550:	2204      	movcc	r2, #4
 8008552:	9201      	str	r2, [sp, #4]
 8008554:	9a02      	ldr	r2, [sp, #8]
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	429a      	cmp	r2, r3
 800855a:	d80c      	bhi.n	8008576 <__multiply+0x9e>
 800855c:	2e00      	cmp	r6, #0
 800855e:	dd03      	ble.n	8008568 <__multiply+0x90>
 8008560:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008564:	2b00      	cmp	r3, #0
 8008566:	d05b      	beq.n	8008620 <__multiply+0x148>
 8008568:	6106      	str	r6, [r0, #16]
 800856a:	b005      	add	sp, #20
 800856c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008570:	f843 2b04 	str.w	r2, [r3], #4
 8008574:	e7d8      	b.n	8008528 <__multiply+0x50>
 8008576:	f8b3 a000 	ldrh.w	sl, [r3]
 800857a:	f1ba 0f00 	cmp.w	sl, #0
 800857e:	d024      	beq.n	80085ca <__multiply+0xf2>
 8008580:	f104 0e14 	add.w	lr, r4, #20
 8008584:	46a9      	mov	r9, r5
 8008586:	f04f 0c00 	mov.w	ip, #0
 800858a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800858e:	f8d9 1000 	ldr.w	r1, [r9]
 8008592:	fa1f fb82 	uxth.w	fp, r2
 8008596:	b289      	uxth	r1, r1
 8008598:	fb0a 110b 	mla	r1, sl, fp, r1
 800859c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085a0:	f8d9 2000 	ldr.w	r2, [r9]
 80085a4:	4461      	add	r1, ip
 80085a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80085ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085b2:	b289      	uxth	r1, r1
 80085b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085b8:	4577      	cmp	r7, lr
 80085ba:	f849 1b04 	str.w	r1, [r9], #4
 80085be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085c2:	d8e2      	bhi.n	800858a <__multiply+0xb2>
 80085c4:	9a01      	ldr	r2, [sp, #4]
 80085c6:	f845 c002 	str.w	ip, [r5, r2]
 80085ca:	9a03      	ldr	r2, [sp, #12]
 80085cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085d0:	3304      	adds	r3, #4
 80085d2:	f1b9 0f00 	cmp.w	r9, #0
 80085d6:	d021      	beq.n	800861c <__multiply+0x144>
 80085d8:	6829      	ldr	r1, [r5, #0]
 80085da:	f104 0c14 	add.w	ip, r4, #20
 80085de:	46ae      	mov	lr, r5
 80085e0:	f04f 0a00 	mov.w	sl, #0
 80085e4:	f8bc b000 	ldrh.w	fp, [ip]
 80085e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085ec:	fb09 220b 	mla	r2, r9, fp, r2
 80085f0:	4452      	add	r2, sl
 80085f2:	b289      	uxth	r1, r1
 80085f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085f8:	f84e 1b04 	str.w	r1, [lr], #4
 80085fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008600:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008604:	f8be 1000 	ldrh.w	r1, [lr]
 8008608:	fb09 110a 	mla	r1, r9, sl, r1
 800860c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008610:	4567      	cmp	r7, ip
 8008612:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008616:	d8e5      	bhi.n	80085e4 <__multiply+0x10c>
 8008618:	9a01      	ldr	r2, [sp, #4]
 800861a:	50a9      	str	r1, [r5, r2]
 800861c:	3504      	adds	r5, #4
 800861e:	e799      	b.n	8008554 <__multiply+0x7c>
 8008620:	3e01      	subs	r6, #1
 8008622:	e79b      	b.n	800855c <__multiply+0x84>
 8008624:	0800cc0b 	.word	0x0800cc0b
 8008628:	0800cc1c 	.word	0x0800cc1c

0800862c <__pow5mult>:
 800862c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008630:	4615      	mov	r5, r2
 8008632:	f012 0203 	ands.w	r2, r2, #3
 8008636:	4606      	mov	r6, r0
 8008638:	460f      	mov	r7, r1
 800863a:	d007      	beq.n	800864c <__pow5mult+0x20>
 800863c:	4c25      	ldr	r4, [pc, #148]	; (80086d4 <__pow5mult+0xa8>)
 800863e:	3a01      	subs	r2, #1
 8008640:	2300      	movs	r3, #0
 8008642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008646:	f7ff fe53 	bl	80082f0 <__multadd>
 800864a:	4607      	mov	r7, r0
 800864c:	10ad      	asrs	r5, r5, #2
 800864e:	d03d      	beq.n	80086cc <__pow5mult+0xa0>
 8008650:	69f4      	ldr	r4, [r6, #28]
 8008652:	b97c      	cbnz	r4, 8008674 <__pow5mult+0x48>
 8008654:	2010      	movs	r0, #16
 8008656:	f7ff fd35 	bl	80080c4 <malloc>
 800865a:	4602      	mov	r2, r0
 800865c:	61f0      	str	r0, [r6, #28]
 800865e:	b928      	cbnz	r0, 800866c <__pow5mult+0x40>
 8008660:	4b1d      	ldr	r3, [pc, #116]	; (80086d8 <__pow5mult+0xac>)
 8008662:	481e      	ldr	r0, [pc, #120]	; (80086dc <__pow5mult+0xb0>)
 8008664:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008668:	f001 ff12 	bl	800a490 <__assert_func>
 800866c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008670:	6004      	str	r4, [r0, #0]
 8008672:	60c4      	str	r4, [r0, #12]
 8008674:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800867c:	b94c      	cbnz	r4, 8008692 <__pow5mult+0x66>
 800867e:	f240 2171 	movw	r1, #625	; 0x271
 8008682:	4630      	mov	r0, r6
 8008684:	f7ff ff12 	bl	80084ac <__i2b>
 8008688:	2300      	movs	r3, #0
 800868a:	f8c8 0008 	str.w	r0, [r8, #8]
 800868e:	4604      	mov	r4, r0
 8008690:	6003      	str	r3, [r0, #0]
 8008692:	f04f 0900 	mov.w	r9, #0
 8008696:	07eb      	lsls	r3, r5, #31
 8008698:	d50a      	bpl.n	80086b0 <__pow5mult+0x84>
 800869a:	4639      	mov	r1, r7
 800869c:	4622      	mov	r2, r4
 800869e:	4630      	mov	r0, r6
 80086a0:	f7ff ff1a 	bl	80084d8 <__multiply>
 80086a4:	4639      	mov	r1, r7
 80086a6:	4680      	mov	r8, r0
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff fdff 	bl	80082ac <_Bfree>
 80086ae:	4647      	mov	r7, r8
 80086b0:	106d      	asrs	r5, r5, #1
 80086b2:	d00b      	beq.n	80086cc <__pow5mult+0xa0>
 80086b4:	6820      	ldr	r0, [r4, #0]
 80086b6:	b938      	cbnz	r0, 80086c8 <__pow5mult+0x9c>
 80086b8:	4622      	mov	r2, r4
 80086ba:	4621      	mov	r1, r4
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff ff0b 	bl	80084d8 <__multiply>
 80086c2:	6020      	str	r0, [r4, #0]
 80086c4:	f8c0 9000 	str.w	r9, [r0]
 80086c8:	4604      	mov	r4, r0
 80086ca:	e7e4      	b.n	8008696 <__pow5mult+0x6a>
 80086cc:	4638      	mov	r0, r7
 80086ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d2:	bf00      	nop
 80086d4:	0800cd68 	.word	0x0800cd68
 80086d8:	0800cb9c 	.word	0x0800cb9c
 80086dc:	0800cc1c 	.word	0x0800cc1c

080086e0 <__lshift>:
 80086e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e4:	460c      	mov	r4, r1
 80086e6:	6849      	ldr	r1, [r1, #4]
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086ee:	68a3      	ldr	r3, [r4, #8]
 80086f0:	4607      	mov	r7, r0
 80086f2:	4691      	mov	r9, r2
 80086f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086f8:	f108 0601 	add.w	r6, r8, #1
 80086fc:	42b3      	cmp	r3, r6
 80086fe:	db0b      	blt.n	8008718 <__lshift+0x38>
 8008700:	4638      	mov	r0, r7
 8008702:	f7ff fd93 	bl	800822c <_Balloc>
 8008706:	4605      	mov	r5, r0
 8008708:	b948      	cbnz	r0, 800871e <__lshift+0x3e>
 800870a:	4602      	mov	r2, r0
 800870c:	4b28      	ldr	r3, [pc, #160]	; (80087b0 <__lshift+0xd0>)
 800870e:	4829      	ldr	r0, [pc, #164]	; (80087b4 <__lshift+0xd4>)
 8008710:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008714:	f001 febc 	bl	800a490 <__assert_func>
 8008718:	3101      	adds	r1, #1
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	e7ee      	b.n	80086fc <__lshift+0x1c>
 800871e:	2300      	movs	r3, #0
 8008720:	f100 0114 	add.w	r1, r0, #20
 8008724:	f100 0210 	add.w	r2, r0, #16
 8008728:	4618      	mov	r0, r3
 800872a:	4553      	cmp	r3, sl
 800872c:	db33      	blt.n	8008796 <__lshift+0xb6>
 800872e:	6920      	ldr	r0, [r4, #16]
 8008730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008734:	f104 0314 	add.w	r3, r4, #20
 8008738:	f019 091f 	ands.w	r9, r9, #31
 800873c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008744:	d02b      	beq.n	800879e <__lshift+0xbe>
 8008746:	f1c9 0e20 	rsb	lr, r9, #32
 800874a:	468a      	mov	sl, r1
 800874c:	2200      	movs	r2, #0
 800874e:	6818      	ldr	r0, [r3, #0]
 8008750:	fa00 f009 	lsl.w	r0, r0, r9
 8008754:	4310      	orrs	r0, r2
 8008756:	f84a 0b04 	str.w	r0, [sl], #4
 800875a:	f853 2b04 	ldr.w	r2, [r3], #4
 800875e:	459c      	cmp	ip, r3
 8008760:	fa22 f20e 	lsr.w	r2, r2, lr
 8008764:	d8f3      	bhi.n	800874e <__lshift+0x6e>
 8008766:	ebac 0304 	sub.w	r3, ip, r4
 800876a:	3b15      	subs	r3, #21
 800876c:	f023 0303 	bic.w	r3, r3, #3
 8008770:	3304      	adds	r3, #4
 8008772:	f104 0015 	add.w	r0, r4, #21
 8008776:	4584      	cmp	ip, r0
 8008778:	bf38      	it	cc
 800877a:	2304      	movcc	r3, #4
 800877c:	50ca      	str	r2, [r1, r3]
 800877e:	b10a      	cbz	r2, 8008784 <__lshift+0xa4>
 8008780:	f108 0602 	add.w	r6, r8, #2
 8008784:	3e01      	subs	r6, #1
 8008786:	4638      	mov	r0, r7
 8008788:	612e      	str	r6, [r5, #16]
 800878a:	4621      	mov	r1, r4
 800878c:	f7ff fd8e 	bl	80082ac <_Bfree>
 8008790:	4628      	mov	r0, r5
 8008792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008796:	f842 0f04 	str.w	r0, [r2, #4]!
 800879a:	3301      	adds	r3, #1
 800879c:	e7c5      	b.n	800872a <__lshift+0x4a>
 800879e:	3904      	subs	r1, #4
 80087a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80087a8:	459c      	cmp	ip, r3
 80087aa:	d8f9      	bhi.n	80087a0 <__lshift+0xc0>
 80087ac:	e7ea      	b.n	8008784 <__lshift+0xa4>
 80087ae:	bf00      	nop
 80087b0:	0800cc0b 	.word	0x0800cc0b
 80087b4:	0800cc1c 	.word	0x0800cc1c

080087b8 <__mcmp>:
 80087b8:	b530      	push	{r4, r5, lr}
 80087ba:	6902      	ldr	r2, [r0, #16]
 80087bc:	690c      	ldr	r4, [r1, #16]
 80087be:	1b12      	subs	r2, r2, r4
 80087c0:	d10e      	bne.n	80087e0 <__mcmp+0x28>
 80087c2:	f100 0314 	add.w	r3, r0, #20
 80087c6:	3114      	adds	r1, #20
 80087c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087d8:	42a5      	cmp	r5, r4
 80087da:	d003      	beq.n	80087e4 <__mcmp+0x2c>
 80087dc:	d305      	bcc.n	80087ea <__mcmp+0x32>
 80087de:	2201      	movs	r2, #1
 80087e0:	4610      	mov	r0, r2
 80087e2:	bd30      	pop	{r4, r5, pc}
 80087e4:	4283      	cmp	r3, r0
 80087e6:	d3f3      	bcc.n	80087d0 <__mcmp+0x18>
 80087e8:	e7fa      	b.n	80087e0 <__mcmp+0x28>
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295
 80087ee:	e7f7      	b.n	80087e0 <__mcmp+0x28>

080087f0 <__mdiff>:
 80087f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	460c      	mov	r4, r1
 80087f6:	4606      	mov	r6, r0
 80087f8:	4611      	mov	r1, r2
 80087fa:	4620      	mov	r0, r4
 80087fc:	4690      	mov	r8, r2
 80087fe:	f7ff ffdb 	bl	80087b8 <__mcmp>
 8008802:	1e05      	subs	r5, r0, #0
 8008804:	d110      	bne.n	8008828 <__mdiff+0x38>
 8008806:	4629      	mov	r1, r5
 8008808:	4630      	mov	r0, r6
 800880a:	f7ff fd0f 	bl	800822c <_Balloc>
 800880e:	b930      	cbnz	r0, 800881e <__mdiff+0x2e>
 8008810:	4b3a      	ldr	r3, [pc, #232]	; (80088fc <__mdiff+0x10c>)
 8008812:	4602      	mov	r2, r0
 8008814:	f240 2137 	movw	r1, #567	; 0x237
 8008818:	4839      	ldr	r0, [pc, #228]	; (8008900 <__mdiff+0x110>)
 800881a:	f001 fe39 	bl	800a490 <__assert_func>
 800881e:	2301      	movs	r3, #1
 8008820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008828:	bfa4      	itt	ge
 800882a:	4643      	movge	r3, r8
 800882c:	46a0      	movge	r8, r4
 800882e:	4630      	mov	r0, r6
 8008830:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008834:	bfa6      	itte	ge
 8008836:	461c      	movge	r4, r3
 8008838:	2500      	movge	r5, #0
 800883a:	2501      	movlt	r5, #1
 800883c:	f7ff fcf6 	bl	800822c <_Balloc>
 8008840:	b920      	cbnz	r0, 800884c <__mdiff+0x5c>
 8008842:	4b2e      	ldr	r3, [pc, #184]	; (80088fc <__mdiff+0x10c>)
 8008844:	4602      	mov	r2, r0
 8008846:	f240 2145 	movw	r1, #581	; 0x245
 800884a:	e7e5      	b.n	8008818 <__mdiff+0x28>
 800884c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008850:	6926      	ldr	r6, [r4, #16]
 8008852:	60c5      	str	r5, [r0, #12]
 8008854:	f104 0914 	add.w	r9, r4, #20
 8008858:	f108 0514 	add.w	r5, r8, #20
 800885c:	f100 0e14 	add.w	lr, r0, #20
 8008860:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008864:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008868:	f108 0210 	add.w	r2, r8, #16
 800886c:	46f2      	mov	sl, lr
 800886e:	2100      	movs	r1, #0
 8008870:	f859 3b04 	ldr.w	r3, [r9], #4
 8008874:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008878:	fa11 f88b 	uxtah	r8, r1, fp
 800887c:	b299      	uxth	r1, r3
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	eba8 0801 	sub.w	r8, r8, r1
 8008884:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008888:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800888c:	fa1f f888 	uxth.w	r8, r8
 8008890:	1419      	asrs	r1, r3, #16
 8008892:	454e      	cmp	r6, r9
 8008894:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008898:	f84a 3b04 	str.w	r3, [sl], #4
 800889c:	d8e8      	bhi.n	8008870 <__mdiff+0x80>
 800889e:	1b33      	subs	r3, r6, r4
 80088a0:	3b15      	subs	r3, #21
 80088a2:	f023 0303 	bic.w	r3, r3, #3
 80088a6:	3304      	adds	r3, #4
 80088a8:	3415      	adds	r4, #21
 80088aa:	42a6      	cmp	r6, r4
 80088ac:	bf38      	it	cc
 80088ae:	2304      	movcc	r3, #4
 80088b0:	441d      	add	r5, r3
 80088b2:	4473      	add	r3, lr
 80088b4:	469e      	mov	lr, r3
 80088b6:	462e      	mov	r6, r5
 80088b8:	4566      	cmp	r6, ip
 80088ba:	d30e      	bcc.n	80088da <__mdiff+0xea>
 80088bc:	f10c 0203 	add.w	r2, ip, #3
 80088c0:	1b52      	subs	r2, r2, r5
 80088c2:	f022 0203 	bic.w	r2, r2, #3
 80088c6:	3d03      	subs	r5, #3
 80088c8:	45ac      	cmp	ip, r5
 80088ca:	bf38      	it	cc
 80088cc:	2200      	movcc	r2, #0
 80088ce:	4413      	add	r3, r2
 80088d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80088d4:	b17a      	cbz	r2, 80088f6 <__mdiff+0x106>
 80088d6:	6107      	str	r7, [r0, #16]
 80088d8:	e7a4      	b.n	8008824 <__mdiff+0x34>
 80088da:	f856 8b04 	ldr.w	r8, [r6], #4
 80088de:	fa11 f288 	uxtah	r2, r1, r8
 80088e2:	1414      	asrs	r4, r2, #16
 80088e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088e8:	b292      	uxth	r2, r2
 80088ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80088ee:	f84e 2b04 	str.w	r2, [lr], #4
 80088f2:	1421      	asrs	r1, r4, #16
 80088f4:	e7e0      	b.n	80088b8 <__mdiff+0xc8>
 80088f6:	3f01      	subs	r7, #1
 80088f8:	e7ea      	b.n	80088d0 <__mdiff+0xe0>
 80088fa:	bf00      	nop
 80088fc:	0800cc0b 	.word	0x0800cc0b
 8008900:	0800cc1c 	.word	0x0800cc1c

08008904 <__ulp>:
 8008904:	b082      	sub	sp, #8
 8008906:	ed8d 0b00 	vstr	d0, [sp]
 800890a:	9a01      	ldr	r2, [sp, #4]
 800890c:	4b0f      	ldr	r3, [pc, #60]	; (800894c <__ulp+0x48>)
 800890e:	4013      	ands	r3, r2
 8008910:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008914:	2b00      	cmp	r3, #0
 8008916:	dc08      	bgt.n	800892a <__ulp+0x26>
 8008918:	425b      	negs	r3, r3
 800891a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800891e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008922:	da04      	bge.n	800892e <__ulp+0x2a>
 8008924:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008928:	4113      	asrs	r3, r2
 800892a:	2200      	movs	r2, #0
 800892c:	e008      	b.n	8008940 <__ulp+0x3c>
 800892e:	f1a2 0314 	sub.w	r3, r2, #20
 8008932:	2b1e      	cmp	r3, #30
 8008934:	bfda      	itte	le
 8008936:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800893a:	40da      	lsrle	r2, r3
 800893c:	2201      	movgt	r2, #1
 800893e:	2300      	movs	r3, #0
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	ec41 0b10 	vmov	d0, r0, r1
 8008948:	b002      	add	sp, #8
 800894a:	4770      	bx	lr
 800894c:	7ff00000 	.word	0x7ff00000

08008950 <__b2d>:
 8008950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008954:	6906      	ldr	r6, [r0, #16]
 8008956:	f100 0814 	add.w	r8, r0, #20
 800895a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800895e:	1f37      	subs	r7, r6, #4
 8008960:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008964:	4610      	mov	r0, r2
 8008966:	f7ff fd53 	bl	8008410 <__hi0bits>
 800896a:	f1c0 0320 	rsb	r3, r0, #32
 800896e:	280a      	cmp	r0, #10
 8008970:	600b      	str	r3, [r1, #0]
 8008972:	491b      	ldr	r1, [pc, #108]	; (80089e0 <__b2d+0x90>)
 8008974:	dc15      	bgt.n	80089a2 <__b2d+0x52>
 8008976:	f1c0 0c0b 	rsb	ip, r0, #11
 800897a:	fa22 f30c 	lsr.w	r3, r2, ip
 800897e:	45b8      	cmp	r8, r7
 8008980:	ea43 0501 	orr.w	r5, r3, r1
 8008984:	bf34      	ite	cc
 8008986:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800898a:	2300      	movcs	r3, #0
 800898c:	3015      	adds	r0, #21
 800898e:	fa02 f000 	lsl.w	r0, r2, r0
 8008992:	fa23 f30c 	lsr.w	r3, r3, ip
 8008996:	4303      	orrs	r3, r0
 8008998:	461c      	mov	r4, r3
 800899a:	ec45 4b10 	vmov	d0, r4, r5
 800899e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a2:	45b8      	cmp	r8, r7
 80089a4:	bf3a      	itte	cc
 80089a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80089aa:	f1a6 0708 	subcc.w	r7, r6, #8
 80089ae:	2300      	movcs	r3, #0
 80089b0:	380b      	subs	r0, #11
 80089b2:	d012      	beq.n	80089da <__b2d+0x8a>
 80089b4:	f1c0 0120 	rsb	r1, r0, #32
 80089b8:	fa23 f401 	lsr.w	r4, r3, r1
 80089bc:	4082      	lsls	r2, r0
 80089be:	4322      	orrs	r2, r4
 80089c0:	4547      	cmp	r7, r8
 80089c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80089c6:	bf8c      	ite	hi
 80089c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80089cc:	2200      	movls	r2, #0
 80089ce:	4083      	lsls	r3, r0
 80089d0:	40ca      	lsrs	r2, r1
 80089d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80089d6:	4313      	orrs	r3, r2
 80089d8:	e7de      	b.n	8008998 <__b2d+0x48>
 80089da:	ea42 0501 	orr.w	r5, r2, r1
 80089de:	e7db      	b.n	8008998 <__b2d+0x48>
 80089e0:	3ff00000 	.word	0x3ff00000

080089e4 <__d2b>:
 80089e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089e8:	460f      	mov	r7, r1
 80089ea:	2101      	movs	r1, #1
 80089ec:	ec59 8b10 	vmov	r8, r9, d0
 80089f0:	4616      	mov	r6, r2
 80089f2:	f7ff fc1b 	bl	800822c <_Balloc>
 80089f6:	4604      	mov	r4, r0
 80089f8:	b930      	cbnz	r0, 8008a08 <__d2b+0x24>
 80089fa:	4602      	mov	r2, r0
 80089fc:	4b24      	ldr	r3, [pc, #144]	; (8008a90 <__d2b+0xac>)
 80089fe:	4825      	ldr	r0, [pc, #148]	; (8008a94 <__d2b+0xb0>)
 8008a00:	f240 310f 	movw	r1, #783	; 0x30f
 8008a04:	f001 fd44 	bl	800a490 <__assert_func>
 8008a08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a10:	bb2d      	cbnz	r5, 8008a5e <__d2b+0x7a>
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	f1b8 0300 	subs.w	r3, r8, #0
 8008a18:	d026      	beq.n	8008a68 <__d2b+0x84>
 8008a1a:	4668      	mov	r0, sp
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	f7ff fd17 	bl	8008450 <__lo0bits>
 8008a22:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a26:	b1e8      	cbz	r0, 8008a64 <__d2b+0x80>
 8008a28:	f1c0 0320 	rsb	r3, r0, #32
 8008a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a30:	430b      	orrs	r3, r1
 8008a32:	40c2      	lsrs	r2, r0
 8008a34:	6163      	str	r3, [r4, #20]
 8008a36:	9201      	str	r2, [sp, #4]
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	61a3      	str	r3, [r4, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bf14      	ite	ne
 8008a40:	2202      	movne	r2, #2
 8008a42:	2201      	moveq	r2, #1
 8008a44:	6122      	str	r2, [r4, #16]
 8008a46:	b1bd      	cbz	r5, 8008a78 <__d2b+0x94>
 8008a48:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a4c:	4405      	add	r5, r0
 8008a4e:	603d      	str	r5, [r7, #0]
 8008a50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a54:	6030      	str	r0, [r6, #0]
 8008a56:	4620      	mov	r0, r4
 8008a58:	b003      	add	sp, #12
 8008a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a62:	e7d6      	b.n	8008a12 <__d2b+0x2e>
 8008a64:	6161      	str	r1, [r4, #20]
 8008a66:	e7e7      	b.n	8008a38 <__d2b+0x54>
 8008a68:	a801      	add	r0, sp, #4
 8008a6a:	f7ff fcf1 	bl	8008450 <__lo0bits>
 8008a6e:	9b01      	ldr	r3, [sp, #4]
 8008a70:	6163      	str	r3, [r4, #20]
 8008a72:	3020      	adds	r0, #32
 8008a74:	2201      	movs	r2, #1
 8008a76:	e7e5      	b.n	8008a44 <__d2b+0x60>
 8008a78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a80:	6038      	str	r0, [r7, #0]
 8008a82:	6918      	ldr	r0, [r3, #16]
 8008a84:	f7ff fcc4 	bl	8008410 <__hi0bits>
 8008a88:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a8c:	e7e2      	b.n	8008a54 <__d2b+0x70>
 8008a8e:	bf00      	nop
 8008a90:	0800cc0b 	.word	0x0800cc0b
 8008a94:	0800cc1c 	.word	0x0800cc1c

08008a98 <__ratio>:
 8008a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	4688      	mov	r8, r1
 8008a9e:	4669      	mov	r1, sp
 8008aa0:	4681      	mov	r9, r0
 8008aa2:	f7ff ff55 	bl	8008950 <__b2d>
 8008aa6:	a901      	add	r1, sp, #4
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	ec55 4b10 	vmov	r4, r5, d0
 8008aae:	f7ff ff4f 	bl	8008950 <__b2d>
 8008ab2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ab6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008aba:	eba3 0c02 	sub.w	ip, r3, r2
 8008abe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ac8:	ec51 0b10 	vmov	r0, r1, d0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bfd6      	itet	le
 8008ad0:	460a      	movle	r2, r1
 8008ad2:	462a      	movgt	r2, r5
 8008ad4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ad8:	468b      	mov	fp, r1
 8008ada:	462f      	mov	r7, r5
 8008adc:	bfd4      	ite	le
 8008ade:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008ae2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	ee10 2a10 	vmov	r2, s0
 8008aec:	465b      	mov	r3, fp
 8008aee:	4639      	mov	r1, r7
 8008af0:	f7f7 fec4 	bl	800087c <__aeabi_ddiv>
 8008af4:	ec41 0b10 	vmov	d0, r0, r1
 8008af8:	b003      	add	sp, #12
 8008afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008afe <__copybits>:
 8008afe:	3901      	subs	r1, #1
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	1149      	asrs	r1, r1, #5
 8008b04:	6914      	ldr	r4, [r2, #16]
 8008b06:	3101      	adds	r1, #1
 8008b08:	f102 0314 	add.w	r3, r2, #20
 8008b0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b14:	1f05      	subs	r5, r0, #4
 8008b16:	42a3      	cmp	r3, r4
 8008b18:	d30c      	bcc.n	8008b34 <__copybits+0x36>
 8008b1a:	1aa3      	subs	r3, r4, r2
 8008b1c:	3b11      	subs	r3, #17
 8008b1e:	f023 0303 	bic.w	r3, r3, #3
 8008b22:	3211      	adds	r2, #17
 8008b24:	42a2      	cmp	r2, r4
 8008b26:	bf88      	it	hi
 8008b28:	2300      	movhi	r3, #0
 8008b2a:	4418      	add	r0, r3
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4288      	cmp	r0, r1
 8008b30:	d305      	bcc.n	8008b3e <__copybits+0x40>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b38:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b3c:	e7eb      	b.n	8008b16 <__copybits+0x18>
 8008b3e:	f840 3b04 	str.w	r3, [r0], #4
 8008b42:	e7f4      	b.n	8008b2e <__copybits+0x30>

08008b44 <__any_on>:
 8008b44:	f100 0214 	add.w	r2, r0, #20
 8008b48:	6900      	ldr	r0, [r0, #16]
 8008b4a:	114b      	asrs	r3, r1, #5
 8008b4c:	4298      	cmp	r0, r3
 8008b4e:	b510      	push	{r4, lr}
 8008b50:	db11      	blt.n	8008b76 <__any_on+0x32>
 8008b52:	dd0a      	ble.n	8008b6a <__any_on+0x26>
 8008b54:	f011 011f 	ands.w	r1, r1, #31
 8008b58:	d007      	beq.n	8008b6a <__any_on+0x26>
 8008b5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b5e:	fa24 f001 	lsr.w	r0, r4, r1
 8008b62:	fa00 f101 	lsl.w	r1, r0, r1
 8008b66:	428c      	cmp	r4, r1
 8008b68:	d10b      	bne.n	8008b82 <__any_on+0x3e>
 8008b6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d803      	bhi.n	8008b7a <__any_on+0x36>
 8008b72:	2000      	movs	r0, #0
 8008b74:	bd10      	pop	{r4, pc}
 8008b76:	4603      	mov	r3, r0
 8008b78:	e7f7      	b.n	8008b6a <__any_on+0x26>
 8008b7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b7e:	2900      	cmp	r1, #0
 8008b80:	d0f5      	beq.n	8008b6e <__any_on+0x2a>
 8008b82:	2001      	movs	r0, #1
 8008b84:	e7f6      	b.n	8008b74 <__any_on+0x30>

08008b86 <sulp>:
 8008b86:	b570      	push	{r4, r5, r6, lr}
 8008b88:	4604      	mov	r4, r0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	ec45 4b10 	vmov	d0, r4, r5
 8008b90:	4616      	mov	r6, r2
 8008b92:	f7ff feb7 	bl	8008904 <__ulp>
 8008b96:	ec51 0b10 	vmov	r0, r1, d0
 8008b9a:	b17e      	cbz	r6, 8008bbc <sulp+0x36>
 8008b9c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ba0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dd09      	ble.n	8008bbc <sulp+0x36>
 8008ba8:	051b      	lsls	r3, r3, #20
 8008baa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008bae:	2400      	movs	r4, #0
 8008bb0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	462b      	mov	r3, r5
 8008bb8:	f7f7 fd36 	bl	8000628 <__aeabi_dmul>
 8008bbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008bc0 <_strtod_l>:
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	ed2d 8b02 	vpush	{d8}
 8008bc8:	b09b      	sub	sp, #108	; 0x6c
 8008bca:	4604      	mov	r4, r0
 8008bcc:	9213      	str	r2, [sp, #76]	; 0x4c
 8008bce:	2200      	movs	r2, #0
 8008bd0:	9216      	str	r2, [sp, #88]	; 0x58
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	f04f 0800 	mov.w	r8, #0
 8008bd8:	f04f 0900 	mov.w	r9, #0
 8008bdc:	460a      	mov	r2, r1
 8008bde:	9215      	str	r2, [sp, #84]	; 0x54
 8008be0:	7811      	ldrb	r1, [r2, #0]
 8008be2:	292b      	cmp	r1, #43	; 0x2b
 8008be4:	d04c      	beq.n	8008c80 <_strtod_l+0xc0>
 8008be6:	d83a      	bhi.n	8008c5e <_strtod_l+0x9e>
 8008be8:	290d      	cmp	r1, #13
 8008bea:	d834      	bhi.n	8008c56 <_strtod_l+0x96>
 8008bec:	2908      	cmp	r1, #8
 8008bee:	d834      	bhi.n	8008c5a <_strtod_l+0x9a>
 8008bf0:	2900      	cmp	r1, #0
 8008bf2:	d03d      	beq.n	8008c70 <_strtod_l+0xb0>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	920a      	str	r2, [sp, #40]	; 0x28
 8008bf8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008bfa:	7832      	ldrb	r2, [r6, #0]
 8008bfc:	2a30      	cmp	r2, #48	; 0x30
 8008bfe:	f040 80b4 	bne.w	8008d6a <_strtod_l+0x1aa>
 8008c02:	7872      	ldrb	r2, [r6, #1]
 8008c04:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008c08:	2a58      	cmp	r2, #88	; 0x58
 8008c0a:	d170      	bne.n	8008cee <_strtod_l+0x12e>
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	ab16      	add	r3, sp, #88	; 0x58
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	4a8e      	ldr	r2, [pc, #568]	; (8008e50 <_strtod_l+0x290>)
 8008c18:	ab17      	add	r3, sp, #92	; 0x5c
 8008c1a:	a915      	add	r1, sp, #84	; 0x54
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f001 fcd3 	bl	800a5c8 <__gethex>
 8008c22:	f010 070f 	ands.w	r7, r0, #15
 8008c26:	4605      	mov	r5, r0
 8008c28:	d005      	beq.n	8008c36 <_strtod_l+0x76>
 8008c2a:	2f06      	cmp	r7, #6
 8008c2c:	d12a      	bne.n	8008c84 <_strtod_l+0xc4>
 8008c2e:	3601      	adds	r6, #1
 8008c30:	2300      	movs	r3, #0
 8008c32:	9615      	str	r6, [sp, #84]	; 0x54
 8008c34:	930a      	str	r3, [sp, #40]	; 0x28
 8008c36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f040 857f 	bne.w	800973c <_strtod_l+0xb7c>
 8008c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c40:	b1db      	cbz	r3, 8008c7a <_strtod_l+0xba>
 8008c42:	4642      	mov	r2, r8
 8008c44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c48:	ec43 2b10 	vmov	d0, r2, r3
 8008c4c:	b01b      	add	sp, #108	; 0x6c
 8008c4e:	ecbd 8b02 	vpop	{d8}
 8008c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c56:	2920      	cmp	r1, #32
 8008c58:	d1cc      	bne.n	8008bf4 <_strtod_l+0x34>
 8008c5a:	3201      	adds	r2, #1
 8008c5c:	e7bf      	b.n	8008bde <_strtod_l+0x1e>
 8008c5e:	292d      	cmp	r1, #45	; 0x2d
 8008c60:	d1c8      	bne.n	8008bf4 <_strtod_l+0x34>
 8008c62:	2101      	movs	r1, #1
 8008c64:	910a      	str	r1, [sp, #40]	; 0x28
 8008c66:	1c51      	adds	r1, r2, #1
 8008c68:	9115      	str	r1, [sp, #84]	; 0x54
 8008c6a:	7852      	ldrb	r2, [r2, #1]
 8008c6c:	2a00      	cmp	r2, #0
 8008c6e:	d1c3      	bne.n	8008bf8 <_strtod_l+0x38>
 8008c70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c72:	9515      	str	r5, [sp, #84]	; 0x54
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 855f 	bne.w	8009738 <_strtod_l+0xb78>
 8008c7a:	4642      	mov	r2, r8
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	e7e3      	b.n	8008c48 <_strtod_l+0x88>
 8008c80:	2100      	movs	r1, #0
 8008c82:	e7ef      	b.n	8008c64 <_strtod_l+0xa4>
 8008c84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008c86:	b13a      	cbz	r2, 8008c98 <_strtod_l+0xd8>
 8008c88:	2135      	movs	r1, #53	; 0x35
 8008c8a:	a818      	add	r0, sp, #96	; 0x60
 8008c8c:	f7ff ff37 	bl	8008afe <__copybits>
 8008c90:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008c92:	4620      	mov	r0, r4
 8008c94:	f7ff fb0a 	bl	80082ac <_Bfree>
 8008c98:	3f01      	subs	r7, #1
 8008c9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c9c:	2f04      	cmp	r7, #4
 8008c9e:	d806      	bhi.n	8008cae <_strtod_l+0xee>
 8008ca0:	e8df f007 	tbb	[pc, r7]
 8008ca4:	201d0314 	.word	0x201d0314
 8008ca8:	14          	.byte	0x14
 8008ca9:	00          	.byte	0x00
 8008caa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008cae:	05e9      	lsls	r1, r5, #23
 8008cb0:	bf48      	it	mi
 8008cb2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008cb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cba:	0d1b      	lsrs	r3, r3, #20
 8008cbc:	051b      	lsls	r3, r3, #20
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1b9      	bne.n	8008c36 <_strtod_l+0x76>
 8008cc2:	f7fe fafb 	bl	80072bc <__errno>
 8008cc6:	2322      	movs	r3, #34	; 0x22
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	e7b4      	b.n	8008c36 <_strtod_l+0x76>
 8008ccc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008cd0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008cd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008cd8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008cdc:	e7e7      	b.n	8008cae <_strtod_l+0xee>
 8008cde:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008e58 <_strtod_l+0x298>
 8008ce2:	e7e4      	b.n	8008cae <_strtod_l+0xee>
 8008ce4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ce8:	f04f 38ff 	mov.w	r8, #4294967295
 8008cec:	e7df      	b.n	8008cae <_strtod_l+0xee>
 8008cee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	9215      	str	r2, [sp, #84]	; 0x54
 8008cf4:	785b      	ldrb	r3, [r3, #1]
 8008cf6:	2b30      	cmp	r3, #48	; 0x30
 8008cf8:	d0f9      	beq.n	8008cee <_strtod_l+0x12e>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d09b      	beq.n	8008c36 <_strtod_l+0x76>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	f04f 0a00 	mov.w	sl, #0
 8008d04:	9304      	str	r3, [sp, #16]
 8008d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d08:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d0a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008d0e:	46d3      	mov	fp, sl
 8008d10:	220a      	movs	r2, #10
 8008d12:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008d14:	7806      	ldrb	r6, [r0, #0]
 8008d16:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d1a:	b2d9      	uxtb	r1, r3
 8008d1c:	2909      	cmp	r1, #9
 8008d1e:	d926      	bls.n	8008d6e <_strtod_l+0x1ae>
 8008d20:	494c      	ldr	r1, [pc, #304]	; (8008e54 <_strtod_l+0x294>)
 8008d22:	2201      	movs	r2, #1
 8008d24:	f001 fb79 	bl	800a41a <strncmp>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d030      	beq.n	8008d8e <_strtod_l+0x1ce>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	4632      	mov	r2, r6
 8008d30:	9005      	str	r0, [sp, #20]
 8008d32:	465e      	mov	r6, fp
 8008d34:	4603      	mov	r3, r0
 8008d36:	2a65      	cmp	r2, #101	; 0x65
 8008d38:	d001      	beq.n	8008d3e <_strtod_l+0x17e>
 8008d3a:	2a45      	cmp	r2, #69	; 0x45
 8008d3c:	d113      	bne.n	8008d66 <_strtod_l+0x1a6>
 8008d3e:	b91e      	cbnz	r6, 8008d48 <_strtod_l+0x188>
 8008d40:	9a04      	ldr	r2, [sp, #16]
 8008d42:	4302      	orrs	r2, r0
 8008d44:	d094      	beq.n	8008c70 <_strtod_l+0xb0>
 8008d46:	2600      	movs	r6, #0
 8008d48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008d4a:	1c6a      	adds	r2, r5, #1
 8008d4c:	9215      	str	r2, [sp, #84]	; 0x54
 8008d4e:	786a      	ldrb	r2, [r5, #1]
 8008d50:	2a2b      	cmp	r2, #43	; 0x2b
 8008d52:	d074      	beq.n	8008e3e <_strtod_l+0x27e>
 8008d54:	2a2d      	cmp	r2, #45	; 0x2d
 8008d56:	d078      	beq.n	8008e4a <_strtod_l+0x28a>
 8008d58:	f04f 0c00 	mov.w	ip, #0
 8008d5c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008d60:	2909      	cmp	r1, #9
 8008d62:	d97f      	bls.n	8008e64 <_strtod_l+0x2a4>
 8008d64:	9515      	str	r5, [sp, #84]	; 0x54
 8008d66:	2700      	movs	r7, #0
 8008d68:	e09e      	b.n	8008ea8 <_strtod_l+0x2e8>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e7c8      	b.n	8008d00 <_strtod_l+0x140>
 8008d6e:	f1bb 0f08 	cmp.w	fp, #8
 8008d72:	bfd8      	it	le
 8008d74:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008d76:	f100 0001 	add.w	r0, r0, #1
 8008d7a:	bfda      	itte	le
 8008d7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d80:	9309      	strle	r3, [sp, #36]	; 0x24
 8008d82:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008d86:	f10b 0b01 	add.w	fp, fp, #1
 8008d8a:	9015      	str	r0, [sp, #84]	; 0x54
 8008d8c:	e7c1      	b.n	8008d12 <_strtod_l+0x152>
 8008d8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	9215      	str	r2, [sp, #84]	; 0x54
 8008d94:	785a      	ldrb	r2, [r3, #1]
 8008d96:	f1bb 0f00 	cmp.w	fp, #0
 8008d9a:	d037      	beq.n	8008e0c <_strtod_l+0x24c>
 8008d9c:	9005      	str	r0, [sp, #20]
 8008d9e:	465e      	mov	r6, fp
 8008da0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008da4:	2b09      	cmp	r3, #9
 8008da6:	d912      	bls.n	8008dce <_strtod_l+0x20e>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e7c4      	b.n	8008d36 <_strtod_l+0x176>
 8008dac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	9215      	str	r2, [sp, #84]	; 0x54
 8008db2:	785a      	ldrb	r2, [r3, #1]
 8008db4:	3001      	adds	r0, #1
 8008db6:	2a30      	cmp	r2, #48	; 0x30
 8008db8:	d0f8      	beq.n	8008dac <_strtod_l+0x1ec>
 8008dba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	f200 84c1 	bhi.w	8009746 <_strtod_l+0xb86>
 8008dc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dc6:	9005      	str	r0, [sp, #20]
 8008dc8:	2000      	movs	r0, #0
 8008dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dcc:	4606      	mov	r6, r0
 8008dce:	3a30      	subs	r2, #48	; 0x30
 8008dd0:	f100 0301 	add.w	r3, r0, #1
 8008dd4:	d014      	beq.n	8008e00 <_strtod_l+0x240>
 8008dd6:	9905      	ldr	r1, [sp, #20]
 8008dd8:	4419      	add	r1, r3
 8008dda:	9105      	str	r1, [sp, #20]
 8008ddc:	4633      	mov	r3, r6
 8008dde:	eb00 0c06 	add.w	ip, r0, r6
 8008de2:	210a      	movs	r1, #10
 8008de4:	4563      	cmp	r3, ip
 8008de6:	d113      	bne.n	8008e10 <_strtod_l+0x250>
 8008de8:	1833      	adds	r3, r6, r0
 8008dea:	2b08      	cmp	r3, #8
 8008dec:	f106 0601 	add.w	r6, r6, #1
 8008df0:	4406      	add	r6, r0
 8008df2:	dc1a      	bgt.n	8008e2a <_strtod_l+0x26a>
 8008df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008df6:	230a      	movs	r3, #10
 8008df8:	fb03 2301 	mla	r3, r3, r1, r2
 8008dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e02:	1c51      	adds	r1, r2, #1
 8008e04:	9115      	str	r1, [sp, #84]	; 0x54
 8008e06:	7852      	ldrb	r2, [r2, #1]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	e7c9      	b.n	8008da0 <_strtod_l+0x1e0>
 8008e0c:	4658      	mov	r0, fp
 8008e0e:	e7d2      	b.n	8008db6 <_strtod_l+0x1f6>
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	f103 0301 	add.w	r3, r3, #1
 8008e16:	dc03      	bgt.n	8008e20 <_strtod_l+0x260>
 8008e18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e1a:	434f      	muls	r7, r1
 8008e1c:	9709      	str	r7, [sp, #36]	; 0x24
 8008e1e:	e7e1      	b.n	8008de4 <_strtod_l+0x224>
 8008e20:	2b10      	cmp	r3, #16
 8008e22:	bfd8      	it	le
 8008e24:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008e28:	e7dc      	b.n	8008de4 <_strtod_l+0x224>
 8008e2a:	2e10      	cmp	r6, #16
 8008e2c:	bfdc      	itt	le
 8008e2e:	230a      	movle	r3, #10
 8008e30:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008e34:	e7e3      	b.n	8008dfe <_strtod_l+0x23e>
 8008e36:	2300      	movs	r3, #0
 8008e38:	9305      	str	r3, [sp, #20]
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e780      	b.n	8008d40 <_strtod_l+0x180>
 8008e3e:	f04f 0c00 	mov.w	ip, #0
 8008e42:	1caa      	adds	r2, r5, #2
 8008e44:	9215      	str	r2, [sp, #84]	; 0x54
 8008e46:	78aa      	ldrb	r2, [r5, #2]
 8008e48:	e788      	b.n	8008d5c <_strtod_l+0x19c>
 8008e4a:	f04f 0c01 	mov.w	ip, #1
 8008e4e:	e7f8      	b.n	8008e42 <_strtod_l+0x282>
 8008e50:	0800cd78 	.word	0x0800cd78
 8008e54:	0800cd74 	.word	0x0800cd74
 8008e58:	7ff00000 	.word	0x7ff00000
 8008e5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e5e:	1c51      	adds	r1, r2, #1
 8008e60:	9115      	str	r1, [sp, #84]	; 0x54
 8008e62:	7852      	ldrb	r2, [r2, #1]
 8008e64:	2a30      	cmp	r2, #48	; 0x30
 8008e66:	d0f9      	beq.n	8008e5c <_strtod_l+0x29c>
 8008e68:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008e6c:	2908      	cmp	r1, #8
 8008e6e:	f63f af7a 	bhi.w	8008d66 <_strtod_l+0x1a6>
 8008e72:	3a30      	subs	r2, #48	; 0x30
 8008e74:	9208      	str	r2, [sp, #32]
 8008e76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e78:	920c      	str	r2, [sp, #48]	; 0x30
 8008e7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e7c:	1c57      	adds	r7, r2, #1
 8008e7e:	9715      	str	r7, [sp, #84]	; 0x54
 8008e80:	7852      	ldrb	r2, [r2, #1]
 8008e82:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008e86:	f1be 0f09 	cmp.w	lr, #9
 8008e8a:	d938      	bls.n	8008efe <_strtod_l+0x33e>
 8008e8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e8e:	1a7f      	subs	r7, r7, r1
 8008e90:	2f08      	cmp	r7, #8
 8008e92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008e96:	dc03      	bgt.n	8008ea0 <_strtod_l+0x2e0>
 8008e98:	9908      	ldr	r1, [sp, #32]
 8008e9a:	428f      	cmp	r7, r1
 8008e9c:	bfa8      	it	ge
 8008e9e:	460f      	movge	r7, r1
 8008ea0:	f1bc 0f00 	cmp.w	ip, #0
 8008ea4:	d000      	beq.n	8008ea8 <_strtod_l+0x2e8>
 8008ea6:	427f      	negs	r7, r7
 8008ea8:	2e00      	cmp	r6, #0
 8008eaa:	d14f      	bne.n	8008f4c <_strtod_l+0x38c>
 8008eac:	9904      	ldr	r1, [sp, #16]
 8008eae:	4301      	orrs	r1, r0
 8008eb0:	f47f aec1 	bne.w	8008c36 <_strtod_l+0x76>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f47f aedb 	bne.w	8008c70 <_strtod_l+0xb0>
 8008eba:	2a69      	cmp	r2, #105	; 0x69
 8008ebc:	d029      	beq.n	8008f12 <_strtod_l+0x352>
 8008ebe:	dc26      	bgt.n	8008f0e <_strtod_l+0x34e>
 8008ec0:	2a49      	cmp	r2, #73	; 0x49
 8008ec2:	d026      	beq.n	8008f12 <_strtod_l+0x352>
 8008ec4:	2a4e      	cmp	r2, #78	; 0x4e
 8008ec6:	f47f aed3 	bne.w	8008c70 <_strtod_l+0xb0>
 8008eca:	499b      	ldr	r1, [pc, #620]	; (8009138 <_strtod_l+0x578>)
 8008ecc:	a815      	add	r0, sp, #84	; 0x54
 8008ece:	f001 fdbb 	bl	800aa48 <__match>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	f43f aecc 	beq.w	8008c70 <_strtod_l+0xb0>
 8008ed8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b28      	cmp	r3, #40	; 0x28
 8008ede:	d12f      	bne.n	8008f40 <_strtod_l+0x380>
 8008ee0:	4996      	ldr	r1, [pc, #600]	; (800913c <_strtod_l+0x57c>)
 8008ee2:	aa18      	add	r2, sp, #96	; 0x60
 8008ee4:	a815      	add	r0, sp, #84	; 0x54
 8008ee6:	f001 fdc3 	bl	800aa70 <__hexnan>
 8008eea:	2805      	cmp	r0, #5
 8008eec:	d128      	bne.n	8008f40 <_strtod_l+0x380>
 8008eee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ef0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ef4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008ef8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008efc:	e69b      	b.n	8008c36 <_strtod_l+0x76>
 8008efe:	9f08      	ldr	r7, [sp, #32]
 8008f00:	210a      	movs	r1, #10
 8008f02:	fb01 2107 	mla	r1, r1, r7, r2
 8008f06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008f0a:	9208      	str	r2, [sp, #32]
 8008f0c:	e7b5      	b.n	8008e7a <_strtod_l+0x2ba>
 8008f0e:	2a6e      	cmp	r2, #110	; 0x6e
 8008f10:	e7d9      	b.n	8008ec6 <_strtod_l+0x306>
 8008f12:	498b      	ldr	r1, [pc, #556]	; (8009140 <_strtod_l+0x580>)
 8008f14:	a815      	add	r0, sp, #84	; 0x54
 8008f16:	f001 fd97 	bl	800aa48 <__match>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	f43f aea8 	beq.w	8008c70 <_strtod_l+0xb0>
 8008f20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f22:	4988      	ldr	r1, [pc, #544]	; (8009144 <_strtod_l+0x584>)
 8008f24:	3b01      	subs	r3, #1
 8008f26:	a815      	add	r0, sp, #84	; 0x54
 8008f28:	9315      	str	r3, [sp, #84]	; 0x54
 8008f2a:	f001 fd8d 	bl	800aa48 <__match>
 8008f2e:	b910      	cbnz	r0, 8008f36 <_strtod_l+0x376>
 8008f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f32:	3301      	adds	r3, #1
 8008f34:	9315      	str	r3, [sp, #84]	; 0x54
 8008f36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009154 <_strtod_l+0x594>
 8008f3a:	f04f 0800 	mov.w	r8, #0
 8008f3e:	e67a      	b.n	8008c36 <_strtod_l+0x76>
 8008f40:	4881      	ldr	r0, [pc, #516]	; (8009148 <_strtod_l+0x588>)
 8008f42:	f001 fa9d 	bl	800a480 <nan>
 8008f46:	ec59 8b10 	vmov	r8, r9, d0
 8008f4a:	e674      	b.n	8008c36 <_strtod_l+0x76>
 8008f4c:	9b05      	ldr	r3, [sp, #20]
 8008f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f50:	1afb      	subs	r3, r7, r3
 8008f52:	f1bb 0f00 	cmp.w	fp, #0
 8008f56:	bf08      	it	eq
 8008f58:	46b3      	moveq	fp, r6
 8008f5a:	2e10      	cmp	r6, #16
 8008f5c:	9308      	str	r3, [sp, #32]
 8008f5e:	4635      	mov	r5, r6
 8008f60:	bfa8      	it	ge
 8008f62:	2510      	movge	r5, #16
 8008f64:	f7f7 fae6 	bl	8000534 <__aeabi_ui2d>
 8008f68:	2e09      	cmp	r6, #9
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	4689      	mov	r9, r1
 8008f6e:	dd13      	ble.n	8008f98 <_strtod_l+0x3d8>
 8008f70:	4b76      	ldr	r3, [pc, #472]	; (800914c <_strtod_l+0x58c>)
 8008f72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008f7a:	f7f7 fb55 	bl	8000628 <__aeabi_dmul>
 8008f7e:	4680      	mov	r8, r0
 8008f80:	4650      	mov	r0, sl
 8008f82:	4689      	mov	r9, r1
 8008f84:	f7f7 fad6 	bl	8000534 <__aeabi_ui2d>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	4649      	mov	r1, r9
 8008f90:	f7f7 f994 	bl	80002bc <__adddf3>
 8008f94:	4680      	mov	r8, r0
 8008f96:	4689      	mov	r9, r1
 8008f98:	2e0f      	cmp	r6, #15
 8008f9a:	dc38      	bgt.n	800900e <_strtod_l+0x44e>
 8008f9c:	9b08      	ldr	r3, [sp, #32]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f43f ae49 	beq.w	8008c36 <_strtod_l+0x76>
 8008fa4:	dd24      	ble.n	8008ff0 <_strtod_l+0x430>
 8008fa6:	2b16      	cmp	r3, #22
 8008fa8:	dc0b      	bgt.n	8008fc2 <_strtod_l+0x402>
 8008faa:	4968      	ldr	r1, [pc, #416]	; (800914c <_strtod_l+0x58c>)
 8008fac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	f7f7 fb36 	bl	8000628 <__aeabi_dmul>
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	4689      	mov	r9, r1
 8008fc0:	e639      	b.n	8008c36 <_strtod_l+0x76>
 8008fc2:	9a08      	ldr	r2, [sp, #32]
 8008fc4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	db20      	blt.n	800900e <_strtod_l+0x44e>
 8008fcc:	4c5f      	ldr	r4, [pc, #380]	; (800914c <_strtod_l+0x58c>)
 8008fce:	f1c6 060f 	rsb	r6, r6, #15
 8008fd2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008fd6:	4642      	mov	r2, r8
 8008fd8:	464b      	mov	r3, r9
 8008fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fde:	f7f7 fb23 	bl	8000628 <__aeabi_dmul>
 8008fe2:	9b08      	ldr	r3, [sp, #32]
 8008fe4:	1b9e      	subs	r6, r3, r6
 8008fe6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008fea:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008fee:	e7e3      	b.n	8008fb8 <_strtod_l+0x3f8>
 8008ff0:	9b08      	ldr	r3, [sp, #32]
 8008ff2:	3316      	adds	r3, #22
 8008ff4:	db0b      	blt.n	800900e <_strtod_l+0x44e>
 8008ff6:	9b05      	ldr	r3, [sp, #20]
 8008ff8:	1bdf      	subs	r7, r3, r7
 8008ffa:	4b54      	ldr	r3, [pc, #336]	; (800914c <_strtod_l+0x58c>)
 8008ffc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009004:	4640      	mov	r0, r8
 8009006:	4649      	mov	r1, r9
 8009008:	f7f7 fc38 	bl	800087c <__aeabi_ddiv>
 800900c:	e7d6      	b.n	8008fbc <_strtod_l+0x3fc>
 800900e:	9b08      	ldr	r3, [sp, #32]
 8009010:	1b75      	subs	r5, r6, r5
 8009012:	441d      	add	r5, r3
 8009014:	2d00      	cmp	r5, #0
 8009016:	dd70      	ble.n	80090fa <_strtod_l+0x53a>
 8009018:	f015 030f 	ands.w	r3, r5, #15
 800901c:	d00a      	beq.n	8009034 <_strtod_l+0x474>
 800901e:	494b      	ldr	r1, [pc, #300]	; (800914c <_strtod_l+0x58c>)
 8009020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009024:	4642      	mov	r2, r8
 8009026:	464b      	mov	r3, r9
 8009028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800902c:	f7f7 fafc 	bl	8000628 <__aeabi_dmul>
 8009030:	4680      	mov	r8, r0
 8009032:	4689      	mov	r9, r1
 8009034:	f035 050f 	bics.w	r5, r5, #15
 8009038:	d04d      	beq.n	80090d6 <_strtod_l+0x516>
 800903a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800903e:	dd22      	ble.n	8009086 <_strtod_l+0x4c6>
 8009040:	2500      	movs	r5, #0
 8009042:	46ab      	mov	fp, r5
 8009044:	9509      	str	r5, [sp, #36]	; 0x24
 8009046:	9505      	str	r5, [sp, #20]
 8009048:	2322      	movs	r3, #34	; 0x22
 800904a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009154 <_strtod_l+0x594>
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	f04f 0800 	mov.w	r8, #0
 8009054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009056:	2b00      	cmp	r3, #0
 8009058:	f43f aded 	beq.w	8008c36 <_strtod_l+0x76>
 800905c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800905e:	4620      	mov	r0, r4
 8009060:	f7ff f924 	bl	80082ac <_Bfree>
 8009064:	9905      	ldr	r1, [sp, #20]
 8009066:	4620      	mov	r0, r4
 8009068:	f7ff f920 	bl	80082ac <_Bfree>
 800906c:	4659      	mov	r1, fp
 800906e:	4620      	mov	r0, r4
 8009070:	f7ff f91c 	bl	80082ac <_Bfree>
 8009074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009076:	4620      	mov	r0, r4
 8009078:	f7ff f918 	bl	80082ac <_Bfree>
 800907c:	4629      	mov	r1, r5
 800907e:	4620      	mov	r0, r4
 8009080:	f7ff f914 	bl	80082ac <_Bfree>
 8009084:	e5d7      	b.n	8008c36 <_strtod_l+0x76>
 8009086:	4b32      	ldr	r3, [pc, #200]	; (8009150 <_strtod_l+0x590>)
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	2300      	movs	r3, #0
 800908c:	112d      	asrs	r5, r5, #4
 800908e:	4640      	mov	r0, r8
 8009090:	4649      	mov	r1, r9
 8009092:	469a      	mov	sl, r3
 8009094:	2d01      	cmp	r5, #1
 8009096:	dc21      	bgt.n	80090dc <_strtod_l+0x51c>
 8009098:	b10b      	cbz	r3, 800909e <_strtod_l+0x4de>
 800909a:	4680      	mov	r8, r0
 800909c:	4689      	mov	r9, r1
 800909e:	492c      	ldr	r1, [pc, #176]	; (8009150 <_strtod_l+0x590>)
 80090a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80090a4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80090a8:	4642      	mov	r2, r8
 80090aa:	464b      	mov	r3, r9
 80090ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090b0:	f7f7 faba 	bl	8000628 <__aeabi_dmul>
 80090b4:	4b27      	ldr	r3, [pc, #156]	; (8009154 <_strtod_l+0x594>)
 80090b6:	460a      	mov	r2, r1
 80090b8:	400b      	ands	r3, r1
 80090ba:	4927      	ldr	r1, [pc, #156]	; (8009158 <_strtod_l+0x598>)
 80090bc:	428b      	cmp	r3, r1
 80090be:	4680      	mov	r8, r0
 80090c0:	d8be      	bhi.n	8009040 <_strtod_l+0x480>
 80090c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80090c6:	428b      	cmp	r3, r1
 80090c8:	bf86      	itte	hi
 80090ca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800915c <_strtod_l+0x59c>
 80090ce:	f04f 38ff 	movhi.w	r8, #4294967295
 80090d2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80090d6:	2300      	movs	r3, #0
 80090d8:	9304      	str	r3, [sp, #16]
 80090da:	e07b      	b.n	80091d4 <_strtod_l+0x614>
 80090dc:	07ea      	lsls	r2, r5, #31
 80090de:	d505      	bpl.n	80090ec <_strtod_l+0x52c>
 80090e0:	9b04      	ldr	r3, [sp, #16]
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f7f7 fa9f 	bl	8000628 <__aeabi_dmul>
 80090ea:	2301      	movs	r3, #1
 80090ec:	9a04      	ldr	r2, [sp, #16]
 80090ee:	3208      	adds	r2, #8
 80090f0:	f10a 0a01 	add.w	sl, sl, #1
 80090f4:	106d      	asrs	r5, r5, #1
 80090f6:	9204      	str	r2, [sp, #16]
 80090f8:	e7cc      	b.n	8009094 <_strtod_l+0x4d4>
 80090fa:	d0ec      	beq.n	80090d6 <_strtod_l+0x516>
 80090fc:	426d      	negs	r5, r5
 80090fe:	f015 020f 	ands.w	r2, r5, #15
 8009102:	d00a      	beq.n	800911a <_strtod_l+0x55a>
 8009104:	4b11      	ldr	r3, [pc, #68]	; (800914c <_strtod_l+0x58c>)
 8009106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 fbb3 	bl	800087c <__aeabi_ddiv>
 8009116:	4680      	mov	r8, r0
 8009118:	4689      	mov	r9, r1
 800911a:	112d      	asrs	r5, r5, #4
 800911c:	d0db      	beq.n	80090d6 <_strtod_l+0x516>
 800911e:	2d1f      	cmp	r5, #31
 8009120:	dd1e      	ble.n	8009160 <_strtod_l+0x5a0>
 8009122:	2500      	movs	r5, #0
 8009124:	46ab      	mov	fp, r5
 8009126:	9509      	str	r5, [sp, #36]	; 0x24
 8009128:	9505      	str	r5, [sp, #20]
 800912a:	2322      	movs	r3, #34	; 0x22
 800912c:	f04f 0800 	mov.w	r8, #0
 8009130:	f04f 0900 	mov.w	r9, #0
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	e78d      	b.n	8009054 <_strtod_l+0x494>
 8009138:	0800cb65 	.word	0x0800cb65
 800913c:	0800cd8c 	.word	0x0800cd8c
 8009140:	0800cb5d 	.word	0x0800cb5d
 8009144:	0800cb92 	.word	0x0800cb92
 8009148:	0800cf38 	.word	0x0800cf38
 800914c:	0800cca0 	.word	0x0800cca0
 8009150:	0800cc78 	.word	0x0800cc78
 8009154:	7ff00000 	.word	0x7ff00000
 8009158:	7ca00000 	.word	0x7ca00000
 800915c:	7fefffff 	.word	0x7fefffff
 8009160:	f015 0310 	ands.w	r3, r5, #16
 8009164:	bf18      	it	ne
 8009166:	236a      	movne	r3, #106	; 0x6a
 8009168:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800950c <_strtod_l+0x94c>
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	4640      	mov	r0, r8
 8009170:	4649      	mov	r1, r9
 8009172:	2300      	movs	r3, #0
 8009174:	07ea      	lsls	r2, r5, #31
 8009176:	d504      	bpl.n	8009182 <_strtod_l+0x5c2>
 8009178:	e9da 2300 	ldrd	r2, r3, [sl]
 800917c:	f7f7 fa54 	bl	8000628 <__aeabi_dmul>
 8009180:	2301      	movs	r3, #1
 8009182:	106d      	asrs	r5, r5, #1
 8009184:	f10a 0a08 	add.w	sl, sl, #8
 8009188:	d1f4      	bne.n	8009174 <_strtod_l+0x5b4>
 800918a:	b10b      	cbz	r3, 8009190 <_strtod_l+0x5d0>
 800918c:	4680      	mov	r8, r0
 800918e:	4689      	mov	r9, r1
 8009190:	9b04      	ldr	r3, [sp, #16]
 8009192:	b1bb      	cbz	r3, 80091c4 <_strtod_l+0x604>
 8009194:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009198:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800919c:	2b00      	cmp	r3, #0
 800919e:	4649      	mov	r1, r9
 80091a0:	dd10      	ble.n	80091c4 <_strtod_l+0x604>
 80091a2:	2b1f      	cmp	r3, #31
 80091a4:	f340 811e 	ble.w	80093e4 <_strtod_l+0x824>
 80091a8:	2b34      	cmp	r3, #52	; 0x34
 80091aa:	bfde      	ittt	le
 80091ac:	f04f 33ff 	movle.w	r3, #4294967295
 80091b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80091b4:	4093      	lslle	r3, r2
 80091b6:	f04f 0800 	mov.w	r8, #0
 80091ba:	bfcc      	ite	gt
 80091bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80091c0:	ea03 0901 	andle.w	r9, r3, r1
 80091c4:	2200      	movs	r2, #0
 80091c6:	2300      	movs	r3, #0
 80091c8:	4640      	mov	r0, r8
 80091ca:	4649      	mov	r1, r9
 80091cc:	f7f7 fc94 	bl	8000af8 <__aeabi_dcmpeq>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d1a6      	bne.n	8009122 <_strtod_l+0x562>
 80091d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091da:	4633      	mov	r3, r6
 80091dc:	465a      	mov	r2, fp
 80091de:	4620      	mov	r0, r4
 80091e0:	f7ff f8cc 	bl	800837c <__s2b>
 80091e4:	9009      	str	r0, [sp, #36]	; 0x24
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f43f af2a 	beq.w	8009040 <_strtod_l+0x480>
 80091ec:	9a08      	ldr	r2, [sp, #32]
 80091ee:	9b05      	ldr	r3, [sp, #20]
 80091f0:	2a00      	cmp	r2, #0
 80091f2:	eba3 0307 	sub.w	r3, r3, r7
 80091f6:	bfa8      	it	ge
 80091f8:	2300      	movge	r3, #0
 80091fa:	930c      	str	r3, [sp, #48]	; 0x30
 80091fc:	2500      	movs	r5, #0
 80091fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009202:	9312      	str	r3, [sp, #72]	; 0x48
 8009204:	46ab      	mov	fp, r5
 8009206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009208:	4620      	mov	r0, r4
 800920a:	6859      	ldr	r1, [r3, #4]
 800920c:	f7ff f80e 	bl	800822c <_Balloc>
 8009210:	9005      	str	r0, [sp, #20]
 8009212:	2800      	cmp	r0, #0
 8009214:	f43f af18 	beq.w	8009048 <_strtod_l+0x488>
 8009218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	3202      	adds	r2, #2
 800921e:	f103 010c 	add.w	r1, r3, #12
 8009222:	0092      	lsls	r2, r2, #2
 8009224:	300c      	adds	r0, #12
 8009226:	f001 f91b 	bl	800a460 <memcpy>
 800922a:	ec49 8b10 	vmov	d0, r8, r9
 800922e:	aa18      	add	r2, sp, #96	; 0x60
 8009230:	a917      	add	r1, sp, #92	; 0x5c
 8009232:	4620      	mov	r0, r4
 8009234:	f7ff fbd6 	bl	80089e4 <__d2b>
 8009238:	ec49 8b18 	vmov	d8, r8, r9
 800923c:	9016      	str	r0, [sp, #88]	; 0x58
 800923e:	2800      	cmp	r0, #0
 8009240:	f43f af02 	beq.w	8009048 <_strtod_l+0x488>
 8009244:	2101      	movs	r1, #1
 8009246:	4620      	mov	r0, r4
 8009248:	f7ff f930 	bl	80084ac <__i2b>
 800924c:	4683      	mov	fp, r0
 800924e:	2800      	cmp	r0, #0
 8009250:	f43f aefa 	beq.w	8009048 <_strtod_l+0x488>
 8009254:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009256:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009258:	2e00      	cmp	r6, #0
 800925a:	bfab      	itete	ge
 800925c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800925e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009260:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009262:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009266:	bfac      	ite	ge
 8009268:	eb06 0a03 	addge.w	sl, r6, r3
 800926c:	1b9f      	sublt	r7, r3, r6
 800926e:	9b04      	ldr	r3, [sp, #16]
 8009270:	1af6      	subs	r6, r6, r3
 8009272:	4416      	add	r6, r2
 8009274:	4ba0      	ldr	r3, [pc, #640]	; (80094f8 <_strtod_l+0x938>)
 8009276:	3e01      	subs	r6, #1
 8009278:	429e      	cmp	r6, r3
 800927a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800927e:	f280 80c4 	bge.w	800940a <_strtod_l+0x84a>
 8009282:	1b9b      	subs	r3, r3, r6
 8009284:	2b1f      	cmp	r3, #31
 8009286:	eba2 0203 	sub.w	r2, r2, r3
 800928a:	f04f 0101 	mov.w	r1, #1
 800928e:	f300 80b0 	bgt.w	80093f2 <_strtod_l+0x832>
 8009292:	fa01 f303 	lsl.w	r3, r1, r3
 8009296:	930e      	str	r3, [sp, #56]	; 0x38
 8009298:	2300      	movs	r3, #0
 800929a:	930d      	str	r3, [sp, #52]	; 0x34
 800929c:	eb0a 0602 	add.w	r6, sl, r2
 80092a0:	9b04      	ldr	r3, [sp, #16]
 80092a2:	45b2      	cmp	sl, r6
 80092a4:	4417      	add	r7, r2
 80092a6:	441f      	add	r7, r3
 80092a8:	4653      	mov	r3, sl
 80092aa:	bfa8      	it	ge
 80092ac:	4633      	movge	r3, r6
 80092ae:	42bb      	cmp	r3, r7
 80092b0:	bfa8      	it	ge
 80092b2:	463b      	movge	r3, r7
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bfc2      	ittt	gt
 80092b8:	1af6      	subgt	r6, r6, r3
 80092ba:	1aff      	subgt	r7, r7, r3
 80092bc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80092c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	dd17      	ble.n	80092f6 <_strtod_l+0x736>
 80092c6:	4659      	mov	r1, fp
 80092c8:	461a      	mov	r2, r3
 80092ca:	4620      	mov	r0, r4
 80092cc:	f7ff f9ae 	bl	800862c <__pow5mult>
 80092d0:	4683      	mov	fp, r0
 80092d2:	2800      	cmp	r0, #0
 80092d4:	f43f aeb8 	beq.w	8009048 <_strtod_l+0x488>
 80092d8:	4601      	mov	r1, r0
 80092da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80092dc:	4620      	mov	r0, r4
 80092de:	f7ff f8fb 	bl	80084d8 <__multiply>
 80092e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80092e4:	2800      	cmp	r0, #0
 80092e6:	f43f aeaf 	beq.w	8009048 <_strtod_l+0x488>
 80092ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 80092ec:	4620      	mov	r0, r4
 80092ee:	f7fe ffdd 	bl	80082ac <_Bfree>
 80092f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f4:	9316      	str	r3, [sp, #88]	; 0x58
 80092f6:	2e00      	cmp	r6, #0
 80092f8:	f300 808c 	bgt.w	8009414 <_strtod_l+0x854>
 80092fc:	9b08      	ldr	r3, [sp, #32]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dd08      	ble.n	8009314 <_strtod_l+0x754>
 8009302:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009304:	9905      	ldr	r1, [sp, #20]
 8009306:	4620      	mov	r0, r4
 8009308:	f7ff f990 	bl	800862c <__pow5mult>
 800930c:	9005      	str	r0, [sp, #20]
 800930e:	2800      	cmp	r0, #0
 8009310:	f43f ae9a 	beq.w	8009048 <_strtod_l+0x488>
 8009314:	2f00      	cmp	r7, #0
 8009316:	dd08      	ble.n	800932a <_strtod_l+0x76a>
 8009318:	9905      	ldr	r1, [sp, #20]
 800931a:	463a      	mov	r2, r7
 800931c:	4620      	mov	r0, r4
 800931e:	f7ff f9df 	bl	80086e0 <__lshift>
 8009322:	9005      	str	r0, [sp, #20]
 8009324:	2800      	cmp	r0, #0
 8009326:	f43f ae8f 	beq.w	8009048 <_strtod_l+0x488>
 800932a:	f1ba 0f00 	cmp.w	sl, #0
 800932e:	dd08      	ble.n	8009342 <_strtod_l+0x782>
 8009330:	4659      	mov	r1, fp
 8009332:	4652      	mov	r2, sl
 8009334:	4620      	mov	r0, r4
 8009336:	f7ff f9d3 	bl	80086e0 <__lshift>
 800933a:	4683      	mov	fp, r0
 800933c:	2800      	cmp	r0, #0
 800933e:	f43f ae83 	beq.w	8009048 <_strtod_l+0x488>
 8009342:	9a05      	ldr	r2, [sp, #20]
 8009344:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009346:	4620      	mov	r0, r4
 8009348:	f7ff fa52 	bl	80087f0 <__mdiff>
 800934c:	4605      	mov	r5, r0
 800934e:	2800      	cmp	r0, #0
 8009350:	f43f ae7a 	beq.w	8009048 <_strtod_l+0x488>
 8009354:	68c3      	ldr	r3, [r0, #12]
 8009356:	930b      	str	r3, [sp, #44]	; 0x2c
 8009358:	2300      	movs	r3, #0
 800935a:	60c3      	str	r3, [r0, #12]
 800935c:	4659      	mov	r1, fp
 800935e:	f7ff fa2b 	bl	80087b8 <__mcmp>
 8009362:	2800      	cmp	r0, #0
 8009364:	da60      	bge.n	8009428 <_strtod_l+0x868>
 8009366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009368:	ea53 0308 	orrs.w	r3, r3, r8
 800936c:	f040 8084 	bne.w	8009478 <_strtod_l+0x8b8>
 8009370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009374:	2b00      	cmp	r3, #0
 8009376:	d17f      	bne.n	8009478 <_strtod_l+0x8b8>
 8009378:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800937c:	0d1b      	lsrs	r3, r3, #20
 800937e:	051b      	lsls	r3, r3, #20
 8009380:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009384:	d978      	bls.n	8009478 <_strtod_l+0x8b8>
 8009386:	696b      	ldr	r3, [r5, #20]
 8009388:	b913      	cbnz	r3, 8009390 <_strtod_l+0x7d0>
 800938a:	692b      	ldr	r3, [r5, #16]
 800938c:	2b01      	cmp	r3, #1
 800938e:	dd73      	ble.n	8009478 <_strtod_l+0x8b8>
 8009390:	4629      	mov	r1, r5
 8009392:	2201      	movs	r2, #1
 8009394:	4620      	mov	r0, r4
 8009396:	f7ff f9a3 	bl	80086e0 <__lshift>
 800939a:	4659      	mov	r1, fp
 800939c:	4605      	mov	r5, r0
 800939e:	f7ff fa0b 	bl	80087b8 <__mcmp>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	dd68      	ble.n	8009478 <_strtod_l+0x8b8>
 80093a6:	9904      	ldr	r1, [sp, #16]
 80093a8:	4a54      	ldr	r2, [pc, #336]	; (80094fc <_strtod_l+0x93c>)
 80093aa:	464b      	mov	r3, r9
 80093ac:	2900      	cmp	r1, #0
 80093ae:	f000 8084 	beq.w	80094ba <_strtod_l+0x8fa>
 80093b2:	ea02 0109 	and.w	r1, r2, r9
 80093b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80093ba:	dc7e      	bgt.n	80094ba <_strtod_l+0x8fa>
 80093bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80093c0:	f77f aeb3 	ble.w	800912a <_strtod_l+0x56a>
 80093c4:	4b4e      	ldr	r3, [pc, #312]	; (8009500 <_strtod_l+0x940>)
 80093c6:	4640      	mov	r0, r8
 80093c8:	4649      	mov	r1, r9
 80093ca:	2200      	movs	r2, #0
 80093cc:	f7f7 f92c 	bl	8000628 <__aeabi_dmul>
 80093d0:	4b4a      	ldr	r3, [pc, #296]	; (80094fc <_strtod_l+0x93c>)
 80093d2:	400b      	ands	r3, r1
 80093d4:	4680      	mov	r8, r0
 80093d6:	4689      	mov	r9, r1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f47f ae3f 	bne.w	800905c <_strtod_l+0x49c>
 80093de:	2322      	movs	r3, #34	; 0x22
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	e63b      	b.n	800905c <_strtod_l+0x49c>
 80093e4:	f04f 32ff 	mov.w	r2, #4294967295
 80093e8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ec:	ea03 0808 	and.w	r8, r3, r8
 80093f0:	e6e8      	b.n	80091c4 <_strtod_l+0x604>
 80093f2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80093f6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80093fa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80093fe:	36e2      	adds	r6, #226	; 0xe2
 8009400:	fa01 f306 	lsl.w	r3, r1, r6
 8009404:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009408:	e748      	b.n	800929c <_strtod_l+0x6dc>
 800940a:	2100      	movs	r1, #0
 800940c:	2301      	movs	r3, #1
 800940e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009412:	e743      	b.n	800929c <_strtod_l+0x6dc>
 8009414:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009416:	4632      	mov	r2, r6
 8009418:	4620      	mov	r0, r4
 800941a:	f7ff f961 	bl	80086e0 <__lshift>
 800941e:	9016      	str	r0, [sp, #88]	; 0x58
 8009420:	2800      	cmp	r0, #0
 8009422:	f47f af6b 	bne.w	80092fc <_strtod_l+0x73c>
 8009426:	e60f      	b.n	8009048 <_strtod_l+0x488>
 8009428:	46ca      	mov	sl, r9
 800942a:	d171      	bne.n	8009510 <_strtod_l+0x950>
 800942c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800942e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009432:	b352      	cbz	r2, 800948a <_strtod_l+0x8ca>
 8009434:	4a33      	ldr	r2, [pc, #204]	; (8009504 <_strtod_l+0x944>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d12a      	bne.n	8009490 <_strtod_l+0x8d0>
 800943a:	9b04      	ldr	r3, [sp, #16]
 800943c:	4641      	mov	r1, r8
 800943e:	b1fb      	cbz	r3, 8009480 <_strtod_l+0x8c0>
 8009440:	4b2e      	ldr	r3, [pc, #184]	; (80094fc <_strtod_l+0x93c>)
 8009442:	ea09 0303 	and.w	r3, r9, r3
 8009446:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800944a:	f04f 32ff 	mov.w	r2, #4294967295
 800944e:	d81a      	bhi.n	8009486 <_strtod_l+0x8c6>
 8009450:	0d1b      	lsrs	r3, r3, #20
 8009452:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009456:	fa02 f303 	lsl.w	r3, r2, r3
 800945a:	4299      	cmp	r1, r3
 800945c:	d118      	bne.n	8009490 <_strtod_l+0x8d0>
 800945e:	4b2a      	ldr	r3, [pc, #168]	; (8009508 <_strtod_l+0x948>)
 8009460:	459a      	cmp	sl, r3
 8009462:	d102      	bne.n	800946a <_strtod_l+0x8aa>
 8009464:	3101      	adds	r1, #1
 8009466:	f43f adef 	beq.w	8009048 <_strtod_l+0x488>
 800946a:	4b24      	ldr	r3, [pc, #144]	; (80094fc <_strtod_l+0x93c>)
 800946c:	ea0a 0303 	and.w	r3, sl, r3
 8009470:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009474:	f04f 0800 	mov.w	r8, #0
 8009478:	9b04      	ldr	r3, [sp, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1a2      	bne.n	80093c4 <_strtod_l+0x804>
 800947e:	e5ed      	b.n	800905c <_strtod_l+0x49c>
 8009480:	f04f 33ff 	mov.w	r3, #4294967295
 8009484:	e7e9      	b.n	800945a <_strtod_l+0x89a>
 8009486:	4613      	mov	r3, r2
 8009488:	e7e7      	b.n	800945a <_strtod_l+0x89a>
 800948a:	ea53 0308 	orrs.w	r3, r3, r8
 800948e:	d08a      	beq.n	80093a6 <_strtod_l+0x7e6>
 8009490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009492:	b1e3      	cbz	r3, 80094ce <_strtod_l+0x90e>
 8009494:	ea13 0f0a 	tst.w	r3, sl
 8009498:	d0ee      	beq.n	8009478 <_strtod_l+0x8b8>
 800949a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800949c:	9a04      	ldr	r2, [sp, #16]
 800949e:	4640      	mov	r0, r8
 80094a0:	4649      	mov	r1, r9
 80094a2:	b1c3      	cbz	r3, 80094d6 <_strtod_l+0x916>
 80094a4:	f7ff fb6f 	bl	8008b86 <sulp>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	ec51 0b18 	vmov	r0, r1, d8
 80094b0:	f7f6 ff04 	bl	80002bc <__adddf3>
 80094b4:	4680      	mov	r8, r0
 80094b6:	4689      	mov	r9, r1
 80094b8:	e7de      	b.n	8009478 <_strtod_l+0x8b8>
 80094ba:	4013      	ands	r3, r2
 80094bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80094c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80094c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80094c8:	f04f 38ff 	mov.w	r8, #4294967295
 80094cc:	e7d4      	b.n	8009478 <_strtod_l+0x8b8>
 80094ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094d0:	ea13 0f08 	tst.w	r3, r8
 80094d4:	e7e0      	b.n	8009498 <_strtod_l+0x8d8>
 80094d6:	f7ff fb56 	bl	8008b86 <sulp>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	ec51 0b18 	vmov	r0, r1, d8
 80094e2:	f7f6 fee9 	bl	80002b8 <__aeabi_dsub>
 80094e6:	2200      	movs	r2, #0
 80094e8:	2300      	movs	r3, #0
 80094ea:	4680      	mov	r8, r0
 80094ec:	4689      	mov	r9, r1
 80094ee:	f7f7 fb03 	bl	8000af8 <__aeabi_dcmpeq>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d0c0      	beq.n	8009478 <_strtod_l+0x8b8>
 80094f6:	e618      	b.n	800912a <_strtod_l+0x56a>
 80094f8:	fffffc02 	.word	0xfffffc02
 80094fc:	7ff00000 	.word	0x7ff00000
 8009500:	39500000 	.word	0x39500000
 8009504:	000fffff 	.word	0x000fffff
 8009508:	7fefffff 	.word	0x7fefffff
 800950c:	0800cda0 	.word	0x0800cda0
 8009510:	4659      	mov	r1, fp
 8009512:	4628      	mov	r0, r5
 8009514:	f7ff fac0 	bl	8008a98 <__ratio>
 8009518:	ec57 6b10 	vmov	r6, r7, d0
 800951c:	ee10 0a10 	vmov	r0, s0
 8009520:	2200      	movs	r2, #0
 8009522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009526:	4639      	mov	r1, r7
 8009528:	f7f7 fafa 	bl	8000b20 <__aeabi_dcmple>
 800952c:	2800      	cmp	r0, #0
 800952e:	d071      	beq.n	8009614 <_strtod_l+0xa54>
 8009530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009532:	2b00      	cmp	r3, #0
 8009534:	d17c      	bne.n	8009630 <_strtod_l+0xa70>
 8009536:	f1b8 0f00 	cmp.w	r8, #0
 800953a:	d15a      	bne.n	80095f2 <_strtod_l+0xa32>
 800953c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009540:	2b00      	cmp	r3, #0
 8009542:	d15d      	bne.n	8009600 <_strtod_l+0xa40>
 8009544:	4b90      	ldr	r3, [pc, #576]	; (8009788 <_strtod_l+0xbc8>)
 8009546:	2200      	movs	r2, #0
 8009548:	4630      	mov	r0, r6
 800954a:	4639      	mov	r1, r7
 800954c:	f7f7 fade 	bl	8000b0c <__aeabi_dcmplt>
 8009550:	2800      	cmp	r0, #0
 8009552:	d15c      	bne.n	800960e <_strtod_l+0xa4e>
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	4b8c      	ldr	r3, [pc, #560]	; (800978c <_strtod_l+0xbcc>)
 800955a:	2200      	movs	r2, #0
 800955c:	f7f7 f864 	bl	8000628 <__aeabi_dmul>
 8009560:	4606      	mov	r6, r0
 8009562:	460f      	mov	r7, r1
 8009564:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009568:	9606      	str	r6, [sp, #24]
 800956a:	9307      	str	r3, [sp, #28]
 800956c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009570:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009574:	4b86      	ldr	r3, [pc, #536]	; (8009790 <_strtod_l+0xbd0>)
 8009576:	ea0a 0303 	and.w	r3, sl, r3
 800957a:	930d      	str	r3, [sp, #52]	; 0x34
 800957c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800957e:	4b85      	ldr	r3, [pc, #532]	; (8009794 <_strtod_l+0xbd4>)
 8009580:	429a      	cmp	r2, r3
 8009582:	f040 8090 	bne.w	80096a6 <_strtod_l+0xae6>
 8009586:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800958a:	ec49 8b10 	vmov	d0, r8, r9
 800958e:	f7ff f9b9 	bl	8008904 <__ulp>
 8009592:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009596:	ec51 0b10 	vmov	r0, r1, d0
 800959a:	f7f7 f845 	bl	8000628 <__aeabi_dmul>
 800959e:	4642      	mov	r2, r8
 80095a0:	464b      	mov	r3, r9
 80095a2:	f7f6 fe8b 	bl	80002bc <__adddf3>
 80095a6:	460b      	mov	r3, r1
 80095a8:	4979      	ldr	r1, [pc, #484]	; (8009790 <_strtod_l+0xbd0>)
 80095aa:	4a7b      	ldr	r2, [pc, #492]	; (8009798 <_strtod_l+0xbd8>)
 80095ac:	4019      	ands	r1, r3
 80095ae:	4291      	cmp	r1, r2
 80095b0:	4680      	mov	r8, r0
 80095b2:	d944      	bls.n	800963e <_strtod_l+0xa7e>
 80095b4:	ee18 2a90 	vmov	r2, s17
 80095b8:	4b78      	ldr	r3, [pc, #480]	; (800979c <_strtod_l+0xbdc>)
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d104      	bne.n	80095c8 <_strtod_l+0xa08>
 80095be:	ee18 3a10 	vmov	r3, s16
 80095c2:	3301      	adds	r3, #1
 80095c4:	f43f ad40 	beq.w	8009048 <_strtod_l+0x488>
 80095c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800979c <_strtod_l+0xbdc>
 80095cc:	f04f 38ff 	mov.w	r8, #4294967295
 80095d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095d2:	4620      	mov	r0, r4
 80095d4:	f7fe fe6a 	bl	80082ac <_Bfree>
 80095d8:	9905      	ldr	r1, [sp, #20]
 80095da:	4620      	mov	r0, r4
 80095dc:	f7fe fe66 	bl	80082ac <_Bfree>
 80095e0:	4659      	mov	r1, fp
 80095e2:	4620      	mov	r0, r4
 80095e4:	f7fe fe62 	bl	80082ac <_Bfree>
 80095e8:	4629      	mov	r1, r5
 80095ea:	4620      	mov	r0, r4
 80095ec:	f7fe fe5e 	bl	80082ac <_Bfree>
 80095f0:	e609      	b.n	8009206 <_strtod_l+0x646>
 80095f2:	f1b8 0f01 	cmp.w	r8, #1
 80095f6:	d103      	bne.n	8009600 <_strtod_l+0xa40>
 80095f8:	f1b9 0f00 	cmp.w	r9, #0
 80095fc:	f43f ad95 	beq.w	800912a <_strtod_l+0x56a>
 8009600:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009758 <_strtod_l+0xb98>
 8009604:	4f60      	ldr	r7, [pc, #384]	; (8009788 <_strtod_l+0xbc8>)
 8009606:	ed8d 7b06 	vstr	d7, [sp, #24]
 800960a:	2600      	movs	r6, #0
 800960c:	e7ae      	b.n	800956c <_strtod_l+0x9ac>
 800960e:	4f5f      	ldr	r7, [pc, #380]	; (800978c <_strtod_l+0xbcc>)
 8009610:	2600      	movs	r6, #0
 8009612:	e7a7      	b.n	8009564 <_strtod_l+0x9a4>
 8009614:	4b5d      	ldr	r3, [pc, #372]	; (800978c <_strtod_l+0xbcc>)
 8009616:	4630      	mov	r0, r6
 8009618:	4639      	mov	r1, r7
 800961a:	2200      	movs	r2, #0
 800961c:	f7f7 f804 	bl	8000628 <__aeabi_dmul>
 8009620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009622:	4606      	mov	r6, r0
 8009624:	460f      	mov	r7, r1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d09c      	beq.n	8009564 <_strtod_l+0x9a4>
 800962a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800962e:	e79d      	b.n	800956c <_strtod_l+0x9ac>
 8009630:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009760 <_strtod_l+0xba0>
 8009634:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009638:	ec57 6b17 	vmov	r6, r7, d7
 800963c:	e796      	b.n	800956c <_strtod_l+0x9ac>
 800963e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009642:	9b04      	ldr	r3, [sp, #16]
 8009644:	46ca      	mov	sl, r9
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1c2      	bne.n	80095d0 <_strtod_l+0xa10>
 800964a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800964e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009650:	0d1b      	lsrs	r3, r3, #20
 8009652:	051b      	lsls	r3, r3, #20
 8009654:	429a      	cmp	r2, r3
 8009656:	d1bb      	bne.n	80095d0 <_strtod_l+0xa10>
 8009658:	4630      	mov	r0, r6
 800965a:	4639      	mov	r1, r7
 800965c:	f7f7 fb44 	bl	8000ce8 <__aeabi_d2lz>
 8009660:	f7f6 ffb4 	bl	80005cc <__aeabi_l2d>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4630      	mov	r0, r6
 800966a:	4639      	mov	r1, r7
 800966c:	f7f6 fe24 	bl	80002b8 <__aeabi_dsub>
 8009670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009672:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009676:	ea43 0308 	orr.w	r3, r3, r8
 800967a:	4313      	orrs	r3, r2
 800967c:	4606      	mov	r6, r0
 800967e:	460f      	mov	r7, r1
 8009680:	d054      	beq.n	800972c <_strtod_l+0xb6c>
 8009682:	a339      	add	r3, pc, #228	; (adr r3, 8009768 <_strtod_l+0xba8>)
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f7f7 fa40 	bl	8000b0c <__aeabi_dcmplt>
 800968c:	2800      	cmp	r0, #0
 800968e:	f47f ace5 	bne.w	800905c <_strtod_l+0x49c>
 8009692:	a337      	add	r3, pc, #220	; (adr r3, 8009770 <_strtod_l+0xbb0>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	4630      	mov	r0, r6
 800969a:	4639      	mov	r1, r7
 800969c:	f7f7 fa54 	bl	8000b48 <__aeabi_dcmpgt>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d095      	beq.n	80095d0 <_strtod_l+0xa10>
 80096a4:	e4da      	b.n	800905c <_strtod_l+0x49c>
 80096a6:	9b04      	ldr	r3, [sp, #16]
 80096a8:	b333      	cbz	r3, 80096f8 <_strtod_l+0xb38>
 80096aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096b0:	d822      	bhi.n	80096f8 <_strtod_l+0xb38>
 80096b2:	a331      	add	r3, pc, #196	; (adr r3, 8009778 <_strtod_l+0xbb8>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	f7f7 fa30 	bl	8000b20 <__aeabi_dcmple>
 80096c0:	b1a0      	cbz	r0, 80096ec <_strtod_l+0xb2c>
 80096c2:	4639      	mov	r1, r7
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7f7 fa87 	bl	8000bd8 <__aeabi_d2uiz>
 80096ca:	2801      	cmp	r0, #1
 80096cc:	bf38      	it	cc
 80096ce:	2001      	movcc	r0, #1
 80096d0:	f7f6 ff30 	bl	8000534 <__aeabi_ui2d>
 80096d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d6:	4606      	mov	r6, r0
 80096d8:	460f      	mov	r7, r1
 80096da:	bb23      	cbnz	r3, 8009726 <_strtod_l+0xb66>
 80096dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096e0:	9010      	str	r0, [sp, #64]	; 0x40
 80096e2:	9311      	str	r3, [sp, #68]	; 0x44
 80096e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80096ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80096f4:	1a9b      	subs	r3, r3, r2
 80096f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80096f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80096fc:	eeb0 0a48 	vmov.f32	s0, s16
 8009700:	eef0 0a68 	vmov.f32	s1, s17
 8009704:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009708:	f7ff f8fc 	bl	8008904 <__ulp>
 800970c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009710:	ec53 2b10 	vmov	r2, r3, d0
 8009714:	f7f6 ff88 	bl	8000628 <__aeabi_dmul>
 8009718:	ec53 2b18 	vmov	r2, r3, d8
 800971c:	f7f6 fdce 	bl	80002bc <__adddf3>
 8009720:	4680      	mov	r8, r0
 8009722:	4689      	mov	r9, r1
 8009724:	e78d      	b.n	8009642 <_strtod_l+0xa82>
 8009726:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800972a:	e7db      	b.n	80096e4 <_strtod_l+0xb24>
 800972c:	a314      	add	r3, pc, #80	; (adr r3, 8009780 <_strtod_l+0xbc0>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	f7f7 f9eb 	bl	8000b0c <__aeabi_dcmplt>
 8009736:	e7b3      	b.n	80096a0 <_strtod_l+0xae0>
 8009738:	2300      	movs	r3, #0
 800973a:	930a      	str	r3, [sp, #40]	; 0x28
 800973c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800973e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	f7ff ba7c 	b.w	8008c3e <_strtod_l+0x7e>
 8009746:	2a65      	cmp	r2, #101	; 0x65
 8009748:	f43f ab75 	beq.w	8008e36 <_strtod_l+0x276>
 800974c:	2a45      	cmp	r2, #69	; 0x45
 800974e:	f43f ab72 	beq.w	8008e36 <_strtod_l+0x276>
 8009752:	2301      	movs	r3, #1
 8009754:	f7ff bbaa 	b.w	8008eac <_strtod_l+0x2ec>
 8009758:	00000000 	.word	0x00000000
 800975c:	bff00000 	.word	0xbff00000
 8009760:	00000000 	.word	0x00000000
 8009764:	3ff00000 	.word	0x3ff00000
 8009768:	94a03595 	.word	0x94a03595
 800976c:	3fdfffff 	.word	0x3fdfffff
 8009770:	35afe535 	.word	0x35afe535
 8009774:	3fe00000 	.word	0x3fe00000
 8009778:	ffc00000 	.word	0xffc00000
 800977c:	41dfffff 	.word	0x41dfffff
 8009780:	94a03595 	.word	0x94a03595
 8009784:	3fcfffff 	.word	0x3fcfffff
 8009788:	3ff00000 	.word	0x3ff00000
 800978c:	3fe00000 	.word	0x3fe00000
 8009790:	7ff00000 	.word	0x7ff00000
 8009794:	7fe00000 	.word	0x7fe00000
 8009798:	7c9fffff 	.word	0x7c9fffff
 800979c:	7fefffff 	.word	0x7fefffff

080097a0 <_strtod_r>:
 80097a0:	4b01      	ldr	r3, [pc, #4]	; (80097a8 <_strtod_r+0x8>)
 80097a2:	f7ff ba0d 	b.w	8008bc0 <_strtod_l>
 80097a6:	bf00      	nop
 80097a8:	20000068 	.word	0x20000068

080097ac <_strtol_l.constprop.0>:
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b2:	d001      	beq.n	80097b8 <_strtol_l.constprop.0+0xc>
 80097b4:	2b24      	cmp	r3, #36	; 0x24
 80097b6:	d906      	bls.n	80097c6 <_strtol_l.constprop.0+0x1a>
 80097b8:	f7fd fd80 	bl	80072bc <__errno>
 80097bc:	2316      	movs	r3, #22
 80097be:	6003      	str	r3, [r0, #0]
 80097c0:	2000      	movs	r0, #0
 80097c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80098ac <_strtol_l.constprop.0+0x100>
 80097ca:	460d      	mov	r5, r1
 80097cc:	462e      	mov	r6, r5
 80097ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80097d6:	f017 0708 	ands.w	r7, r7, #8
 80097da:	d1f7      	bne.n	80097cc <_strtol_l.constprop.0+0x20>
 80097dc:	2c2d      	cmp	r4, #45	; 0x2d
 80097de:	d132      	bne.n	8009846 <_strtol_l.constprop.0+0x9a>
 80097e0:	782c      	ldrb	r4, [r5, #0]
 80097e2:	2701      	movs	r7, #1
 80097e4:	1cb5      	adds	r5, r6, #2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d05b      	beq.n	80098a2 <_strtol_l.constprop.0+0xf6>
 80097ea:	2b10      	cmp	r3, #16
 80097ec:	d109      	bne.n	8009802 <_strtol_l.constprop.0+0x56>
 80097ee:	2c30      	cmp	r4, #48	; 0x30
 80097f0:	d107      	bne.n	8009802 <_strtol_l.constprop.0+0x56>
 80097f2:	782c      	ldrb	r4, [r5, #0]
 80097f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80097f8:	2c58      	cmp	r4, #88	; 0x58
 80097fa:	d14d      	bne.n	8009898 <_strtol_l.constprop.0+0xec>
 80097fc:	786c      	ldrb	r4, [r5, #1]
 80097fe:	2310      	movs	r3, #16
 8009800:	3502      	adds	r5, #2
 8009802:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009806:	f108 38ff 	add.w	r8, r8, #4294967295
 800980a:	f04f 0e00 	mov.w	lr, #0
 800980e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009812:	4676      	mov	r6, lr
 8009814:	fb03 8a19 	mls	sl, r3, r9, r8
 8009818:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800981c:	f1bc 0f09 	cmp.w	ip, #9
 8009820:	d816      	bhi.n	8009850 <_strtol_l.constprop.0+0xa4>
 8009822:	4664      	mov	r4, ip
 8009824:	42a3      	cmp	r3, r4
 8009826:	dd24      	ble.n	8009872 <_strtol_l.constprop.0+0xc6>
 8009828:	f1be 3fff 	cmp.w	lr, #4294967295
 800982c:	d008      	beq.n	8009840 <_strtol_l.constprop.0+0x94>
 800982e:	45b1      	cmp	r9, r6
 8009830:	d31c      	bcc.n	800986c <_strtol_l.constprop.0+0xc0>
 8009832:	d101      	bne.n	8009838 <_strtol_l.constprop.0+0x8c>
 8009834:	45a2      	cmp	sl, r4
 8009836:	db19      	blt.n	800986c <_strtol_l.constprop.0+0xc0>
 8009838:	fb06 4603 	mla	r6, r6, r3, r4
 800983c:	f04f 0e01 	mov.w	lr, #1
 8009840:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009844:	e7e8      	b.n	8009818 <_strtol_l.constprop.0+0x6c>
 8009846:	2c2b      	cmp	r4, #43	; 0x2b
 8009848:	bf04      	itt	eq
 800984a:	782c      	ldrbeq	r4, [r5, #0]
 800984c:	1cb5      	addeq	r5, r6, #2
 800984e:	e7ca      	b.n	80097e6 <_strtol_l.constprop.0+0x3a>
 8009850:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009854:	f1bc 0f19 	cmp.w	ip, #25
 8009858:	d801      	bhi.n	800985e <_strtol_l.constprop.0+0xb2>
 800985a:	3c37      	subs	r4, #55	; 0x37
 800985c:	e7e2      	b.n	8009824 <_strtol_l.constprop.0+0x78>
 800985e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009862:	f1bc 0f19 	cmp.w	ip, #25
 8009866:	d804      	bhi.n	8009872 <_strtol_l.constprop.0+0xc6>
 8009868:	3c57      	subs	r4, #87	; 0x57
 800986a:	e7db      	b.n	8009824 <_strtol_l.constprop.0+0x78>
 800986c:	f04f 3eff 	mov.w	lr, #4294967295
 8009870:	e7e6      	b.n	8009840 <_strtol_l.constprop.0+0x94>
 8009872:	f1be 3fff 	cmp.w	lr, #4294967295
 8009876:	d105      	bne.n	8009884 <_strtol_l.constprop.0+0xd8>
 8009878:	2322      	movs	r3, #34	; 0x22
 800987a:	6003      	str	r3, [r0, #0]
 800987c:	4646      	mov	r6, r8
 800987e:	b942      	cbnz	r2, 8009892 <_strtol_l.constprop.0+0xe6>
 8009880:	4630      	mov	r0, r6
 8009882:	e79e      	b.n	80097c2 <_strtol_l.constprop.0+0x16>
 8009884:	b107      	cbz	r7, 8009888 <_strtol_l.constprop.0+0xdc>
 8009886:	4276      	negs	r6, r6
 8009888:	2a00      	cmp	r2, #0
 800988a:	d0f9      	beq.n	8009880 <_strtol_l.constprop.0+0xd4>
 800988c:	f1be 0f00 	cmp.w	lr, #0
 8009890:	d000      	beq.n	8009894 <_strtol_l.constprop.0+0xe8>
 8009892:	1e69      	subs	r1, r5, #1
 8009894:	6011      	str	r1, [r2, #0]
 8009896:	e7f3      	b.n	8009880 <_strtol_l.constprop.0+0xd4>
 8009898:	2430      	movs	r4, #48	; 0x30
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1b1      	bne.n	8009802 <_strtol_l.constprop.0+0x56>
 800989e:	2308      	movs	r3, #8
 80098a0:	e7af      	b.n	8009802 <_strtol_l.constprop.0+0x56>
 80098a2:	2c30      	cmp	r4, #48	; 0x30
 80098a4:	d0a5      	beq.n	80097f2 <_strtol_l.constprop.0+0x46>
 80098a6:	230a      	movs	r3, #10
 80098a8:	e7ab      	b.n	8009802 <_strtol_l.constprop.0+0x56>
 80098aa:	bf00      	nop
 80098ac:	0800cdc9 	.word	0x0800cdc9

080098b0 <_strtol_r>:
 80098b0:	f7ff bf7c 	b.w	80097ac <_strtol_l.constprop.0>

080098b4 <__ssputs_r>:
 80098b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	688e      	ldr	r6, [r1, #8]
 80098ba:	461f      	mov	r7, r3
 80098bc:	42be      	cmp	r6, r7
 80098be:	680b      	ldr	r3, [r1, #0]
 80098c0:	4682      	mov	sl, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	4690      	mov	r8, r2
 80098c6:	d82c      	bhi.n	8009922 <__ssputs_r+0x6e>
 80098c8:	898a      	ldrh	r2, [r1, #12]
 80098ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098ce:	d026      	beq.n	800991e <__ssputs_r+0x6a>
 80098d0:	6965      	ldr	r5, [r4, #20]
 80098d2:	6909      	ldr	r1, [r1, #16]
 80098d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098d8:	eba3 0901 	sub.w	r9, r3, r1
 80098dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098e0:	1c7b      	adds	r3, r7, #1
 80098e2:	444b      	add	r3, r9
 80098e4:	106d      	asrs	r5, r5, #1
 80098e6:	429d      	cmp	r5, r3
 80098e8:	bf38      	it	cc
 80098ea:	461d      	movcc	r5, r3
 80098ec:	0553      	lsls	r3, r2, #21
 80098ee:	d527      	bpl.n	8009940 <__ssputs_r+0x8c>
 80098f0:	4629      	mov	r1, r5
 80098f2:	f7fe fc0f 	bl	8008114 <_malloc_r>
 80098f6:	4606      	mov	r6, r0
 80098f8:	b360      	cbz	r0, 8009954 <__ssputs_r+0xa0>
 80098fa:	6921      	ldr	r1, [r4, #16]
 80098fc:	464a      	mov	r2, r9
 80098fe:	f000 fdaf 	bl	800a460 <memcpy>
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990c:	81a3      	strh	r3, [r4, #12]
 800990e:	6126      	str	r6, [r4, #16]
 8009910:	6165      	str	r5, [r4, #20]
 8009912:	444e      	add	r6, r9
 8009914:	eba5 0509 	sub.w	r5, r5, r9
 8009918:	6026      	str	r6, [r4, #0]
 800991a:	60a5      	str	r5, [r4, #8]
 800991c:	463e      	mov	r6, r7
 800991e:	42be      	cmp	r6, r7
 8009920:	d900      	bls.n	8009924 <__ssputs_r+0x70>
 8009922:	463e      	mov	r6, r7
 8009924:	6820      	ldr	r0, [r4, #0]
 8009926:	4632      	mov	r2, r6
 8009928:	4641      	mov	r1, r8
 800992a:	f000 fd5c 	bl	800a3e6 <memmove>
 800992e:	68a3      	ldr	r3, [r4, #8]
 8009930:	1b9b      	subs	r3, r3, r6
 8009932:	60a3      	str	r3, [r4, #8]
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	4433      	add	r3, r6
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	2000      	movs	r0, #0
 800993c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009940:	462a      	mov	r2, r5
 8009942:	f001 f942 	bl	800abca <_realloc_r>
 8009946:	4606      	mov	r6, r0
 8009948:	2800      	cmp	r0, #0
 800994a:	d1e0      	bne.n	800990e <__ssputs_r+0x5a>
 800994c:	6921      	ldr	r1, [r4, #16]
 800994e:	4650      	mov	r0, sl
 8009950:	f7fe fb6c 	bl	800802c <_free_r>
 8009954:	230c      	movs	r3, #12
 8009956:	f8ca 3000 	str.w	r3, [sl]
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009960:	81a3      	strh	r3, [r4, #12]
 8009962:	f04f 30ff 	mov.w	r0, #4294967295
 8009966:	e7e9      	b.n	800993c <__ssputs_r+0x88>

08009968 <_svfiprintf_r>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	4698      	mov	r8, r3
 800996e:	898b      	ldrh	r3, [r1, #12]
 8009970:	061b      	lsls	r3, r3, #24
 8009972:	b09d      	sub	sp, #116	; 0x74
 8009974:	4607      	mov	r7, r0
 8009976:	460d      	mov	r5, r1
 8009978:	4614      	mov	r4, r2
 800997a:	d50e      	bpl.n	800999a <_svfiprintf_r+0x32>
 800997c:	690b      	ldr	r3, [r1, #16]
 800997e:	b963      	cbnz	r3, 800999a <_svfiprintf_r+0x32>
 8009980:	2140      	movs	r1, #64	; 0x40
 8009982:	f7fe fbc7 	bl	8008114 <_malloc_r>
 8009986:	6028      	str	r0, [r5, #0]
 8009988:	6128      	str	r0, [r5, #16]
 800998a:	b920      	cbnz	r0, 8009996 <_svfiprintf_r+0x2e>
 800998c:	230c      	movs	r3, #12
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	f04f 30ff 	mov.w	r0, #4294967295
 8009994:	e0d0      	b.n	8009b38 <_svfiprintf_r+0x1d0>
 8009996:	2340      	movs	r3, #64	; 0x40
 8009998:	616b      	str	r3, [r5, #20]
 800999a:	2300      	movs	r3, #0
 800999c:	9309      	str	r3, [sp, #36]	; 0x24
 800999e:	2320      	movs	r3, #32
 80099a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80099a8:	2330      	movs	r3, #48	; 0x30
 80099aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b50 <_svfiprintf_r+0x1e8>
 80099ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099b2:	f04f 0901 	mov.w	r9, #1
 80099b6:	4623      	mov	r3, r4
 80099b8:	469a      	mov	sl, r3
 80099ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099be:	b10a      	cbz	r2, 80099c4 <_svfiprintf_r+0x5c>
 80099c0:	2a25      	cmp	r2, #37	; 0x25
 80099c2:	d1f9      	bne.n	80099b8 <_svfiprintf_r+0x50>
 80099c4:	ebba 0b04 	subs.w	fp, sl, r4
 80099c8:	d00b      	beq.n	80099e2 <_svfiprintf_r+0x7a>
 80099ca:	465b      	mov	r3, fp
 80099cc:	4622      	mov	r2, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	4638      	mov	r0, r7
 80099d2:	f7ff ff6f 	bl	80098b4 <__ssputs_r>
 80099d6:	3001      	adds	r0, #1
 80099d8:	f000 80a9 	beq.w	8009b2e <_svfiprintf_r+0x1c6>
 80099dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099de:	445a      	add	r2, fp
 80099e0:	9209      	str	r2, [sp, #36]	; 0x24
 80099e2:	f89a 3000 	ldrb.w	r3, [sl]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 80a1 	beq.w	8009b2e <_svfiprintf_r+0x1c6>
 80099ec:	2300      	movs	r3, #0
 80099ee:	f04f 32ff 	mov.w	r2, #4294967295
 80099f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099f6:	f10a 0a01 	add.w	sl, sl, #1
 80099fa:	9304      	str	r3, [sp, #16]
 80099fc:	9307      	str	r3, [sp, #28]
 80099fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a02:	931a      	str	r3, [sp, #104]	; 0x68
 8009a04:	4654      	mov	r4, sl
 8009a06:	2205      	movs	r2, #5
 8009a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a0c:	4850      	ldr	r0, [pc, #320]	; (8009b50 <_svfiprintf_r+0x1e8>)
 8009a0e:	f7f6 fbf7 	bl	8000200 <memchr>
 8009a12:	9a04      	ldr	r2, [sp, #16]
 8009a14:	b9d8      	cbnz	r0, 8009a4e <_svfiprintf_r+0xe6>
 8009a16:	06d0      	lsls	r0, r2, #27
 8009a18:	bf44      	itt	mi
 8009a1a:	2320      	movmi	r3, #32
 8009a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a20:	0711      	lsls	r1, r2, #28
 8009a22:	bf44      	itt	mi
 8009a24:	232b      	movmi	r3, #43	; 0x2b
 8009a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a30:	d015      	beq.n	8009a5e <_svfiprintf_r+0xf6>
 8009a32:	9a07      	ldr	r2, [sp, #28]
 8009a34:	4654      	mov	r4, sl
 8009a36:	2000      	movs	r0, #0
 8009a38:	f04f 0c0a 	mov.w	ip, #10
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a42:	3b30      	subs	r3, #48	; 0x30
 8009a44:	2b09      	cmp	r3, #9
 8009a46:	d94d      	bls.n	8009ae4 <_svfiprintf_r+0x17c>
 8009a48:	b1b0      	cbz	r0, 8009a78 <_svfiprintf_r+0x110>
 8009a4a:	9207      	str	r2, [sp, #28]
 8009a4c:	e014      	b.n	8009a78 <_svfiprintf_r+0x110>
 8009a4e:	eba0 0308 	sub.w	r3, r0, r8
 8009a52:	fa09 f303 	lsl.w	r3, r9, r3
 8009a56:	4313      	orrs	r3, r2
 8009a58:	9304      	str	r3, [sp, #16]
 8009a5a:	46a2      	mov	sl, r4
 8009a5c:	e7d2      	b.n	8009a04 <_svfiprintf_r+0x9c>
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	1d19      	adds	r1, r3, #4
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	9103      	str	r1, [sp, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	bfbb      	ittet	lt
 8009a6a:	425b      	neglt	r3, r3
 8009a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a70:	9307      	strge	r3, [sp, #28]
 8009a72:	9307      	strlt	r3, [sp, #28]
 8009a74:	bfb8      	it	lt
 8009a76:	9204      	strlt	r2, [sp, #16]
 8009a78:	7823      	ldrb	r3, [r4, #0]
 8009a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a7c:	d10c      	bne.n	8009a98 <_svfiprintf_r+0x130>
 8009a7e:	7863      	ldrb	r3, [r4, #1]
 8009a80:	2b2a      	cmp	r3, #42	; 0x2a
 8009a82:	d134      	bne.n	8009aee <_svfiprintf_r+0x186>
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	1d1a      	adds	r2, r3, #4
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	9203      	str	r2, [sp, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	bfb8      	it	lt
 8009a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a94:	3402      	adds	r4, #2
 8009a96:	9305      	str	r3, [sp, #20]
 8009a98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009b60 <_svfiprintf_r+0x1f8>
 8009a9c:	7821      	ldrb	r1, [r4, #0]
 8009a9e:	2203      	movs	r2, #3
 8009aa0:	4650      	mov	r0, sl
 8009aa2:	f7f6 fbad 	bl	8000200 <memchr>
 8009aa6:	b138      	cbz	r0, 8009ab8 <_svfiprintf_r+0x150>
 8009aa8:	9b04      	ldr	r3, [sp, #16]
 8009aaa:	eba0 000a 	sub.w	r0, r0, sl
 8009aae:	2240      	movs	r2, #64	; 0x40
 8009ab0:	4082      	lsls	r2, r0
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	3401      	adds	r4, #1
 8009ab6:	9304      	str	r3, [sp, #16]
 8009ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009abc:	4825      	ldr	r0, [pc, #148]	; (8009b54 <_svfiprintf_r+0x1ec>)
 8009abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ac2:	2206      	movs	r2, #6
 8009ac4:	f7f6 fb9c 	bl	8000200 <memchr>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d038      	beq.n	8009b3e <_svfiprintf_r+0x1d6>
 8009acc:	4b22      	ldr	r3, [pc, #136]	; (8009b58 <_svfiprintf_r+0x1f0>)
 8009ace:	bb1b      	cbnz	r3, 8009b18 <_svfiprintf_r+0x1b0>
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	3307      	adds	r3, #7
 8009ad4:	f023 0307 	bic.w	r3, r3, #7
 8009ad8:	3308      	adds	r3, #8
 8009ada:	9303      	str	r3, [sp, #12]
 8009adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ade:	4433      	add	r3, r6
 8009ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae2:	e768      	b.n	80099b6 <_svfiprintf_r+0x4e>
 8009ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ae8:	460c      	mov	r4, r1
 8009aea:	2001      	movs	r0, #1
 8009aec:	e7a6      	b.n	8009a3c <_svfiprintf_r+0xd4>
 8009aee:	2300      	movs	r3, #0
 8009af0:	3401      	adds	r4, #1
 8009af2:	9305      	str	r3, [sp, #20]
 8009af4:	4619      	mov	r1, r3
 8009af6:	f04f 0c0a 	mov.w	ip, #10
 8009afa:	4620      	mov	r0, r4
 8009afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b00:	3a30      	subs	r2, #48	; 0x30
 8009b02:	2a09      	cmp	r2, #9
 8009b04:	d903      	bls.n	8009b0e <_svfiprintf_r+0x1a6>
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0c6      	beq.n	8009a98 <_svfiprintf_r+0x130>
 8009b0a:	9105      	str	r1, [sp, #20]
 8009b0c:	e7c4      	b.n	8009a98 <_svfiprintf_r+0x130>
 8009b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b12:	4604      	mov	r4, r0
 8009b14:	2301      	movs	r3, #1
 8009b16:	e7f0      	b.n	8009afa <_svfiprintf_r+0x192>
 8009b18:	ab03      	add	r3, sp, #12
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	462a      	mov	r2, r5
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <_svfiprintf_r+0x1f4>)
 8009b20:	a904      	add	r1, sp, #16
 8009b22:	4638      	mov	r0, r7
 8009b24:	f7fc fc4e 	bl	80063c4 <_printf_float>
 8009b28:	1c42      	adds	r2, r0, #1
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	d1d6      	bne.n	8009adc <_svfiprintf_r+0x174>
 8009b2e:	89ab      	ldrh	r3, [r5, #12]
 8009b30:	065b      	lsls	r3, r3, #25
 8009b32:	f53f af2d 	bmi.w	8009990 <_svfiprintf_r+0x28>
 8009b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b38:	b01d      	add	sp, #116	; 0x74
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3e:	ab03      	add	r3, sp, #12
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	462a      	mov	r2, r5
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <_svfiprintf_r+0x1f4>)
 8009b46:	a904      	add	r1, sp, #16
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f7fc fedf 	bl	800690c <_printf_i>
 8009b4e:	e7eb      	b.n	8009b28 <_svfiprintf_r+0x1c0>
 8009b50:	0800cec9 	.word	0x0800cec9
 8009b54:	0800ced3 	.word	0x0800ced3
 8009b58:	080063c5 	.word	0x080063c5
 8009b5c:	080098b5 	.word	0x080098b5
 8009b60:	0800cecf 	.word	0x0800cecf

08009b64 <_sungetc_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	1c4b      	adds	r3, r1, #1
 8009b68:	4614      	mov	r4, r2
 8009b6a:	d103      	bne.n	8009b74 <_sungetc_r+0x10>
 8009b6c:	f04f 35ff 	mov.w	r5, #4294967295
 8009b70:	4628      	mov	r0, r5
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	8993      	ldrh	r3, [r2, #12]
 8009b76:	f023 0320 	bic.w	r3, r3, #32
 8009b7a:	8193      	strh	r3, [r2, #12]
 8009b7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b7e:	6852      	ldr	r2, [r2, #4]
 8009b80:	b2cd      	uxtb	r5, r1
 8009b82:	b18b      	cbz	r3, 8009ba8 <_sungetc_r+0x44>
 8009b84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b86:	4293      	cmp	r3, r2
 8009b88:	dd08      	ble.n	8009b9c <_sungetc_r+0x38>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	1e5a      	subs	r2, r3, #1
 8009b8e:	6022      	str	r2, [r4, #0]
 8009b90:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009b94:	6863      	ldr	r3, [r4, #4]
 8009b96:	3301      	adds	r3, #1
 8009b98:	6063      	str	r3, [r4, #4]
 8009b9a:	e7e9      	b.n	8009b70 <_sungetc_r+0xc>
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	f000 fbe8 	bl	800a372 <__submore>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d0f1      	beq.n	8009b8a <_sungetc_r+0x26>
 8009ba6:	e7e1      	b.n	8009b6c <_sungetc_r+0x8>
 8009ba8:	6921      	ldr	r1, [r4, #16]
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	b151      	cbz	r1, 8009bc4 <_sungetc_r+0x60>
 8009bae:	4299      	cmp	r1, r3
 8009bb0:	d208      	bcs.n	8009bc4 <_sungetc_r+0x60>
 8009bb2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009bb6:	42a9      	cmp	r1, r5
 8009bb8:	d104      	bne.n	8009bc4 <_sungetc_r+0x60>
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	3201      	adds	r2, #1
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	6062      	str	r2, [r4, #4]
 8009bc2:	e7d5      	b.n	8009b70 <_sungetc_r+0xc>
 8009bc4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8009bce:	2303      	movs	r3, #3
 8009bd0:	63a3      	str	r3, [r4, #56]	; 0x38
 8009bd2:	4623      	mov	r3, r4
 8009bd4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e7dc      	b.n	8009b98 <_sungetc_r+0x34>

08009bde <__ssrefill_r>:
 8009bde:	b510      	push	{r4, lr}
 8009be0:	460c      	mov	r4, r1
 8009be2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009be4:	b169      	cbz	r1, 8009c02 <__ssrefill_r+0x24>
 8009be6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bea:	4299      	cmp	r1, r3
 8009bec:	d001      	beq.n	8009bf2 <__ssrefill_r+0x14>
 8009bee:	f7fe fa1d 	bl	800802c <_free_r>
 8009bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bf4:	6063      	str	r3, [r4, #4]
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8009bfa:	b113      	cbz	r3, 8009c02 <__ssrefill_r+0x24>
 8009bfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009bfe:	6023      	str	r3, [r4, #0]
 8009c00:	bd10      	pop	{r4, pc}
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	2300      	movs	r3, #0
 8009c08:	6063      	str	r3, [r4, #4]
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	f043 0320 	orr.w	r3, r3, #32
 8009c10:	81a3      	strh	r3, [r4, #12]
 8009c12:	f04f 30ff 	mov.w	r0, #4294967295
 8009c16:	e7f3      	b.n	8009c00 <__ssrefill_r+0x22>

08009c18 <__ssvfiscanf_r>:
 8009c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009c22:	2100      	movs	r1, #0
 8009c24:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009c28:	49a6      	ldr	r1, [pc, #664]	; (8009ec4 <__ssvfiscanf_r+0x2ac>)
 8009c2a:	91a0      	str	r1, [sp, #640]	; 0x280
 8009c2c:	f10d 0804 	add.w	r8, sp, #4
 8009c30:	49a5      	ldr	r1, [pc, #660]	; (8009ec8 <__ssvfiscanf_r+0x2b0>)
 8009c32:	4fa6      	ldr	r7, [pc, #664]	; (8009ecc <__ssvfiscanf_r+0x2b4>)
 8009c34:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009ed0 <__ssvfiscanf_r+0x2b8>
 8009c38:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	7813      	ldrb	r3, [r2, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 815a 	beq.w	8009efe <__ssvfiscanf_r+0x2e6>
 8009c4a:	5cf9      	ldrb	r1, [r7, r3]
 8009c4c:	f011 0108 	ands.w	r1, r1, #8
 8009c50:	f102 0501 	add.w	r5, r2, #1
 8009c54:	d019      	beq.n	8009c8a <__ssvfiscanf_r+0x72>
 8009c56:	6863      	ldr	r3, [r4, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	dd0f      	ble.n	8009c7c <__ssvfiscanf_r+0x64>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	781a      	ldrb	r2, [r3, #0]
 8009c60:	5cba      	ldrb	r2, [r7, r2]
 8009c62:	0712      	lsls	r2, r2, #28
 8009c64:	d401      	bmi.n	8009c6a <__ssvfiscanf_r+0x52>
 8009c66:	462a      	mov	r2, r5
 8009c68:	e7eb      	b.n	8009c42 <__ssvfiscanf_r+0x2a>
 8009c6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c6c:	3201      	adds	r2, #1
 8009c6e:	9245      	str	r2, [sp, #276]	; 0x114
 8009c70:	6862      	ldr	r2, [r4, #4]
 8009c72:	3301      	adds	r3, #1
 8009c74:	3a01      	subs	r2, #1
 8009c76:	6062      	str	r2, [r4, #4]
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	e7ec      	b.n	8009c56 <__ssvfiscanf_r+0x3e>
 8009c7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4630      	mov	r0, r6
 8009c82:	4798      	blx	r3
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d0e9      	beq.n	8009c5c <__ssvfiscanf_r+0x44>
 8009c88:	e7ed      	b.n	8009c66 <__ssvfiscanf_r+0x4e>
 8009c8a:	2b25      	cmp	r3, #37	; 0x25
 8009c8c:	d012      	beq.n	8009cb4 <__ssvfiscanf_r+0x9c>
 8009c8e:	469a      	mov	sl, r3
 8009c90:	6863      	ldr	r3, [r4, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f340 8091 	ble.w	8009dba <__ssvfiscanf_r+0x1a2>
 8009c98:	6822      	ldr	r2, [r4, #0]
 8009c9a:	7813      	ldrb	r3, [r2, #0]
 8009c9c:	4553      	cmp	r3, sl
 8009c9e:	f040 812e 	bne.w	8009efe <__ssvfiscanf_r+0x2e6>
 8009ca2:	6863      	ldr	r3, [r4, #4]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	6063      	str	r3, [r4, #4]
 8009ca8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009caa:	3201      	adds	r2, #1
 8009cac:	3301      	adds	r3, #1
 8009cae:	6022      	str	r2, [r4, #0]
 8009cb0:	9345      	str	r3, [sp, #276]	; 0x114
 8009cb2:	e7d8      	b.n	8009c66 <__ssvfiscanf_r+0x4e>
 8009cb4:	9141      	str	r1, [sp, #260]	; 0x104
 8009cb6:	9143      	str	r1, [sp, #268]	; 0x10c
 8009cb8:	7853      	ldrb	r3, [r2, #1]
 8009cba:	2b2a      	cmp	r3, #42	; 0x2a
 8009cbc:	bf02      	ittt	eq
 8009cbe:	2310      	moveq	r3, #16
 8009cc0:	1c95      	addeq	r5, r2, #2
 8009cc2:	9341      	streq	r3, [sp, #260]	; 0x104
 8009cc4:	220a      	movs	r2, #10
 8009cc6:	46aa      	mov	sl, r5
 8009cc8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009ccc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009cd0:	2b09      	cmp	r3, #9
 8009cd2:	d91c      	bls.n	8009d0e <__ssvfiscanf_r+0xf6>
 8009cd4:	487e      	ldr	r0, [pc, #504]	; (8009ed0 <__ssvfiscanf_r+0x2b8>)
 8009cd6:	2203      	movs	r2, #3
 8009cd8:	f7f6 fa92 	bl	8000200 <memchr>
 8009cdc:	b138      	cbz	r0, 8009cee <__ssvfiscanf_r+0xd6>
 8009cde:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009ce0:	eba0 0009 	sub.w	r0, r0, r9
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4083      	lsls	r3, r0
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	9341      	str	r3, [sp, #260]	; 0x104
 8009cec:	4655      	mov	r5, sl
 8009cee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009cf2:	2b78      	cmp	r3, #120	; 0x78
 8009cf4:	d806      	bhi.n	8009d04 <__ssvfiscanf_r+0xec>
 8009cf6:	2b57      	cmp	r3, #87	; 0x57
 8009cf8:	d810      	bhi.n	8009d1c <__ssvfiscanf_r+0x104>
 8009cfa:	2b25      	cmp	r3, #37	; 0x25
 8009cfc:	d0c7      	beq.n	8009c8e <__ssvfiscanf_r+0x76>
 8009cfe:	d857      	bhi.n	8009db0 <__ssvfiscanf_r+0x198>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d065      	beq.n	8009dd0 <__ssvfiscanf_r+0x1b8>
 8009d04:	2303      	movs	r3, #3
 8009d06:	9347      	str	r3, [sp, #284]	; 0x11c
 8009d08:	230a      	movs	r3, #10
 8009d0a:	9342      	str	r3, [sp, #264]	; 0x108
 8009d0c:	e076      	b.n	8009dfc <__ssvfiscanf_r+0x1e4>
 8009d0e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009d10:	fb02 1103 	mla	r1, r2, r3, r1
 8009d14:	3930      	subs	r1, #48	; 0x30
 8009d16:	9143      	str	r1, [sp, #268]	; 0x10c
 8009d18:	4655      	mov	r5, sl
 8009d1a:	e7d4      	b.n	8009cc6 <__ssvfiscanf_r+0xae>
 8009d1c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009d20:	2a20      	cmp	r2, #32
 8009d22:	d8ef      	bhi.n	8009d04 <__ssvfiscanf_r+0xec>
 8009d24:	a101      	add	r1, pc, #4	; (adr r1, 8009d2c <__ssvfiscanf_r+0x114>)
 8009d26:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d2a:	bf00      	nop
 8009d2c:	08009ddf 	.word	0x08009ddf
 8009d30:	08009d05 	.word	0x08009d05
 8009d34:	08009d05 	.word	0x08009d05
 8009d38:	08009e3d 	.word	0x08009e3d
 8009d3c:	08009d05 	.word	0x08009d05
 8009d40:	08009d05 	.word	0x08009d05
 8009d44:	08009d05 	.word	0x08009d05
 8009d48:	08009d05 	.word	0x08009d05
 8009d4c:	08009d05 	.word	0x08009d05
 8009d50:	08009d05 	.word	0x08009d05
 8009d54:	08009d05 	.word	0x08009d05
 8009d58:	08009e53 	.word	0x08009e53
 8009d5c:	08009e39 	.word	0x08009e39
 8009d60:	08009db7 	.word	0x08009db7
 8009d64:	08009db7 	.word	0x08009db7
 8009d68:	08009db7 	.word	0x08009db7
 8009d6c:	08009d05 	.word	0x08009d05
 8009d70:	08009df5 	.word	0x08009df5
 8009d74:	08009d05 	.word	0x08009d05
 8009d78:	08009d05 	.word	0x08009d05
 8009d7c:	08009d05 	.word	0x08009d05
 8009d80:	08009d05 	.word	0x08009d05
 8009d84:	08009e63 	.word	0x08009e63
 8009d88:	08009e31 	.word	0x08009e31
 8009d8c:	08009dd7 	.word	0x08009dd7
 8009d90:	08009d05 	.word	0x08009d05
 8009d94:	08009d05 	.word	0x08009d05
 8009d98:	08009e5f 	.word	0x08009e5f
 8009d9c:	08009d05 	.word	0x08009d05
 8009da0:	08009e39 	.word	0x08009e39
 8009da4:	08009d05 	.word	0x08009d05
 8009da8:	08009d05 	.word	0x08009d05
 8009dac:	08009ddf 	.word	0x08009ddf
 8009db0:	3b45      	subs	r3, #69	; 0x45
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d8a6      	bhi.n	8009d04 <__ssvfiscanf_r+0xec>
 8009db6:	2305      	movs	r3, #5
 8009db8:	e01f      	b.n	8009dfa <__ssvfiscanf_r+0x1e2>
 8009dba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	4798      	blx	r3
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	f43f af68 	beq.w	8009c98 <__ssvfiscanf_r+0x80>
 8009dc8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	f040 808d 	bne.w	8009eea <__ssvfiscanf_r+0x2d2>
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	e08f      	b.n	8009ef6 <__ssvfiscanf_r+0x2de>
 8009dd6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009dd8:	f042 0220 	orr.w	r2, r2, #32
 8009ddc:	9241      	str	r2, [sp, #260]	; 0x104
 8009dde:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009de4:	9241      	str	r2, [sp, #260]	; 0x104
 8009de6:	2210      	movs	r2, #16
 8009de8:	2b6f      	cmp	r3, #111	; 0x6f
 8009dea:	9242      	str	r2, [sp, #264]	; 0x108
 8009dec:	bf34      	ite	cc
 8009dee:	2303      	movcc	r3, #3
 8009df0:	2304      	movcs	r3, #4
 8009df2:	e002      	b.n	8009dfa <__ssvfiscanf_r+0x1e2>
 8009df4:	2300      	movs	r3, #0
 8009df6:	9342      	str	r3, [sp, #264]	; 0x108
 8009df8:	2303      	movs	r3, #3
 8009dfa:	9347      	str	r3, [sp, #284]	; 0x11c
 8009dfc:	6863      	ldr	r3, [r4, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	dd3d      	ble.n	8009e7e <__ssvfiscanf_r+0x266>
 8009e02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e04:	0659      	lsls	r1, r3, #25
 8009e06:	d404      	bmi.n	8009e12 <__ssvfiscanf_r+0x1fa>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	781a      	ldrb	r2, [r3, #0]
 8009e0c:	5cba      	ldrb	r2, [r7, r2]
 8009e0e:	0712      	lsls	r2, r2, #28
 8009e10:	d43c      	bmi.n	8009e8c <__ssvfiscanf_r+0x274>
 8009e12:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	dc4b      	bgt.n	8009eb0 <__ssvfiscanf_r+0x298>
 8009e18:	466b      	mov	r3, sp
 8009e1a:	4622      	mov	r2, r4
 8009e1c:	a941      	add	r1, sp, #260	; 0x104
 8009e1e:	4630      	mov	r0, r6
 8009e20:	f000 f872 	bl	8009f08 <_scanf_chars>
 8009e24:	2801      	cmp	r0, #1
 8009e26:	d06a      	beq.n	8009efe <__ssvfiscanf_r+0x2e6>
 8009e28:	2802      	cmp	r0, #2
 8009e2a:	f47f af1c 	bne.w	8009c66 <__ssvfiscanf_r+0x4e>
 8009e2e:	e7cb      	b.n	8009dc8 <__ssvfiscanf_r+0x1b0>
 8009e30:	2308      	movs	r3, #8
 8009e32:	9342      	str	r3, [sp, #264]	; 0x108
 8009e34:	2304      	movs	r3, #4
 8009e36:	e7e0      	b.n	8009dfa <__ssvfiscanf_r+0x1e2>
 8009e38:	220a      	movs	r2, #10
 8009e3a:	e7d5      	b.n	8009de8 <__ssvfiscanf_r+0x1d0>
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	4640      	mov	r0, r8
 8009e40:	f000 fa5e 	bl	800a300 <__sccl>
 8009e44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e4a:	9341      	str	r3, [sp, #260]	; 0x104
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e7d3      	b.n	8009dfa <__ssvfiscanf_r+0x1e2>
 8009e52:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e58:	9341      	str	r3, [sp, #260]	; 0x104
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	e7cd      	b.n	8009dfa <__ssvfiscanf_r+0x1e2>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e7cb      	b.n	8009dfa <__ssvfiscanf_r+0x1e2>
 8009e62:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009e64:	06c3      	lsls	r3, r0, #27
 8009e66:	f53f aefe 	bmi.w	8009c66 <__ssvfiscanf_r+0x4e>
 8009e6a:	9b00      	ldr	r3, [sp, #0]
 8009e6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e6e:	1d19      	adds	r1, r3, #4
 8009e70:	9100      	str	r1, [sp, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	07c0      	lsls	r0, r0, #31
 8009e76:	bf4c      	ite	mi
 8009e78:	801a      	strhmi	r2, [r3, #0]
 8009e7a:	601a      	strpl	r2, [r3, #0]
 8009e7c:	e6f3      	b.n	8009c66 <__ssvfiscanf_r+0x4e>
 8009e7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e80:	4621      	mov	r1, r4
 8009e82:	4630      	mov	r0, r6
 8009e84:	4798      	blx	r3
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d0bb      	beq.n	8009e02 <__ssvfiscanf_r+0x1ea>
 8009e8a:	e79d      	b.n	8009dc8 <__ssvfiscanf_r+0x1b0>
 8009e8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e8e:	3201      	adds	r2, #1
 8009e90:	9245      	str	r2, [sp, #276]	; 0x114
 8009e92:	6862      	ldr	r2, [r4, #4]
 8009e94:	3a01      	subs	r2, #1
 8009e96:	2a00      	cmp	r2, #0
 8009e98:	6062      	str	r2, [r4, #4]
 8009e9a:	dd02      	ble.n	8009ea2 <__ssvfiscanf_r+0x28a>
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	6023      	str	r3, [r4, #0]
 8009ea0:	e7b2      	b.n	8009e08 <__ssvfiscanf_r+0x1f0>
 8009ea2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	4798      	blx	r3
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d0ac      	beq.n	8009e08 <__ssvfiscanf_r+0x1f0>
 8009eae:	e78b      	b.n	8009dc8 <__ssvfiscanf_r+0x1b0>
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	dc0f      	bgt.n	8009ed4 <__ssvfiscanf_r+0x2bc>
 8009eb4:	466b      	mov	r3, sp
 8009eb6:	4622      	mov	r2, r4
 8009eb8:	a941      	add	r1, sp, #260	; 0x104
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f000 f87e 	bl	8009fbc <_scanf_i>
 8009ec0:	e7b0      	b.n	8009e24 <__ssvfiscanf_r+0x20c>
 8009ec2:	bf00      	nop
 8009ec4:	08009b65 	.word	0x08009b65
 8009ec8:	08009bdf 	.word	0x08009bdf
 8009ecc:	0800cdc9 	.word	0x0800cdc9
 8009ed0:	0800cecf 	.word	0x0800cecf
 8009ed4:	4b0b      	ldr	r3, [pc, #44]	; (8009f04 <__ssvfiscanf_r+0x2ec>)
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f43f aec5 	beq.w	8009c66 <__ssvfiscanf_r+0x4e>
 8009edc:	466b      	mov	r3, sp
 8009ede:	4622      	mov	r2, r4
 8009ee0:	a941      	add	r1, sp, #260	; 0x104
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7fc fe34 	bl	8006b50 <_scanf_float>
 8009ee8:	e79c      	b.n	8009e24 <__ssvfiscanf_r+0x20c>
 8009eea:	89a3      	ldrh	r3, [r4, #12]
 8009eec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ef0:	bf18      	it	ne
 8009ef2:	f04f 30ff 	movne.w	r0, #4294967295
 8009ef6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009f00:	e7f9      	b.n	8009ef6 <__ssvfiscanf_r+0x2de>
 8009f02:	bf00      	nop
 8009f04:	08006b51 	.word	0x08006b51

08009f08 <_scanf_chars>:
 8009f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f0c:	4615      	mov	r5, r2
 8009f0e:	688a      	ldr	r2, [r1, #8]
 8009f10:	4680      	mov	r8, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	b932      	cbnz	r2, 8009f24 <_scanf_chars+0x1c>
 8009f16:	698a      	ldr	r2, [r1, #24]
 8009f18:	2a00      	cmp	r2, #0
 8009f1a:	bf0c      	ite	eq
 8009f1c:	2201      	moveq	r2, #1
 8009f1e:	f04f 32ff 	movne.w	r2, #4294967295
 8009f22:	608a      	str	r2, [r1, #8]
 8009f24:	6822      	ldr	r2, [r4, #0]
 8009f26:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009fb8 <_scanf_chars+0xb0>
 8009f2a:	06d1      	lsls	r1, r2, #27
 8009f2c:	bf5f      	itttt	pl
 8009f2e:	681a      	ldrpl	r2, [r3, #0]
 8009f30:	1d11      	addpl	r1, r2, #4
 8009f32:	6019      	strpl	r1, [r3, #0]
 8009f34:	6816      	ldrpl	r6, [r2, #0]
 8009f36:	2700      	movs	r7, #0
 8009f38:	69a0      	ldr	r0, [r4, #24]
 8009f3a:	b188      	cbz	r0, 8009f60 <_scanf_chars+0x58>
 8009f3c:	2801      	cmp	r0, #1
 8009f3e:	d107      	bne.n	8009f50 <_scanf_chars+0x48>
 8009f40:	682a      	ldr	r2, [r5, #0]
 8009f42:	7811      	ldrb	r1, [r2, #0]
 8009f44:	6962      	ldr	r2, [r4, #20]
 8009f46:	5c52      	ldrb	r2, [r2, r1]
 8009f48:	b952      	cbnz	r2, 8009f60 <_scanf_chars+0x58>
 8009f4a:	2f00      	cmp	r7, #0
 8009f4c:	d031      	beq.n	8009fb2 <_scanf_chars+0xaa>
 8009f4e:	e022      	b.n	8009f96 <_scanf_chars+0x8e>
 8009f50:	2802      	cmp	r0, #2
 8009f52:	d120      	bne.n	8009f96 <_scanf_chars+0x8e>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009f5c:	071b      	lsls	r3, r3, #28
 8009f5e:	d41a      	bmi.n	8009f96 <_scanf_chars+0x8e>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	06da      	lsls	r2, r3, #27
 8009f64:	bf5e      	ittt	pl
 8009f66:	682b      	ldrpl	r3, [r5, #0]
 8009f68:	781b      	ldrbpl	r3, [r3, #0]
 8009f6a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009f6e:	682a      	ldr	r2, [r5, #0]
 8009f70:	686b      	ldr	r3, [r5, #4]
 8009f72:	3201      	adds	r2, #1
 8009f74:	602a      	str	r2, [r5, #0]
 8009f76:	68a2      	ldr	r2, [r4, #8]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	3a01      	subs	r2, #1
 8009f7c:	606b      	str	r3, [r5, #4]
 8009f7e:	3701      	adds	r7, #1
 8009f80:	60a2      	str	r2, [r4, #8]
 8009f82:	b142      	cbz	r2, 8009f96 <_scanf_chars+0x8e>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dcd7      	bgt.n	8009f38 <_scanf_chars+0x30>
 8009f88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4640      	mov	r0, r8
 8009f90:	4798      	blx	r3
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d0d0      	beq.n	8009f38 <_scanf_chars+0x30>
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	f013 0310 	ands.w	r3, r3, #16
 8009f9c:	d105      	bne.n	8009faa <_scanf_chars+0xa2>
 8009f9e:	68e2      	ldr	r2, [r4, #12]
 8009fa0:	3201      	adds	r2, #1
 8009fa2:	60e2      	str	r2, [r4, #12]
 8009fa4:	69a2      	ldr	r2, [r4, #24]
 8009fa6:	b102      	cbz	r2, 8009faa <_scanf_chars+0xa2>
 8009fa8:	7033      	strb	r3, [r6, #0]
 8009faa:	6923      	ldr	r3, [r4, #16]
 8009fac:	443b      	add	r3, r7
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0800cdc9 	.word	0x0800cdc9

08009fbc <_scanf_i>:
 8009fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc0:	4698      	mov	r8, r3
 8009fc2:	4b74      	ldr	r3, [pc, #464]	; (800a194 <_scanf_i+0x1d8>)
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	4682      	mov	sl, r0
 8009fc8:	4616      	mov	r6, r2
 8009fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009fce:	b087      	sub	sp, #28
 8009fd0:	ab03      	add	r3, sp, #12
 8009fd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009fd6:	4b70      	ldr	r3, [pc, #448]	; (800a198 <_scanf_i+0x1dc>)
 8009fd8:	69a1      	ldr	r1, [r4, #24]
 8009fda:	4a70      	ldr	r2, [pc, #448]	; (800a19c <_scanf_i+0x1e0>)
 8009fdc:	2903      	cmp	r1, #3
 8009fde:	bf18      	it	ne
 8009fe0:	461a      	movne	r2, r3
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	9201      	str	r2, [sp, #4]
 8009fe6:	1e5a      	subs	r2, r3, #1
 8009fe8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009fec:	bf88      	it	hi
 8009fee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009ff2:	4627      	mov	r7, r4
 8009ff4:	bf82      	ittt	hi
 8009ff6:	eb03 0905 	addhi.w	r9, r3, r5
 8009ffa:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009ffe:	60a3      	strhi	r3, [r4, #8]
 800a000:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a004:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a008:	bf98      	it	ls
 800a00a:	f04f 0900 	movls.w	r9, #0
 800a00e:	6023      	str	r3, [r4, #0]
 800a010:	463d      	mov	r5, r7
 800a012:	f04f 0b00 	mov.w	fp, #0
 800a016:	6831      	ldr	r1, [r6, #0]
 800a018:	ab03      	add	r3, sp, #12
 800a01a:	7809      	ldrb	r1, [r1, #0]
 800a01c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a020:	2202      	movs	r2, #2
 800a022:	f7f6 f8ed 	bl	8000200 <memchr>
 800a026:	b328      	cbz	r0, 800a074 <_scanf_i+0xb8>
 800a028:	f1bb 0f01 	cmp.w	fp, #1
 800a02c:	d159      	bne.n	800a0e2 <_scanf_i+0x126>
 800a02e:	6862      	ldr	r2, [r4, #4]
 800a030:	b92a      	cbnz	r2, 800a03e <_scanf_i+0x82>
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	2308      	movs	r3, #8
 800a036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a03a:	6063      	str	r3, [r4, #4]
 800a03c:	6022      	str	r2, [r4, #0]
 800a03e:	6822      	ldr	r2, [r4, #0]
 800a040:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a044:	6022      	str	r2, [r4, #0]
 800a046:	68a2      	ldr	r2, [r4, #8]
 800a048:	1e51      	subs	r1, r2, #1
 800a04a:	60a1      	str	r1, [r4, #8]
 800a04c:	b192      	cbz	r2, 800a074 <_scanf_i+0xb8>
 800a04e:	6832      	ldr	r2, [r6, #0]
 800a050:	1c51      	adds	r1, r2, #1
 800a052:	6031      	str	r1, [r6, #0]
 800a054:	7812      	ldrb	r2, [r2, #0]
 800a056:	f805 2b01 	strb.w	r2, [r5], #1
 800a05a:	6872      	ldr	r2, [r6, #4]
 800a05c:	3a01      	subs	r2, #1
 800a05e:	2a00      	cmp	r2, #0
 800a060:	6072      	str	r2, [r6, #4]
 800a062:	dc07      	bgt.n	800a074 <_scanf_i+0xb8>
 800a064:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a068:	4631      	mov	r1, r6
 800a06a:	4650      	mov	r0, sl
 800a06c:	4790      	blx	r2
 800a06e:	2800      	cmp	r0, #0
 800a070:	f040 8085 	bne.w	800a17e <_scanf_i+0x1c2>
 800a074:	f10b 0b01 	add.w	fp, fp, #1
 800a078:	f1bb 0f03 	cmp.w	fp, #3
 800a07c:	d1cb      	bne.n	800a016 <_scanf_i+0x5a>
 800a07e:	6863      	ldr	r3, [r4, #4]
 800a080:	b90b      	cbnz	r3, 800a086 <_scanf_i+0xca>
 800a082:	230a      	movs	r3, #10
 800a084:	6063      	str	r3, [r4, #4]
 800a086:	6863      	ldr	r3, [r4, #4]
 800a088:	4945      	ldr	r1, [pc, #276]	; (800a1a0 <_scanf_i+0x1e4>)
 800a08a:	6960      	ldr	r0, [r4, #20]
 800a08c:	1ac9      	subs	r1, r1, r3
 800a08e:	f000 f937 	bl	800a300 <__sccl>
 800a092:	f04f 0b00 	mov.w	fp, #0
 800a096:	68a3      	ldr	r3, [r4, #8]
 800a098:	6822      	ldr	r2, [r4, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d03d      	beq.n	800a11a <_scanf_i+0x15e>
 800a09e:	6831      	ldr	r1, [r6, #0]
 800a0a0:	6960      	ldr	r0, [r4, #20]
 800a0a2:	f891 c000 	ldrb.w	ip, [r1]
 800a0a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d035      	beq.n	800a11a <_scanf_i+0x15e>
 800a0ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a0b2:	d124      	bne.n	800a0fe <_scanf_i+0x142>
 800a0b4:	0510      	lsls	r0, r2, #20
 800a0b6:	d522      	bpl.n	800a0fe <_scanf_i+0x142>
 800a0b8:	f10b 0b01 	add.w	fp, fp, #1
 800a0bc:	f1b9 0f00 	cmp.w	r9, #0
 800a0c0:	d003      	beq.n	800a0ca <_scanf_i+0x10e>
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	f109 39ff 	add.w	r9, r9, #4294967295
 800a0c8:	60a3      	str	r3, [r4, #8]
 800a0ca:	6873      	ldr	r3, [r6, #4]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	6073      	str	r3, [r6, #4]
 800a0d2:	dd1b      	ble.n	800a10c <_scanf_i+0x150>
 800a0d4:	6833      	ldr	r3, [r6, #0]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	6033      	str	r3, [r6, #0]
 800a0da:	68a3      	ldr	r3, [r4, #8]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	60a3      	str	r3, [r4, #8]
 800a0e0:	e7d9      	b.n	800a096 <_scanf_i+0xda>
 800a0e2:	f1bb 0f02 	cmp.w	fp, #2
 800a0e6:	d1ae      	bne.n	800a046 <_scanf_i+0x8a>
 800a0e8:	6822      	ldr	r2, [r4, #0]
 800a0ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a0ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a0f2:	d1bf      	bne.n	800a074 <_scanf_i+0xb8>
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	6063      	str	r3, [r4, #4]
 800a0f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0fc:	e7a2      	b.n	800a044 <_scanf_i+0x88>
 800a0fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a102:	6022      	str	r2, [r4, #0]
 800a104:	780b      	ldrb	r3, [r1, #0]
 800a106:	f805 3b01 	strb.w	r3, [r5], #1
 800a10a:	e7de      	b.n	800a0ca <_scanf_i+0x10e>
 800a10c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a110:	4631      	mov	r1, r6
 800a112:	4650      	mov	r0, sl
 800a114:	4798      	blx	r3
 800a116:	2800      	cmp	r0, #0
 800a118:	d0df      	beq.n	800a0da <_scanf_i+0x11e>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	05d9      	lsls	r1, r3, #23
 800a11e:	d50d      	bpl.n	800a13c <_scanf_i+0x180>
 800a120:	42bd      	cmp	r5, r7
 800a122:	d909      	bls.n	800a138 <_scanf_i+0x17c>
 800a124:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a128:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a12c:	4632      	mov	r2, r6
 800a12e:	4650      	mov	r0, sl
 800a130:	4798      	blx	r3
 800a132:	f105 39ff 	add.w	r9, r5, #4294967295
 800a136:	464d      	mov	r5, r9
 800a138:	42bd      	cmp	r5, r7
 800a13a:	d028      	beq.n	800a18e <_scanf_i+0x1d2>
 800a13c:	6822      	ldr	r2, [r4, #0]
 800a13e:	f012 0210 	ands.w	r2, r2, #16
 800a142:	d113      	bne.n	800a16c <_scanf_i+0x1b0>
 800a144:	702a      	strb	r2, [r5, #0]
 800a146:	6863      	ldr	r3, [r4, #4]
 800a148:	9e01      	ldr	r6, [sp, #4]
 800a14a:	4639      	mov	r1, r7
 800a14c:	4650      	mov	r0, sl
 800a14e:	47b0      	blx	r6
 800a150:	f8d8 3000 	ldr.w	r3, [r8]
 800a154:	6821      	ldr	r1, [r4, #0]
 800a156:	1d1a      	adds	r2, r3, #4
 800a158:	f8c8 2000 	str.w	r2, [r8]
 800a15c:	f011 0f20 	tst.w	r1, #32
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	d00f      	beq.n	800a184 <_scanf_i+0x1c8>
 800a164:	6018      	str	r0, [r3, #0]
 800a166:	68e3      	ldr	r3, [r4, #12]
 800a168:	3301      	adds	r3, #1
 800a16a:	60e3      	str	r3, [r4, #12]
 800a16c:	6923      	ldr	r3, [r4, #16]
 800a16e:	1bed      	subs	r5, r5, r7
 800a170:	445d      	add	r5, fp
 800a172:	442b      	add	r3, r5
 800a174:	6123      	str	r3, [r4, #16]
 800a176:	2000      	movs	r0, #0
 800a178:	b007      	add	sp, #28
 800a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17e:	f04f 0b00 	mov.w	fp, #0
 800a182:	e7ca      	b.n	800a11a <_scanf_i+0x15e>
 800a184:	07ca      	lsls	r2, r1, #31
 800a186:	bf4c      	ite	mi
 800a188:	8018      	strhmi	r0, [r3, #0]
 800a18a:	6018      	strpl	r0, [r3, #0]
 800a18c:	e7eb      	b.n	800a166 <_scanf_i+0x1aa>
 800a18e:	2001      	movs	r0, #1
 800a190:	e7f2      	b.n	800a178 <_scanf_i+0x1bc>
 800a192:	bf00      	nop
 800a194:	0800cb2c 	.word	0x0800cb2c
 800a198:	0800ad0d 	.word	0x0800ad0d
 800a19c:	080098b1 	.word	0x080098b1
 800a1a0:	0800ceea 	.word	0x0800ceea

0800a1a4 <__sflush_r>:
 800a1a4:	898a      	ldrh	r2, [r1, #12]
 800a1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	0710      	lsls	r0, r2, #28
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	d458      	bmi.n	800a264 <__sflush_r+0xc0>
 800a1b2:	684b      	ldr	r3, [r1, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	dc05      	bgt.n	800a1c4 <__sflush_r+0x20>
 800a1b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dc02      	bgt.n	800a1c4 <__sflush_r+0x20>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1c6:	2e00      	cmp	r6, #0
 800a1c8:	d0f9      	beq.n	800a1be <__sflush_r+0x1a>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1d0:	682f      	ldr	r7, [r5, #0]
 800a1d2:	6a21      	ldr	r1, [r4, #32]
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	d032      	beq.n	800a23e <__sflush_r+0x9a>
 800a1d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	075a      	lsls	r2, r3, #29
 800a1de:	d505      	bpl.n	800a1ec <__sflush_r+0x48>
 800a1e0:	6863      	ldr	r3, [r4, #4]
 800a1e2:	1ac0      	subs	r0, r0, r3
 800a1e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1e6:	b10b      	cbz	r3, 800a1ec <__sflush_r+0x48>
 800a1e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1ea:	1ac0      	subs	r0, r0, r3
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1f2:	6a21      	ldr	r1, [r4, #32]
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	47b0      	blx	r6
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	d106      	bne.n	800a20c <__sflush_r+0x68>
 800a1fe:	6829      	ldr	r1, [r5, #0]
 800a200:	291d      	cmp	r1, #29
 800a202:	d82b      	bhi.n	800a25c <__sflush_r+0xb8>
 800a204:	4a29      	ldr	r2, [pc, #164]	; (800a2ac <__sflush_r+0x108>)
 800a206:	410a      	asrs	r2, r1
 800a208:	07d6      	lsls	r6, r2, #31
 800a20a:	d427      	bmi.n	800a25c <__sflush_r+0xb8>
 800a20c:	2200      	movs	r2, #0
 800a20e:	6062      	str	r2, [r4, #4]
 800a210:	04d9      	lsls	r1, r3, #19
 800a212:	6922      	ldr	r2, [r4, #16]
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	d504      	bpl.n	800a222 <__sflush_r+0x7e>
 800a218:	1c42      	adds	r2, r0, #1
 800a21a:	d101      	bne.n	800a220 <__sflush_r+0x7c>
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	b903      	cbnz	r3, 800a222 <__sflush_r+0x7e>
 800a220:	6560      	str	r0, [r4, #84]	; 0x54
 800a222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a224:	602f      	str	r7, [r5, #0]
 800a226:	2900      	cmp	r1, #0
 800a228:	d0c9      	beq.n	800a1be <__sflush_r+0x1a>
 800a22a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a22e:	4299      	cmp	r1, r3
 800a230:	d002      	beq.n	800a238 <__sflush_r+0x94>
 800a232:	4628      	mov	r0, r5
 800a234:	f7fd fefa 	bl	800802c <_free_r>
 800a238:	2000      	movs	r0, #0
 800a23a:	6360      	str	r0, [r4, #52]	; 0x34
 800a23c:	e7c0      	b.n	800a1c0 <__sflush_r+0x1c>
 800a23e:	2301      	movs	r3, #1
 800a240:	4628      	mov	r0, r5
 800a242:	47b0      	blx	r6
 800a244:	1c41      	adds	r1, r0, #1
 800a246:	d1c8      	bne.n	800a1da <__sflush_r+0x36>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0c5      	beq.n	800a1da <__sflush_r+0x36>
 800a24e:	2b1d      	cmp	r3, #29
 800a250:	d001      	beq.n	800a256 <__sflush_r+0xb2>
 800a252:	2b16      	cmp	r3, #22
 800a254:	d101      	bne.n	800a25a <__sflush_r+0xb6>
 800a256:	602f      	str	r7, [r5, #0]
 800a258:	e7b1      	b.n	800a1be <__sflush_r+0x1a>
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	e7ad      	b.n	800a1c0 <__sflush_r+0x1c>
 800a264:	690f      	ldr	r7, [r1, #16]
 800a266:	2f00      	cmp	r7, #0
 800a268:	d0a9      	beq.n	800a1be <__sflush_r+0x1a>
 800a26a:	0793      	lsls	r3, r2, #30
 800a26c:	680e      	ldr	r6, [r1, #0]
 800a26e:	bf08      	it	eq
 800a270:	694b      	ldreq	r3, [r1, #20]
 800a272:	600f      	str	r7, [r1, #0]
 800a274:	bf18      	it	ne
 800a276:	2300      	movne	r3, #0
 800a278:	eba6 0807 	sub.w	r8, r6, r7
 800a27c:	608b      	str	r3, [r1, #8]
 800a27e:	f1b8 0f00 	cmp.w	r8, #0
 800a282:	dd9c      	ble.n	800a1be <__sflush_r+0x1a>
 800a284:	6a21      	ldr	r1, [r4, #32]
 800a286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a288:	4643      	mov	r3, r8
 800a28a:	463a      	mov	r2, r7
 800a28c:	4628      	mov	r0, r5
 800a28e:	47b0      	blx	r6
 800a290:	2800      	cmp	r0, #0
 800a292:	dc06      	bgt.n	800a2a2 <__sflush_r+0xfe>
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a29a:	81a3      	strh	r3, [r4, #12]
 800a29c:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a0:	e78e      	b.n	800a1c0 <__sflush_r+0x1c>
 800a2a2:	4407      	add	r7, r0
 800a2a4:	eba8 0800 	sub.w	r8, r8, r0
 800a2a8:	e7e9      	b.n	800a27e <__sflush_r+0xda>
 800a2aa:	bf00      	nop
 800a2ac:	dfbffffe 	.word	0xdfbffffe

0800a2b0 <_fflush_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	690b      	ldr	r3, [r1, #16]
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	b913      	cbnz	r3, 800a2c0 <_fflush_r+0x10>
 800a2ba:	2500      	movs	r5, #0
 800a2bc:	4628      	mov	r0, r5
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	b118      	cbz	r0, 800a2ca <_fflush_r+0x1a>
 800a2c2:	6a03      	ldr	r3, [r0, #32]
 800a2c4:	b90b      	cbnz	r3, 800a2ca <_fflush_r+0x1a>
 800a2c6:	f7fc fedf 	bl	8007088 <__sinit>
 800a2ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d0f3      	beq.n	800a2ba <_fflush_r+0xa>
 800a2d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2d4:	07d0      	lsls	r0, r2, #31
 800a2d6:	d404      	bmi.n	800a2e2 <_fflush_r+0x32>
 800a2d8:	0599      	lsls	r1, r3, #22
 800a2da:	d402      	bmi.n	800a2e2 <_fflush_r+0x32>
 800a2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2de:	f7fd f818 	bl	8007312 <__retarget_lock_acquire_recursive>
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	f7ff ff5d 	bl	800a1a4 <__sflush_r>
 800a2ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2ec:	07da      	lsls	r2, r3, #31
 800a2ee:	4605      	mov	r5, r0
 800a2f0:	d4e4      	bmi.n	800a2bc <_fflush_r+0xc>
 800a2f2:	89a3      	ldrh	r3, [r4, #12]
 800a2f4:	059b      	lsls	r3, r3, #22
 800a2f6:	d4e1      	bmi.n	800a2bc <_fflush_r+0xc>
 800a2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2fa:	f7fd f80b 	bl	8007314 <__retarget_lock_release_recursive>
 800a2fe:	e7dd      	b.n	800a2bc <_fflush_r+0xc>

0800a300 <__sccl>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	780b      	ldrb	r3, [r1, #0]
 800a304:	4604      	mov	r4, r0
 800a306:	2b5e      	cmp	r3, #94	; 0x5e
 800a308:	bf0b      	itete	eq
 800a30a:	784b      	ldrbeq	r3, [r1, #1]
 800a30c:	1c4a      	addne	r2, r1, #1
 800a30e:	1c8a      	addeq	r2, r1, #2
 800a310:	2100      	movne	r1, #0
 800a312:	bf08      	it	eq
 800a314:	2101      	moveq	r1, #1
 800a316:	3801      	subs	r0, #1
 800a318:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a31c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a320:	42a8      	cmp	r0, r5
 800a322:	d1fb      	bne.n	800a31c <__sccl+0x1c>
 800a324:	b90b      	cbnz	r3, 800a32a <__sccl+0x2a>
 800a326:	1e50      	subs	r0, r2, #1
 800a328:	bd70      	pop	{r4, r5, r6, pc}
 800a32a:	f081 0101 	eor.w	r1, r1, #1
 800a32e:	54e1      	strb	r1, [r4, r3]
 800a330:	4610      	mov	r0, r2
 800a332:	4602      	mov	r2, r0
 800a334:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a338:	2d2d      	cmp	r5, #45	; 0x2d
 800a33a:	d005      	beq.n	800a348 <__sccl+0x48>
 800a33c:	2d5d      	cmp	r5, #93	; 0x5d
 800a33e:	d016      	beq.n	800a36e <__sccl+0x6e>
 800a340:	2d00      	cmp	r5, #0
 800a342:	d0f1      	beq.n	800a328 <__sccl+0x28>
 800a344:	462b      	mov	r3, r5
 800a346:	e7f2      	b.n	800a32e <__sccl+0x2e>
 800a348:	7846      	ldrb	r6, [r0, #1]
 800a34a:	2e5d      	cmp	r6, #93	; 0x5d
 800a34c:	d0fa      	beq.n	800a344 <__sccl+0x44>
 800a34e:	42b3      	cmp	r3, r6
 800a350:	dcf8      	bgt.n	800a344 <__sccl+0x44>
 800a352:	3002      	adds	r0, #2
 800a354:	461a      	mov	r2, r3
 800a356:	3201      	adds	r2, #1
 800a358:	4296      	cmp	r6, r2
 800a35a:	54a1      	strb	r1, [r4, r2]
 800a35c:	dcfb      	bgt.n	800a356 <__sccl+0x56>
 800a35e:	1af2      	subs	r2, r6, r3
 800a360:	3a01      	subs	r2, #1
 800a362:	1c5d      	adds	r5, r3, #1
 800a364:	42b3      	cmp	r3, r6
 800a366:	bfa8      	it	ge
 800a368:	2200      	movge	r2, #0
 800a36a:	18ab      	adds	r3, r5, r2
 800a36c:	e7e1      	b.n	800a332 <__sccl+0x32>
 800a36e:	4610      	mov	r0, r2
 800a370:	e7da      	b.n	800a328 <__sccl+0x28>

0800a372 <__submore>:
 800a372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a376:	460c      	mov	r4, r1
 800a378:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a37a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a37e:	4299      	cmp	r1, r3
 800a380:	d11d      	bne.n	800a3be <__submore+0x4c>
 800a382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a386:	f7fd fec5 	bl	8008114 <_malloc_r>
 800a38a:	b918      	cbnz	r0, 800a394 <__submore+0x22>
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a398:	63a3      	str	r3, [r4, #56]	; 0x38
 800a39a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a39e:	6360      	str	r0, [r4, #52]	; 0x34
 800a3a0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a3a4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a3a8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a3ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a3b0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a3b4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a3b8:	6020      	str	r0, [r4, #0]
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	e7e8      	b.n	800a390 <__submore+0x1e>
 800a3be:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a3c0:	0077      	lsls	r7, r6, #1
 800a3c2:	463a      	mov	r2, r7
 800a3c4:	f000 fc01 	bl	800abca <_realloc_r>
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d0de      	beq.n	800a38c <__submore+0x1a>
 800a3ce:	eb00 0806 	add.w	r8, r0, r6
 800a3d2:	4601      	mov	r1, r0
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	f000 f842 	bl	800a460 <memcpy>
 800a3dc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a3e0:	f8c4 8000 	str.w	r8, [r4]
 800a3e4:	e7e9      	b.n	800a3ba <__submore+0x48>

0800a3e6 <memmove>:
 800a3e6:	4288      	cmp	r0, r1
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	eb01 0402 	add.w	r4, r1, r2
 800a3ee:	d902      	bls.n	800a3f6 <memmove+0x10>
 800a3f0:	4284      	cmp	r4, r0
 800a3f2:	4623      	mov	r3, r4
 800a3f4:	d807      	bhi.n	800a406 <memmove+0x20>
 800a3f6:	1e43      	subs	r3, r0, #1
 800a3f8:	42a1      	cmp	r1, r4
 800a3fa:	d008      	beq.n	800a40e <memmove+0x28>
 800a3fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a400:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a404:	e7f8      	b.n	800a3f8 <memmove+0x12>
 800a406:	4402      	add	r2, r0
 800a408:	4601      	mov	r1, r0
 800a40a:	428a      	cmp	r2, r1
 800a40c:	d100      	bne.n	800a410 <memmove+0x2a>
 800a40e:	bd10      	pop	{r4, pc}
 800a410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a414:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a418:	e7f7      	b.n	800a40a <memmove+0x24>

0800a41a <strncmp>:
 800a41a:	b510      	push	{r4, lr}
 800a41c:	b16a      	cbz	r2, 800a43a <strncmp+0x20>
 800a41e:	3901      	subs	r1, #1
 800a420:	1884      	adds	r4, r0, r2
 800a422:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a426:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d103      	bne.n	800a436 <strncmp+0x1c>
 800a42e:	42a0      	cmp	r0, r4
 800a430:	d001      	beq.n	800a436 <strncmp+0x1c>
 800a432:	2a00      	cmp	r2, #0
 800a434:	d1f5      	bne.n	800a422 <strncmp+0x8>
 800a436:	1ad0      	subs	r0, r2, r3
 800a438:	bd10      	pop	{r4, pc}
 800a43a:	4610      	mov	r0, r2
 800a43c:	e7fc      	b.n	800a438 <strncmp+0x1e>
	...

0800a440 <_sbrk_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4d06      	ldr	r5, [pc, #24]	; (800a45c <_sbrk_r+0x1c>)
 800a444:	2300      	movs	r3, #0
 800a446:	4604      	mov	r4, r0
 800a448:	4608      	mov	r0, r1
 800a44a:	602b      	str	r3, [r5, #0]
 800a44c:	f7f8 f910 	bl	8002670 <_sbrk>
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	d102      	bne.n	800a45a <_sbrk_r+0x1a>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	b103      	cbz	r3, 800a45a <_sbrk_r+0x1a>
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	2000064c 	.word	0x2000064c

0800a460 <memcpy>:
 800a460:	440a      	add	r2, r1
 800a462:	4291      	cmp	r1, r2
 800a464:	f100 33ff 	add.w	r3, r0, #4294967295
 800a468:	d100      	bne.n	800a46c <memcpy+0xc>
 800a46a:	4770      	bx	lr
 800a46c:	b510      	push	{r4, lr}
 800a46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a472:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a476:	4291      	cmp	r1, r2
 800a478:	d1f9      	bne.n	800a46e <memcpy+0xe>
 800a47a:	bd10      	pop	{r4, pc}
 800a47c:	0000      	movs	r0, r0
	...

0800a480 <nan>:
 800a480:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a488 <nan+0x8>
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	00000000 	.word	0x00000000
 800a48c:	7ff80000 	.word	0x7ff80000

0800a490 <__assert_func>:
 800a490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a492:	4614      	mov	r4, r2
 800a494:	461a      	mov	r2, r3
 800a496:	4b09      	ldr	r3, [pc, #36]	; (800a4bc <__assert_func+0x2c>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4605      	mov	r5, r0
 800a49c:	68d8      	ldr	r0, [r3, #12]
 800a49e:	b14c      	cbz	r4, 800a4b4 <__assert_func+0x24>
 800a4a0:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <__assert_func+0x30>)
 800a4a2:	9100      	str	r1, [sp, #0]
 800a4a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4a8:	4906      	ldr	r1, [pc, #24]	; (800a4c4 <__assert_func+0x34>)
 800a4aa:	462b      	mov	r3, r5
 800a4ac:	f000 fc3e 	bl	800ad2c <fiprintf>
 800a4b0:	f000 fc4e 	bl	800ad50 <abort>
 800a4b4:	4b04      	ldr	r3, [pc, #16]	; (800a4c8 <__assert_func+0x38>)
 800a4b6:	461c      	mov	r4, r3
 800a4b8:	e7f3      	b.n	800a4a2 <__assert_func+0x12>
 800a4ba:	bf00      	nop
 800a4bc:	20000064 	.word	0x20000064
 800a4c0:	0800cefd 	.word	0x0800cefd
 800a4c4:	0800cf0a 	.word	0x0800cf0a
 800a4c8:	0800cf38 	.word	0x0800cf38

0800a4cc <_calloc_r>:
 800a4cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ce:	fba1 2402 	umull	r2, r4, r1, r2
 800a4d2:	b94c      	cbnz	r4, 800a4e8 <_calloc_r+0x1c>
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	9201      	str	r2, [sp, #4]
 800a4d8:	f7fd fe1c 	bl	8008114 <_malloc_r>
 800a4dc:	9a01      	ldr	r2, [sp, #4]
 800a4de:	4605      	mov	r5, r0
 800a4e0:	b930      	cbnz	r0, 800a4f0 <_calloc_r+0x24>
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	b003      	add	sp, #12
 800a4e6:	bd30      	pop	{r4, r5, pc}
 800a4e8:	220c      	movs	r2, #12
 800a4ea:	6002      	str	r2, [r0, #0]
 800a4ec:	2500      	movs	r5, #0
 800a4ee:	e7f8      	b.n	800a4e2 <_calloc_r+0x16>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	f7fc fe90 	bl	8007216 <memset>
 800a4f6:	e7f4      	b.n	800a4e2 <_calloc_r+0x16>

0800a4f8 <rshift>:
 800a4f8:	6903      	ldr	r3, [r0, #16]
 800a4fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a502:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a506:	f100 0414 	add.w	r4, r0, #20
 800a50a:	dd45      	ble.n	800a598 <rshift+0xa0>
 800a50c:	f011 011f 	ands.w	r1, r1, #31
 800a510:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a514:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a518:	d10c      	bne.n	800a534 <rshift+0x3c>
 800a51a:	f100 0710 	add.w	r7, r0, #16
 800a51e:	4629      	mov	r1, r5
 800a520:	42b1      	cmp	r1, r6
 800a522:	d334      	bcc.n	800a58e <rshift+0x96>
 800a524:	1a9b      	subs	r3, r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	1eea      	subs	r2, r5, #3
 800a52a:	4296      	cmp	r6, r2
 800a52c:	bf38      	it	cc
 800a52e:	2300      	movcc	r3, #0
 800a530:	4423      	add	r3, r4
 800a532:	e015      	b.n	800a560 <rshift+0x68>
 800a534:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a538:	f1c1 0820 	rsb	r8, r1, #32
 800a53c:	40cf      	lsrs	r7, r1
 800a53e:	f105 0e04 	add.w	lr, r5, #4
 800a542:	46a1      	mov	r9, r4
 800a544:	4576      	cmp	r6, lr
 800a546:	46f4      	mov	ip, lr
 800a548:	d815      	bhi.n	800a576 <rshift+0x7e>
 800a54a:	1a9a      	subs	r2, r3, r2
 800a54c:	0092      	lsls	r2, r2, #2
 800a54e:	3a04      	subs	r2, #4
 800a550:	3501      	adds	r5, #1
 800a552:	42ae      	cmp	r6, r5
 800a554:	bf38      	it	cc
 800a556:	2200      	movcc	r2, #0
 800a558:	18a3      	adds	r3, r4, r2
 800a55a:	50a7      	str	r7, [r4, r2]
 800a55c:	b107      	cbz	r7, 800a560 <rshift+0x68>
 800a55e:	3304      	adds	r3, #4
 800a560:	1b1a      	subs	r2, r3, r4
 800a562:	42a3      	cmp	r3, r4
 800a564:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a568:	bf08      	it	eq
 800a56a:	2300      	moveq	r3, #0
 800a56c:	6102      	str	r2, [r0, #16]
 800a56e:	bf08      	it	eq
 800a570:	6143      	streq	r3, [r0, #20]
 800a572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a576:	f8dc c000 	ldr.w	ip, [ip]
 800a57a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a57e:	ea4c 0707 	orr.w	r7, ip, r7
 800a582:	f849 7b04 	str.w	r7, [r9], #4
 800a586:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a58a:	40cf      	lsrs	r7, r1
 800a58c:	e7da      	b.n	800a544 <rshift+0x4c>
 800a58e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a592:	f847 cf04 	str.w	ip, [r7, #4]!
 800a596:	e7c3      	b.n	800a520 <rshift+0x28>
 800a598:	4623      	mov	r3, r4
 800a59a:	e7e1      	b.n	800a560 <rshift+0x68>

0800a59c <__hexdig_fun>:
 800a59c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	d802      	bhi.n	800a5aa <__hexdig_fun+0xe>
 800a5a4:	3820      	subs	r0, #32
 800a5a6:	b2c0      	uxtb	r0, r0
 800a5a8:	4770      	bx	lr
 800a5aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5ae:	2b05      	cmp	r3, #5
 800a5b0:	d801      	bhi.n	800a5b6 <__hexdig_fun+0x1a>
 800a5b2:	3847      	subs	r0, #71	; 0x47
 800a5b4:	e7f7      	b.n	800a5a6 <__hexdig_fun+0xa>
 800a5b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5ba:	2b05      	cmp	r3, #5
 800a5bc:	d801      	bhi.n	800a5c2 <__hexdig_fun+0x26>
 800a5be:	3827      	subs	r0, #39	; 0x27
 800a5c0:	e7f1      	b.n	800a5a6 <__hexdig_fun+0xa>
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	4770      	bx	lr
	...

0800a5c8 <__gethex>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	4617      	mov	r7, r2
 800a5ce:	680a      	ldr	r2, [r1, #0]
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	f102 0b02 	add.w	fp, r2, #2
 800a5d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a5da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a5de:	4681      	mov	r9, r0
 800a5e0:	468a      	mov	sl, r1
 800a5e2:	9302      	str	r3, [sp, #8]
 800a5e4:	32fe      	adds	r2, #254	; 0xfe
 800a5e6:	eb02 030b 	add.w	r3, r2, fp
 800a5ea:	46d8      	mov	r8, fp
 800a5ec:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a5f0:	9301      	str	r3, [sp, #4]
 800a5f2:	2830      	cmp	r0, #48	; 0x30
 800a5f4:	d0f7      	beq.n	800a5e6 <__gethex+0x1e>
 800a5f6:	f7ff ffd1 	bl	800a59c <__hexdig_fun>
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d138      	bne.n	800a672 <__gethex+0xaa>
 800a600:	49a7      	ldr	r1, [pc, #668]	; (800a8a0 <__gethex+0x2d8>)
 800a602:	2201      	movs	r2, #1
 800a604:	4640      	mov	r0, r8
 800a606:	f7ff ff08 	bl	800a41a <strncmp>
 800a60a:	4606      	mov	r6, r0
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d169      	bne.n	800a6e4 <__gethex+0x11c>
 800a610:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a614:	465d      	mov	r5, fp
 800a616:	f7ff ffc1 	bl	800a59c <__hexdig_fun>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d064      	beq.n	800a6e8 <__gethex+0x120>
 800a61e:	465a      	mov	r2, fp
 800a620:	7810      	ldrb	r0, [r2, #0]
 800a622:	2830      	cmp	r0, #48	; 0x30
 800a624:	4690      	mov	r8, r2
 800a626:	f102 0201 	add.w	r2, r2, #1
 800a62a:	d0f9      	beq.n	800a620 <__gethex+0x58>
 800a62c:	f7ff ffb6 	bl	800a59c <__hexdig_fun>
 800a630:	2301      	movs	r3, #1
 800a632:	fab0 f480 	clz	r4, r0
 800a636:	0964      	lsrs	r4, r4, #5
 800a638:	465e      	mov	r6, fp
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	4642      	mov	r2, r8
 800a63e:	4615      	mov	r5, r2
 800a640:	3201      	adds	r2, #1
 800a642:	7828      	ldrb	r0, [r5, #0]
 800a644:	f7ff ffaa 	bl	800a59c <__hexdig_fun>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d1f8      	bne.n	800a63e <__gethex+0x76>
 800a64c:	4994      	ldr	r1, [pc, #592]	; (800a8a0 <__gethex+0x2d8>)
 800a64e:	2201      	movs	r2, #1
 800a650:	4628      	mov	r0, r5
 800a652:	f7ff fee2 	bl	800a41a <strncmp>
 800a656:	b978      	cbnz	r0, 800a678 <__gethex+0xb0>
 800a658:	b946      	cbnz	r6, 800a66c <__gethex+0xa4>
 800a65a:	1c6e      	adds	r6, r5, #1
 800a65c:	4632      	mov	r2, r6
 800a65e:	4615      	mov	r5, r2
 800a660:	3201      	adds	r2, #1
 800a662:	7828      	ldrb	r0, [r5, #0]
 800a664:	f7ff ff9a 	bl	800a59c <__hexdig_fun>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d1f8      	bne.n	800a65e <__gethex+0x96>
 800a66c:	1b73      	subs	r3, r6, r5
 800a66e:	009e      	lsls	r6, r3, #2
 800a670:	e004      	b.n	800a67c <__gethex+0xb4>
 800a672:	2400      	movs	r4, #0
 800a674:	4626      	mov	r6, r4
 800a676:	e7e1      	b.n	800a63c <__gethex+0x74>
 800a678:	2e00      	cmp	r6, #0
 800a67a:	d1f7      	bne.n	800a66c <__gethex+0xa4>
 800a67c:	782b      	ldrb	r3, [r5, #0]
 800a67e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a682:	2b50      	cmp	r3, #80	; 0x50
 800a684:	d13d      	bne.n	800a702 <__gethex+0x13a>
 800a686:	786b      	ldrb	r3, [r5, #1]
 800a688:	2b2b      	cmp	r3, #43	; 0x2b
 800a68a:	d02f      	beq.n	800a6ec <__gethex+0x124>
 800a68c:	2b2d      	cmp	r3, #45	; 0x2d
 800a68e:	d031      	beq.n	800a6f4 <__gethex+0x12c>
 800a690:	1c69      	adds	r1, r5, #1
 800a692:	f04f 0b00 	mov.w	fp, #0
 800a696:	7808      	ldrb	r0, [r1, #0]
 800a698:	f7ff ff80 	bl	800a59c <__hexdig_fun>
 800a69c:	1e42      	subs	r2, r0, #1
 800a69e:	b2d2      	uxtb	r2, r2
 800a6a0:	2a18      	cmp	r2, #24
 800a6a2:	d82e      	bhi.n	800a702 <__gethex+0x13a>
 800a6a4:	f1a0 0210 	sub.w	r2, r0, #16
 800a6a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6ac:	f7ff ff76 	bl	800a59c <__hexdig_fun>
 800a6b0:	f100 3cff 	add.w	ip, r0, #4294967295
 800a6b4:	fa5f fc8c 	uxtb.w	ip, ip
 800a6b8:	f1bc 0f18 	cmp.w	ip, #24
 800a6bc:	d91d      	bls.n	800a6fa <__gethex+0x132>
 800a6be:	f1bb 0f00 	cmp.w	fp, #0
 800a6c2:	d000      	beq.n	800a6c6 <__gethex+0xfe>
 800a6c4:	4252      	negs	r2, r2
 800a6c6:	4416      	add	r6, r2
 800a6c8:	f8ca 1000 	str.w	r1, [sl]
 800a6cc:	b1dc      	cbz	r4, 800a706 <__gethex+0x13e>
 800a6ce:	9b01      	ldr	r3, [sp, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	bf14      	ite	ne
 800a6d4:	f04f 0800 	movne.w	r8, #0
 800a6d8:	f04f 0806 	moveq.w	r8, #6
 800a6dc:	4640      	mov	r0, r8
 800a6de:	b005      	add	sp, #20
 800a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e4:	4645      	mov	r5, r8
 800a6e6:	4626      	mov	r6, r4
 800a6e8:	2401      	movs	r4, #1
 800a6ea:	e7c7      	b.n	800a67c <__gethex+0xb4>
 800a6ec:	f04f 0b00 	mov.w	fp, #0
 800a6f0:	1ca9      	adds	r1, r5, #2
 800a6f2:	e7d0      	b.n	800a696 <__gethex+0xce>
 800a6f4:	f04f 0b01 	mov.w	fp, #1
 800a6f8:	e7fa      	b.n	800a6f0 <__gethex+0x128>
 800a6fa:	230a      	movs	r3, #10
 800a6fc:	fb03 0002 	mla	r0, r3, r2, r0
 800a700:	e7d0      	b.n	800a6a4 <__gethex+0xdc>
 800a702:	4629      	mov	r1, r5
 800a704:	e7e0      	b.n	800a6c8 <__gethex+0x100>
 800a706:	eba5 0308 	sub.w	r3, r5, r8
 800a70a:	3b01      	subs	r3, #1
 800a70c:	4621      	mov	r1, r4
 800a70e:	2b07      	cmp	r3, #7
 800a710:	dc0a      	bgt.n	800a728 <__gethex+0x160>
 800a712:	4648      	mov	r0, r9
 800a714:	f7fd fd8a 	bl	800822c <_Balloc>
 800a718:	4604      	mov	r4, r0
 800a71a:	b940      	cbnz	r0, 800a72e <__gethex+0x166>
 800a71c:	4b61      	ldr	r3, [pc, #388]	; (800a8a4 <__gethex+0x2dc>)
 800a71e:	4602      	mov	r2, r0
 800a720:	21e4      	movs	r1, #228	; 0xe4
 800a722:	4861      	ldr	r0, [pc, #388]	; (800a8a8 <__gethex+0x2e0>)
 800a724:	f7ff feb4 	bl	800a490 <__assert_func>
 800a728:	3101      	adds	r1, #1
 800a72a:	105b      	asrs	r3, r3, #1
 800a72c:	e7ef      	b.n	800a70e <__gethex+0x146>
 800a72e:	f100 0a14 	add.w	sl, r0, #20
 800a732:	2300      	movs	r3, #0
 800a734:	495a      	ldr	r1, [pc, #360]	; (800a8a0 <__gethex+0x2d8>)
 800a736:	f8cd a004 	str.w	sl, [sp, #4]
 800a73a:	469b      	mov	fp, r3
 800a73c:	45a8      	cmp	r8, r5
 800a73e:	d342      	bcc.n	800a7c6 <__gethex+0x1fe>
 800a740:	9801      	ldr	r0, [sp, #4]
 800a742:	f840 bb04 	str.w	fp, [r0], #4
 800a746:	eba0 000a 	sub.w	r0, r0, sl
 800a74a:	1080      	asrs	r0, r0, #2
 800a74c:	6120      	str	r0, [r4, #16]
 800a74e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a752:	4658      	mov	r0, fp
 800a754:	f7fd fe5c 	bl	8008410 <__hi0bits>
 800a758:	683d      	ldr	r5, [r7, #0]
 800a75a:	eba8 0000 	sub.w	r0, r8, r0
 800a75e:	42a8      	cmp	r0, r5
 800a760:	dd59      	ble.n	800a816 <__gethex+0x24e>
 800a762:	eba0 0805 	sub.w	r8, r0, r5
 800a766:	4641      	mov	r1, r8
 800a768:	4620      	mov	r0, r4
 800a76a:	f7fe f9eb 	bl	8008b44 <__any_on>
 800a76e:	4683      	mov	fp, r0
 800a770:	b1b8      	cbz	r0, 800a7a2 <__gethex+0x1da>
 800a772:	f108 33ff 	add.w	r3, r8, #4294967295
 800a776:	1159      	asrs	r1, r3, #5
 800a778:	f003 021f 	and.w	r2, r3, #31
 800a77c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a780:	f04f 0b01 	mov.w	fp, #1
 800a784:	fa0b f202 	lsl.w	r2, fp, r2
 800a788:	420a      	tst	r2, r1
 800a78a:	d00a      	beq.n	800a7a2 <__gethex+0x1da>
 800a78c:	455b      	cmp	r3, fp
 800a78e:	dd06      	ble.n	800a79e <__gethex+0x1d6>
 800a790:	f1a8 0102 	sub.w	r1, r8, #2
 800a794:	4620      	mov	r0, r4
 800a796:	f7fe f9d5 	bl	8008b44 <__any_on>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	d138      	bne.n	800a810 <__gethex+0x248>
 800a79e:	f04f 0b02 	mov.w	fp, #2
 800a7a2:	4641      	mov	r1, r8
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f7ff fea7 	bl	800a4f8 <rshift>
 800a7aa:	4446      	add	r6, r8
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	42b3      	cmp	r3, r6
 800a7b0:	da41      	bge.n	800a836 <__gethex+0x26e>
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4648      	mov	r0, r9
 800a7b6:	f7fd fd79 	bl	80082ac <_Bfree>
 800a7ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7bc:	2300      	movs	r3, #0
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a7c4:	e78a      	b.n	800a6dc <__gethex+0x114>
 800a7c6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a7ca:	2a2e      	cmp	r2, #46	; 0x2e
 800a7cc:	d014      	beq.n	800a7f8 <__gethex+0x230>
 800a7ce:	2b20      	cmp	r3, #32
 800a7d0:	d106      	bne.n	800a7e0 <__gethex+0x218>
 800a7d2:	9b01      	ldr	r3, [sp, #4]
 800a7d4:	f843 bb04 	str.w	fp, [r3], #4
 800a7d8:	f04f 0b00 	mov.w	fp, #0
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	465b      	mov	r3, fp
 800a7e0:	7828      	ldrb	r0, [r5, #0]
 800a7e2:	9303      	str	r3, [sp, #12]
 800a7e4:	f7ff feda 	bl	800a59c <__hexdig_fun>
 800a7e8:	9b03      	ldr	r3, [sp, #12]
 800a7ea:	f000 000f 	and.w	r0, r0, #15
 800a7ee:	4098      	lsls	r0, r3
 800a7f0:	ea4b 0b00 	orr.w	fp, fp, r0
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	e7a1      	b.n	800a73c <__gethex+0x174>
 800a7f8:	45a8      	cmp	r8, r5
 800a7fa:	d8e8      	bhi.n	800a7ce <__gethex+0x206>
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	4628      	mov	r0, r5
 800a800:	9303      	str	r3, [sp, #12]
 800a802:	f7ff fe0a 	bl	800a41a <strncmp>
 800a806:	4926      	ldr	r1, [pc, #152]	; (800a8a0 <__gethex+0x2d8>)
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d1df      	bne.n	800a7ce <__gethex+0x206>
 800a80e:	e795      	b.n	800a73c <__gethex+0x174>
 800a810:	f04f 0b03 	mov.w	fp, #3
 800a814:	e7c5      	b.n	800a7a2 <__gethex+0x1da>
 800a816:	da0b      	bge.n	800a830 <__gethex+0x268>
 800a818:	eba5 0800 	sub.w	r8, r5, r0
 800a81c:	4621      	mov	r1, r4
 800a81e:	4642      	mov	r2, r8
 800a820:	4648      	mov	r0, r9
 800a822:	f7fd ff5d 	bl	80086e0 <__lshift>
 800a826:	eba6 0608 	sub.w	r6, r6, r8
 800a82a:	4604      	mov	r4, r0
 800a82c:	f100 0a14 	add.w	sl, r0, #20
 800a830:	f04f 0b00 	mov.w	fp, #0
 800a834:	e7ba      	b.n	800a7ac <__gethex+0x1e4>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	42b3      	cmp	r3, r6
 800a83a:	dd73      	ble.n	800a924 <__gethex+0x35c>
 800a83c:	1b9e      	subs	r6, r3, r6
 800a83e:	42b5      	cmp	r5, r6
 800a840:	dc34      	bgt.n	800a8ac <__gethex+0x2e4>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b02      	cmp	r3, #2
 800a846:	d023      	beq.n	800a890 <__gethex+0x2c8>
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d025      	beq.n	800a898 <__gethex+0x2d0>
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d115      	bne.n	800a87c <__gethex+0x2b4>
 800a850:	42b5      	cmp	r5, r6
 800a852:	d113      	bne.n	800a87c <__gethex+0x2b4>
 800a854:	2d01      	cmp	r5, #1
 800a856:	d10b      	bne.n	800a870 <__gethex+0x2a8>
 800a858:	9a02      	ldr	r2, [sp, #8]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6013      	str	r3, [r2, #0]
 800a85e:	2301      	movs	r3, #1
 800a860:	6123      	str	r3, [r4, #16]
 800a862:	f8ca 3000 	str.w	r3, [sl]
 800a866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a868:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a86c:	601c      	str	r4, [r3, #0]
 800a86e:	e735      	b.n	800a6dc <__gethex+0x114>
 800a870:	1e69      	subs	r1, r5, #1
 800a872:	4620      	mov	r0, r4
 800a874:	f7fe f966 	bl	8008b44 <__any_on>
 800a878:	2800      	cmp	r0, #0
 800a87a:	d1ed      	bne.n	800a858 <__gethex+0x290>
 800a87c:	4621      	mov	r1, r4
 800a87e:	4648      	mov	r0, r9
 800a880:	f7fd fd14 	bl	80082ac <_Bfree>
 800a884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a886:	2300      	movs	r3, #0
 800a888:	6013      	str	r3, [r2, #0]
 800a88a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a88e:	e725      	b.n	800a6dc <__gethex+0x114>
 800a890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1f2      	bne.n	800a87c <__gethex+0x2b4>
 800a896:	e7df      	b.n	800a858 <__gethex+0x290>
 800a898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1dc      	bne.n	800a858 <__gethex+0x290>
 800a89e:	e7ed      	b.n	800a87c <__gethex+0x2b4>
 800a8a0:	0800cd74 	.word	0x0800cd74
 800a8a4:	0800cc0b 	.word	0x0800cc0b
 800a8a8:	0800cf39 	.word	0x0800cf39
 800a8ac:	f106 38ff 	add.w	r8, r6, #4294967295
 800a8b0:	f1bb 0f00 	cmp.w	fp, #0
 800a8b4:	d133      	bne.n	800a91e <__gethex+0x356>
 800a8b6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ba:	d004      	beq.n	800a8c6 <__gethex+0x2fe>
 800a8bc:	4641      	mov	r1, r8
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f7fe f940 	bl	8008b44 <__any_on>
 800a8c4:	4683      	mov	fp, r0
 800a8c6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a8d0:	f008 081f 	and.w	r8, r8, #31
 800a8d4:	fa03 f308 	lsl.w	r3, r3, r8
 800a8d8:	4213      	tst	r3, r2
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4620      	mov	r0, r4
 800a8de:	bf18      	it	ne
 800a8e0:	f04b 0b02 	orrne.w	fp, fp, #2
 800a8e4:	1bad      	subs	r5, r5, r6
 800a8e6:	f7ff fe07 	bl	800a4f8 <rshift>
 800a8ea:	687e      	ldr	r6, [r7, #4]
 800a8ec:	f04f 0802 	mov.w	r8, #2
 800a8f0:	f1bb 0f00 	cmp.w	fp, #0
 800a8f4:	d04a      	beq.n	800a98c <__gethex+0x3c4>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d016      	beq.n	800a92a <__gethex+0x362>
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d018      	beq.n	800a932 <__gethex+0x36a>
 800a900:	2b01      	cmp	r3, #1
 800a902:	d109      	bne.n	800a918 <__gethex+0x350>
 800a904:	f01b 0f02 	tst.w	fp, #2
 800a908:	d006      	beq.n	800a918 <__gethex+0x350>
 800a90a:	f8da 3000 	ldr.w	r3, [sl]
 800a90e:	ea4b 0b03 	orr.w	fp, fp, r3
 800a912:	f01b 0f01 	tst.w	fp, #1
 800a916:	d10f      	bne.n	800a938 <__gethex+0x370>
 800a918:	f048 0810 	orr.w	r8, r8, #16
 800a91c:	e036      	b.n	800a98c <__gethex+0x3c4>
 800a91e:	f04f 0b01 	mov.w	fp, #1
 800a922:	e7d0      	b.n	800a8c6 <__gethex+0x2fe>
 800a924:	f04f 0801 	mov.w	r8, #1
 800a928:	e7e2      	b.n	800a8f0 <__gethex+0x328>
 800a92a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a92c:	f1c3 0301 	rsb	r3, r3, #1
 800a930:	930f      	str	r3, [sp, #60]	; 0x3c
 800a932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0ef      	beq.n	800a918 <__gethex+0x350>
 800a938:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a93c:	f104 0214 	add.w	r2, r4, #20
 800a940:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a94a:	2300      	movs	r3, #0
 800a94c:	4694      	mov	ip, r2
 800a94e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a952:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a956:	d01e      	beq.n	800a996 <__gethex+0x3ce>
 800a958:	3101      	adds	r1, #1
 800a95a:	f8cc 1000 	str.w	r1, [ip]
 800a95e:	f1b8 0f02 	cmp.w	r8, #2
 800a962:	f104 0214 	add.w	r2, r4, #20
 800a966:	d13d      	bne.n	800a9e4 <__gethex+0x41c>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	3b01      	subs	r3, #1
 800a96c:	42ab      	cmp	r3, r5
 800a96e:	d10b      	bne.n	800a988 <__gethex+0x3c0>
 800a970:	1169      	asrs	r1, r5, #5
 800a972:	2301      	movs	r3, #1
 800a974:	f005 051f 	and.w	r5, r5, #31
 800a978:	fa03 f505 	lsl.w	r5, r3, r5
 800a97c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a980:	421d      	tst	r5, r3
 800a982:	bf18      	it	ne
 800a984:	f04f 0801 	movne.w	r8, #1
 800a988:	f048 0820 	orr.w	r8, r8, #32
 800a98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a98e:	601c      	str	r4, [r3, #0]
 800a990:	9b02      	ldr	r3, [sp, #8]
 800a992:	601e      	str	r6, [r3, #0]
 800a994:	e6a2      	b.n	800a6dc <__gethex+0x114>
 800a996:	4290      	cmp	r0, r2
 800a998:	f842 3c04 	str.w	r3, [r2, #-4]
 800a99c:	d8d6      	bhi.n	800a94c <__gethex+0x384>
 800a99e:	68a2      	ldr	r2, [r4, #8]
 800a9a0:	4593      	cmp	fp, r2
 800a9a2:	db17      	blt.n	800a9d4 <__gethex+0x40c>
 800a9a4:	6861      	ldr	r1, [r4, #4]
 800a9a6:	4648      	mov	r0, r9
 800a9a8:	3101      	adds	r1, #1
 800a9aa:	f7fd fc3f 	bl	800822c <_Balloc>
 800a9ae:	4682      	mov	sl, r0
 800a9b0:	b918      	cbnz	r0, 800a9ba <__gethex+0x3f2>
 800a9b2:	4b1b      	ldr	r3, [pc, #108]	; (800aa20 <__gethex+0x458>)
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	2184      	movs	r1, #132	; 0x84
 800a9b8:	e6b3      	b.n	800a722 <__gethex+0x15a>
 800a9ba:	6922      	ldr	r2, [r4, #16]
 800a9bc:	3202      	adds	r2, #2
 800a9be:	f104 010c 	add.w	r1, r4, #12
 800a9c2:	0092      	lsls	r2, r2, #2
 800a9c4:	300c      	adds	r0, #12
 800a9c6:	f7ff fd4b 	bl	800a460 <memcpy>
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	4648      	mov	r0, r9
 800a9ce:	f7fd fc6d 	bl	80082ac <_Bfree>
 800a9d2:	4654      	mov	r4, sl
 800a9d4:	6922      	ldr	r2, [r4, #16]
 800a9d6:	1c51      	adds	r1, r2, #1
 800a9d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a9dc:	6121      	str	r1, [r4, #16]
 800a9de:	2101      	movs	r1, #1
 800a9e0:	6151      	str	r1, [r2, #20]
 800a9e2:	e7bc      	b.n	800a95e <__gethex+0x396>
 800a9e4:	6921      	ldr	r1, [r4, #16]
 800a9e6:	4559      	cmp	r1, fp
 800a9e8:	dd0b      	ble.n	800aa02 <__gethex+0x43a>
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7ff fd83 	bl	800a4f8 <rshift>
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	3601      	adds	r6, #1
 800a9f6:	42b3      	cmp	r3, r6
 800a9f8:	f6ff aedb 	blt.w	800a7b2 <__gethex+0x1ea>
 800a9fc:	f04f 0801 	mov.w	r8, #1
 800aa00:	e7c2      	b.n	800a988 <__gethex+0x3c0>
 800aa02:	f015 051f 	ands.w	r5, r5, #31
 800aa06:	d0f9      	beq.n	800a9fc <__gethex+0x434>
 800aa08:	9b01      	ldr	r3, [sp, #4]
 800aa0a:	441a      	add	r2, r3
 800aa0c:	f1c5 0520 	rsb	r5, r5, #32
 800aa10:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800aa14:	f7fd fcfc 	bl	8008410 <__hi0bits>
 800aa18:	42a8      	cmp	r0, r5
 800aa1a:	dbe6      	blt.n	800a9ea <__gethex+0x422>
 800aa1c:	e7ee      	b.n	800a9fc <__gethex+0x434>
 800aa1e:	bf00      	nop
 800aa20:	0800cc0b 	.word	0x0800cc0b

0800aa24 <L_shift>:
 800aa24:	f1c2 0208 	rsb	r2, r2, #8
 800aa28:	0092      	lsls	r2, r2, #2
 800aa2a:	b570      	push	{r4, r5, r6, lr}
 800aa2c:	f1c2 0620 	rsb	r6, r2, #32
 800aa30:	6843      	ldr	r3, [r0, #4]
 800aa32:	6804      	ldr	r4, [r0, #0]
 800aa34:	fa03 f506 	lsl.w	r5, r3, r6
 800aa38:	432c      	orrs	r4, r5
 800aa3a:	40d3      	lsrs	r3, r2
 800aa3c:	6004      	str	r4, [r0, #0]
 800aa3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa42:	4288      	cmp	r0, r1
 800aa44:	d3f4      	bcc.n	800aa30 <L_shift+0xc>
 800aa46:	bd70      	pop	{r4, r5, r6, pc}

0800aa48 <__match>:
 800aa48:	b530      	push	{r4, r5, lr}
 800aa4a:	6803      	ldr	r3, [r0, #0]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa52:	b914      	cbnz	r4, 800aa5a <__match+0x12>
 800aa54:	6003      	str	r3, [r0, #0]
 800aa56:	2001      	movs	r0, #1
 800aa58:	bd30      	pop	{r4, r5, pc}
 800aa5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa62:	2d19      	cmp	r5, #25
 800aa64:	bf98      	it	ls
 800aa66:	3220      	addls	r2, #32
 800aa68:	42a2      	cmp	r2, r4
 800aa6a:	d0f0      	beq.n	800aa4e <__match+0x6>
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	e7f3      	b.n	800aa58 <__match+0x10>

0800aa70 <__hexnan>:
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	680b      	ldr	r3, [r1, #0]
 800aa76:	6801      	ldr	r1, [r0, #0]
 800aa78:	115e      	asrs	r6, r3, #5
 800aa7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa7e:	f013 031f 	ands.w	r3, r3, #31
 800aa82:	b087      	sub	sp, #28
 800aa84:	bf18      	it	ne
 800aa86:	3604      	addne	r6, #4
 800aa88:	2500      	movs	r5, #0
 800aa8a:	1f37      	subs	r7, r6, #4
 800aa8c:	4682      	mov	sl, r0
 800aa8e:	4690      	mov	r8, r2
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa96:	46b9      	mov	r9, r7
 800aa98:	463c      	mov	r4, r7
 800aa9a:	9502      	str	r5, [sp, #8]
 800aa9c:	46ab      	mov	fp, r5
 800aa9e:	784a      	ldrb	r2, [r1, #1]
 800aaa0:	1c4b      	adds	r3, r1, #1
 800aaa2:	9303      	str	r3, [sp, #12]
 800aaa4:	b342      	cbz	r2, 800aaf8 <__hexnan+0x88>
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	9105      	str	r1, [sp, #20]
 800aaaa:	9204      	str	r2, [sp, #16]
 800aaac:	f7ff fd76 	bl	800a59c <__hexdig_fun>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d14f      	bne.n	800ab54 <__hexnan+0xe4>
 800aab4:	9a04      	ldr	r2, [sp, #16]
 800aab6:	9905      	ldr	r1, [sp, #20]
 800aab8:	2a20      	cmp	r2, #32
 800aaba:	d818      	bhi.n	800aaee <__hexnan+0x7e>
 800aabc:	9b02      	ldr	r3, [sp, #8]
 800aabe:	459b      	cmp	fp, r3
 800aac0:	dd13      	ble.n	800aaea <__hexnan+0x7a>
 800aac2:	454c      	cmp	r4, r9
 800aac4:	d206      	bcs.n	800aad4 <__hexnan+0x64>
 800aac6:	2d07      	cmp	r5, #7
 800aac8:	dc04      	bgt.n	800aad4 <__hexnan+0x64>
 800aaca:	462a      	mov	r2, r5
 800aacc:	4649      	mov	r1, r9
 800aace:	4620      	mov	r0, r4
 800aad0:	f7ff ffa8 	bl	800aa24 <L_shift>
 800aad4:	4544      	cmp	r4, r8
 800aad6:	d950      	bls.n	800ab7a <__hexnan+0x10a>
 800aad8:	2300      	movs	r3, #0
 800aada:	f1a4 0904 	sub.w	r9, r4, #4
 800aade:	f844 3c04 	str.w	r3, [r4, #-4]
 800aae2:	f8cd b008 	str.w	fp, [sp, #8]
 800aae6:	464c      	mov	r4, r9
 800aae8:	461d      	mov	r5, r3
 800aaea:	9903      	ldr	r1, [sp, #12]
 800aaec:	e7d7      	b.n	800aa9e <__hexnan+0x2e>
 800aaee:	2a29      	cmp	r2, #41	; 0x29
 800aaf0:	d155      	bne.n	800ab9e <__hexnan+0x12e>
 800aaf2:	3102      	adds	r1, #2
 800aaf4:	f8ca 1000 	str.w	r1, [sl]
 800aaf8:	f1bb 0f00 	cmp.w	fp, #0
 800aafc:	d04f      	beq.n	800ab9e <__hexnan+0x12e>
 800aafe:	454c      	cmp	r4, r9
 800ab00:	d206      	bcs.n	800ab10 <__hexnan+0xa0>
 800ab02:	2d07      	cmp	r5, #7
 800ab04:	dc04      	bgt.n	800ab10 <__hexnan+0xa0>
 800ab06:	462a      	mov	r2, r5
 800ab08:	4649      	mov	r1, r9
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f7ff ff8a 	bl	800aa24 <L_shift>
 800ab10:	4544      	cmp	r4, r8
 800ab12:	d934      	bls.n	800ab7e <__hexnan+0x10e>
 800ab14:	f1a8 0204 	sub.w	r2, r8, #4
 800ab18:	4623      	mov	r3, r4
 800ab1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab22:	429f      	cmp	r7, r3
 800ab24:	d2f9      	bcs.n	800ab1a <__hexnan+0xaa>
 800ab26:	1b3b      	subs	r3, r7, r4
 800ab28:	f023 0303 	bic.w	r3, r3, #3
 800ab2c:	3304      	adds	r3, #4
 800ab2e:	3e03      	subs	r6, #3
 800ab30:	3401      	adds	r4, #1
 800ab32:	42a6      	cmp	r6, r4
 800ab34:	bf38      	it	cc
 800ab36:	2304      	movcc	r3, #4
 800ab38:	4443      	add	r3, r8
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f843 2b04 	str.w	r2, [r3], #4
 800ab40:	429f      	cmp	r7, r3
 800ab42:	d2fb      	bcs.n	800ab3c <__hexnan+0xcc>
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	b91b      	cbnz	r3, 800ab50 <__hexnan+0xe0>
 800ab48:	4547      	cmp	r7, r8
 800ab4a:	d126      	bne.n	800ab9a <__hexnan+0x12a>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	603b      	str	r3, [r7, #0]
 800ab50:	2005      	movs	r0, #5
 800ab52:	e025      	b.n	800aba0 <__hexnan+0x130>
 800ab54:	3501      	adds	r5, #1
 800ab56:	2d08      	cmp	r5, #8
 800ab58:	f10b 0b01 	add.w	fp, fp, #1
 800ab5c:	dd06      	ble.n	800ab6c <__hexnan+0xfc>
 800ab5e:	4544      	cmp	r4, r8
 800ab60:	d9c3      	bls.n	800aaea <__hexnan+0x7a>
 800ab62:	2300      	movs	r3, #0
 800ab64:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab68:	2501      	movs	r5, #1
 800ab6a:	3c04      	subs	r4, #4
 800ab6c:	6822      	ldr	r2, [r4, #0]
 800ab6e:	f000 000f 	and.w	r0, r0, #15
 800ab72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab76:	6020      	str	r0, [r4, #0]
 800ab78:	e7b7      	b.n	800aaea <__hexnan+0x7a>
 800ab7a:	2508      	movs	r5, #8
 800ab7c:	e7b5      	b.n	800aaea <__hexnan+0x7a>
 800ab7e:	9b01      	ldr	r3, [sp, #4]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0df      	beq.n	800ab44 <__hexnan+0xd4>
 800ab84:	f1c3 0320 	rsb	r3, r3, #32
 800ab88:	f04f 32ff 	mov.w	r2, #4294967295
 800ab8c:	40da      	lsrs	r2, r3
 800ab8e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab92:	4013      	ands	r3, r2
 800ab94:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab98:	e7d4      	b.n	800ab44 <__hexnan+0xd4>
 800ab9a:	3f04      	subs	r7, #4
 800ab9c:	e7d2      	b.n	800ab44 <__hexnan+0xd4>
 800ab9e:	2004      	movs	r0, #4
 800aba0:	b007      	add	sp, #28
 800aba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aba6 <__ascii_mbtowc>:
 800aba6:	b082      	sub	sp, #8
 800aba8:	b901      	cbnz	r1, 800abac <__ascii_mbtowc+0x6>
 800abaa:	a901      	add	r1, sp, #4
 800abac:	b142      	cbz	r2, 800abc0 <__ascii_mbtowc+0x1a>
 800abae:	b14b      	cbz	r3, 800abc4 <__ascii_mbtowc+0x1e>
 800abb0:	7813      	ldrb	r3, [r2, #0]
 800abb2:	600b      	str	r3, [r1, #0]
 800abb4:	7812      	ldrb	r2, [r2, #0]
 800abb6:	1e10      	subs	r0, r2, #0
 800abb8:	bf18      	it	ne
 800abba:	2001      	movne	r0, #1
 800abbc:	b002      	add	sp, #8
 800abbe:	4770      	bx	lr
 800abc0:	4610      	mov	r0, r2
 800abc2:	e7fb      	b.n	800abbc <__ascii_mbtowc+0x16>
 800abc4:	f06f 0001 	mvn.w	r0, #1
 800abc8:	e7f8      	b.n	800abbc <__ascii_mbtowc+0x16>

0800abca <_realloc_r>:
 800abca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abce:	4680      	mov	r8, r0
 800abd0:	4614      	mov	r4, r2
 800abd2:	460e      	mov	r6, r1
 800abd4:	b921      	cbnz	r1, 800abe0 <_realloc_r+0x16>
 800abd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abda:	4611      	mov	r1, r2
 800abdc:	f7fd ba9a 	b.w	8008114 <_malloc_r>
 800abe0:	b92a      	cbnz	r2, 800abee <_realloc_r+0x24>
 800abe2:	f7fd fa23 	bl	800802c <_free_r>
 800abe6:	4625      	mov	r5, r4
 800abe8:	4628      	mov	r0, r5
 800abea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abee:	f000 f8b6 	bl	800ad5e <_malloc_usable_size_r>
 800abf2:	4284      	cmp	r4, r0
 800abf4:	4607      	mov	r7, r0
 800abf6:	d802      	bhi.n	800abfe <_realloc_r+0x34>
 800abf8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abfc:	d812      	bhi.n	800ac24 <_realloc_r+0x5a>
 800abfe:	4621      	mov	r1, r4
 800ac00:	4640      	mov	r0, r8
 800ac02:	f7fd fa87 	bl	8008114 <_malloc_r>
 800ac06:	4605      	mov	r5, r0
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d0ed      	beq.n	800abe8 <_realloc_r+0x1e>
 800ac0c:	42bc      	cmp	r4, r7
 800ac0e:	4622      	mov	r2, r4
 800ac10:	4631      	mov	r1, r6
 800ac12:	bf28      	it	cs
 800ac14:	463a      	movcs	r2, r7
 800ac16:	f7ff fc23 	bl	800a460 <memcpy>
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	f7fd fa05 	bl	800802c <_free_r>
 800ac22:	e7e1      	b.n	800abe8 <_realloc_r+0x1e>
 800ac24:	4635      	mov	r5, r6
 800ac26:	e7df      	b.n	800abe8 <_realloc_r+0x1e>

0800ac28 <_strtoul_l.constprop.0>:
 800ac28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac2c:	4f36      	ldr	r7, [pc, #216]	; (800ad08 <_strtoul_l.constprop.0+0xe0>)
 800ac2e:	4686      	mov	lr, r0
 800ac30:	460d      	mov	r5, r1
 800ac32:	4628      	mov	r0, r5
 800ac34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac38:	5d3e      	ldrb	r6, [r7, r4]
 800ac3a:	f016 0608 	ands.w	r6, r6, #8
 800ac3e:	d1f8      	bne.n	800ac32 <_strtoul_l.constprop.0+0xa>
 800ac40:	2c2d      	cmp	r4, #45	; 0x2d
 800ac42:	d130      	bne.n	800aca6 <_strtoul_l.constprop.0+0x7e>
 800ac44:	782c      	ldrb	r4, [r5, #0]
 800ac46:	2601      	movs	r6, #1
 800ac48:	1c85      	adds	r5, r0, #2
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d057      	beq.n	800acfe <_strtoul_l.constprop.0+0xd6>
 800ac4e:	2b10      	cmp	r3, #16
 800ac50:	d109      	bne.n	800ac66 <_strtoul_l.constprop.0+0x3e>
 800ac52:	2c30      	cmp	r4, #48	; 0x30
 800ac54:	d107      	bne.n	800ac66 <_strtoul_l.constprop.0+0x3e>
 800ac56:	7828      	ldrb	r0, [r5, #0]
 800ac58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ac5c:	2858      	cmp	r0, #88	; 0x58
 800ac5e:	d149      	bne.n	800acf4 <_strtoul_l.constprop.0+0xcc>
 800ac60:	786c      	ldrb	r4, [r5, #1]
 800ac62:	2310      	movs	r3, #16
 800ac64:	3502      	adds	r5, #2
 800ac66:	f04f 38ff 	mov.w	r8, #4294967295
 800ac6a:	2700      	movs	r7, #0
 800ac6c:	fbb8 f8f3 	udiv	r8, r8, r3
 800ac70:	fb03 f908 	mul.w	r9, r3, r8
 800ac74:	ea6f 0909 	mvn.w	r9, r9
 800ac78:	4638      	mov	r0, r7
 800ac7a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ac7e:	f1bc 0f09 	cmp.w	ip, #9
 800ac82:	d815      	bhi.n	800acb0 <_strtoul_l.constprop.0+0x88>
 800ac84:	4664      	mov	r4, ip
 800ac86:	42a3      	cmp	r3, r4
 800ac88:	dd23      	ble.n	800acd2 <_strtoul_l.constprop.0+0xaa>
 800ac8a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800ac8e:	d007      	beq.n	800aca0 <_strtoul_l.constprop.0+0x78>
 800ac90:	4580      	cmp	r8, r0
 800ac92:	d31b      	bcc.n	800accc <_strtoul_l.constprop.0+0xa4>
 800ac94:	d101      	bne.n	800ac9a <_strtoul_l.constprop.0+0x72>
 800ac96:	45a1      	cmp	r9, r4
 800ac98:	db18      	blt.n	800accc <_strtoul_l.constprop.0+0xa4>
 800ac9a:	fb00 4003 	mla	r0, r0, r3, r4
 800ac9e:	2701      	movs	r7, #1
 800aca0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aca4:	e7e9      	b.n	800ac7a <_strtoul_l.constprop.0+0x52>
 800aca6:	2c2b      	cmp	r4, #43	; 0x2b
 800aca8:	bf04      	itt	eq
 800acaa:	782c      	ldrbeq	r4, [r5, #0]
 800acac:	1c85      	addeq	r5, r0, #2
 800acae:	e7cc      	b.n	800ac4a <_strtoul_l.constprop.0+0x22>
 800acb0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800acb4:	f1bc 0f19 	cmp.w	ip, #25
 800acb8:	d801      	bhi.n	800acbe <_strtoul_l.constprop.0+0x96>
 800acba:	3c37      	subs	r4, #55	; 0x37
 800acbc:	e7e3      	b.n	800ac86 <_strtoul_l.constprop.0+0x5e>
 800acbe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800acc2:	f1bc 0f19 	cmp.w	ip, #25
 800acc6:	d804      	bhi.n	800acd2 <_strtoul_l.constprop.0+0xaa>
 800acc8:	3c57      	subs	r4, #87	; 0x57
 800acca:	e7dc      	b.n	800ac86 <_strtoul_l.constprop.0+0x5e>
 800accc:	f04f 37ff 	mov.w	r7, #4294967295
 800acd0:	e7e6      	b.n	800aca0 <_strtoul_l.constprop.0+0x78>
 800acd2:	1c7b      	adds	r3, r7, #1
 800acd4:	d106      	bne.n	800ace4 <_strtoul_l.constprop.0+0xbc>
 800acd6:	2322      	movs	r3, #34	; 0x22
 800acd8:	f8ce 3000 	str.w	r3, [lr]
 800acdc:	4638      	mov	r0, r7
 800acde:	b932      	cbnz	r2, 800acee <_strtoul_l.constprop.0+0xc6>
 800ace0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace4:	b106      	cbz	r6, 800ace8 <_strtoul_l.constprop.0+0xc0>
 800ace6:	4240      	negs	r0, r0
 800ace8:	2a00      	cmp	r2, #0
 800acea:	d0f9      	beq.n	800ace0 <_strtoul_l.constprop.0+0xb8>
 800acec:	b107      	cbz	r7, 800acf0 <_strtoul_l.constprop.0+0xc8>
 800acee:	1e69      	subs	r1, r5, #1
 800acf0:	6011      	str	r1, [r2, #0]
 800acf2:	e7f5      	b.n	800ace0 <_strtoul_l.constprop.0+0xb8>
 800acf4:	2430      	movs	r4, #48	; 0x30
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1b5      	bne.n	800ac66 <_strtoul_l.constprop.0+0x3e>
 800acfa:	2308      	movs	r3, #8
 800acfc:	e7b3      	b.n	800ac66 <_strtoul_l.constprop.0+0x3e>
 800acfe:	2c30      	cmp	r4, #48	; 0x30
 800ad00:	d0a9      	beq.n	800ac56 <_strtoul_l.constprop.0+0x2e>
 800ad02:	230a      	movs	r3, #10
 800ad04:	e7af      	b.n	800ac66 <_strtoul_l.constprop.0+0x3e>
 800ad06:	bf00      	nop
 800ad08:	0800cdc9 	.word	0x0800cdc9

0800ad0c <_strtoul_r>:
 800ad0c:	f7ff bf8c 	b.w	800ac28 <_strtoul_l.constprop.0>

0800ad10 <__ascii_wctomb>:
 800ad10:	b149      	cbz	r1, 800ad26 <__ascii_wctomb+0x16>
 800ad12:	2aff      	cmp	r2, #255	; 0xff
 800ad14:	bf85      	ittet	hi
 800ad16:	238a      	movhi	r3, #138	; 0x8a
 800ad18:	6003      	strhi	r3, [r0, #0]
 800ad1a:	700a      	strbls	r2, [r1, #0]
 800ad1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad20:	bf98      	it	ls
 800ad22:	2001      	movls	r0, #1
 800ad24:	4770      	bx	lr
 800ad26:	4608      	mov	r0, r1
 800ad28:	4770      	bx	lr
	...

0800ad2c <fiprintf>:
 800ad2c:	b40e      	push	{r1, r2, r3}
 800ad2e:	b503      	push	{r0, r1, lr}
 800ad30:	4601      	mov	r1, r0
 800ad32:	ab03      	add	r3, sp, #12
 800ad34:	4805      	ldr	r0, [pc, #20]	; (800ad4c <fiprintf+0x20>)
 800ad36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad3a:	6800      	ldr	r0, [r0, #0]
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	f000 f83f 	bl	800adc0 <_vfiprintf_r>
 800ad42:	b002      	add	sp, #8
 800ad44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad48:	b003      	add	sp, #12
 800ad4a:	4770      	bx	lr
 800ad4c:	20000064 	.word	0x20000064

0800ad50 <abort>:
 800ad50:	b508      	push	{r3, lr}
 800ad52:	2006      	movs	r0, #6
 800ad54:	f000 fa0c 	bl	800b170 <raise>
 800ad58:	2001      	movs	r0, #1
 800ad5a:	f7f7 fc11 	bl	8002580 <_exit>

0800ad5e <_malloc_usable_size_r>:
 800ad5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad62:	1f18      	subs	r0, r3, #4
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	bfbc      	itt	lt
 800ad68:	580b      	ldrlt	r3, [r1, r0]
 800ad6a:	18c0      	addlt	r0, r0, r3
 800ad6c:	4770      	bx	lr

0800ad6e <__sfputc_r>:
 800ad6e:	6893      	ldr	r3, [r2, #8]
 800ad70:	3b01      	subs	r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	b410      	push	{r4}
 800ad76:	6093      	str	r3, [r2, #8]
 800ad78:	da08      	bge.n	800ad8c <__sfputc_r+0x1e>
 800ad7a:	6994      	ldr	r4, [r2, #24]
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	db01      	blt.n	800ad84 <__sfputc_r+0x16>
 800ad80:	290a      	cmp	r1, #10
 800ad82:	d103      	bne.n	800ad8c <__sfputc_r+0x1e>
 800ad84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad88:	f000 b934 	b.w	800aff4 <__swbuf_r>
 800ad8c:	6813      	ldr	r3, [r2, #0]
 800ad8e:	1c58      	adds	r0, r3, #1
 800ad90:	6010      	str	r0, [r2, #0]
 800ad92:	7019      	strb	r1, [r3, #0]
 800ad94:	4608      	mov	r0, r1
 800ad96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <__sfputs_r>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	4606      	mov	r6, r0
 800ada0:	460f      	mov	r7, r1
 800ada2:	4614      	mov	r4, r2
 800ada4:	18d5      	adds	r5, r2, r3
 800ada6:	42ac      	cmp	r4, r5
 800ada8:	d101      	bne.n	800adae <__sfputs_r+0x12>
 800adaa:	2000      	movs	r0, #0
 800adac:	e007      	b.n	800adbe <__sfputs_r+0x22>
 800adae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb2:	463a      	mov	r2, r7
 800adb4:	4630      	mov	r0, r6
 800adb6:	f7ff ffda 	bl	800ad6e <__sfputc_r>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	d1f3      	bne.n	800ada6 <__sfputs_r+0xa>
 800adbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adc0 <_vfiprintf_r>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	460d      	mov	r5, r1
 800adc6:	b09d      	sub	sp, #116	; 0x74
 800adc8:	4614      	mov	r4, r2
 800adca:	4698      	mov	r8, r3
 800adcc:	4606      	mov	r6, r0
 800adce:	b118      	cbz	r0, 800add8 <_vfiprintf_r+0x18>
 800add0:	6a03      	ldr	r3, [r0, #32]
 800add2:	b90b      	cbnz	r3, 800add8 <_vfiprintf_r+0x18>
 800add4:	f7fc f958 	bl	8007088 <__sinit>
 800add8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adda:	07d9      	lsls	r1, r3, #31
 800addc:	d405      	bmi.n	800adea <_vfiprintf_r+0x2a>
 800adde:	89ab      	ldrh	r3, [r5, #12]
 800ade0:	059a      	lsls	r2, r3, #22
 800ade2:	d402      	bmi.n	800adea <_vfiprintf_r+0x2a>
 800ade4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ade6:	f7fc fa94 	bl	8007312 <__retarget_lock_acquire_recursive>
 800adea:	89ab      	ldrh	r3, [r5, #12]
 800adec:	071b      	lsls	r3, r3, #28
 800adee:	d501      	bpl.n	800adf4 <_vfiprintf_r+0x34>
 800adf0:	692b      	ldr	r3, [r5, #16]
 800adf2:	b99b      	cbnz	r3, 800ae1c <_vfiprintf_r+0x5c>
 800adf4:	4629      	mov	r1, r5
 800adf6:	4630      	mov	r0, r6
 800adf8:	f000 f93a 	bl	800b070 <__swsetup_r>
 800adfc:	b170      	cbz	r0, 800ae1c <_vfiprintf_r+0x5c>
 800adfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae00:	07dc      	lsls	r4, r3, #31
 800ae02:	d504      	bpl.n	800ae0e <_vfiprintf_r+0x4e>
 800ae04:	f04f 30ff 	mov.w	r0, #4294967295
 800ae08:	b01d      	add	sp, #116	; 0x74
 800ae0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	0598      	lsls	r0, r3, #22
 800ae12:	d4f7      	bmi.n	800ae04 <_vfiprintf_r+0x44>
 800ae14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae16:	f7fc fa7d 	bl	8007314 <__retarget_lock_release_recursive>
 800ae1a:	e7f3      	b.n	800ae04 <_vfiprintf_r+0x44>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae20:	2320      	movs	r3, #32
 800ae22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae26:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae2a:	2330      	movs	r3, #48	; 0x30
 800ae2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800afe0 <_vfiprintf_r+0x220>
 800ae30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae34:	f04f 0901 	mov.w	r9, #1
 800ae38:	4623      	mov	r3, r4
 800ae3a:	469a      	mov	sl, r3
 800ae3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae40:	b10a      	cbz	r2, 800ae46 <_vfiprintf_r+0x86>
 800ae42:	2a25      	cmp	r2, #37	; 0x25
 800ae44:	d1f9      	bne.n	800ae3a <_vfiprintf_r+0x7a>
 800ae46:	ebba 0b04 	subs.w	fp, sl, r4
 800ae4a:	d00b      	beq.n	800ae64 <_vfiprintf_r+0xa4>
 800ae4c:	465b      	mov	r3, fp
 800ae4e:	4622      	mov	r2, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	4630      	mov	r0, r6
 800ae54:	f7ff ffa2 	bl	800ad9c <__sfputs_r>
 800ae58:	3001      	adds	r0, #1
 800ae5a:	f000 80a9 	beq.w	800afb0 <_vfiprintf_r+0x1f0>
 800ae5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae60:	445a      	add	r2, fp
 800ae62:	9209      	str	r2, [sp, #36]	; 0x24
 800ae64:	f89a 3000 	ldrb.w	r3, [sl]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 80a1 	beq.w	800afb0 <_vfiprintf_r+0x1f0>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f04f 32ff 	mov.w	r2, #4294967295
 800ae74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae78:	f10a 0a01 	add.w	sl, sl, #1
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	9307      	str	r3, [sp, #28]
 800ae80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae84:	931a      	str	r3, [sp, #104]	; 0x68
 800ae86:	4654      	mov	r4, sl
 800ae88:	2205      	movs	r2, #5
 800ae8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae8e:	4854      	ldr	r0, [pc, #336]	; (800afe0 <_vfiprintf_r+0x220>)
 800ae90:	f7f5 f9b6 	bl	8000200 <memchr>
 800ae94:	9a04      	ldr	r2, [sp, #16]
 800ae96:	b9d8      	cbnz	r0, 800aed0 <_vfiprintf_r+0x110>
 800ae98:	06d1      	lsls	r1, r2, #27
 800ae9a:	bf44      	itt	mi
 800ae9c:	2320      	movmi	r3, #32
 800ae9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aea2:	0713      	lsls	r3, r2, #28
 800aea4:	bf44      	itt	mi
 800aea6:	232b      	movmi	r3, #43	; 0x2b
 800aea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeac:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb0:	2b2a      	cmp	r3, #42	; 0x2a
 800aeb2:	d015      	beq.n	800aee0 <_vfiprintf_r+0x120>
 800aeb4:	9a07      	ldr	r2, [sp, #28]
 800aeb6:	4654      	mov	r4, sl
 800aeb8:	2000      	movs	r0, #0
 800aeba:	f04f 0c0a 	mov.w	ip, #10
 800aebe:	4621      	mov	r1, r4
 800aec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aec4:	3b30      	subs	r3, #48	; 0x30
 800aec6:	2b09      	cmp	r3, #9
 800aec8:	d94d      	bls.n	800af66 <_vfiprintf_r+0x1a6>
 800aeca:	b1b0      	cbz	r0, 800aefa <_vfiprintf_r+0x13a>
 800aecc:	9207      	str	r2, [sp, #28]
 800aece:	e014      	b.n	800aefa <_vfiprintf_r+0x13a>
 800aed0:	eba0 0308 	sub.w	r3, r0, r8
 800aed4:	fa09 f303 	lsl.w	r3, r9, r3
 800aed8:	4313      	orrs	r3, r2
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	46a2      	mov	sl, r4
 800aede:	e7d2      	b.n	800ae86 <_vfiprintf_r+0xc6>
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	1d19      	adds	r1, r3, #4
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	9103      	str	r1, [sp, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	bfbb      	ittet	lt
 800aeec:	425b      	neglt	r3, r3
 800aeee:	f042 0202 	orrlt.w	r2, r2, #2
 800aef2:	9307      	strge	r3, [sp, #28]
 800aef4:	9307      	strlt	r3, [sp, #28]
 800aef6:	bfb8      	it	lt
 800aef8:	9204      	strlt	r2, [sp, #16]
 800aefa:	7823      	ldrb	r3, [r4, #0]
 800aefc:	2b2e      	cmp	r3, #46	; 0x2e
 800aefe:	d10c      	bne.n	800af1a <_vfiprintf_r+0x15a>
 800af00:	7863      	ldrb	r3, [r4, #1]
 800af02:	2b2a      	cmp	r3, #42	; 0x2a
 800af04:	d134      	bne.n	800af70 <_vfiprintf_r+0x1b0>
 800af06:	9b03      	ldr	r3, [sp, #12]
 800af08:	1d1a      	adds	r2, r3, #4
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	9203      	str	r2, [sp, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bfb8      	it	lt
 800af12:	f04f 33ff 	movlt.w	r3, #4294967295
 800af16:	3402      	adds	r4, #2
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aff0 <_vfiprintf_r+0x230>
 800af1e:	7821      	ldrb	r1, [r4, #0]
 800af20:	2203      	movs	r2, #3
 800af22:	4650      	mov	r0, sl
 800af24:	f7f5 f96c 	bl	8000200 <memchr>
 800af28:	b138      	cbz	r0, 800af3a <_vfiprintf_r+0x17a>
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	eba0 000a 	sub.w	r0, r0, sl
 800af30:	2240      	movs	r2, #64	; 0x40
 800af32:	4082      	lsls	r2, r0
 800af34:	4313      	orrs	r3, r2
 800af36:	3401      	adds	r4, #1
 800af38:	9304      	str	r3, [sp, #16]
 800af3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af3e:	4829      	ldr	r0, [pc, #164]	; (800afe4 <_vfiprintf_r+0x224>)
 800af40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af44:	2206      	movs	r2, #6
 800af46:	f7f5 f95b 	bl	8000200 <memchr>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d03f      	beq.n	800afce <_vfiprintf_r+0x20e>
 800af4e:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <_vfiprintf_r+0x228>)
 800af50:	bb1b      	cbnz	r3, 800af9a <_vfiprintf_r+0x1da>
 800af52:	9b03      	ldr	r3, [sp, #12]
 800af54:	3307      	adds	r3, #7
 800af56:	f023 0307 	bic.w	r3, r3, #7
 800af5a:	3308      	adds	r3, #8
 800af5c:	9303      	str	r3, [sp, #12]
 800af5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af60:	443b      	add	r3, r7
 800af62:	9309      	str	r3, [sp, #36]	; 0x24
 800af64:	e768      	b.n	800ae38 <_vfiprintf_r+0x78>
 800af66:	fb0c 3202 	mla	r2, ip, r2, r3
 800af6a:	460c      	mov	r4, r1
 800af6c:	2001      	movs	r0, #1
 800af6e:	e7a6      	b.n	800aebe <_vfiprintf_r+0xfe>
 800af70:	2300      	movs	r3, #0
 800af72:	3401      	adds	r4, #1
 800af74:	9305      	str	r3, [sp, #20]
 800af76:	4619      	mov	r1, r3
 800af78:	f04f 0c0a 	mov.w	ip, #10
 800af7c:	4620      	mov	r0, r4
 800af7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af82:	3a30      	subs	r2, #48	; 0x30
 800af84:	2a09      	cmp	r2, #9
 800af86:	d903      	bls.n	800af90 <_vfiprintf_r+0x1d0>
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0c6      	beq.n	800af1a <_vfiprintf_r+0x15a>
 800af8c:	9105      	str	r1, [sp, #20]
 800af8e:	e7c4      	b.n	800af1a <_vfiprintf_r+0x15a>
 800af90:	fb0c 2101 	mla	r1, ip, r1, r2
 800af94:	4604      	mov	r4, r0
 800af96:	2301      	movs	r3, #1
 800af98:	e7f0      	b.n	800af7c <_vfiprintf_r+0x1bc>
 800af9a:	ab03      	add	r3, sp, #12
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	462a      	mov	r2, r5
 800afa0:	4b12      	ldr	r3, [pc, #72]	; (800afec <_vfiprintf_r+0x22c>)
 800afa2:	a904      	add	r1, sp, #16
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7fb fa0d 	bl	80063c4 <_printf_float>
 800afaa:	4607      	mov	r7, r0
 800afac:	1c78      	adds	r0, r7, #1
 800afae:	d1d6      	bne.n	800af5e <_vfiprintf_r+0x19e>
 800afb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afb2:	07d9      	lsls	r1, r3, #31
 800afb4:	d405      	bmi.n	800afc2 <_vfiprintf_r+0x202>
 800afb6:	89ab      	ldrh	r3, [r5, #12]
 800afb8:	059a      	lsls	r2, r3, #22
 800afba:	d402      	bmi.n	800afc2 <_vfiprintf_r+0x202>
 800afbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afbe:	f7fc f9a9 	bl	8007314 <__retarget_lock_release_recursive>
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	065b      	lsls	r3, r3, #25
 800afc6:	f53f af1d 	bmi.w	800ae04 <_vfiprintf_r+0x44>
 800afca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afcc:	e71c      	b.n	800ae08 <_vfiprintf_r+0x48>
 800afce:	ab03      	add	r3, sp, #12
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	462a      	mov	r2, r5
 800afd4:	4b05      	ldr	r3, [pc, #20]	; (800afec <_vfiprintf_r+0x22c>)
 800afd6:	a904      	add	r1, sp, #16
 800afd8:	4630      	mov	r0, r6
 800afda:	f7fb fc97 	bl	800690c <_printf_i>
 800afde:	e7e4      	b.n	800afaa <_vfiprintf_r+0x1ea>
 800afe0:	0800cec9 	.word	0x0800cec9
 800afe4:	0800ced3 	.word	0x0800ced3
 800afe8:	080063c5 	.word	0x080063c5
 800afec:	0800ad9d 	.word	0x0800ad9d
 800aff0:	0800cecf 	.word	0x0800cecf

0800aff4 <__swbuf_r>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	460e      	mov	r6, r1
 800aff8:	4614      	mov	r4, r2
 800affa:	4605      	mov	r5, r0
 800affc:	b118      	cbz	r0, 800b006 <__swbuf_r+0x12>
 800affe:	6a03      	ldr	r3, [r0, #32]
 800b000:	b90b      	cbnz	r3, 800b006 <__swbuf_r+0x12>
 800b002:	f7fc f841 	bl	8007088 <__sinit>
 800b006:	69a3      	ldr	r3, [r4, #24]
 800b008:	60a3      	str	r3, [r4, #8]
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	071a      	lsls	r2, r3, #28
 800b00e:	d525      	bpl.n	800b05c <__swbuf_r+0x68>
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	b31b      	cbz	r3, 800b05c <__swbuf_r+0x68>
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	6922      	ldr	r2, [r4, #16]
 800b018:	1a98      	subs	r0, r3, r2
 800b01a:	6963      	ldr	r3, [r4, #20]
 800b01c:	b2f6      	uxtb	r6, r6
 800b01e:	4283      	cmp	r3, r0
 800b020:	4637      	mov	r7, r6
 800b022:	dc04      	bgt.n	800b02e <__swbuf_r+0x3a>
 800b024:	4621      	mov	r1, r4
 800b026:	4628      	mov	r0, r5
 800b028:	f7ff f942 	bl	800a2b0 <_fflush_r>
 800b02c:	b9e0      	cbnz	r0, 800b068 <__swbuf_r+0x74>
 800b02e:	68a3      	ldr	r3, [r4, #8]
 800b030:	3b01      	subs	r3, #1
 800b032:	60a3      	str	r3, [r4, #8]
 800b034:	6823      	ldr	r3, [r4, #0]
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	6022      	str	r2, [r4, #0]
 800b03a:	701e      	strb	r6, [r3, #0]
 800b03c:	6962      	ldr	r2, [r4, #20]
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	429a      	cmp	r2, r3
 800b042:	d004      	beq.n	800b04e <__swbuf_r+0x5a>
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	07db      	lsls	r3, r3, #31
 800b048:	d506      	bpl.n	800b058 <__swbuf_r+0x64>
 800b04a:	2e0a      	cmp	r6, #10
 800b04c:	d104      	bne.n	800b058 <__swbuf_r+0x64>
 800b04e:	4621      	mov	r1, r4
 800b050:	4628      	mov	r0, r5
 800b052:	f7ff f92d 	bl	800a2b0 <_fflush_r>
 800b056:	b938      	cbnz	r0, 800b068 <__swbuf_r+0x74>
 800b058:	4638      	mov	r0, r7
 800b05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b05c:	4621      	mov	r1, r4
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 f806 	bl	800b070 <__swsetup_r>
 800b064:	2800      	cmp	r0, #0
 800b066:	d0d5      	beq.n	800b014 <__swbuf_r+0x20>
 800b068:	f04f 37ff 	mov.w	r7, #4294967295
 800b06c:	e7f4      	b.n	800b058 <__swbuf_r+0x64>
	...

0800b070 <__swsetup_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4b2a      	ldr	r3, [pc, #168]	; (800b11c <__swsetup_r+0xac>)
 800b074:	4605      	mov	r5, r0
 800b076:	6818      	ldr	r0, [r3, #0]
 800b078:	460c      	mov	r4, r1
 800b07a:	b118      	cbz	r0, 800b084 <__swsetup_r+0x14>
 800b07c:	6a03      	ldr	r3, [r0, #32]
 800b07e:	b90b      	cbnz	r3, 800b084 <__swsetup_r+0x14>
 800b080:	f7fc f802 	bl	8007088 <__sinit>
 800b084:	89a3      	ldrh	r3, [r4, #12]
 800b086:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b08a:	0718      	lsls	r0, r3, #28
 800b08c:	d422      	bmi.n	800b0d4 <__swsetup_r+0x64>
 800b08e:	06d9      	lsls	r1, r3, #27
 800b090:	d407      	bmi.n	800b0a2 <__swsetup_r+0x32>
 800b092:	2309      	movs	r3, #9
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b09a:	81a3      	strh	r3, [r4, #12]
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	e034      	b.n	800b10c <__swsetup_r+0x9c>
 800b0a2:	0758      	lsls	r0, r3, #29
 800b0a4:	d512      	bpl.n	800b0cc <__swsetup_r+0x5c>
 800b0a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0a8:	b141      	cbz	r1, 800b0bc <__swsetup_r+0x4c>
 800b0aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0ae:	4299      	cmp	r1, r3
 800b0b0:	d002      	beq.n	800b0b8 <__swsetup_r+0x48>
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f7fc ffba 	bl	800802c <_free_r>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	6363      	str	r3, [r4, #52]	; 0x34
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0c2:	81a3      	strh	r3, [r4, #12]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	6063      	str	r3, [r4, #4]
 800b0c8:	6923      	ldr	r3, [r4, #16]
 800b0ca:	6023      	str	r3, [r4, #0]
 800b0cc:	89a3      	ldrh	r3, [r4, #12]
 800b0ce:	f043 0308 	orr.w	r3, r3, #8
 800b0d2:	81a3      	strh	r3, [r4, #12]
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	b94b      	cbnz	r3, 800b0ec <__swsetup_r+0x7c>
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0e2:	d003      	beq.n	800b0ec <__swsetup_r+0x7c>
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	f000 f884 	bl	800b1f4 <__smakebuf_r>
 800b0ec:	89a0      	ldrh	r0, [r4, #12]
 800b0ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0f2:	f010 0301 	ands.w	r3, r0, #1
 800b0f6:	d00a      	beq.n	800b10e <__swsetup_r+0x9e>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	60a3      	str	r3, [r4, #8]
 800b0fc:	6963      	ldr	r3, [r4, #20]
 800b0fe:	425b      	negs	r3, r3
 800b100:	61a3      	str	r3, [r4, #24]
 800b102:	6923      	ldr	r3, [r4, #16]
 800b104:	b943      	cbnz	r3, 800b118 <__swsetup_r+0xa8>
 800b106:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b10a:	d1c4      	bne.n	800b096 <__swsetup_r+0x26>
 800b10c:	bd38      	pop	{r3, r4, r5, pc}
 800b10e:	0781      	lsls	r1, r0, #30
 800b110:	bf58      	it	pl
 800b112:	6963      	ldrpl	r3, [r4, #20]
 800b114:	60a3      	str	r3, [r4, #8]
 800b116:	e7f4      	b.n	800b102 <__swsetup_r+0x92>
 800b118:	2000      	movs	r0, #0
 800b11a:	e7f7      	b.n	800b10c <__swsetup_r+0x9c>
 800b11c:	20000064 	.word	0x20000064

0800b120 <_raise_r>:
 800b120:	291f      	cmp	r1, #31
 800b122:	b538      	push	{r3, r4, r5, lr}
 800b124:	4604      	mov	r4, r0
 800b126:	460d      	mov	r5, r1
 800b128:	d904      	bls.n	800b134 <_raise_r+0x14>
 800b12a:	2316      	movs	r3, #22
 800b12c:	6003      	str	r3, [r0, #0]
 800b12e:	f04f 30ff 	mov.w	r0, #4294967295
 800b132:	bd38      	pop	{r3, r4, r5, pc}
 800b134:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b136:	b112      	cbz	r2, 800b13e <_raise_r+0x1e>
 800b138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b13c:	b94b      	cbnz	r3, 800b152 <_raise_r+0x32>
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 f830 	bl	800b1a4 <_getpid_r>
 800b144:	462a      	mov	r2, r5
 800b146:	4601      	mov	r1, r0
 800b148:	4620      	mov	r0, r4
 800b14a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b14e:	f000 b817 	b.w	800b180 <_kill_r>
 800b152:	2b01      	cmp	r3, #1
 800b154:	d00a      	beq.n	800b16c <_raise_r+0x4c>
 800b156:	1c59      	adds	r1, r3, #1
 800b158:	d103      	bne.n	800b162 <_raise_r+0x42>
 800b15a:	2316      	movs	r3, #22
 800b15c:	6003      	str	r3, [r0, #0]
 800b15e:	2001      	movs	r0, #1
 800b160:	e7e7      	b.n	800b132 <_raise_r+0x12>
 800b162:	2400      	movs	r4, #0
 800b164:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b168:	4628      	mov	r0, r5
 800b16a:	4798      	blx	r3
 800b16c:	2000      	movs	r0, #0
 800b16e:	e7e0      	b.n	800b132 <_raise_r+0x12>

0800b170 <raise>:
 800b170:	4b02      	ldr	r3, [pc, #8]	; (800b17c <raise+0xc>)
 800b172:	4601      	mov	r1, r0
 800b174:	6818      	ldr	r0, [r3, #0]
 800b176:	f7ff bfd3 	b.w	800b120 <_raise_r>
 800b17a:	bf00      	nop
 800b17c:	20000064 	.word	0x20000064

0800b180 <_kill_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d07      	ldr	r5, [pc, #28]	; (800b1a0 <_kill_r+0x20>)
 800b184:	2300      	movs	r3, #0
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	4611      	mov	r1, r2
 800b18c:	602b      	str	r3, [r5, #0]
 800b18e:	f7f7 f9e7 	bl	8002560 <_kill>
 800b192:	1c43      	adds	r3, r0, #1
 800b194:	d102      	bne.n	800b19c <_kill_r+0x1c>
 800b196:	682b      	ldr	r3, [r5, #0]
 800b198:	b103      	cbz	r3, 800b19c <_kill_r+0x1c>
 800b19a:	6023      	str	r3, [r4, #0]
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
 800b19e:	bf00      	nop
 800b1a0:	2000064c 	.word	0x2000064c

0800b1a4 <_getpid_r>:
 800b1a4:	f7f7 b9d4 	b.w	8002550 <_getpid>

0800b1a8 <__swhatbuf_r>:
 800b1a8:	b570      	push	{r4, r5, r6, lr}
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b0:	2900      	cmp	r1, #0
 800b1b2:	b096      	sub	sp, #88	; 0x58
 800b1b4:	4615      	mov	r5, r2
 800b1b6:	461e      	mov	r6, r3
 800b1b8:	da0d      	bge.n	800b1d6 <__swhatbuf_r+0x2e>
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b1c0:	f04f 0100 	mov.w	r1, #0
 800b1c4:	bf0c      	ite	eq
 800b1c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b1ca:	2340      	movne	r3, #64	; 0x40
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	6031      	str	r1, [r6, #0]
 800b1d0:	602b      	str	r3, [r5, #0]
 800b1d2:	b016      	add	sp, #88	; 0x58
 800b1d4:	bd70      	pop	{r4, r5, r6, pc}
 800b1d6:	466a      	mov	r2, sp
 800b1d8:	f000 f848 	bl	800b26c <_fstat_r>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	dbec      	blt.n	800b1ba <__swhatbuf_r+0x12>
 800b1e0:	9901      	ldr	r1, [sp, #4]
 800b1e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b1e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b1ea:	4259      	negs	r1, r3
 800b1ec:	4159      	adcs	r1, r3
 800b1ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1f2:	e7eb      	b.n	800b1cc <__swhatbuf_r+0x24>

0800b1f4 <__smakebuf_r>:
 800b1f4:	898b      	ldrh	r3, [r1, #12]
 800b1f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1f8:	079d      	lsls	r5, r3, #30
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	d507      	bpl.n	800b210 <__smakebuf_r+0x1c>
 800b200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	6123      	str	r3, [r4, #16]
 800b208:	2301      	movs	r3, #1
 800b20a:	6163      	str	r3, [r4, #20]
 800b20c:	b002      	add	sp, #8
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	ab01      	add	r3, sp, #4
 800b212:	466a      	mov	r2, sp
 800b214:	f7ff ffc8 	bl	800b1a8 <__swhatbuf_r>
 800b218:	9900      	ldr	r1, [sp, #0]
 800b21a:	4605      	mov	r5, r0
 800b21c:	4630      	mov	r0, r6
 800b21e:	f7fc ff79 	bl	8008114 <_malloc_r>
 800b222:	b948      	cbnz	r0, 800b238 <__smakebuf_r+0x44>
 800b224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b228:	059a      	lsls	r2, r3, #22
 800b22a:	d4ef      	bmi.n	800b20c <__smakebuf_r+0x18>
 800b22c:	f023 0303 	bic.w	r3, r3, #3
 800b230:	f043 0302 	orr.w	r3, r3, #2
 800b234:	81a3      	strh	r3, [r4, #12]
 800b236:	e7e3      	b.n	800b200 <__smakebuf_r+0xc>
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	6020      	str	r0, [r4, #0]
 800b23c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b240:	81a3      	strh	r3, [r4, #12]
 800b242:	9b00      	ldr	r3, [sp, #0]
 800b244:	6163      	str	r3, [r4, #20]
 800b246:	9b01      	ldr	r3, [sp, #4]
 800b248:	6120      	str	r0, [r4, #16]
 800b24a:	b15b      	cbz	r3, 800b264 <__smakebuf_r+0x70>
 800b24c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b250:	4630      	mov	r0, r6
 800b252:	f000 f81d 	bl	800b290 <_isatty_r>
 800b256:	b128      	cbz	r0, 800b264 <__smakebuf_r+0x70>
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	f023 0303 	bic.w	r3, r3, #3
 800b25e:	f043 0301 	orr.w	r3, r3, #1
 800b262:	81a3      	strh	r3, [r4, #12]
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	431d      	orrs	r5, r3
 800b268:	81a5      	strh	r5, [r4, #12]
 800b26a:	e7cf      	b.n	800b20c <__smakebuf_r+0x18>

0800b26c <_fstat_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4d07      	ldr	r5, [pc, #28]	; (800b28c <_fstat_r+0x20>)
 800b270:	2300      	movs	r3, #0
 800b272:	4604      	mov	r4, r0
 800b274:	4608      	mov	r0, r1
 800b276:	4611      	mov	r1, r2
 800b278:	602b      	str	r3, [r5, #0]
 800b27a:	f7f7 f9d0 	bl	800261e <_fstat>
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	d102      	bne.n	800b288 <_fstat_r+0x1c>
 800b282:	682b      	ldr	r3, [r5, #0]
 800b284:	b103      	cbz	r3, 800b288 <_fstat_r+0x1c>
 800b286:	6023      	str	r3, [r4, #0]
 800b288:	bd38      	pop	{r3, r4, r5, pc}
 800b28a:	bf00      	nop
 800b28c:	2000064c 	.word	0x2000064c

0800b290 <_isatty_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4d06      	ldr	r5, [pc, #24]	; (800b2ac <_isatty_r+0x1c>)
 800b294:	2300      	movs	r3, #0
 800b296:	4604      	mov	r4, r0
 800b298:	4608      	mov	r0, r1
 800b29a:	602b      	str	r3, [r5, #0]
 800b29c:	f7f7 f9cf 	bl	800263e <_isatty>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d102      	bne.n	800b2aa <_isatty_r+0x1a>
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	b103      	cbz	r3, 800b2aa <_isatty_r+0x1a>
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
 800b2ac:	2000064c 	.word	0x2000064c

0800b2b0 <atan2>:
 800b2b0:	f000 bb3e 	b.w	800b930 <__ieee754_atan2>

0800b2b4 <sqrt>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	ed2d 8b02 	vpush	{d8}
 800b2ba:	ec55 4b10 	vmov	r4, r5, d0
 800b2be:	f000 f8d3 	bl	800b468 <__ieee754_sqrt>
 800b2c2:	4622      	mov	r2, r4
 800b2c4:	462b      	mov	r3, r5
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	eeb0 8a40 	vmov.f32	s16, s0
 800b2ce:	eef0 8a60 	vmov.f32	s17, s1
 800b2d2:	f7f5 fc43 	bl	8000b5c <__aeabi_dcmpun>
 800b2d6:	b990      	cbnz	r0, 800b2fe <sqrt+0x4a>
 800b2d8:	2200      	movs	r2, #0
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4620      	mov	r0, r4
 800b2de:	4629      	mov	r1, r5
 800b2e0:	f7f5 fc14 	bl	8000b0c <__aeabi_dcmplt>
 800b2e4:	b158      	cbz	r0, 800b2fe <sqrt+0x4a>
 800b2e6:	f7fb ffe9 	bl	80072bc <__errno>
 800b2ea:	2321      	movs	r3, #33	; 0x21
 800b2ec:	6003      	str	r3, [r0, #0]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	f7f5 fac1 	bl	800087c <__aeabi_ddiv>
 800b2fa:	ec41 0b18 	vmov	d8, r0, r1
 800b2fe:	eeb0 0a48 	vmov.f32	s0, s16
 800b302:	eef0 0a68 	vmov.f32	s1, s17
 800b306:	ecbd 8b02 	vpop	{d8}
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	0000      	movs	r0, r0
	...

0800b310 <cos>:
 800b310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b312:	ec53 2b10 	vmov	r2, r3, d0
 800b316:	4826      	ldr	r0, [pc, #152]	; (800b3b0 <cos+0xa0>)
 800b318:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b31c:	4281      	cmp	r1, r0
 800b31e:	dc06      	bgt.n	800b32e <cos+0x1e>
 800b320:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b3a8 <cos+0x98>
 800b324:	b005      	add	sp, #20
 800b326:	f85d eb04 	ldr.w	lr, [sp], #4
 800b32a:	f000 b979 	b.w	800b620 <__kernel_cos>
 800b32e:	4821      	ldr	r0, [pc, #132]	; (800b3b4 <cos+0xa4>)
 800b330:	4281      	cmp	r1, r0
 800b332:	dd09      	ble.n	800b348 <cos+0x38>
 800b334:	ee10 0a10 	vmov	r0, s0
 800b338:	4619      	mov	r1, r3
 800b33a:	f7f4 ffbd 	bl	80002b8 <__aeabi_dsub>
 800b33e:	ec41 0b10 	vmov	d0, r0, r1
 800b342:	b005      	add	sp, #20
 800b344:	f85d fb04 	ldr.w	pc, [sp], #4
 800b348:	4668      	mov	r0, sp
 800b34a:	f000 fbb9 	bl	800bac0 <__ieee754_rem_pio2>
 800b34e:	f000 0003 	and.w	r0, r0, #3
 800b352:	2801      	cmp	r0, #1
 800b354:	d00b      	beq.n	800b36e <cos+0x5e>
 800b356:	2802      	cmp	r0, #2
 800b358:	d016      	beq.n	800b388 <cos+0x78>
 800b35a:	b9e0      	cbnz	r0, 800b396 <cos+0x86>
 800b35c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b360:	ed9d 0b00 	vldr	d0, [sp]
 800b364:	f000 f95c 	bl	800b620 <__kernel_cos>
 800b368:	ec51 0b10 	vmov	r0, r1, d0
 800b36c:	e7e7      	b.n	800b33e <cos+0x2e>
 800b36e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b372:	ed9d 0b00 	vldr	d0, [sp]
 800b376:	f000 fa1b 	bl	800b7b0 <__kernel_sin>
 800b37a:	ec53 2b10 	vmov	r2, r3, d0
 800b37e:	ee10 0a10 	vmov	r0, s0
 800b382:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b386:	e7da      	b.n	800b33e <cos+0x2e>
 800b388:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b38c:	ed9d 0b00 	vldr	d0, [sp]
 800b390:	f000 f946 	bl	800b620 <__kernel_cos>
 800b394:	e7f1      	b.n	800b37a <cos+0x6a>
 800b396:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b39a:	ed9d 0b00 	vldr	d0, [sp]
 800b39e:	2001      	movs	r0, #1
 800b3a0:	f000 fa06 	bl	800b7b0 <__kernel_sin>
 800b3a4:	e7e0      	b.n	800b368 <cos+0x58>
 800b3a6:	bf00      	nop
	...
 800b3b0:	3fe921fb 	.word	0x3fe921fb
 800b3b4:	7fefffff 	.word	0x7fefffff

0800b3b8 <sin>:
 800b3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3ba:	ec53 2b10 	vmov	r2, r3, d0
 800b3be:	4828      	ldr	r0, [pc, #160]	; (800b460 <sin+0xa8>)
 800b3c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b3c4:	4281      	cmp	r1, r0
 800b3c6:	dc07      	bgt.n	800b3d8 <sin+0x20>
 800b3c8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b458 <sin+0xa0>
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	b005      	add	sp, #20
 800b3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3d4:	f000 b9ec 	b.w	800b7b0 <__kernel_sin>
 800b3d8:	4822      	ldr	r0, [pc, #136]	; (800b464 <sin+0xac>)
 800b3da:	4281      	cmp	r1, r0
 800b3dc:	dd09      	ble.n	800b3f2 <sin+0x3a>
 800b3de:	ee10 0a10 	vmov	r0, s0
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	f7f4 ff68 	bl	80002b8 <__aeabi_dsub>
 800b3e8:	ec41 0b10 	vmov	d0, r0, r1
 800b3ec:	b005      	add	sp, #20
 800b3ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3f2:	4668      	mov	r0, sp
 800b3f4:	f000 fb64 	bl	800bac0 <__ieee754_rem_pio2>
 800b3f8:	f000 0003 	and.w	r0, r0, #3
 800b3fc:	2801      	cmp	r0, #1
 800b3fe:	d00c      	beq.n	800b41a <sin+0x62>
 800b400:	2802      	cmp	r0, #2
 800b402:	d011      	beq.n	800b428 <sin+0x70>
 800b404:	b9f0      	cbnz	r0, 800b444 <sin+0x8c>
 800b406:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b40a:	ed9d 0b00 	vldr	d0, [sp]
 800b40e:	2001      	movs	r0, #1
 800b410:	f000 f9ce 	bl	800b7b0 <__kernel_sin>
 800b414:	ec51 0b10 	vmov	r0, r1, d0
 800b418:	e7e6      	b.n	800b3e8 <sin+0x30>
 800b41a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b41e:	ed9d 0b00 	vldr	d0, [sp]
 800b422:	f000 f8fd 	bl	800b620 <__kernel_cos>
 800b426:	e7f5      	b.n	800b414 <sin+0x5c>
 800b428:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b42c:	ed9d 0b00 	vldr	d0, [sp]
 800b430:	2001      	movs	r0, #1
 800b432:	f000 f9bd 	bl	800b7b0 <__kernel_sin>
 800b436:	ec53 2b10 	vmov	r2, r3, d0
 800b43a:	ee10 0a10 	vmov	r0, s0
 800b43e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b442:	e7d1      	b.n	800b3e8 <sin+0x30>
 800b444:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b448:	ed9d 0b00 	vldr	d0, [sp]
 800b44c:	f000 f8e8 	bl	800b620 <__kernel_cos>
 800b450:	e7f1      	b.n	800b436 <sin+0x7e>
 800b452:	bf00      	nop
 800b454:	f3af 8000 	nop.w
	...
 800b460:	3fe921fb 	.word	0x3fe921fb
 800b464:	7fefffff 	.word	0x7fefffff

0800b468 <__ieee754_sqrt>:
 800b468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	ec55 4b10 	vmov	r4, r5, d0
 800b470:	4e67      	ldr	r6, [pc, #412]	; (800b610 <__ieee754_sqrt+0x1a8>)
 800b472:	43ae      	bics	r6, r5
 800b474:	ee10 0a10 	vmov	r0, s0
 800b478:	ee10 2a10 	vmov	r2, s0
 800b47c:	4629      	mov	r1, r5
 800b47e:	462b      	mov	r3, r5
 800b480:	d10d      	bne.n	800b49e <__ieee754_sqrt+0x36>
 800b482:	f7f5 f8d1 	bl	8000628 <__aeabi_dmul>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	4620      	mov	r0, r4
 800b48c:	4629      	mov	r1, r5
 800b48e:	f7f4 ff15 	bl	80002bc <__adddf3>
 800b492:	4604      	mov	r4, r0
 800b494:	460d      	mov	r5, r1
 800b496:	ec45 4b10 	vmov	d0, r4, r5
 800b49a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49e:	2d00      	cmp	r5, #0
 800b4a0:	dc0b      	bgt.n	800b4ba <__ieee754_sqrt+0x52>
 800b4a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b4a6:	4326      	orrs	r6, r4
 800b4a8:	d0f5      	beq.n	800b496 <__ieee754_sqrt+0x2e>
 800b4aa:	b135      	cbz	r5, 800b4ba <__ieee754_sqrt+0x52>
 800b4ac:	f7f4 ff04 	bl	80002b8 <__aeabi_dsub>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	f7f5 f9e2 	bl	800087c <__aeabi_ddiv>
 800b4b8:	e7eb      	b.n	800b492 <__ieee754_sqrt+0x2a>
 800b4ba:	1509      	asrs	r1, r1, #20
 800b4bc:	f000 808d 	beq.w	800b5da <__ieee754_sqrt+0x172>
 800b4c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4c4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b4c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4cc:	07c9      	lsls	r1, r1, #31
 800b4ce:	bf5c      	itt	pl
 800b4d0:	005b      	lslpl	r3, r3, #1
 800b4d2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b4d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b4da:	bf58      	it	pl
 800b4dc:	0052      	lslpl	r2, r2, #1
 800b4de:	2500      	movs	r5, #0
 800b4e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b4e4:	1076      	asrs	r6, r6, #1
 800b4e6:	0052      	lsls	r2, r2, #1
 800b4e8:	f04f 0e16 	mov.w	lr, #22
 800b4ec:	46ac      	mov	ip, r5
 800b4ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b4f2:	eb0c 0001 	add.w	r0, ip, r1
 800b4f6:	4298      	cmp	r0, r3
 800b4f8:	bfde      	ittt	le
 800b4fa:	1a1b      	suble	r3, r3, r0
 800b4fc:	eb00 0c01 	addle.w	ip, r0, r1
 800b500:	186d      	addle	r5, r5, r1
 800b502:	005b      	lsls	r3, r3, #1
 800b504:	f1be 0e01 	subs.w	lr, lr, #1
 800b508:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b50c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b510:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b514:	d1ed      	bne.n	800b4f2 <__ieee754_sqrt+0x8a>
 800b516:	4674      	mov	r4, lr
 800b518:	2720      	movs	r7, #32
 800b51a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b51e:	4563      	cmp	r3, ip
 800b520:	eb01 000e 	add.w	r0, r1, lr
 800b524:	dc02      	bgt.n	800b52c <__ieee754_sqrt+0xc4>
 800b526:	d113      	bne.n	800b550 <__ieee754_sqrt+0xe8>
 800b528:	4290      	cmp	r0, r2
 800b52a:	d811      	bhi.n	800b550 <__ieee754_sqrt+0xe8>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	eb00 0e01 	add.w	lr, r0, r1
 800b532:	da57      	bge.n	800b5e4 <__ieee754_sqrt+0x17c>
 800b534:	f1be 0f00 	cmp.w	lr, #0
 800b538:	db54      	blt.n	800b5e4 <__ieee754_sqrt+0x17c>
 800b53a:	f10c 0801 	add.w	r8, ip, #1
 800b53e:	eba3 030c 	sub.w	r3, r3, ip
 800b542:	4290      	cmp	r0, r2
 800b544:	bf88      	it	hi
 800b546:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b54a:	1a12      	subs	r2, r2, r0
 800b54c:	440c      	add	r4, r1
 800b54e:	46c4      	mov	ip, r8
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	3f01      	subs	r7, #1
 800b554:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b558:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b55c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b560:	d1dd      	bne.n	800b51e <__ieee754_sqrt+0xb6>
 800b562:	4313      	orrs	r3, r2
 800b564:	d01b      	beq.n	800b59e <__ieee754_sqrt+0x136>
 800b566:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b614 <__ieee754_sqrt+0x1ac>
 800b56a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b618 <__ieee754_sqrt+0x1b0>
 800b56e:	e9da 0100 	ldrd	r0, r1, [sl]
 800b572:	e9db 2300 	ldrd	r2, r3, [fp]
 800b576:	f7f4 fe9f 	bl	80002b8 <__aeabi_dsub>
 800b57a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4640      	mov	r0, r8
 800b584:	4649      	mov	r1, r9
 800b586:	f7f5 facb 	bl	8000b20 <__aeabi_dcmple>
 800b58a:	b140      	cbz	r0, 800b59e <__ieee754_sqrt+0x136>
 800b58c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b590:	e9da 0100 	ldrd	r0, r1, [sl]
 800b594:	e9db 2300 	ldrd	r2, r3, [fp]
 800b598:	d126      	bne.n	800b5e8 <__ieee754_sqrt+0x180>
 800b59a:	3501      	adds	r5, #1
 800b59c:	463c      	mov	r4, r7
 800b59e:	106a      	asrs	r2, r5, #1
 800b5a0:	0863      	lsrs	r3, r4, #1
 800b5a2:	07e9      	lsls	r1, r5, #31
 800b5a4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b5a8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b5ac:	bf48      	it	mi
 800b5ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b5b2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b5b6:	461c      	mov	r4, r3
 800b5b8:	e76d      	b.n	800b496 <__ieee754_sqrt+0x2e>
 800b5ba:	0ad3      	lsrs	r3, r2, #11
 800b5bc:	3815      	subs	r0, #21
 800b5be:	0552      	lsls	r2, r2, #21
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0fa      	beq.n	800b5ba <__ieee754_sqrt+0x152>
 800b5c4:	02dc      	lsls	r4, r3, #11
 800b5c6:	d50a      	bpl.n	800b5de <__ieee754_sqrt+0x176>
 800b5c8:	f1c1 0420 	rsb	r4, r1, #32
 800b5cc:	fa22 f404 	lsr.w	r4, r2, r4
 800b5d0:	1e4d      	subs	r5, r1, #1
 800b5d2:	408a      	lsls	r2, r1
 800b5d4:	4323      	orrs	r3, r4
 800b5d6:	1b41      	subs	r1, r0, r5
 800b5d8:	e772      	b.n	800b4c0 <__ieee754_sqrt+0x58>
 800b5da:	4608      	mov	r0, r1
 800b5dc:	e7f0      	b.n	800b5c0 <__ieee754_sqrt+0x158>
 800b5de:	005b      	lsls	r3, r3, #1
 800b5e0:	3101      	adds	r1, #1
 800b5e2:	e7ef      	b.n	800b5c4 <__ieee754_sqrt+0x15c>
 800b5e4:	46e0      	mov	r8, ip
 800b5e6:	e7aa      	b.n	800b53e <__ieee754_sqrt+0xd6>
 800b5e8:	f7f4 fe68 	bl	80002bc <__adddf3>
 800b5ec:	e9da 8900 	ldrd	r8, r9, [sl]
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	f7f5 fa88 	bl	8000b0c <__aeabi_dcmplt>
 800b5fc:	b120      	cbz	r0, 800b608 <__ieee754_sqrt+0x1a0>
 800b5fe:	1ca0      	adds	r0, r4, #2
 800b600:	bf08      	it	eq
 800b602:	3501      	addeq	r5, #1
 800b604:	3402      	adds	r4, #2
 800b606:	e7ca      	b.n	800b59e <__ieee754_sqrt+0x136>
 800b608:	3401      	adds	r4, #1
 800b60a:	f024 0401 	bic.w	r4, r4, #1
 800b60e:	e7c6      	b.n	800b59e <__ieee754_sqrt+0x136>
 800b610:	7ff00000 	.word	0x7ff00000
 800b614:	200001d8 	.word	0x200001d8
 800b618:	200001e0 	.word	0x200001e0
 800b61c:	00000000 	.word	0x00000000

0800b620 <__kernel_cos>:
 800b620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	ec57 6b10 	vmov	r6, r7, d0
 800b628:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b62c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b630:	ed8d 1b00 	vstr	d1, [sp]
 800b634:	da07      	bge.n	800b646 <__kernel_cos+0x26>
 800b636:	ee10 0a10 	vmov	r0, s0
 800b63a:	4639      	mov	r1, r7
 800b63c:	f7f5 faa4 	bl	8000b88 <__aeabi_d2iz>
 800b640:	2800      	cmp	r0, #0
 800b642:	f000 8088 	beq.w	800b756 <__kernel_cos+0x136>
 800b646:	4632      	mov	r2, r6
 800b648:	463b      	mov	r3, r7
 800b64a:	4630      	mov	r0, r6
 800b64c:	4639      	mov	r1, r7
 800b64e:	f7f4 ffeb 	bl	8000628 <__aeabi_dmul>
 800b652:	4b51      	ldr	r3, [pc, #324]	; (800b798 <__kernel_cos+0x178>)
 800b654:	2200      	movs	r2, #0
 800b656:	4604      	mov	r4, r0
 800b658:	460d      	mov	r5, r1
 800b65a:	f7f4 ffe5 	bl	8000628 <__aeabi_dmul>
 800b65e:	a340      	add	r3, pc, #256	; (adr r3, 800b760 <__kernel_cos+0x140>)
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	4682      	mov	sl, r0
 800b666:	468b      	mov	fp, r1
 800b668:	4620      	mov	r0, r4
 800b66a:	4629      	mov	r1, r5
 800b66c:	f7f4 ffdc 	bl	8000628 <__aeabi_dmul>
 800b670:	a33d      	add	r3, pc, #244	; (adr r3, 800b768 <__kernel_cos+0x148>)
 800b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b676:	f7f4 fe21 	bl	80002bc <__adddf3>
 800b67a:	4622      	mov	r2, r4
 800b67c:	462b      	mov	r3, r5
 800b67e:	f7f4 ffd3 	bl	8000628 <__aeabi_dmul>
 800b682:	a33b      	add	r3, pc, #236	; (adr r3, 800b770 <__kernel_cos+0x150>)
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f7f4 fe16 	bl	80002b8 <__aeabi_dsub>
 800b68c:	4622      	mov	r2, r4
 800b68e:	462b      	mov	r3, r5
 800b690:	f7f4 ffca 	bl	8000628 <__aeabi_dmul>
 800b694:	a338      	add	r3, pc, #224	; (adr r3, 800b778 <__kernel_cos+0x158>)
 800b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69a:	f7f4 fe0f 	bl	80002bc <__adddf3>
 800b69e:	4622      	mov	r2, r4
 800b6a0:	462b      	mov	r3, r5
 800b6a2:	f7f4 ffc1 	bl	8000628 <__aeabi_dmul>
 800b6a6:	a336      	add	r3, pc, #216	; (adr r3, 800b780 <__kernel_cos+0x160>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f7f4 fe04 	bl	80002b8 <__aeabi_dsub>
 800b6b0:	4622      	mov	r2, r4
 800b6b2:	462b      	mov	r3, r5
 800b6b4:	f7f4 ffb8 	bl	8000628 <__aeabi_dmul>
 800b6b8:	a333      	add	r3, pc, #204	; (adr r3, 800b788 <__kernel_cos+0x168>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 fdfd 	bl	80002bc <__adddf3>
 800b6c2:	4622      	mov	r2, r4
 800b6c4:	462b      	mov	r3, r5
 800b6c6:	f7f4 ffaf 	bl	8000628 <__aeabi_dmul>
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	462b      	mov	r3, r5
 800b6ce:	f7f4 ffab 	bl	8000628 <__aeabi_dmul>
 800b6d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	460d      	mov	r5, r1
 800b6da:	4630      	mov	r0, r6
 800b6dc:	4639      	mov	r1, r7
 800b6de:	f7f4 ffa3 	bl	8000628 <__aeabi_dmul>
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f7f4 fde5 	bl	80002b8 <__aeabi_dsub>
 800b6ee:	4b2b      	ldr	r3, [pc, #172]	; (800b79c <__kernel_cos+0x17c>)
 800b6f0:	4598      	cmp	r8, r3
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	dc10      	bgt.n	800b71a <__kernel_cos+0xfa>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4650      	mov	r0, sl
 800b6fe:	4659      	mov	r1, fp
 800b700:	f7f4 fdda 	bl	80002b8 <__aeabi_dsub>
 800b704:	460b      	mov	r3, r1
 800b706:	4926      	ldr	r1, [pc, #152]	; (800b7a0 <__kernel_cos+0x180>)
 800b708:	4602      	mov	r2, r0
 800b70a:	2000      	movs	r0, #0
 800b70c:	f7f4 fdd4 	bl	80002b8 <__aeabi_dsub>
 800b710:	ec41 0b10 	vmov	d0, r0, r1
 800b714:	b003      	add	sp, #12
 800b716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71a:	4b22      	ldr	r3, [pc, #136]	; (800b7a4 <__kernel_cos+0x184>)
 800b71c:	4920      	ldr	r1, [pc, #128]	; (800b7a0 <__kernel_cos+0x180>)
 800b71e:	4598      	cmp	r8, r3
 800b720:	bfcc      	ite	gt
 800b722:	4d21      	ldrgt	r5, [pc, #132]	; (800b7a8 <__kernel_cos+0x188>)
 800b724:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b728:	2400      	movs	r4, #0
 800b72a:	4622      	mov	r2, r4
 800b72c:	462b      	mov	r3, r5
 800b72e:	2000      	movs	r0, #0
 800b730:	f7f4 fdc2 	bl	80002b8 <__aeabi_dsub>
 800b734:	4622      	mov	r2, r4
 800b736:	4680      	mov	r8, r0
 800b738:	4689      	mov	r9, r1
 800b73a:	462b      	mov	r3, r5
 800b73c:	4650      	mov	r0, sl
 800b73e:	4659      	mov	r1, fp
 800b740:	f7f4 fdba 	bl	80002b8 <__aeabi_dsub>
 800b744:	4632      	mov	r2, r6
 800b746:	463b      	mov	r3, r7
 800b748:	f7f4 fdb6 	bl	80002b8 <__aeabi_dsub>
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	4640      	mov	r0, r8
 800b752:	4649      	mov	r1, r9
 800b754:	e7da      	b.n	800b70c <__kernel_cos+0xec>
 800b756:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b790 <__kernel_cos+0x170>
 800b75a:	e7db      	b.n	800b714 <__kernel_cos+0xf4>
 800b75c:	f3af 8000 	nop.w
 800b760:	be8838d4 	.word	0xbe8838d4
 800b764:	bda8fae9 	.word	0xbda8fae9
 800b768:	bdb4b1c4 	.word	0xbdb4b1c4
 800b76c:	3e21ee9e 	.word	0x3e21ee9e
 800b770:	809c52ad 	.word	0x809c52ad
 800b774:	3e927e4f 	.word	0x3e927e4f
 800b778:	19cb1590 	.word	0x19cb1590
 800b77c:	3efa01a0 	.word	0x3efa01a0
 800b780:	16c15177 	.word	0x16c15177
 800b784:	3f56c16c 	.word	0x3f56c16c
 800b788:	5555554c 	.word	0x5555554c
 800b78c:	3fa55555 	.word	0x3fa55555
 800b790:	00000000 	.word	0x00000000
 800b794:	3ff00000 	.word	0x3ff00000
 800b798:	3fe00000 	.word	0x3fe00000
 800b79c:	3fd33332 	.word	0x3fd33332
 800b7a0:	3ff00000 	.word	0x3ff00000
 800b7a4:	3fe90000 	.word	0x3fe90000
 800b7a8:	3fd20000 	.word	0x3fd20000
 800b7ac:	00000000 	.word	0x00000000

0800b7b0 <__kernel_sin>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	ed2d 8b04 	vpush	{d8-d9}
 800b7b8:	eeb0 8a41 	vmov.f32	s16, s2
 800b7bc:	eef0 8a61 	vmov.f32	s17, s3
 800b7c0:	ec55 4b10 	vmov	r4, r5, d0
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b7ce:	9001      	str	r0, [sp, #4]
 800b7d0:	da06      	bge.n	800b7e0 <__kernel_sin+0x30>
 800b7d2:	ee10 0a10 	vmov	r0, s0
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	f7f5 f9d6 	bl	8000b88 <__aeabi_d2iz>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d051      	beq.n	800b884 <__kernel_sin+0xd4>
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	462b      	mov	r3, r5
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	f7f4 ff1e 	bl	8000628 <__aeabi_dmul>
 800b7ec:	4682      	mov	sl, r0
 800b7ee:	468b      	mov	fp, r1
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	f7f4 ff16 	bl	8000628 <__aeabi_dmul>
 800b7fc:	a341      	add	r3, pc, #260	; (adr r3, 800b904 <__kernel_sin+0x154>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	4680      	mov	r8, r0
 800b804:	4689      	mov	r9, r1
 800b806:	4650      	mov	r0, sl
 800b808:	4659      	mov	r1, fp
 800b80a:	f7f4 ff0d 	bl	8000628 <__aeabi_dmul>
 800b80e:	a33f      	add	r3, pc, #252	; (adr r3, 800b90c <__kernel_sin+0x15c>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f7f4 fd50 	bl	80002b8 <__aeabi_dsub>
 800b818:	4652      	mov	r2, sl
 800b81a:	465b      	mov	r3, fp
 800b81c:	f7f4 ff04 	bl	8000628 <__aeabi_dmul>
 800b820:	a33c      	add	r3, pc, #240	; (adr r3, 800b914 <__kernel_sin+0x164>)
 800b822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b826:	f7f4 fd49 	bl	80002bc <__adddf3>
 800b82a:	4652      	mov	r2, sl
 800b82c:	465b      	mov	r3, fp
 800b82e:	f7f4 fefb 	bl	8000628 <__aeabi_dmul>
 800b832:	a33a      	add	r3, pc, #232	; (adr r3, 800b91c <__kernel_sin+0x16c>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fd3e 	bl	80002b8 <__aeabi_dsub>
 800b83c:	4652      	mov	r2, sl
 800b83e:	465b      	mov	r3, fp
 800b840:	f7f4 fef2 	bl	8000628 <__aeabi_dmul>
 800b844:	a337      	add	r3, pc, #220	; (adr r3, 800b924 <__kernel_sin+0x174>)
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	f7f4 fd37 	bl	80002bc <__adddf3>
 800b84e:	9b01      	ldr	r3, [sp, #4]
 800b850:	4606      	mov	r6, r0
 800b852:	460f      	mov	r7, r1
 800b854:	b9eb      	cbnz	r3, 800b892 <__kernel_sin+0xe2>
 800b856:	4602      	mov	r2, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	4650      	mov	r0, sl
 800b85c:	4659      	mov	r1, fp
 800b85e:	f7f4 fee3 	bl	8000628 <__aeabi_dmul>
 800b862:	a325      	add	r3, pc, #148	; (adr r3, 800b8f8 <__kernel_sin+0x148>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f7f4 fd26 	bl	80002b8 <__aeabi_dsub>
 800b86c:	4642      	mov	r2, r8
 800b86e:	464b      	mov	r3, r9
 800b870:	f7f4 feda 	bl	8000628 <__aeabi_dmul>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	4620      	mov	r0, r4
 800b87a:	4629      	mov	r1, r5
 800b87c:	f7f4 fd1e 	bl	80002bc <__adddf3>
 800b880:	4604      	mov	r4, r0
 800b882:	460d      	mov	r5, r1
 800b884:	ec45 4b10 	vmov	d0, r4, r5
 800b888:	b003      	add	sp, #12
 800b88a:	ecbd 8b04 	vpop	{d8-d9}
 800b88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b892:	4b1b      	ldr	r3, [pc, #108]	; (800b900 <__kernel_sin+0x150>)
 800b894:	ec51 0b18 	vmov	r0, r1, d8
 800b898:	2200      	movs	r2, #0
 800b89a:	f7f4 fec5 	bl	8000628 <__aeabi_dmul>
 800b89e:	4632      	mov	r2, r6
 800b8a0:	ec41 0b19 	vmov	d9, r0, r1
 800b8a4:	463b      	mov	r3, r7
 800b8a6:	4640      	mov	r0, r8
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	f7f4 febd 	bl	8000628 <__aeabi_dmul>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	ec51 0b19 	vmov	r0, r1, d9
 800b8b6:	f7f4 fcff 	bl	80002b8 <__aeabi_dsub>
 800b8ba:	4652      	mov	r2, sl
 800b8bc:	465b      	mov	r3, fp
 800b8be:	f7f4 feb3 	bl	8000628 <__aeabi_dmul>
 800b8c2:	ec53 2b18 	vmov	r2, r3, d8
 800b8c6:	f7f4 fcf7 	bl	80002b8 <__aeabi_dsub>
 800b8ca:	a30b      	add	r3, pc, #44	; (adr r3, 800b8f8 <__kernel_sin+0x148>)
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	4606      	mov	r6, r0
 800b8d2:	460f      	mov	r7, r1
 800b8d4:	4640      	mov	r0, r8
 800b8d6:	4649      	mov	r1, r9
 800b8d8:	f7f4 fea6 	bl	8000628 <__aeabi_dmul>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	4639      	mov	r1, r7
 800b8e4:	f7f4 fcea 	bl	80002bc <__adddf3>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	f7f4 fce2 	bl	80002b8 <__aeabi_dsub>
 800b8f4:	e7c4      	b.n	800b880 <__kernel_sin+0xd0>
 800b8f6:	bf00      	nop
 800b8f8:	55555549 	.word	0x55555549
 800b8fc:	3fc55555 	.word	0x3fc55555
 800b900:	3fe00000 	.word	0x3fe00000
 800b904:	5acfd57c 	.word	0x5acfd57c
 800b908:	3de5d93a 	.word	0x3de5d93a
 800b90c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b910:	3e5ae5e6 	.word	0x3e5ae5e6
 800b914:	57b1fe7d 	.word	0x57b1fe7d
 800b918:	3ec71de3 	.word	0x3ec71de3
 800b91c:	19c161d5 	.word	0x19c161d5
 800b920:	3f2a01a0 	.word	0x3f2a01a0
 800b924:	1110f8a6 	.word	0x1110f8a6
 800b928:	3f811111 	.word	0x3f811111
 800b92c:	00000000 	.word	0x00000000

0800b930 <__ieee754_atan2>:
 800b930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b934:	ec57 6b11 	vmov	r6, r7, d1
 800b938:	4273      	negs	r3, r6
 800b93a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800bab8 <__ieee754_atan2+0x188>
 800b93e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b942:	4333      	orrs	r3, r6
 800b944:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b948:	4543      	cmp	r3, r8
 800b94a:	ec51 0b10 	vmov	r0, r1, d0
 800b94e:	ee11 5a10 	vmov	r5, s2
 800b952:	d80a      	bhi.n	800b96a <__ieee754_atan2+0x3a>
 800b954:	4244      	negs	r4, r0
 800b956:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b95a:	4304      	orrs	r4, r0
 800b95c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b960:	4544      	cmp	r4, r8
 800b962:	ee10 9a10 	vmov	r9, s0
 800b966:	468e      	mov	lr, r1
 800b968:	d907      	bls.n	800b97a <__ieee754_atan2+0x4a>
 800b96a:	4632      	mov	r2, r6
 800b96c:	463b      	mov	r3, r7
 800b96e:	f7f4 fca5 	bl	80002bc <__adddf3>
 800b972:	ec41 0b10 	vmov	d0, r0, r1
 800b976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b97a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b97e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b982:	4334      	orrs	r4, r6
 800b984:	d103      	bne.n	800b98e <__ieee754_atan2+0x5e>
 800b986:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b98a:	f000 baa1 	b.w	800bed0 <atan>
 800b98e:	17bc      	asrs	r4, r7, #30
 800b990:	f004 0402 	and.w	r4, r4, #2
 800b994:	ea53 0909 	orrs.w	r9, r3, r9
 800b998:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b99c:	d107      	bne.n	800b9ae <__ieee754_atan2+0x7e>
 800b99e:	2c02      	cmp	r4, #2
 800b9a0:	d05f      	beq.n	800ba62 <__ieee754_atan2+0x132>
 800b9a2:	2c03      	cmp	r4, #3
 800b9a4:	d1e5      	bne.n	800b972 <__ieee754_atan2+0x42>
 800b9a6:	a140      	add	r1, pc, #256	; (adr r1, 800baa8 <__ieee754_atan2+0x178>)
 800b9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9ac:	e7e1      	b.n	800b972 <__ieee754_atan2+0x42>
 800b9ae:	4315      	orrs	r5, r2
 800b9b0:	d106      	bne.n	800b9c0 <__ieee754_atan2+0x90>
 800b9b2:	f1be 0f00 	cmp.w	lr, #0
 800b9b6:	da5f      	bge.n	800ba78 <__ieee754_atan2+0x148>
 800b9b8:	a13d      	add	r1, pc, #244	; (adr r1, 800bab0 <__ieee754_atan2+0x180>)
 800b9ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9be:	e7d8      	b.n	800b972 <__ieee754_atan2+0x42>
 800b9c0:	4542      	cmp	r2, r8
 800b9c2:	d10f      	bne.n	800b9e4 <__ieee754_atan2+0xb4>
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b9ca:	d107      	bne.n	800b9dc <__ieee754_atan2+0xac>
 800b9cc:	2c02      	cmp	r4, #2
 800b9ce:	d84c      	bhi.n	800ba6a <__ieee754_atan2+0x13a>
 800b9d0:	4b33      	ldr	r3, [pc, #204]	; (800baa0 <__ieee754_atan2+0x170>)
 800b9d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9da:	e7ca      	b.n	800b972 <__ieee754_atan2+0x42>
 800b9dc:	2c02      	cmp	r4, #2
 800b9de:	d848      	bhi.n	800ba72 <__ieee754_atan2+0x142>
 800b9e0:	4b30      	ldr	r3, [pc, #192]	; (800baa4 <__ieee754_atan2+0x174>)
 800b9e2:	e7f6      	b.n	800b9d2 <__ieee754_atan2+0xa2>
 800b9e4:	4543      	cmp	r3, r8
 800b9e6:	d0e4      	beq.n	800b9b2 <__ieee754_atan2+0x82>
 800b9e8:	1a9b      	subs	r3, r3, r2
 800b9ea:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b9ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b9f2:	da1e      	bge.n	800ba32 <__ieee754_atan2+0x102>
 800b9f4:	2f00      	cmp	r7, #0
 800b9f6:	da01      	bge.n	800b9fc <__ieee754_atan2+0xcc>
 800b9f8:	323c      	adds	r2, #60	; 0x3c
 800b9fa:	db1e      	blt.n	800ba3a <__ieee754_atan2+0x10a>
 800b9fc:	4632      	mov	r2, r6
 800b9fe:	463b      	mov	r3, r7
 800ba00:	f7f4 ff3c 	bl	800087c <__aeabi_ddiv>
 800ba04:	ec41 0b10 	vmov	d0, r0, r1
 800ba08:	f000 fc02 	bl	800c210 <fabs>
 800ba0c:	f000 fa60 	bl	800bed0 <atan>
 800ba10:	ec51 0b10 	vmov	r0, r1, d0
 800ba14:	2c01      	cmp	r4, #1
 800ba16:	d013      	beq.n	800ba40 <__ieee754_atan2+0x110>
 800ba18:	2c02      	cmp	r4, #2
 800ba1a:	d015      	beq.n	800ba48 <__ieee754_atan2+0x118>
 800ba1c:	2c00      	cmp	r4, #0
 800ba1e:	d0a8      	beq.n	800b972 <__ieee754_atan2+0x42>
 800ba20:	a317      	add	r3, pc, #92	; (adr r3, 800ba80 <__ieee754_atan2+0x150>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f7f4 fc47 	bl	80002b8 <__aeabi_dsub>
 800ba2a:	a317      	add	r3, pc, #92	; (adr r3, 800ba88 <__ieee754_atan2+0x158>)
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	e014      	b.n	800ba5c <__ieee754_atan2+0x12c>
 800ba32:	a117      	add	r1, pc, #92	; (adr r1, 800ba90 <__ieee754_atan2+0x160>)
 800ba34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba38:	e7ec      	b.n	800ba14 <__ieee754_atan2+0xe4>
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	e7e9      	b.n	800ba14 <__ieee754_atan2+0xe4>
 800ba40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba44:	4619      	mov	r1, r3
 800ba46:	e794      	b.n	800b972 <__ieee754_atan2+0x42>
 800ba48:	a30d      	add	r3, pc, #52	; (adr r3, 800ba80 <__ieee754_atan2+0x150>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	f7f4 fc33 	bl	80002b8 <__aeabi_dsub>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	a10c      	add	r1, pc, #48	; (adr r1, 800ba88 <__ieee754_atan2+0x158>)
 800ba58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba5c:	f7f4 fc2c 	bl	80002b8 <__aeabi_dsub>
 800ba60:	e787      	b.n	800b972 <__ieee754_atan2+0x42>
 800ba62:	a109      	add	r1, pc, #36	; (adr r1, 800ba88 <__ieee754_atan2+0x158>)
 800ba64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba68:	e783      	b.n	800b972 <__ieee754_atan2+0x42>
 800ba6a:	a10b      	add	r1, pc, #44	; (adr r1, 800ba98 <__ieee754_atan2+0x168>)
 800ba6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba70:	e77f      	b.n	800b972 <__ieee754_atan2+0x42>
 800ba72:	2000      	movs	r0, #0
 800ba74:	2100      	movs	r1, #0
 800ba76:	e77c      	b.n	800b972 <__ieee754_atan2+0x42>
 800ba78:	a105      	add	r1, pc, #20	; (adr r1, 800ba90 <__ieee754_atan2+0x160>)
 800ba7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba7e:	e778      	b.n	800b972 <__ieee754_atan2+0x42>
 800ba80:	33145c07 	.word	0x33145c07
 800ba84:	3ca1a626 	.word	0x3ca1a626
 800ba88:	54442d18 	.word	0x54442d18
 800ba8c:	400921fb 	.word	0x400921fb
 800ba90:	54442d18 	.word	0x54442d18
 800ba94:	3ff921fb 	.word	0x3ff921fb
 800ba98:	54442d18 	.word	0x54442d18
 800ba9c:	3fe921fb 	.word	0x3fe921fb
 800baa0:	0800cfa0 	.word	0x0800cfa0
 800baa4:	0800cfb8 	.word	0x0800cfb8
 800baa8:	54442d18 	.word	0x54442d18
 800baac:	c00921fb 	.word	0xc00921fb
 800bab0:	54442d18 	.word	0x54442d18
 800bab4:	bff921fb 	.word	0xbff921fb
 800bab8:	7ff00000 	.word	0x7ff00000
 800babc:	00000000 	.word	0x00000000

0800bac0 <__ieee754_rem_pio2>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	ed2d 8b02 	vpush	{d8}
 800bac8:	ec55 4b10 	vmov	r4, r5, d0
 800bacc:	4bca      	ldr	r3, [pc, #808]	; (800bdf8 <__ieee754_rem_pio2+0x338>)
 800bace:	b08b      	sub	sp, #44	; 0x2c
 800bad0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bad4:	4598      	cmp	r8, r3
 800bad6:	4682      	mov	sl, r0
 800bad8:	9502      	str	r5, [sp, #8]
 800bada:	dc08      	bgt.n	800baee <__ieee754_rem_pio2+0x2e>
 800badc:	2200      	movs	r2, #0
 800bade:	2300      	movs	r3, #0
 800bae0:	ed80 0b00 	vstr	d0, [r0]
 800bae4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bae8:	f04f 0b00 	mov.w	fp, #0
 800baec:	e028      	b.n	800bb40 <__ieee754_rem_pio2+0x80>
 800baee:	4bc3      	ldr	r3, [pc, #780]	; (800bdfc <__ieee754_rem_pio2+0x33c>)
 800baf0:	4598      	cmp	r8, r3
 800baf2:	dc78      	bgt.n	800bbe6 <__ieee754_rem_pio2+0x126>
 800baf4:	9b02      	ldr	r3, [sp, #8]
 800baf6:	4ec2      	ldr	r6, [pc, #776]	; (800be00 <__ieee754_rem_pio2+0x340>)
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	ee10 0a10 	vmov	r0, s0
 800bafe:	a3b0      	add	r3, pc, #704	; (adr r3, 800bdc0 <__ieee754_rem_pio2+0x300>)
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	4629      	mov	r1, r5
 800bb06:	dd39      	ble.n	800bb7c <__ieee754_rem_pio2+0xbc>
 800bb08:	f7f4 fbd6 	bl	80002b8 <__aeabi_dsub>
 800bb0c:	45b0      	cmp	r8, r6
 800bb0e:	4604      	mov	r4, r0
 800bb10:	460d      	mov	r5, r1
 800bb12:	d01b      	beq.n	800bb4c <__ieee754_rem_pio2+0x8c>
 800bb14:	a3ac      	add	r3, pc, #688	; (adr r3, 800bdc8 <__ieee754_rem_pio2+0x308>)
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	f7f4 fbcd 	bl	80002b8 <__aeabi_dsub>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	e9ca 2300 	strd	r2, r3, [sl]
 800bb26:	4620      	mov	r0, r4
 800bb28:	4629      	mov	r1, r5
 800bb2a:	f7f4 fbc5 	bl	80002b8 <__aeabi_dsub>
 800bb2e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bdc8 <__ieee754_rem_pio2+0x308>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	f7f4 fbc0 	bl	80002b8 <__aeabi_dsub>
 800bb38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bb3c:	f04f 0b01 	mov.w	fp, #1
 800bb40:	4658      	mov	r0, fp
 800bb42:	b00b      	add	sp, #44	; 0x2c
 800bb44:	ecbd 8b02 	vpop	{d8}
 800bb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4c:	a3a0      	add	r3, pc, #640	; (adr r3, 800bdd0 <__ieee754_rem_pio2+0x310>)
 800bb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb52:	f7f4 fbb1 	bl	80002b8 <__aeabi_dsub>
 800bb56:	a3a0      	add	r3, pc, #640	; (adr r3, 800bdd8 <__ieee754_rem_pio2+0x318>)
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	460d      	mov	r5, r1
 800bb60:	f7f4 fbaa 	bl	80002b8 <__aeabi_dsub>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	e9ca 2300 	strd	r2, r3, [sl]
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	4629      	mov	r1, r5
 800bb70:	f7f4 fba2 	bl	80002b8 <__aeabi_dsub>
 800bb74:	a398      	add	r3, pc, #608	; (adr r3, 800bdd8 <__ieee754_rem_pio2+0x318>)
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	e7db      	b.n	800bb34 <__ieee754_rem_pio2+0x74>
 800bb7c:	f7f4 fb9e 	bl	80002bc <__adddf3>
 800bb80:	45b0      	cmp	r8, r6
 800bb82:	4604      	mov	r4, r0
 800bb84:	460d      	mov	r5, r1
 800bb86:	d016      	beq.n	800bbb6 <__ieee754_rem_pio2+0xf6>
 800bb88:	a38f      	add	r3, pc, #572	; (adr r3, 800bdc8 <__ieee754_rem_pio2+0x308>)
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	f7f4 fb95 	bl	80002bc <__adddf3>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	e9ca 2300 	strd	r2, r3, [sl]
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	f7f4 fb8b 	bl	80002b8 <__aeabi_dsub>
 800bba2:	a389      	add	r3, pc, #548	; (adr r3, 800bdc8 <__ieee754_rem_pio2+0x308>)
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f7f4 fb88 	bl	80002bc <__adddf3>
 800bbac:	f04f 3bff 	mov.w	fp, #4294967295
 800bbb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bbb4:	e7c4      	b.n	800bb40 <__ieee754_rem_pio2+0x80>
 800bbb6:	a386      	add	r3, pc, #536	; (adr r3, 800bdd0 <__ieee754_rem_pio2+0x310>)
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f7f4 fb7e 	bl	80002bc <__adddf3>
 800bbc0:	a385      	add	r3, pc, #532	; (adr r3, 800bdd8 <__ieee754_rem_pio2+0x318>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	460d      	mov	r5, r1
 800bbca:	f7f4 fb77 	bl	80002bc <__adddf3>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	e9ca 2300 	strd	r2, r3, [sl]
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4629      	mov	r1, r5
 800bbda:	f7f4 fb6d 	bl	80002b8 <__aeabi_dsub>
 800bbde:	a37e      	add	r3, pc, #504	; (adr r3, 800bdd8 <__ieee754_rem_pio2+0x318>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	e7e0      	b.n	800bba8 <__ieee754_rem_pio2+0xe8>
 800bbe6:	4b87      	ldr	r3, [pc, #540]	; (800be04 <__ieee754_rem_pio2+0x344>)
 800bbe8:	4598      	cmp	r8, r3
 800bbea:	f300 80d8 	bgt.w	800bd9e <__ieee754_rem_pio2+0x2de>
 800bbee:	f000 fb0f 	bl	800c210 <fabs>
 800bbf2:	ec55 4b10 	vmov	r4, r5, d0
 800bbf6:	ee10 0a10 	vmov	r0, s0
 800bbfa:	a379      	add	r3, pc, #484	; (adr r3, 800bde0 <__ieee754_rem_pio2+0x320>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	4629      	mov	r1, r5
 800bc02:	f7f4 fd11 	bl	8000628 <__aeabi_dmul>
 800bc06:	4b80      	ldr	r3, [pc, #512]	; (800be08 <__ieee754_rem_pio2+0x348>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f7f4 fb57 	bl	80002bc <__adddf3>
 800bc0e:	f7f4 ffbb 	bl	8000b88 <__aeabi_d2iz>
 800bc12:	4683      	mov	fp, r0
 800bc14:	f7f4 fc9e 	bl	8000554 <__aeabi_i2d>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	ec43 2b18 	vmov	d8, r2, r3
 800bc20:	a367      	add	r3, pc, #412	; (adr r3, 800bdc0 <__ieee754_rem_pio2+0x300>)
 800bc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc26:	f7f4 fcff 	bl	8000628 <__aeabi_dmul>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	4620      	mov	r0, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	f7f4 fb41 	bl	80002b8 <__aeabi_dsub>
 800bc36:	a364      	add	r3, pc, #400	; (adr r3, 800bdc8 <__ieee754_rem_pio2+0x308>)
 800bc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	460f      	mov	r7, r1
 800bc40:	ec51 0b18 	vmov	r0, r1, d8
 800bc44:	f7f4 fcf0 	bl	8000628 <__aeabi_dmul>
 800bc48:	f1bb 0f1f 	cmp.w	fp, #31
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	460d      	mov	r5, r1
 800bc50:	dc0d      	bgt.n	800bc6e <__ieee754_rem_pio2+0x1ae>
 800bc52:	4b6e      	ldr	r3, [pc, #440]	; (800be0c <__ieee754_rem_pio2+0x34c>)
 800bc54:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5c:	4543      	cmp	r3, r8
 800bc5e:	d006      	beq.n	800bc6e <__ieee754_rem_pio2+0x1ae>
 800bc60:	4622      	mov	r2, r4
 800bc62:	462b      	mov	r3, r5
 800bc64:	4630      	mov	r0, r6
 800bc66:	4639      	mov	r1, r7
 800bc68:	f7f4 fb26 	bl	80002b8 <__aeabi_dsub>
 800bc6c:	e00e      	b.n	800bc8c <__ieee754_rem_pio2+0x1cc>
 800bc6e:	462b      	mov	r3, r5
 800bc70:	4622      	mov	r2, r4
 800bc72:	4630      	mov	r0, r6
 800bc74:	4639      	mov	r1, r7
 800bc76:	f7f4 fb1f 	bl	80002b8 <__aeabi_dsub>
 800bc7a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bc7e:	9303      	str	r3, [sp, #12]
 800bc80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc84:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800bc88:	2b10      	cmp	r3, #16
 800bc8a:	dc02      	bgt.n	800bc92 <__ieee754_rem_pio2+0x1d2>
 800bc8c:	e9ca 0100 	strd	r0, r1, [sl]
 800bc90:	e039      	b.n	800bd06 <__ieee754_rem_pio2+0x246>
 800bc92:	a34f      	add	r3, pc, #316	; (adr r3, 800bdd0 <__ieee754_rem_pio2+0x310>)
 800bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc98:	ec51 0b18 	vmov	r0, r1, d8
 800bc9c:	f7f4 fcc4 	bl	8000628 <__aeabi_dmul>
 800bca0:	4604      	mov	r4, r0
 800bca2:	460d      	mov	r5, r1
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4630      	mov	r0, r6
 800bcaa:	4639      	mov	r1, r7
 800bcac:	f7f4 fb04 	bl	80002b8 <__aeabi_dsub>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	4689      	mov	r9, r1
 800bcb8:	4630      	mov	r0, r6
 800bcba:	4639      	mov	r1, r7
 800bcbc:	f7f4 fafc 	bl	80002b8 <__aeabi_dsub>
 800bcc0:	4622      	mov	r2, r4
 800bcc2:	462b      	mov	r3, r5
 800bcc4:	f7f4 faf8 	bl	80002b8 <__aeabi_dsub>
 800bcc8:	a343      	add	r3, pc, #268	; (adr r3, 800bdd8 <__ieee754_rem_pio2+0x318>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	4604      	mov	r4, r0
 800bcd0:	460d      	mov	r5, r1
 800bcd2:	ec51 0b18 	vmov	r0, r1, d8
 800bcd6:	f7f4 fca7 	bl	8000628 <__aeabi_dmul>
 800bcda:	4622      	mov	r2, r4
 800bcdc:	462b      	mov	r3, r5
 800bcde:	f7f4 faeb 	bl	80002b8 <__aeabi_dsub>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4604      	mov	r4, r0
 800bce8:	460d      	mov	r5, r1
 800bcea:	4640      	mov	r0, r8
 800bcec:	4649      	mov	r1, r9
 800bcee:	f7f4 fae3 	bl	80002b8 <__aeabi_dsub>
 800bcf2:	9a03      	ldr	r2, [sp, #12]
 800bcf4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	2b31      	cmp	r3, #49	; 0x31
 800bcfc:	dc24      	bgt.n	800bd48 <__ieee754_rem_pio2+0x288>
 800bcfe:	e9ca 0100 	strd	r0, r1, [sl]
 800bd02:	4646      	mov	r6, r8
 800bd04:	464f      	mov	r7, r9
 800bd06:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	4642      	mov	r2, r8
 800bd0e:	464b      	mov	r3, r9
 800bd10:	4639      	mov	r1, r7
 800bd12:	f7f4 fad1 	bl	80002b8 <__aeabi_dsub>
 800bd16:	462b      	mov	r3, r5
 800bd18:	4622      	mov	r2, r4
 800bd1a:	f7f4 facd 	bl	80002b8 <__aeabi_dsub>
 800bd1e:	9b02      	ldr	r3, [sp, #8]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bd26:	f6bf af0b 	bge.w	800bb40 <__ieee754_rem_pio2+0x80>
 800bd2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bd2e:	f8ca 3004 	str.w	r3, [sl, #4]
 800bd32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd36:	f8ca 8000 	str.w	r8, [sl]
 800bd3a:	f8ca 0008 	str.w	r0, [sl, #8]
 800bd3e:	f8ca 300c 	str.w	r3, [sl, #12]
 800bd42:	f1cb 0b00 	rsb	fp, fp, #0
 800bd46:	e6fb      	b.n	800bb40 <__ieee754_rem_pio2+0x80>
 800bd48:	a327      	add	r3, pc, #156	; (adr r3, 800bde8 <__ieee754_rem_pio2+0x328>)
 800bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4e:	ec51 0b18 	vmov	r0, r1, d8
 800bd52:	f7f4 fc69 	bl	8000628 <__aeabi_dmul>
 800bd56:	4604      	mov	r4, r0
 800bd58:	460d      	mov	r5, r1
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4640      	mov	r0, r8
 800bd60:	4649      	mov	r1, r9
 800bd62:	f7f4 faa9 	bl	80002b8 <__aeabi_dsub>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	4640      	mov	r0, r8
 800bd70:	4649      	mov	r1, r9
 800bd72:	f7f4 faa1 	bl	80002b8 <__aeabi_dsub>
 800bd76:	4622      	mov	r2, r4
 800bd78:	462b      	mov	r3, r5
 800bd7a:	f7f4 fa9d 	bl	80002b8 <__aeabi_dsub>
 800bd7e:	a31c      	add	r3, pc, #112	; (adr r3, 800bdf0 <__ieee754_rem_pio2+0x330>)
 800bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd84:	4604      	mov	r4, r0
 800bd86:	460d      	mov	r5, r1
 800bd88:	ec51 0b18 	vmov	r0, r1, d8
 800bd8c:	f7f4 fc4c 	bl	8000628 <__aeabi_dmul>
 800bd90:	4622      	mov	r2, r4
 800bd92:	462b      	mov	r3, r5
 800bd94:	f7f4 fa90 	bl	80002b8 <__aeabi_dsub>
 800bd98:	4604      	mov	r4, r0
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	e760      	b.n	800bc60 <__ieee754_rem_pio2+0x1a0>
 800bd9e:	4b1c      	ldr	r3, [pc, #112]	; (800be10 <__ieee754_rem_pio2+0x350>)
 800bda0:	4598      	cmp	r8, r3
 800bda2:	dd37      	ble.n	800be14 <__ieee754_rem_pio2+0x354>
 800bda4:	ee10 2a10 	vmov	r2, s0
 800bda8:	462b      	mov	r3, r5
 800bdaa:	4620      	mov	r0, r4
 800bdac:	4629      	mov	r1, r5
 800bdae:	f7f4 fa83 	bl	80002b8 <__aeabi_dsub>
 800bdb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bdb6:	e9ca 0100 	strd	r0, r1, [sl]
 800bdba:	e695      	b.n	800bae8 <__ieee754_rem_pio2+0x28>
 800bdbc:	f3af 8000 	nop.w
 800bdc0:	54400000 	.word	0x54400000
 800bdc4:	3ff921fb 	.word	0x3ff921fb
 800bdc8:	1a626331 	.word	0x1a626331
 800bdcc:	3dd0b461 	.word	0x3dd0b461
 800bdd0:	1a600000 	.word	0x1a600000
 800bdd4:	3dd0b461 	.word	0x3dd0b461
 800bdd8:	2e037073 	.word	0x2e037073
 800bddc:	3ba3198a 	.word	0x3ba3198a
 800bde0:	6dc9c883 	.word	0x6dc9c883
 800bde4:	3fe45f30 	.word	0x3fe45f30
 800bde8:	2e000000 	.word	0x2e000000
 800bdec:	3ba3198a 	.word	0x3ba3198a
 800bdf0:	252049c1 	.word	0x252049c1
 800bdf4:	397b839a 	.word	0x397b839a
 800bdf8:	3fe921fb 	.word	0x3fe921fb
 800bdfc:	4002d97b 	.word	0x4002d97b
 800be00:	3ff921fb 	.word	0x3ff921fb
 800be04:	413921fb 	.word	0x413921fb
 800be08:	3fe00000 	.word	0x3fe00000
 800be0c:	0800cfd0 	.word	0x0800cfd0
 800be10:	7fefffff 	.word	0x7fefffff
 800be14:	ea4f 5628 	mov.w	r6, r8, asr #20
 800be18:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800be1c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800be20:	4620      	mov	r0, r4
 800be22:	460d      	mov	r5, r1
 800be24:	f7f4 feb0 	bl	8000b88 <__aeabi_d2iz>
 800be28:	f7f4 fb94 	bl	8000554 <__aeabi_i2d>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4620      	mov	r0, r4
 800be32:	4629      	mov	r1, r5
 800be34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be38:	f7f4 fa3e 	bl	80002b8 <__aeabi_dsub>
 800be3c:	4b21      	ldr	r3, [pc, #132]	; (800bec4 <__ieee754_rem_pio2+0x404>)
 800be3e:	2200      	movs	r2, #0
 800be40:	f7f4 fbf2 	bl	8000628 <__aeabi_dmul>
 800be44:	460d      	mov	r5, r1
 800be46:	4604      	mov	r4, r0
 800be48:	f7f4 fe9e 	bl	8000b88 <__aeabi_d2iz>
 800be4c:	f7f4 fb82 	bl	8000554 <__aeabi_i2d>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	4620      	mov	r0, r4
 800be56:	4629      	mov	r1, r5
 800be58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be5c:	f7f4 fa2c 	bl	80002b8 <__aeabi_dsub>
 800be60:	4b18      	ldr	r3, [pc, #96]	; (800bec4 <__ieee754_rem_pio2+0x404>)
 800be62:	2200      	movs	r2, #0
 800be64:	f7f4 fbe0 	bl	8000628 <__aeabi_dmul>
 800be68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be6c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800be70:	2703      	movs	r7, #3
 800be72:	2400      	movs	r4, #0
 800be74:	2500      	movs	r5, #0
 800be76:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800be7a:	4622      	mov	r2, r4
 800be7c:	462b      	mov	r3, r5
 800be7e:	46b9      	mov	r9, r7
 800be80:	3f01      	subs	r7, #1
 800be82:	f7f4 fe39 	bl	8000af8 <__aeabi_dcmpeq>
 800be86:	2800      	cmp	r0, #0
 800be88:	d1f5      	bne.n	800be76 <__ieee754_rem_pio2+0x3b6>
 800be8a:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <__ieee754_rem_pio2+0x408>)
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	2302      	movs	r3, #2
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	4632      	mov	r2, r6
 800be94:	464b      	mov	r3, r9
 800be96:	4651      	mov	r1, sl
 800be98:	a804      	add	r0, sp, #16
 800be9a:	f000 f9c5 	bl	800c228 <__kernel_rem_pio2>
 800be9e:	9b02      	ldr	r3, [sp, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	4683      	mov	fp, r0
 800bea4:	f6bf ae4c 	bge.w	800bb40 <__ieee754_rem_pio2+0x80>
 800bea8:	e9da 2100 	ldrd	r2, r1, [sl]
 800beac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800beb0:	e9ca 2300 	strd	r2, r3, [sl]
 800beb4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800beb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bebc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bec0:	e73f      	b.n	800bd42 <__ieee754_rem_pio2+0x282>
 800bec2:	bf00      	nop
 800bec4:	41700000 	.word	0x41700000
 800bec8:	0800d050 	.word	0x0800d050
 800becc:	00000000 	.word	0x00000000

0800bed0 <atan>:
 800bed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed4:	ec55 4b10 	vmov	r4, r5, d0
 800bed8:	4bc3      	ldr	r3, [pc, #780]	; (800c1e8 <atan+0x318>)
 800beda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bede:	429e      	cmp	r6, r3
 800bee0:	46ab      	mov	fp, r5
 800bee2:	dd18      	ble.n	800bf16 <atan+0x46>
 800bee4:	4bc1      	ldr	r3, [pc, #772]	; (800c1ec <atan+0x31c>)
 800bee6:	429e      	cmp	r6, r3
 800bee8:	dc01      	bgt.n	800beee <atan+0x1e>
 800beea:	d109      	bne.n	800bf00 <atan+0x30>
 800beec:	b144      	cbz	r4, 800bf00 <atan+0x30>
 800beee:	4622      	mov	r2, r4
 800bef0:	462b      	mov	r3, r5
 800bef2:	4620      	mov	r0, r4
 800bef4:	4629      	mov	r1, r5
 800bef6:	f7f4 f9e1 	bl	80002bc <__adddf3>
 800befa:	4604      	mov	r4, r0
 800befc:	460d      	mov	r5, r1
 800befe:	e006      	b.n	800bf0e <atan+0x3e>
 800bf00:	f1bb 0f00 	cmp.w	fp, #0
 800bf04:	f300 8131 	bgt.w	800c16a <atan+0x29a>
 800bf08:	a59b      	add	r5, pc, #620	; (adr r5, 800c178 <atan+0x2a8>)
 800bf0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf0e:	ec45 4b10 	vmov	d0, r4, r5
 800bf12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf16:	4bb6      	ldr	r3, [pc, #728]	; (800c1f0 <atan+0x320>)
 800bf18:	429e      	cmp	r6, r3
 800bf1a:	dc14      	bgt.n	800bf46 <atan+0x76>
 800bf1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bf20:	429e      	cmp	r6, r3
 800bf22:	dc0d      	bgt.n	800bf40 <atan+0x70>
 800bf24:	a396      	add	r3, pc, #600	; (adr r3, 800c180 <atan+0x2b0>)
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	ee10 0a10 	vmov	r0, s0
 800bf2e:	4629      	mov	r1, r5
 800bf30:	f7f4 f9c4 	bl	80002bc <__adddf3>
 800bf34:	4baf      	ldr	r3, [pc, #700]	; (800c1f4 <atan+0x324>)
 800bf36:	2200      	movs	r2, #0
 800bf38:	f7f4 fe06 	bl	8000b48 <__aeabi_dcmpgt>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d1e6      	bne.n	800bf0e <atan+0x3e>
 800bf40:	f04f 3aff 	mov.w	sl, #4294967295
 800bf44:	e02b      	b.n	800bf9e <atan+0xce>
 800bf46:	f000 f963 	bl	800c210 <fabs>
 800bf4a:	4bab      	ldr	r3, [pc, #684]	; (800c1f8 <atan+0x328>)
 800bf4c:	429e      	cmp	r6, r3
 800bf4e:	ec55 4b10 	vmov	r4, r5, d0
 800bf52:	f300 80bf 	bgt.w	800c0d4 <atan+0x204>
 800bf56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bf5a:	429e      	cmp	r6, r3
 800bf5c:	f300 80a0 	bgt.w	800c0a0 <atan+0x1d0>
 800bf60:	ee10 2a10 	vmov	r2, s0
 800bf64:	ee10 0a10 	vmov	r0, s0
 800bf68:	462b      	mov	r3, r5
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	f7f4 f9a6 	bl	80002bc <__adddf3>
 800bf70:	4ba0      	ldr	r3, [pc, #640]	; (800c1f4 <atan+0x324>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	f7f4 f9a0 	bl	80002b8 <__aeabi_dsub>
 800bf78:	2200      	movs	r2, #0
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	460f      	mov	r7, r1
 800bf7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf82:	4620      	mov	r0, r4
 800bf84:	4629      	mov	r1, r5
 800bf86:	f7f4 f999 	bl	80002bc <__adddf3>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4630      	mov	r0, r6
 800bf90:	4639      	mov	r1, r7
 800bf92:	f7f4 fc73 	bl	800087c <__aeabi_ddiv>
 800bf96:	f04f 0a00 	mov.w	sl, #0
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	4622      	mov	r2, r4
 800bfa0:	462b      	mov	r3, r5
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	f7f4 fb3f 	bl	8000628 <__aeabi_dmul>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	4680      	mov	r8, r0
 800bfb0:	4689      	mov	r9, r1
 800bfb2:	f7f4 fb39 	bl	8000628 <__aeabi_dmul>
 800bfb6:	a374      	add	r3, pc, #464	; (adr r3, 800c188 <atan+0x2b8>)
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	460f      	mov	r7, r1
 800bfc0:	f7f4 fb32 	bl	8000628 <__aeabi_dmul>
 800bfc4:	a372      	add	r3, pc, #456	; (adr r3, 800c190 <atan+0x2c0>)
 800bfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfca:	f7f4 f977 	bl	80002bc <__adddf3>
 800bfce:	4632      	mov	r2, r6
 800bfd0:	463b      	mov	r3, r7
 800bfd2:	f7f4 fb29 	bl	8000628 <__aeabi_dmul>
 800bfd6:	a370      	add	r3, pc, #448	; (adr r3, 800c198 <atan+0x2c8>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	f7f4 f96e 	bl	80002bc <__adddf3>
 800bfe0:	4632      	mov	r2, r6
 800bfe2:	463b      	mov	r3, r7
 800bfe4:	f7f4 fb20 	bl	8000628 <__aeabi_dmul>
 800bfe8:	a36d      	add	r3, pc, #436	; (adr r3, 800c1a0 <atan+0x2d0>)
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	f7f4 f965 	bl	80002bc <__adddf3>
 800bff2:	4632      	mov	r2, r6
 800bff4:	463b      	mov	r3, r7
 800bff6:	f7f4 fb17 	bl	8000628 <__aeabi_dmul>
 800bffa:	a36b      	add	r3, pc, #428	; (adr r3, 800c1a8 <atan+0x2d8>)
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	f7f4 f95c 	bl	80002bc <__adddf3>
 800c004:	4632      	mov	r2, r6
 800c006:	463b      	mov	r3, r7
 800c008:	f7f4 fb0e 	bl	8000628 <__aeabi_dmul>
 800c00c:	a368      	add	r3, pc, #416	; (adr r3, 800c1b0 <atan+0x2e0>)
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	f7f4 f953 	bl	80002bc <__adddf3>
 800c016:	4642      	mov	r2, r8
 800c018:	464b      	mov	r3, r9
 800c01a:	f7f4 fb05 	bl	8000628 <__aeabi_dmul>
 800c01e:	a366      	add	r3, pc, #408	; (adr r3, 800c1b8 <atan+0x2e8>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	4680      	mov	r8, r0
 800c026:	4689      	mov	r9, r1
 800c028:	4630      	mov	r0, r6
 800c02a:	4639      	mov	r1, r7
 800c02c:	f7f4 fafc 	bl	8000628 <__aeabi_dmul>
 800c030:	a363      	add	r3, pc, #396	; (adr r3, 800c1c0 <atan+0x2f0>)
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	f7f4 f93f 	bl	80002b8 <__aeabi_dsub>
 800c03a:	4632      	mov	r2, r6
 800c03c:	463b      	mov	r3, r7
 800c03e:	f7f4 faf3 	bl	8000628 <__aeabi_dmul>
 800c042:	a361      	add	r3, pc, #388	; (adr r3, 800c1c8 <atan+0x2f8>)
 800c044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c048:	f7f4 f936 	bl	80002b8 <__aeabi_dsub>
 800c04c:	4632      	mov	r2, r6
 800c04e:	463b      	mov	r3, r7
 800c050:	f7f4 faea 	bl	8000628 <__aeabi_dmul>
 800c054:	a35e      	add	r3, pc, #376	; (adr r3, 800c1d0 <atan+0x300>)
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	f7f4 f92d 	bl	80002b8 <__aeabi_dsub>
 800c05e:	4632      	mov	r2, r6
 800c060:	463b      	mov	r3, r7
 800c062:	f7f4 fae1 	bl	8000628 <__aeabi_dmul>
 800c066:	a35c      	add	r3, pc, #368	; (adr r3, 800c1d8 <atan+0x308>)
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	f7f4 f924 	bl	80002b8 <__aeabi_dsub>
 800c070:	4632      	mov	r2, r6
 800c072:	463b      	mov	r3, r7
 800c074:	f7f4 fad8 	bl	8000628 <__aeabi_dmul>
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4640      	mov	r0, r8
 800c07e:	4649      	mov	r1, r9
 800c080:	f7f4 f91c 	bl	80002bc <__adddf3>
 800c084:	4622      	mov	r2, r4
 800c086:	462b      	mov	r3, r5
 800c088:	f7f4 face 	bl	8000628 <__aeabi_dmul>
 800c08c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	d14b      	bne.n	800c12e <atan+0x25e>
 800c096:	4620      	mov	r0, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	f7f4 f90d 	bl	80002b8 <__aeabi_dsub>
 800c09e:	e72c      	b.n	800befa <atan+0x2a>
 800c0a0:	ee10 0a10 	vmov	r0, s0
 800c0a4:	4b53      	ldr	r3, [pc, #332]	; (800c1f4 <atan+0x324>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	f7f4 f905 	bl	80002b8 <__aeabi_dsub>
 800c0ae:	4b51      	ldr	r3, [pc, #324]	; (800c1f4 <atan+0x324>)
 800c0b0:	4606      	mov	r6, r0
 800c0b2:	460f      	mov	r7, r1
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	f7f4 f8ff 	bl	80002bc <__adddf3>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	4639      	mov	r1, r7
 800c0c6:	f7f4 fbd9 	bl	800087c <__aeabi_ddiv>
 800c0ca:	f04f 0a01 	mov.w	sl, #1
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	460d      	mov	r5, r1
 800c0d2:	e764      	b.n	800bf9e <atan+0xce>
 800c0d4:	4b49      	ldr	r3, [pc, #292]	; (800c1fc <atan+0x32c>)
 800c0d6:	429e      	cmp	r6, r3
 800c0d8:	da1d      	bge.n	800c116 <atan+0x246>
 800c0da:	ee10 0a10 	vmov	r0, s0
 800c0de:	4b48      	ldr	r3, [pc, #288]	; (800c200 <atan+0x330>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	f7f4 f8e8 	bl	80002b8 <__aeabi_dsub>
 800c0e8:	4b45      	ldr	r3, [pc, #276]	; (800c200 <atan+0x330>)
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	f7f4 fa98 	bl	8000628 <__aeabi_dmul>
 800c0f8:	4b3e      	ldr	r3, [pc, #248]	; (800c1f4 <atan+0x324>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f7f4 f8de 	bl	80002bc <__adddf3>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4630      	mov	r0, r6
 800c106:	4639      	mov	r1, r7
 800c108:	f7f4 fbb8 	bl	800087c <__aeabi_ddiv>
 800c10c:	f04f 0a02 	mov.w	sl, #2
 800c110:	4604      	mov	r4, r0
 800c112:	460d      	mov	r5, r1
 800c114:	e743      	b.n	800bf9e <atan+0xce>
 800c116:	462b      	mov	r3, r5
 800c118:	ee10 2a10 	vmov	r2, s0
 800c11c:	4939      	ldr	r1, [pc, #228]	; (800c204 <atan+0x334>)
 800c11e:	2000      	movs	r0, #0
 800c120:	f7f4 fbac 	bl	800087c <__aeabi_ddiv>
 800c124:	f04f 0a03 	mov.w	sl, #3
 800c128:	4604      	mov	r4, r0
 800c12a:	460d      	mov	r5, r1
 800c12c:	e737      	b.n	800bf9e <atan+0xce>
 800c12e:	4b36      	ldr	r3, [pc, #216]	; (800c208 <atan+0x338>)
 800c130:	4e36      	ldr	r6, [pc, #216]	; (800c20c <atan+0x33c>)
 800c132:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	f7f4 f8bd 	bl	80002b8 <__aeabi_dsub>
 800c13e:	4622      	mov	r2, r4
 800c140:	462b      	mov	r3, r5
 800c142:	f7f4 f8b9 	bl	80002b8 <__aeabi_dsub>
 800c146:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c152:	f7f4 f8b1 	bl	80002b8 <__aeabi_dsub>
 800c156:	f1bb 0f00 	cmp.w	fp, #0
 800c15a:	4604      	mov	r4, r0
 800c15c:	460d      	mov	r5, r1
 800c15e:	f6bf aed6 	bge.w	800bf0e <atan+0x3e>
 800c162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c166:	461d      	mov	r5, r3
 800c168:	e6d1      	b.n	800bf0e <atan+0x3e>
 800c16a:	a51d      	add	r5, pc, #116	; (adr r5, 800c1e0 <atan+0x310>)
 800c16c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c170:	e6cd      	b.n	800bf0e <atan+0x3e>
 800c172:	bf00      	nop
 800c174:	f3af 8000 	nop.w
 800c178:	54442d18 	.word	0x54442d18
 800c17c:	bff921fb 	.word	0xbff921fb
 800c180:	8800759c 	.word	0x8800759c
 800c184:	7e37e43c 	.word	0x7e37e43c
 800c188:	e322da11 	.word	0xe322da11
 800c18c:	3f90ad3a 	.word	0x3f90ad3a
 800c190:	24760deb 	.word	0x24760deb
 800c194:	3fa97b4b 	.word	0x3fa97b4b
 800c198:	a0d03d51 	.word	0xa0d03d51
 800c19c:	3fb10d66 	.word	0x3fb10d66
 800c1a0:	c54c206e 	.word	0xc54c206e
 800c1a4:	3fb745cd 	.word	0x3fb745cd
 800c1a8:	920083ff 	.word	0x920083ff
 800c1ac:	3fc24924 	.word	0x3fc24924
 800c1b0:	5555550d 	.word	0x5555550d
 800c1b4:	3fd55555 	.word	0x3fd55555
 800c1b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c1bc:	bfa2b444 	.word	0xbfa2b444
 800c1c0:	52defd9a 	.word	0x52defd9a
 800c1c4:	3fadde2d 	.word	0x3fadde2d
 800c1c8:	af749a6d 	.word	0xaf749a6d
 800c1cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c1d0:	fe231671 	.word	0xfe231671
 800c1d4:	3fbc71c6 	.word	0x3fbc71c6
 800c1d8:	9998ebc4 	.word	0x9998ebc4
 800c1dc:	3fc99999 	.word	0x3fc99999
 800c1e0:	54442d18 	.word	0x54442d18
 800c1e4:	3ff921fb 	.word	0x3ff921fb
 800c1e8:	440fffff 	.word	0x440fffff
 800c1ec:	7ff00000 	.word	0x7ff00000
 800c1f0:	3fdbffff 	.word	0x3fdbffff
 800c1f4:	3ff00000 	.word	0x3ff00000
 800c1f8:	3ff2ffff 	.word	0x3ff2ffff
 800c1fc:	40038000 	.word	0x40038000
 800c200:	3ff80000 	.word	0x3ff80000
 800c204:	bff00000 	.word	0xbff00000
 800c208:	0800d178 	.word	0x0800d178
 800c20c:	0800d158 	.word	0x0800d158

0800c210 <fabs>:
 800c210:	ec51 0b10 	vmov	r0, r1, d0
 800c214:	ee10 2a10 	vmov	r2, s0
 800c218:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c21c:	ec43 2b10 	vmov	d0, r2, r3
 800c220:	4770      	bx	lr
 800c222:	0000      	movs	r0, r0
 800c224:	0000      	movs	r0, r0
	...

0800c228 <__kernel_rem_pio2>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	ed2d 8b02 	vpush	{d8}
 800c230:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c234:	f112 0f14 	cmn.w	r2, #20
 800c238:	9306      	str	r3, [sp, #24]
 800c23a:	9104      	str	r1, [sp, #16]
 800c23c:	4bc2      	ldr	r3, [pc, #776]	; (800c548 <__kernel_rem_pio2+0x320>)
 800c23e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c240:	9009      	str	r0, [sp, #36]	; 0x24
 800c242:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	9b06      	ldr	r3, [sp, #24]
 800c24a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c24e:	bfa8      	it	ge
 800c250:	1ed4      	subge	r4, r2, #3
 800c252:	9305      	str	r3, [sp, #20]
 800c254:	bfb2      	itee	lt
 800c256:	2400      	movlt	r4, #0
 800c258:	2318      	movge	r3, #24
 800c25a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c25e:	f06f 0317 	mvn.w	r3, #23
 800c262:	fb04 3303 	mla	r3, r4, r3, r3
 800c266:	eb03 0a02 	add.w	sl, r3, r2
 800c26a:	9b00      	ldr	r3, [sp, #0]
 800c26c:	9a05      	ldr	r2, [sp, #20]
 800c26e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800c538 <__kernel_rem_pio2+0x310>
 800c272:	eb03 0802 	add.w	r8, r3, r2
 800c276:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c278:	1aa7      	subs	r7, r4, r2
 800c27a:	ae20      	add	r6, sp, #128	; 0x80
 800c27c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c280:	2500      	movs	r5, #0
 800c282:	4545      	cmp	r5, r8
 800c284:	dd13      	ble.n	800c2ae <__kernel_rem_pio2+0x86>
 800c286:	9b06      	ldr	r3, [sp, #24]
 800c288:	aa20      	add	r2, sp, #128	; 0x80
 800c28a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c28e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c292:	f04f 0800 	mov.w	r8, #0
 800c296:	9b00      	ldr	r3, [sp, #0]
 800c298:	4598      	cmp	r8, r3
 800c29a:	dc31      	bgt.n	800c300 <__kernel_rem_pio2+0xd8>
 800c29c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800c538 <__kernel_rem_pio2+0x310>
 800c2a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c2a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2a8:	462f      	mov	r7, r5
 800c2aa:	2600      	movs	r6, #0
 800c2ac:	e01b      	b.n	800c2e6 <__kernel_rem_pio2+0xbe>
 800c2ae:	42ef      	cmn	r7, r5
 800c2b0:	d407      	bmi.n	800c2c2 <__kernel_rem_pio2+0x9a>
 800c2b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c2b6:	f7f4 f94d 	bl	8000554 <__aeabi_i2d>
 800c2ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c2be:	3501      	adds	r5, #1
 800c2c0:	e7df      	b.n	800c282 <__kernel_rem_pio2+0x5a>
 800c2c2:	ec51 0b18 	vmov	r0, r1, d8
 800c2c6:	e7f8      	b.n	800c2ba <__kernel_rem_pio2+0x92>
 800c2c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c2d0:	f7f4 f9aa 	bl	8000628 <__aeabi_dmul>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2dc:	f7f3 ffee 	bl	80002bc <__adddf3>
 800c2e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2e4:	3601      	adds	r6, #1
 800c2e6:	9b05      	ldr	r3, [sp, #20]
 800c2e8:	429e      	cmp	r6, r3
 800c2ea:	f1a7 0708 	sub.w	r7, r7, #8
 800c2ee:	ddeb      	ble.n	800c2c8 <__kernel_rem_pio2+0xa0>
 800c2f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2f4:	f108 0801 	add.w	r8, r8, #1
 800c2f8:	ecab 7b02 	vstmia	fp!, {d7}
 800c2fc:	3508      	adds	r5, #8
 800c2fe:	e7ca      	b.n	800c296 <__kernel_rem_pio2+0x6e>
 800c300:	9b00      	ldr	r3, [sp, #0]
 800c302:	aa0c      	add	r2, sp, #48	; 0x30
 800c304:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c308:	930b      	str	r3, [sp, #44]	; 0x2c
 800c30a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c30c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c310:	9c00      	ldr	r4, [sp, #0]
 800c312:	930a      	str	r3, [sp, #40]	; 0x28
 800c314:	00e3      	lsls	r3, r4, #3
 800c316:	9308      	str	r3, [sp, #32]
 800c318:	ab98      	add	r3, sp, #608	; 0x260
 800c31a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c31e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c322:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800c326:	ab70      	add	r3, sp, #448	; 0x1c0
 800c328:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c32c:	46c3      	mov	fp, r8
 800c32e:	46a1      	mov	r9, r4
 800c330:	f1b9 0f00 	cmp.w	r9, #0
 800c334:	f1a5 0508 	sub.w	r5, r5, #8
 800c338:	dc77      	bgt.n	800c42a <__kernel_rem_pio2+0x202>
 800c33a:	ec47 6b10 	vmov	d0, r6, r7
 800c33e:	4650      	mov	r0, sl
 800c340:	f000 fac2 	bl	800c8c8 <scalbn>
 800c344:	ec57 6b10 	vmov	r6, r7, d0
 800c348:	2200      	movs	r2, #0
 800c34a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c34e:	ee10 0a10 	vmov	r0, s0
 800c352:	4639      	mov	r1, r7
 800c354:	f7f4 f968 	bl	8000628 <__aeabi_dmul>
 800c358:	ec41 0b10 	vmov	d0, r0, r1
 800c35c:	f000 fb34 	bl	800c9c8 <floor>
 800c360:	4b7a      	ldr	r3, [pc, #488]	; (800c54c <__kernel_rem_pio2+0x324>)
 800c362:	ec51 0b10 	vmov	r0, r1, d0
 800c366:	2200      	movs	r2, #0
 800c368:	f7f4 f95e 	bl	8000628 <__aeabi_dmul>
 800c36c:	4602      	mov	r2, r0
 800c36e:	460b      	mov	r3, r1
 800c370:	4630      	mov	r0, r6
 800c372:	4639      	mov	r1, r7
 800c374:	f7f3 ffa0 	bl	80002b8 <__aeabi_dsub>
 800c378:	460f      	mov	r7, r1
 800c37a:	4606      	mov	r6, r0
 800c37c:	f7f4 fc04 	bl	8000b88 <__aeabi_d2iz>
 800c380:	9002      	str	r0, [sp, #8]
 800c382:	f7f4 f8e7 	bl	8000554 <__aeabi_i2d>
 800c386:	4602      	mov	r2, r0
 800c388:	460b      	mov	r3, r1
 800c38a:	4630      	mov	r0, r6
 800c38c:	4639      	mov	r1, r7
 800c38e:	f7f3 ff93 	bl	80002b8 <__aeabi_dsub>
 800c392:	f1ba 0f00 	cmp.w	sl, #0
 800c396:	4606      	mov	r6, r0
 800c398:	460f      	mov	r7, r1
 800c39a:	dd6d      	ble.n	800c478 <__kernel_rem_pio2+0x250>
 800c39c:	1e61      	subs	r1, r4, #1
 800c39e:	ab0c      	add	r3, sp, #48	; 0x30
 800c3a0:	9d02      	ldr	r5, [sp, #8]
 800c3a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3a6:	f1ca 0018 	rsb	r0, sl, #24
 800c3aa:	fa43 f200 	asr.w	r2, r3, r0
 800c3ae:	4415      	add	r5, r2
 800c3b0:	4082      	lsls	r2, r0
 800c3b2:	1a9b      	subs	r3, r3, r2
 800c3b4:	aa0c      	add	r2, sp, #48	; 0x30
 800c3b6:	9502      	str	r5, [sp, #8]
 800c3b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c3bc:	f1ca 0217 	rsb	r2, sl, #23
 800c3c0:	fa43 fb02 	asr.w	fp, r3, r2
 800c3c4:	f1bb 0f00 	cmp.w	fp, #0
 800c3c8:	dd65      	ble.n	800c496 <__kernel_rem_pio2+0x26e>
 800c3ca:	9b02      	ldr	r3, [sp, #8]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	9302      	str	r3, [sp, #8]
 800c3d2:	4615      	mov	r5, r2
 800c3d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c3d8:	4294      	cmp	r4, r2
 800c3da:	f300 809f 	bgt.w	800c51c <__kernel_rem_pio2+0x2f4>
 800c3de:	f1ba 0f00 	cmp.w	sl, #0
 800c3e2:	dd07      	ble.n	800c3f4 <__kernel_rem_pio2+0x1cc>
 800c3e4:	f1ba 0f01 	cmp.w	sl, #1
 800c3e8:	f000 80c1 	beq.w	800c56e <__kernel_rem_pio2+0x346>
 800c3ec:	f1ba 0f02 	cmp.w	sl, #2
 800c3f0:	f000 80c7 	beq.w	800c582 <__kernel_rem_pio2+0x35a>
 800c3f4:	f1bb 0f02 	cmp.w	fp, #2
 800c3f8:	d14d      	bne.n	800c496 <__kernel_rem_pio2+0x26e>
 800c3fa:	4632      	mov	r2, r6
 800c3fc:	463b      	mov	r3, r7
 800c3fe:	4954      	ldr	r1, [pc, #336]	; (800c550 <__kernel_rem_pio2+0x328>)
 800c400:	2000      	movs	r0, #0
 800c402:	f7f3 ff59 	bl	80002b8 <__aeabi_dsub>
 800c406:	4606      	mov	r6, r0
 800c408:	460f      	mov	r7, r1
 800c40a:	2d00      	cmp	r5, #0
 800c40c:	d043      	beq.n	800c496 <__kernel_rem_pio2+0x26e>
 800c40e:	4650      	mov	r0, sl
 800c410:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c540 <__kernel_rem_pio2+0x318>
 800c414:	f000 fa58 	bl	800c8c8 <scalbn>
 800c418:	4630      	mov	r0, r6
 800c41a:	4639      	mov	r1, r7
 800c41c:	ec53 2b10 	vmov	r2, r3, d0
 800c420:	f7f3 ff4a 	bl	80002b8 <__aeabi_dsub>
 800c424:	4606      	mov	r6, r0
 800c426:	460f      	mov	r7, r1
 800c428:	e035      	b.n	800c496 <__kernel_rem_pio2+0x26e>
 800c42a:	4b4a      	ldr	r3, [pc, #296]	; (800c554 <__kernel_rem_pio2+0x32c>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	4630      	mov	r0, r6
 800c430:	4639      	mov	r1, r7
 800c432:	f7f4 f8f9 	bl	8000628 <__aeabi_dmul>
 800c436:	f7f4 fba7 	bl	8000b88 <__aeabi_d2iz>
 800c43a:	f7f4 f88b 	bl	8000554 <__aeabi_i2d>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	ec43 2b18 	vmov	d8, r2, r3
 800c446:	4b44      	ldr	r3, [pc, #272]	; (800c558 <__kernel_rem_pio2+0x330>)
 800c448:	2200      	movs	r2, #0
 800c44a:	f7f4 f8ed 	bl	8000628 <__aeabi_dmul>
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	4630      	mov	r0, r6
 800c454:	4639      	mov	r1, r7
 800c456:	f7f3 ff2f 	bl	80002b8 <__aeabi_dsub>
 800c45a:	f7f4 fb95 	bl	8000b88 <__aeabi_d2iz>
 800c45e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c462:	f84b 0b04 	str.w	r0, [fp], #4
 800c466:	ec51 0b18 	vmov	r0, r1, d8
 800c46a:	f7f3 ff27 	bl	80002bc <__adddf3>
 800c46e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c472:	4606      	mov	r6, r0
 800c474:	460f      	mov	r7, r1
 800c476:	e75b      	b.n	800c330 <__kernel_rem_pio2+0x108>
 800c478:	d106      	bne.n	800c488 <__kernel_rem_pio2+0x260>
 800c47a:	1e63      	subs	r3, r4, #1
 800c47c:	aa0c      	add	r2, sp, #48	; 0x30
 800c47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c482:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800c486:	e79d      	b.n	800c3c4 <__kernel_rem_pio2+0x19c>
 800c488:	4b34      	ldr	r3, [pc, #208]	; (800c55c <__kernel_rem_pio2+0x334>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	f7f4 fb52 	bl	8000b34 <__aeabi_dcmpge>
 800c490:	2800      	cmp	r0, #0
 800c492:	d140      	bne.n	800c516 <__kernel_rem_pio2+0x2ee>
 800c494:	4683      	mov	fp, r0
 800c496:	2200      	movs	r2, #0
 800c498:	2300      	movs	r3, #0
 800c49a:	4630      	mov	r0, r6
 800c49c:	4639      	mov	r1, r7
 800c49e:	f7f4 fb2b 	bl	8000af8 <__aeabi_dcmpeq>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	f000 80c1 	beq.w	800c62a <__kernel_rem_pio2+0x402>
 800c4a8:	1e65      	subs	r5, r4, #1
 800c4aa:	462b      	mov	r3, r5
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	9900      	ldr	r1, [sp, #0]
 800c4b0:	428b      	cmp	r3, r1
 800c4b2:	da6d      	bge.n	800c590 <__kernel_rem_pio2+0x368>
 800c4b4:	2a00      	cmp	r2, #0
 800c4b6:	f000 808a 	beq.w	800c5ce <__kernel_rem_pio2+0x3a6>
 800c4ba:	ab0c      	add	r3, sp, #48	; 0x30
 800c4bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800c4c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f000 80ae 	beq.w	800c626 <__kernel_rem_pio2+0x3fe>
 800c4ca:	4650      	mov	r0, sl
 800c4cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c540 <__kernel_rem_pio2+0x318>
 800c4d0:	f000 f9fa 	bl	800c8c8 <scalbn>
 800c4d4:	1c6b      	adds	r3, r5, #1
 800c4d6:	00da      	lsls	r2, r3, #3
 800c4d8:	9205      	str	r2, [sp, #20]
 800c4da:	ec57 6b10 	vmov	r6, r7, d0
 800c4de:	aa70      	add	r2, sp, #448	; 0x1c0
 800c4e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800c554 <__kernel_rem_pio2+0x32c>
 800c4e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800c4e8:	462c      	mov	r4, r5
 800c4ea:	f04f 0800 	mov.w	r8, #0
 800c4ee:	2c00      	cmp	r4, #0
 800c4f0:	f280 80d4 	bge.w	800c69c <__kernel_rem_pio2+0x474>
 800c4f4:	462c      	mov	r4, r5
 800c4f6:	2c00      	cmp	r4, #0
 800c4f8:	f2c0 8102 	blt.w	800c700 <__kernel_rem_pio2+0x4d8>
 800c4fc:	4b18      	ldr	r3, [pc, #96]	; (800c560 <__kernel_rem_pio2+0x338>)
 800c4fe:	461e      	mov	r6, r3
 800c500:	ab70      	add	r3, sp, #448	; 0x1c0
 800c502:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800c506:	1b2b      	subs	r3, r5, r4
 800c508:	f04f 0900 	mov.w	r9, #0
 800c50c:	f04f 0a00 	mov.w	sl, #0
 800c510:	2700      	movs	r7, #0
 800c512:	9306      	str	r3, [sp, #24]
 800c514:	e0e6      	b.n	800c6e4 <__kernel_rem_pio2+0x4bc>
 800c516:	f04f 0b02 	mov.w	fp, #2
 800c51a:	e756      	b.n	800c3ca <__kernel_rem_pio2+0x1a2>
 800c51c:	f8d8 3000 	ldr.w	r3, [r8]
 800c520:	bb05      	cbnz	r5, 800c564 <__kernel_rem_pio2+0x33c>
 800c522:	b123      	cbz	r3, 800c52e <__kernel_rem_pio2+0x306>
 800c524:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c528:	f8c8 3000 	str.w	r3, [r8]
 800c52c:	2301      	movs	r3, #1
 800c52e:	3201      	adds	r2, #1
 800c530:	f108 0804 	add.w	r8, r8, #4
 800c534:	461d      	mov	r5, r3
 800c536:	e74f      	b.n	800c3d8 <__kernel_rem_pio2+0x1b0>
	...
 800c544:	3ff00000 	.word	0x3ff00000
 800c548:	0800d1d8 	.word	0x0800d1d8
 800c54c:	40200000 	.word	0x40200000
 800c550:	3ff00000 	.word	0x3ff00000
 800c554:	3e700000 	.word	0x3e700000
 800c558:	41700000 	.word	0x41700000
 800c55c:	3fe00000 	.word	0x3fe00000
 800c560:	0800d198 	.word	0x0800d198
 800c564:	1acb      	subs	r3, r1, r3
 800c566:	f8c8 3000 	str.w	r3, [r8]
 800c56a:	462b      	mov	r3, r5
 800c56c:	e7df      	b.n	800c52e <__kernel_rem_pio2+0x306>
 800c56e:	1e62      	subs	r2, r4, #1
 800c570:	ab0c      	add	r3, sp, #48	; 0x30
 800c572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c576:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c57a:	a90c      	add	r1, sp, #48	; 0x30
 800c57c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c580:	e738      	b.n	800c3f4 <__kernel_rem_pio2+0x1cc>
 800c582:	1e62      	subs	r2, r4, #1
 800c584:	ab0c      	add	r3, sp, #48	; 0x30
 800c586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c58e:	e7f4      	b.n	800c57a <__kernel_rem_pio2+0x352>
 800c590:	a90c      	add	r1, sp, #48	; 0x30
 800c592:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c596:	3b01      	subs	r3, #1
 800c598:	430a      	orrs	r2, r1
 800c59a:	e788      	b.n	800c4ae <__kernel_rem_pio2+0x286>
 800c59c:	3301      	adds	r3, #1
 800c59e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c5a2:	2900      	cmp	r1, #0
 800c5a4:	d0fa      	beq.n	800c59c <__kernel_rem_pio2+0x374>
 800c5a6:	9a08      	ldr	r2, [sp, #32]
 800c5a8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800c5ac:	446a      	add	r2, sp
 800c5ae:	3a98      	subs	r2, #152	; 0x98
 800c5b0:	9208      	str	r2, [sp, #32]
 800c5b2:	9a06      	ldr	r2, [sp, #24]
 800c5b4:	a920      	add	r1, sp, #128	; 0x80
 800c5b6:	18a2      	adds	r2, r4, r2
 800c5b8:	18e3      	adds	r3, r4, r3
 800c5ba:	f104 0801 	add.w	r8, r4, #1
 800c5be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c5c2:	9302      	str	r3, [sp, #8]
 800c5c4:	9b02      	ldr	r3, [sp, #8]
 800c5c6:	4543      	cmp	r3, r8
 800c5c8:	da04      	bge.n	800c5d4 <__kernel_rem_pio2+0x3ac>
 800c5ca:	461c      	mov	r4, r3
 800c5cc:	e6a2      	b.n	800c314 <__kernel_rem_pio2+0xec>
 800c5ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e7e4      	b.n	800c59e <__kernel_rem_pio2+0x376>
 800c5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c5da:	f7f3 ffbb 	bl	8000554 <__aeabi_i2d>
 800c5de:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e4:	46ab      	mov	fp, r5
 800c5e6:	461c      	mov	r4, r3
 800c5e8:	f04f 0900 	mov.w	r9, #0
 800c5ec:	2600      	movs	r6, #0
 800c5ee:	2700      	movs	r7, #0
 800c5f0:	9b05      	ldr	r3, [sp, #20]
 800c5f2:	4599      	cmp	r9, r3
 800c5f4:	dd06      	ble.n	800c604 <__kernel_rem_pio2+0x3dc>
 800c5f6:	9b08      	ldr	r3, [sp, #32]
 800c5f8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c5fc:	f108 0801 	add.w	r8, r8, #1
 800c600:	9308      	str	r3, [sp, #32]
 800c602:	e7df      	b.n	800c5c4 <__kernel_rem_pio2+0x39c>
 800c604:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c608:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c60c:	f7f4 f80c 	bl	8000628 <__aeabi_dmul>
 800c610:	4602      	mov	r2, r0
 800c612:	460b      	mov	r3, r1
 800c614:	4630      	mov	r0, r6
 800c616:	4639      	mov	r1, r7
 800c618:	f7f3 fe50 	bl	80002bc <__adddf3>
 800c61c:	f109 0901 	add.w	r9, r9, #1
 800c620:	4606      	mov	r6, r0
 800c622:	460f      	mov	r7, r1
 800c624:	e7e4      	b.n	800c5f0 <__kernel_rem_pio2+0x3c8>
 800c626:	3d01      	subs	r5, #1
 800c628:	e747      	b.n	800c4ba <__kernel_rem_pio2+0x292>
 800c62a:	ec47 6b10 	vmov	d0, r6, r7
 800c62e:	f1ca 0000 	rsb	r0, sl, #0
 800c632:	f000 f949 	bl	800c8c8 <scalbn>
 800c636:	ec57 6b10 	vmov	r6, r7, d0
 800c63a:	4ba0      	ldr	r3, [pc, #640]	; (800c8bc <__kernel_rem_pio2+0x694>)
 800c63c:	ee10 0a10 	vmov	r0, s0
 800c640:	2200      	movs	r2, #0
 800c642:	4639      	mov	r1, r7
 800c644:	f7f4 fa76 	bl	8000b34 <__aeabi_dcmpge>
 800c648:	b1f8      	cbz	r0, 800c68a <__kernel_rem_pio2+0x462>
 800c64a:	4b9d      	ldr	r3, [pc, #628]	; (800c8c0 <__kernel_rem_pio2+0x698>)
 800c64c:	2200      	movs	r2, #0
 800c64e:	4630      	mov	r0, r6
 800c650:	4639      	mov	r1, r7
 800c652:	f7f3 ffe9 	bl	8000628 <__aeabi_dmul>
 800c656:	f7f4 fa97 	bl	8000b88 <__aeabi_d2iz>
 800c65a:	4680      	mov	r8, r0
 800c65c:	f7f3 ff7a 	bl	8000554 <__aeabi_i2d>
 800c660:	4b96      	ldr	r3, [pc, #600]	; (800c8bc <__kernel_rem_pio2+0x694>)
 800c662:	2200      	movs	r2, #0
 800c664:	f7f3 ffe0 	bl	8000628 <__aeabi_dmul>
 800c668:	460b      	mov	r3, r1
 800c66a:	4602      	mov	r2, r0
 800c66c:	4639      	mov	r1, r7
 800c66e:	4630      	mov	r0, r6
 800c670:	f7f3 fe22 	bl	80002b8 <__aeabi_dsub>
 800c674:	f7f4 fa88 	bl	8000b88 <__aeabi_d2iz>
 800c678:	1c65      	adds	r5, r4, #1
 800c67a:	ab0c      	add	r3, sp, #48	; 0x30
 800c67c:	f10a 0a18 	add.w	sl, sl, #24
 800c680:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c684:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c688:	e71f      	b.n	800c4ca <__kernel_rem_pio2+0x2a2>
 800c68a:	4630      	mov	r0, r6
 800c68c:	4639      	mov	r1, r7
 800c68e:	f7f4 fa7b 	bl	8000b88 <__aeabi_d2iz>
 800c692:	ab0c      	add	r3, sp, #48	; 0x30
 800c694:	4625      	mov	r5, r4
 800c696:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c69a:	e716      	b.n	800c4ca <__kernel_rem_pio2+0x2a2>
 800c69c:	ab0c      	add	r3, sp, #48	; 0x30
 800c69e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c6a2:	f7f3 ff57 	bl	8000554 <__aeabi_i2d>
 800c6a6:	4632      	mov	r2, r6
 800c6a8:	463b      	mov	r3, r7
 800c6aa:	f7f3 ffbd 	bl	8000628 <__aeabi_dmul>
 800c6ae:	4642      	mov	r2, r8
 800c6b0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c6b4:	464b      	mov	r3, r9
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	4639      	mov	r1, r7
 800c6ba:	f7f3 ffb5 	bl	8000628 <__aeabi_dmul>
 800c6be:	3c01      	subs	r4, #1
 800c6c0:	4606      	mov	r6, r0
 800c6c2:	460f      	mov	r7, r1
 800c6c4:	e713      	b.n	800c4ee <__kernel_rem_pio2+0x2c6>
 800c6c6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c6ca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800c6ce:	f7f3 ffab 	bl	8000628 <__aeabi_dmul>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	4648      	mov	r0, r9
 800c6d8:	4651      	mov	r1, sl
 800c6da:	f7f3 fdef 	bl	80002bc <__adddf3>
 800c6de:	3701      	adds	r7, #1
 800c6e0:	4681      	mov	r9, r0
 800c6e2:	468a      	mov	sl, r1
 800c6e4:	9b00      	ldr	r3, [sp, #0]
 800c6e6:	429f      	cmp	r7, r3
 800c6e8:	dc02      	bgt.n	800c6f0 <__kernel_rem_pio2+0x4c8>
 800c6ea:	9b06      	ldr	r3, [sp, #24]
 800c6ec:	429f      	cmp	r7, r3
 800c6ee:	ddea      	ble.n	800c6c6 <__kernel_rem_pio2+0x49e>
 800c6f0:	9a06      	ldr	r2, [sp, #24]
 800c6f2:	ab48      	add	r3, sp, #288	; 0x120
 800c6f4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800c6f8:	e9c6 9a00 	strd	r9, sl, [r6]
 800c6fc:	3c01      	subs	r4, #1
 800c6fe:	e6fa      	b.n	800c4f6 <__kernel_rem_pio2+0x2ce>
 800c700:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c702:	2b02      	cmp	r3, #2
 800c704:	dc0b      	bgt.n	800c71e <__kernel_rem_pio2+0x4f6>
 800c706:	2b00      	cmp	r3, #0
 800c708:	dc39      	bgt.n	800c77e <__kernel_rem_pio2+0x556>
 800c70a:	d05d      	beq.n	800c7c8 <__kernel_rem_pio2+0x5a0>
 800c70c:	9b02      	ldr	r3, [sp, #8]
 800c70e:	f003 0007 	and.w	r0, r3, #7
 800c712:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c716:	ecbd 8b02 	vpop	{d8}
 800c71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c720:	2b03      	cmp	r3, #3
 800c722:	d1f3      	bne.n	800c70c <__kernel_rem_pio2+0x4e4>
 800c724:	9b05      	ldr	r3, [sp, #20]
 800c726:	9500      	str	r5, [sp, #0]
 800c728:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c72c:	eb0d 0403 	add.w	r4, sp, r3
 800c730:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800c734:	46a2      	mov	sl, r4
 800c736:	9b00      	ldr	r3, [sp, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f1aa 0a08 	sub.w	sl, sl, #8
 800c73e:	dc69      	bgt.n	800c814 <__kernel_rem_pio2+0x5ec>
 800c740:	46aa      	mov	sl, r5
 800c742:	f1ba 0f01 	cmp.w	sl, #1
 800c746:	f1a4 0408 	sub.w	r4, r4, #8
 800c74a:	f300 8083 	bgt.w	800c854 <__kernel_rem_pio2+0x62c>
 800c74e:	9c05      	ldr	r4, [sp, #20]
 800c750:	ab48      	add	r3, sp, #288	; 0x120
 800c752:	441c      	add	r4, r3
 800c754:	2000      	movs	r0, #0
 800c756:	2100      	movs	r1, #0
 800c758:	2d01      	cmp	r5, #1
 800c75a:	f300 809a 	bgt.w	800c892 <__kernel_rem_pio2+0x66a>
 800c75e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800c762:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c766:	f1bb 0f00 	cmp.w	fp, #0
 800c76a:	f040 8098 	bne.w	800c89e <__kernel_rem_pio2+0x676>
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	e9c3 7800 	strd	r7, r8, [r3]
 800c774:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c778:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c77c:	e7c6      	b.n	800c70c <__kernel_rem_pio2+0x4e4>
 800c77e:	9e05      	ldr	r6, [sp, #20]
 800c780:	ab48      	add	r3, sp, #288	; 0x120
 800c782:	441e      	add	r6, r3
 800c784:	462c      	mov	r4, r5
 800c786:	2000      	movs	r0, #0
 800c788:	2100      	movs	r1, #0
 800c78a:	2c00      	cmp	r4, #0
 800c78c:	da33      	bge.n	800c7f6 <__kernel_rem_pio2+0x5ce>
 800c78e:	f1bb 0f00 	cmp.w	fp, #0
 800c792:	d036      	beq.n	800c802 <__kernel_rem_pio2+0x5da>
 800c794:	4602      	mov	r2, r0
 800c796:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c79a:	9c04      	ldr	r4, [sp, #16]
 800c79c:	e9c4 2300 	strd	r2, r3, [r4]
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c7a8:	f7f3 fd86 	bl	80002b8 <__aeabi_dsub>
 800c7ac:	ae4a      	add	r6, sp, #296	; 0x128
 800c7ae:	2401      	movs	r4, #1
 800c7b0:	42a5      	cmp	r5, r4
 800c7b2:	da29      	bge.n	800c808 <__kernel_rem_pio2+0x5e0>
 800c7b4:	f1bb 0f00 	cmp.w	fp, #0
 800c7b8:	d002      	beq.n	800c7c0 <__kernel_rem_pio2+0x598>
 800c7ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7be:	4619      	mov	r1, r3
 800c7c0:	9b04      	ldr	r3, [sp, #16]
 800c7c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c7c6:	e7a1      	b.n	800c70c <__kernel_rem_pio2+0x4e4>
 800c7c8:	9c05      	ldr	r4, [sp, #20]
 800c7ca:	ab48      	add	r3, sp, #288	; 0x120
 800c7cc:	441c      	add	r4, r3
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	2d00      	cmp	r5, #0
 800c7d4:	da09      	bge.n	800c7ea <__kernel_rem_pio2+0x5c2>
 800c7d6:	f1bb 0f00 	cmp.w	fp, #0
 800c7da:	d002      	beq.n	800c7e2 <__kernel_rem_pio2+0x5ba>
 800c7dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	9b04      	ldr	r3, [sp, #16]
 800c7e4:	e9c3 0100 	strd	r0, r1, [r3]
 800c7e8:	e790      	b.n	800c70c <__kernel_rem_pio2+0x4e4>
 800c7ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c7ee:	f7f3 fd65 	bl	80002bc <__adddf3>
 800c7f2:	3d01      	subs	r5, #1
 800c7f4:	e7ed      	b.n	800c7d2 <__kernel_rem_pio2+0x5aa>
 800c7f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c7fa:	f7f3 fd5f 	bl	80002bc <__adddf3>
 800c7fe:	3c01      	subs	r4, #1
 800c800:	e7c3      	b.n	800c78a <__kernel_rem_pio2+0x562>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	e7c8      	b.n	800c79a <__kernel_rem_pio2+0x572>
 800c808:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c80c:	f7f3 fd56 	bl	80002bc <__adddf3>
 800c810:	3401      	adds	r4, #1
 800c812:	e7cd      	b.n	800c7b0 <__kernel_rem_pio2+0x588>
 800c814:	e9da 8900 	ldrd	r8, r9, [sl]
 800c818:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c81c:	9b00      	ldr	r3, [sp, #0]
 800c81e:	3b01      	subs	r3, #1
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	4632      	mov	r2, r6
 800c824:	463b      	mov	r3, r7
 800c826:	4640      	mov	r0, r8
 800c828:	4649      	mov	r1, r9
 800c82a:	f7f3 fd47 	bl	80002bc <__adddf3>
 800c82e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	4640      	mov	r0, r8
 800c838:	4649      	mov	r1, r9
 800c83a:	f7f3 fd3d 	bl	80002b8 <__aeabi_dsub>
 800c83e:	4632      	mov	r2, r6
 800c840:	463b      	mov	r3, r7
 800c842:	f7f3 fd3b 	bl	80002bc <__adddf3>
 800c846:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c84a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c84e:	ed8a 7b00 	vstr	d7, [sl]
 800c852:	e770      	b.n	800c736 <__kernel_rem_pio2+0x50e>
 800c854:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c858:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c85c:	4640      	mov	r0, r8
 800c85e:	4632      	mov	r2, r6
 800c860:	463b      	mov	r3, r7
 800c862:	4649      	mov	r1, r9
 800c864:	f7f3 fd2a 	bl	80002bc <__adddf3>
 800c868:	e9cd 0100 	strd	r0, r1, [sp]
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
 800c870:	4640      	mov	r0, r8
 800c872:	4649      	mov	r1, r9
 800c874:	f7f3 fd20 	bl	80002b8 <__aeabi_dsub>
 800c878:	4632      	mov	r2, r6
 800c87a:	463b      	mov	r3, r7
 800c87c:	f7f3 fd1e 	bl	80002bc <__adddf3>
 800c880:	ed9d 7b00 	vldr	d7, [sp]
 800c884:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c888:	ed84 7b00 	vstr	d7, [r4]
 800c88c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c890:	e757      	b.n	800c742 <__kernel_rem_pio2+0x51a>
 800c892:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c896:	f7f3 fd11 	bl	80002bc <__adddf3>
 800c89a:	3d01      	subs	r5, #1
 800c89c:	e75c      	b.n	800c758 <__kernel_rem_pio2+0x530>
 800c89e:	9b04      	ldr	r3, [sp, #16]
 800c8a0:	9a04      	ldr	r2, [sp, #16]
 800c8a2:	601f      	str	r7, [r3, #0]
 800c8a4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c8a8:	605c      	str	r4, [r3, #4]
 800c8aa:	609d      	str	r5, [r3, #8]
 800c8ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c8b0:	60d3      	str	r3, [r2, #12]
 800c8b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8b6:	6110      	str	r0, [r2, #16]
 800c8b8:	6153      	str	r3, [r2, #20]
 800c8ba:	e727      	b.n	800c70c <__kernel_rem_pio2+0x4e4>
 800c8bc:	41700000 	.word	0x41700000
 800c8c0:	3e700000 	.word	0x3e700000
 800c8c4:	00000000 	.word	0x00000000

0800c8c8 <scalbn>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	ec55 4b10 	vmov	r4, r5, d0
 800c8ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	462b      	mov	r3, r5
 800c8d6:	b999      	cbnz	r1, 800c900 <scalbn+0x38>
 800c8d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8dc:	4323      	orrs	r3, r4
 800c8de:	d03f      	beq.n	800c960 <scalbn+0x98>
 800c8e0:	4b35      	ldr	r3, [pc, #212]	; (800c9b8 <scalbn+0xf0>)
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	ee10 0a10 	vmov	r0, s0
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f7f3 fe9d 	bl	8000628 <__aeabi_dmul>
 800c8ee:	4b33      	ldr	r3, [pc, #204]	; (800c9bc <scalbn+0xf4>)
 800c8f0:	429e      	cmp	r6, r3
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	460d      	mov	r5, r1
 800c8f6:	da10      	bge.n	800c91a <scalbn+0x52>
 800c8f8:	a327      	add	r3, pc, #156	; (adr r3, 800c998 <scalbn+0xd0>)
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	e01f      	b.n	800c940 <scalbn+0x78>
 800c900:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c904:	4291      	cmp	r1, r2
 800c906:	d10c      	bne.n	800c922 <scalbn+0x5a>
 800c908:	ee10 2a10 	vmov	r2, s0
 800c90c:	4620      	mov	r0, r4
 800c90e:	4629      	mov	r1, r5
 800c910:	f7f3 fcd4 	bl	80002bc <__adddf3>
 800c914:	4604      	mov	r4, r0
 800c916:	460d      	mov	r5, r1
 800c918:	e022      	b.n	800c960 <scalbn+0x98>
 800c91a:	460b      	mov	r3, r1
 800c91c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c920:	3936      	subs	r1, #54	; 0x36
 800c922:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c926:	4296      	cmp	r6, r2
 800c928:	dd0d      	ble.n	800c946 <scalbn+0x7e>
 800c92a:	2d00      	cmp	r5, #0
 800c92c:	a11c      	add	r1, pc, #112	; (adr r1, 800c9a0 <scalbn+0xd8>)
 800c92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c932:	da02      	bge.n	800c93a <scalbn+0x72>
 800c934:	a11c      	add	r1, pc, #112	; (adr r1, 800c9a8 <scalbn+0xe0>)
 800c936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c93a:	a319      	add	r3, pc, #100	; (adr r3, 800c9a0 <scalbn+0xd8>)
 800c93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c940:	f7f3 fe72 	bl	8000628 <__aeabi_dmul>
 800c944:	e7e6      	b.n	800c914 <scalbn+0x4c>
 800c946:	1872      	adds	r2, r6, r1
 800c948:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c94c:	428a      	cmp	r2, r1
 800c94e:	dcec      	bgt.n	800c92a <scalbn+0x62>
 800c950:	2a00      	cmp	r2, #0
 800c952:	dd08      	ble.n	800c966 <scalbn+0x9e>
 800c954:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c958:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c95c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c960:	ec45 4b10 	vmov	d0, r4, r5
 800c964:	bd70      	pop	{r4, r5, r6, pc}
 800c966:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c96a:	da08      	bge.n	800c97e <scalbn+0xb6>
 800c96c:	2d00      	cmp	r5, #0
 800c96e:	a10a      	add	r1, pc, #40	; (adr r1, 800c998 <scalbn+0xd0>)
 800c970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c974:	dac0      	bge.n	800c8f8 <scalbn+0x30>
 800c976:	a10e      	add	r1, pc, #56	; (adr r1, 800c9b0 <scalbn+0xe8>)
 800c978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c97c:	e7bc      	b.n	800c8f8 <scalbn+0x30>
 800c97e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c982:	3236      	adds	r2, #54	; 0x36
 800c984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c988:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c98c:	4620      	mov	r0, r4
 800c98e:	4b0c      	ldr	r3, [pc, #48]	; (800c9c0 <scalbn+0xf8>)
 800c990:	2200      	movs	r2, #0
 800c992:	e7d5      	b.n	800c940 <scalbn+0x78>
 800c994:	f3af 8000 	nop.w
 800c998:	c2f8f359 	.word	0xc2f8f359
 800c99c:	01a56e1f 	.word	0x01a56e1f
 800c9a0:	8800759c 	.word	0x8800759c
 800c9a4:	7e37e43c 	.word	0x7e37e43c
 800c9a8:	8800759c 	.word	0x8800759c
 800c9ac:	fe37e43c 	.word	0xfe37e43c
 800c9b0:	c2f8f359 	.word	0xc2f8f359
 800c9b4:	81a56e1f 	.word	0x81a56e1f
 800c9b8:	43500000 	.word	0x43500000
 800c9bc:	ffff3cb0 	.word	0xffff3cb0
 800c9c0:	3c900000 	.word	0x3c900000
 800c9c4:	00000000 	.word	0x00000000

0800c9c8 <floor>:
 800c9c8:	ec51 0b10 	vmov	r0, r1, d0
 800c9cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c9d8:	2e13      	cmp	r6, #19
 800c9da:	ee10 5a10 	vmov	r5, s0
 800c9de:	ee10 8a10 	vmov	r8, s0
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	dc31      	bgt.n	800ca4a <floor+0x82>
 800c9e6:	2e00      	cmp	r6, #0
 800c9e8:	da14      	bge.n	800ca14 <floor+0x4c>
 800c9ea:	a333      	add	r3, pc, #204	; (adr r3, 800cab8 <floor+0xf0>)
 800c9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f0:	f7f3 fc64 	bl	80002bc <__adddf3>
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	f7f4 f8a6 	bl	8000b48 <__aeabi_dcmpgt>
 800c9fc:	b138      	cbz	r0, 800ca0e <floor+0x46>
 800c9fe:	2c00      	cmp	r4, #0
 800ca00:	da53      	bge.n	800caaa <floor+0xe2>
 800ca02:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ca06:	4325      	orrs	r5, r4
 800ca08:	d052      	beq.n	800cab0 <floor+0xe8>
 800ca0a:	4c2d      	ldr	r4, [pc, #180]	; (800cac0 <floor+0xf8>)
 800ca0c:	2500      	movs	r5, #0
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4628      	mov	r0, r5
 800ca12:	e024      	b.n	800ca5e <floor+0x96>
 800ca14:	4f2b      	ldr	r7, [pc, #172]	; (800cac4 <floor+0xfc>)
 800ca16:	4137      	asrs	r7, r6
 800ca18:	ea01 0307 	and.w	r3, r1, r7
 800ca1c:	4303      	orrs	r3, r0
 800ca1e:	d01e      	beq.n	800ca5e <floor+0x96>
 800ca20:	a325      	add	r3, pc, #148	; (adr r3, 800cab8 <floor+0xf0>)
 800ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca26:	f7f3 fc49 	bl	80002bc <__adddf3>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f7f4 f88b 	bl	8000b48 <__aeabi_dcmpgt>
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d0eb      	beq.n	800ca0e <floor+0x46>
 800ca36:	2c00      	cmp	r4, #0
 800ca38:	bfbe      	ittt	lt
 800ca3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ca3e:	4133      	asrlt	r3, r6
 800ca40:	18e4      	addlt	r4, r4, r3
 800ca42:	ea24 0407 	bic.w	r4, r4, r7
 800ca46:	2500      	movs	r5, #0
 800ca48:	e7e1      	b.n	800ca0e <floor+0x46>
 800ca4a:	2e33      	cmp	r6, #51	; 0x33
 800ca4c:	dd0b      	ble.n	800ca66 <floor+0x9e>
 800ca4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca52:	d104      	bne.n	800ca5e <floor+0x96>
 800ca54:	ee10 2a10 	vmov	r2, s0
 800ca58:	460b      	mov	r3, r1
 800ca5a:	f7f3 fc2f 	bl	80002bc <__adddf3>
 800ca5e:	ec41 0b10 	vmov	d0, r0, r1
 800ca62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca66:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ca6a:	f04f 37ff 	mov.w	r7, #4294967295
 800ca6e:	40df      	lsrs	r7, r3
 800ca70:	4238      	tst	r0, r7
 800ca72:	d0f4      	beq.n	800ca5e <floor+0x96>
 800ca74:	a310      	add	r3, pc, #64	; (adr r3, 800cab8 <floor+0xf0>)
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	f7f3 fc1f 	bl	80002bc <__adddf3>
 800ca7e:	2200      	movs	r2, #0
 800ca80:	2300      	movs	r3, #0
 800ca82:	f7f4 f861 	bl	8000b48 <__aeabi_dcmpgt>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d0c1      	beq.n	800ca0e <floor+0x46>
 800ca8a:	2c00      	cmp	r4, #0
 800ca8c:	da0a      	bge.n	800caa4 <floor+0xdc>
 800ca8e:	2e14      	cmp	r6, #20
 800ca90:	d101      	bne.n	800ca96 <floor+0xce>
 800ca92:	3401      	adds	r4, #1
 800ca94:	e006      	b.n	800caa4 <floor+0xdc>
 800ca96:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	40b3      	lsls	r3, r6
 800ca9e:	441d      	add	r5, r3
 800caa0:	45a8      	cmp	r8, r5
 800caa2:	d8f6      	bhi.n	800ca92 <floor+0xca>
 800caa4:	ea25 0507 	bic.w	r5, r5, r7
 800caa8:	e7b1      	b.n	800ca0e <floor+0x46>
 800caaa:	2500      	movs	r5, #0
 800caac:	462c      	mov	r4, r5
 800caae:	e7ae      	b.n	800ca0e <floor+0x46>
 800cab0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cab4:	e7ab      	b.n	800ca0e <floor+0x46>
 800cab6:	bf00      	nop
 800cab8:	8800759c 	.word	0x8800759c
 800cabc:	7e37e43c 	.word	0x7e37e43c
 800cac0:	bff00000 	.word	0xbff00000
 800cac4:	000fffff 	.word	0x000fffff

0800cac8 <_init>:
 800cac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caca:	bf00      	nop
 800cacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cace:	bc08      	pop	{r3}
 800cad0:	469e      	mov	lr, r3
 800cad2:	4770      	bx	lr

0800cad4 <_fini>:
 800cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad6:	bf00      	nop
 800cad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cada:	bc08      	pop	{r3}
 800cadc:	469e      	mov	lr, r3
 800cade:	4770      	bx	lr
