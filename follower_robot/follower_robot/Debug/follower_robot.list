
follower_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  0800c588  0800c588  0001c588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccb0  0800ccb0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccb0  0800ccb0  0001ccb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccb8  0800ccb8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccb8  0800ccb8  0001ccb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccbc  0800ccbc  0001ccbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ccc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  200001d8  0800ce98  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  0800ce98  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e79d  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002267  00000000  00000000  0002e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00030c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af8  00000000  00000000  00031a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c0b  00000000  00000000  00032568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff7d  00000000  00000000  0004a173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090b48  00000000  00000000  0005a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005588  00000000  00000000  000eac38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000f01c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c570 	.word	0x0800c570

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800c570 	.word	0x0800c570

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <init_Robot>:



/// initial robot parameter

void init_Robot(Robot* robot){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    robot->x = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
    robot->y = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
    robot->theta = 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
    robot->omega = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
    robot->v = 0.05;//60rpm = 0.2041 50 = 0.17
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <init_Robot+0x7c>)
 800104c:	60da      	str	r2, [r3, #12]
//    robot->v = 0.0;//60rpm = 0.2041 50 = 0.17

    robot->v_r = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
    robot->v_l = 0;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
    robot->v_r_rpm = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
    robot->v_l_rpm = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
    robot->v_r_PWM = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
    robot->v_l_PWM = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
    robot->S_distance = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
    strcpy(robot->cmd,"STP");
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	331c      	adds	r3, #28
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <init_Robot+0x80>)
 800108c:	6810      	ldr	r0, [r2, #0]
 800108e:	6018      	str	r0, [r3, #0]

}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	3d4ccccd 	.word	0x3d4ccccd
 80010a0:	0800c588 	.word	0x0800c588
 80010a4:	00000000 	.word	0x00000000

080010a8 <update_Position>:
/// @brief calculat new posstion of Robot from encoder value
/// @param robot
/// @param encoder_Right_Value
/// @param encoder_Left_Value
void update_Position(Robot* robot, int encoder_difference_left, int encoder_difference_right,float delta_t){
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	ed2d 8b02 	vpush	{d8}
 80010b0:	b088      	sub	sp, #32
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	ed87 0a00 	vstr	s0, [r7]
		float D_r  = (float) pi*d*(encoder_difference_right)/N;
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fa48 	bl	8000554 <__aeabi_i2d>
 80010c4:	a378      	add	r3, pc, #480	; (adr r3, 80012a8 <update_Position+0x200>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff faad 	bl	8000628 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	a376      	add	r3, pc, #472	; (adr r3, 80012b0 <update_Position+0x208>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fbce 	bl	800087c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fd96 	bl	8000c18 <__aeabi_d2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	61fb      	str	r3, [r7, #28]
		float D_l = (float) pi*d*(encoder_difference_left)/N;
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	f7ff fa2f 	bl	8000554 <__aeabi_i2d>
 80010f6:	a36c      	add	r3, pc, #432	; (adr r3, 80012a8 <update_Position+0x200>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff fa94 	bl	8000628 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	a369      	add	r3, pc, #420	; (adr r3, 80012b0 <update_Position+0x208>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fbb5 	bl	800087c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd7d 	bl	8000c18 <__aeabi_d2f>
 800111e:	4603      	mov	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]
		float D_c = (D_r + D_l)/2;
 8001122:	ed97 7a07 	vldr	s14, [r7, #28]
 8001126:	edd7 7a06 	vldr	s15, [r7, #24]
 800112a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800112e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001136:	edc7 7a05 	vstr	s15, [r7, #20]

      robot->x += D_c*cos(robot->theta);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa1a 	bl	8000578 <__aeabi_f2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	4680      	mov	r8, r0
 8001150:	4689      	mov	r9, r1
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fa0e 	bl	8000578 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	ec43 2b10 	vmov	d0, r2, r3
 8001164:	f009 ff04 	bl	800af70 <cos>
 8001168:	ec53 2b10 	vmov	r2, r3, d0
 800116c:	4640      	mov	r0, r8
 800116e:	4649      	mov	r1, r9
 8001170:	f7ff fa5a 	bl	8000628 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff f89e 	bl	80002bc <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fd46 	bl	8000c18 <__aeabi_d2f>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]
      robot->y += D_c*sin(robot->theta);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9ee 	bl	8000578 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	6978      	ldr	r0, [r7, #20]
 80011a2:	f7ff f9e9 	bl	8000578 <__aeabi_f2d>
 80011a6:	4680      	mov	r8, r0
 80011a8:	4689      	mov	r9, r1
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9e2 	bl	8000578 <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	ec43 2b10 	vmov	d0, r2, r3
 80011bc:	f009 ff2c 	bl	800b018 <sin>
 80011c0:	ec53 2b10 	vmov	r2, r3, d0
 80011c4:	4640      	mov	r0, r8
 80011c6:	4649      	mov	r1, r9
 80011c8:	f7ff fa2e 	bl	8000628 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4620      	mov	r0, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	f7ff f872 	bl	80002bc <__adddf3>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fd1a 	bl	8000c18 <__aeabi_d2f>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	605a      	str	r2, [r3, #4]
      robot->theta += (D_r -D_l)/(L);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9c2 	bl	8000578 <__aeabi_f2d>
 80011f4:	4604      	mov	r4, r0
 80011f6:	460d      	mov	r5, r1
 80011f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ee17 0a90 	vmov	r0, s15
 8001208:	f7ff f9b6 	bl	8000578 <__aeabi_f2d>
 800120c:	a32a      	add	r3, pc, #168	; (adr r3, 80012b8 <update_Position+0x210>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff fb33 	bl	800087c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7ff f84d 	bl	80002bc <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fcf5 	bl	8000c18 <__aeabi_d2f>
 800122e:	4602      	mov	r2, r0
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	609a      	str	r2, [r3, #8]
//      robot->v = 0.1*robot->omega;
//      robot->theta = robot->omega* delta_t;
      robot->theta = atan2(sin(robot->theta),cos(robot->theta)) ;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f99d 	bl	8000578 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	ec43 2b10 	vmov	d0, r2, r3
 8001246:	f009 fee7 	bl	800b018 <sin>
 800124a:	eeb0 8a40 	vmov.f32	s16, s0
 800124e:	eef0 8a60 	vmov.f32	s17, s1
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f98e 	bl	8000578 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	ec43 2b10 	vmov	d0, r2, r3
 8001264:	f009 fe84 	bl	800af70 <cos>
 8001268:	eeb0 7a40 	vmov.f32	s14, s0
 800126c:	eef0 7a60 	vmov.f32	s15, s1
 8001270:	eeb0 1a47 	vmov.f32	s2, s14
 8001274:	eef0 1a67 	vmov.f32	s3, s15
 8001278:	eeb0 0a48 	vmov.f32	s0, s16
 800127c:	eef0 0a68 	vmov.f32	s1, s17
 8001280:	f009 fe72 	bl	800af68 <atan2>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fcc4 	bl	8000c18 <__aeabi_d2f>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	609a      	str	r2, [r3, #8]
//      if (robot->phi > 2 * pi) robot->phi -= 2 * pi;
//      else if (robot->phi < 0) robot->phi += 2 * pi;
}
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	ecbd 8b02 	vpop	{d8}
 80012a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012a4:	f3af 8000 	nop.w
 80012a8:	c7ae147b 	.word	0xc7ae147b
 80012ac:	3fca2324 	.word	0x3fca2324
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40901800 	.word	0x40901800
 80012b8:	70a3d70a 	.word	0x70a3d70a
 80012bc:	3fc70a3d 	.word	0x3fc70a3d

080012c0 <desired_point_init>:
 *  Created on: Mar 31, 2024
 *      Author: Nghia
 */
#include "decoding_frame.h"
#include "string.h"
void desired_point_init(desired_point* my_desired_point){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	my_desired_point->x_d = 0;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
	my_desired_point->y_d = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
	my_desired_point->phi_d = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
	strcpy(my_desired_point->cmd_d, "stp");
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <desired_point_init+0x34>)
 80012e4:	6810      	ldr	r0, [r2, #0]
 80012e6:	6018      	str	r0, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	0800c58c 	.word	0x0800c58c

080012f8 <split_frame_vel>:
void split_frame(char *frame, desired_point* my_desired_point) {
    // Sử dụng sscanf để trích xuất giá trị từ chuỗi
    sscanf(frame, "!cmd:%[^#]#x:%f#y:%f#phi:%f#\n", my_desired_point->cmd_d, &my_desired_point->x_d, &my_desired_point->y_d, &my_desired_point->phi_d);
}

void split_frame_vel(char *frame,desired_point* my_desired_point){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	sscanf(frame,"!cmd:%[^#]#v_r:%f#v_l:%f#\n",my_desired_point->cmd_d,&my_desired_point->v_r,&my_desired_point->v_l);
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f103 0110 	add.w	r1, r3, #16
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3314      	adds	r3, #20
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	460b      	mov	r3, r1
 8001312:	4904      	ldr	r1, [pc, #16]	; (8001324 <split_frame_vel+0x2c>)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f005 fd6b 	bl	8006df0 <siscanf>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0800c5b0 	.word	0x0800c5b0

08001328 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart2.Instance){
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_UART_RxCpltCallback+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d122      	bne.n	8001382 <HAL_UART_RxCpltCallback+0x5a>
//		receive_data(Rx);
		if(Rx == '\n'){
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_UART_RxCpltCallback+0x68>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b0a      	cmp	r3, #10
 8001342:	d10e      	bne.n	8001362 <HAL_UART_RxCpltCallback+0x3a>
			uart_flag =1;
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_UART_RxCpltCallback+0x6c>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]
			uart_buff[uart_len++] = Rx;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_UART_RxCpltCallback+0x70>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	b2d1      	uxtb	r1, r2
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_UART_RxCpltCallback+0x70>)
 8001354:	7011      	strb	r1, [r2, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_UART_RxCpltCallback+0x68>)
 800135a:	7819      	ldrb	r1, [r3, #0]
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_UART_RxCpltCallback+0x74>)
 800135e:	5499      	strb	r1, [r3, r2]
 8001360:	e00a      	b.n	8001378 <HAL_UART_RxCpltCallback+0x50>
		}

		else{
			uart_buff[uart_len++]= Rx;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_UART_RxCpltCallback+0x70>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	b2d1      	uxtb	r1, r2
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_UART_RxCpltCallback+0x70>)
 800136c:	7011      	strb	r1, [r2, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_UART_RxCpltCallback+0x68>)
 8001372:	7819      	ldrb	r1, [r3, #0]
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_UART_RxCpltCallback+0x74>)
 8001376:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&huart2, &Rx, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	4905      	ldr	r1, [pc, #20]	; (8001390 <HAL_UART_RxCpltCallback+0x68>)
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <HAL_UART_RxCpltCallback+0x64>)
 800137e:	f003 fd75 	bl	8004e6c <HAL_UART_Receive_IT>
	}
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200003d8 	.word	0x200003d8
 8001390:	200001f4 	.word	0x200001f4
 8001394:	2000022c 	.word	0x2000022c
 8001398:	20000230 	.word	0x20000230
 800139c:	200001f8 	.word	0x200001f8

080013a0 <HAL_TIM_PeriodElapsedCallback>:
// todo timer interuppt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013a4:	b088      	sub	sp, #32
 80013a6:	af06      	add	r7, sp, #24
 80013a8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d170      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0xf6>
		//doc encoder
		if(count >= 0.1 ){
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dd67      	ble.n	800148c <HAL_TIM_PeriodElapsedCallback+0xec>

			encoder_value_left = -1*__HAL_TIM_GET_COUNTER(&htim2);
 80013bc:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	425b      	negs	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80013c8:	601a      	str	r2, [r3, #0]
			encoder_value_right =__HAL_TIM_GET_COUNTER(&htim5);
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013d4:	601a      	str	r2, [r3, #0]

			encoder_difference_left = encoder_value_left - pre_encoder_value_left;
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	4a36      	ldr	r2, [pc, #216]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80013e2:	6013      	str	r3, [r2, #0]
			encoder_difference_right = encoder_value_right - pre_encoder_value_right;
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	4a35      	ldr	r2, [pc, #212]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80013f0:	6013      	str	r3, [r2, #0]
			pre_encoder_value_right = encoder_value_right ;
 80013f2:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a32      	ldr	r2, [pc, #200]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80013f8:	6013      	str	r3, [r2, #0]
			pre_encoder_value_left = encoder_value_left ;
 80013fa:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001400:	6013      	str	r3, [r2, #0]
//
			update_Position(&myRobot, encoder_difference_left, encoder_difference_right,0.1);
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80014c8 <HAL_TIM_PeriodElapsedCallback+0x128>
 800140e:	4619      	mov	r1, r3
 8001410:	482e      	ldr	r0, [pc, #184]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001412:	f7ff fe49 	bl	80010a8 <update_Position>
//			update_Position_base_velocity(&myRobot, encoder_difference_left, encoder_difference_right,0.1);//delta time is 0.1

			//ennable PID calculation
			en_PID =1;
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
			//return PWM
//			sprintf(data,"!W_L_PWM:%.2f#W_R_PWM:%.2f#\n",myRobot.v_l_PWM,myRobot.v_r_PWM);
//			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));


			if(strcmp(myRobot.cmd,"RUN")== 0 ){
 800141c:	492d      	ldr	r1, [pc, #180]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800141e:	482e      	ldr	r0, [pc, #184]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001420:	f7fe fede 	bl	80001e0 <strcmp>
				//return PWM
//				sprintf(data,"!W_L_PWM:%.2f#W_R_PWM:%.2f#\n",myRobot.v_l_PWM,myRobot.v_r_PWM);
//				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
			}
			//return x y phi; !cmd:RUN#x:0.00#y:0.00#phi:0.00#
			sprintf(data,"!cmd:%s#x:%.2f#y:%.2f#phi:%.2f#\n",myRobot.cmd,myRobot.x,myRobot.y,rad_to_degree(myRobot.theta));
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f8a5 	bl	8000578 <__aeabi_f2d>
 800142e:	4604      	mov	r4, r0
 8001430:	460d      	mov	r5, r1
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f89e 	bl	8000578 <__aeabi_f2d>
 800143c:	4680      	mov	r8, r0
 800143e:	4689      	mov	r9, r1
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001442:	edd3 7a02 	vldr	s15, [r3, #8]
 8001446:	eeb0 0a67 	vmov.f32	s0, s15
 800144a:	f000 fc6d 	bl	8001d28 <rad_to_degree>
 800144e:	ee10 3a10 	vmov	r3, s0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f890 	bl	8000578 <__aeabi_f2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001460:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001464:	e9cd 4500 	strd	r4, r5, [sp]
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800146a:	491c      	ldr	r1, [pc, #112]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800146c:	481c      	ldr	r0, [pc, #112]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800146e:	f005 fc9f 	bl	8006db0 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
 8001472:	481b      	ldr	r0, [pc, #108]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001474:	f7fe ff14 	bl	80002a0 <strlen>
 8001478:	4603      	mov	r3, r0
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4918      	ldr	r1, [pc, #96]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001480:	4818      	ldr	r0, [pc, #96]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001482:	f003 fd19 	bl	8004eb8 <HAL_UART_Transmit_DMA>

//			sprintf(data,"!cmd:%s#v_r:%.2f#v_l:%.2f#\n",my_desired_point.cmd_d,my_desired_point.v_r,my_desired_point.v_l);
//			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
			//reset count
			count=0;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
		}
		count++;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001494:	6013      	str	r3, [r2, #0]
	}
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014a0:	40000400 	.word	0x40000400
 80014a4:	200002b4 	.word	0x200002b4
 80014a8:	20000300 	.word	0x20000300
 80014ac:	20000234 	.word	0x20000234
 80014b0:	20000390 	.word	0x20000390
 80014b4:	20000238 	.word	0x20000238
 80014b8:	2000023c 	.word	0x2000023c
 80014bc:	20000244 	.word	0x20000244
 80014c0:	20000240 	.word	0x20000240
 80014c4:	20000248 	.word	0x20000248
 80014c8:	3dcccccd 	.word	0x3dcccccd
 80014cc:	20000480 	.word	0x20000480
 80014d0:	20000000 	.word	0x20000000
 80014d4:	0800c5cc 	.word	0x0800c5cc
 80014d8:	2000049c 	.word	0x2000049c
 80014dc:	0800c5d0 	.word	0x0800c5d0
 80014e0:	2000024c 	.word	0x2000024c
 80014e4:	200003d8 	.word	0x200003d8

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ec:	f000 ff90 	bl	8002410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f960 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f000 fbc0 	bl	8001c78 <MX_GPIO_Init>
  MX_DMA_Init();
 80014f8:	f000 fb9e 	bl	8001c38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014fc:	f000 fb72 	bl	8001be4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001500:	f000 f9b6 	bl	8001870 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001504:	f000 fa78 	bl	80019f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001508:	f000 faca 	bl	8001aa0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800150c:	f000 fb16 	bl	8001b3c <MX_TIM5_Init>


  /* USER CODE BEGIN 2 */
  //start  uart2 interupt
  // todo
  init_Robot(&myRobot);
 8001510:	4891      	ldr	r0, [pc, #580]	; (8001758 <main+0x270>)
 8001512:	f7ff fd85 	bl	8001020 <init_Robot>
  desired_point_init(&my_desired_point);
 8001516:	4891      	ldr	r0, [pc, #580]	; (800175c <main+0x274>)
 8001518:	f7ff fed2 	bl	80012c0 <desired_point_init>
  HAL_UART_Receive_IT(&huart2, &Rx, 1);
 800151c:	2201      	movs	r2, #1
 800151e:	4990      	ldr	r1, [pc, #576]	; (8001760 <main+0x278>)
 8001520:	4890      	ldr	r0, [pc, #576]	; (8001764 <main+0x27c>)
 8001522:	f003 fca3 	bl	8004e6c <HAL_UART_Receive_IT>
  //ref KP KI KD
//  pid_set_Kp_Ki_Kd(&hpid,1.55, 0.055, 0.025,0.1);
  pid_set_Kp_Ki_Kd(&hpid, 5, 0.13, 0.025,0.1);
 8001526:	eddf 1a90 	vldr	s3, [pc, #576]	; 8001768 <main+0x280>
 800152a:	ed9f 1a90 	vldr	s2, [pc, #576]	; 800176c <main+0x284>
 800152e:	eddf 0a90 	vldr	s1, [pc, #576]	; 8001770 <main+0x288>
 8001532:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001536:	488f      	ldr	r0, [pc, #572]	; (8001774 <main+0x28c>)
 8001538:	f000 fc46 	bl	8001dc8 <pid_set_Kp_Ki_Kd>
  //start PWM TIM1; chanel 1,2 for left motor ; chanel 3,4 for right  motor
  //chanel 1 PE9 ;chanel 2 PE11; chanel 3 PE23 ; chanel 4 PE14;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800153c:	2100      	movs	r1, #0
 800153e:	488e      	ldr	r0, [pc, #568]	; (8001778 <main+0x290>)
 8001540:	f002 fc12 	bl	8003d68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001544:	2104      	movs	r1, #4
 8001546:	488c      	ldr	r0, [pc, #560]	; (8001778 <main+0x290>)
 8001548:	f002 fc0e 	bl	8003d68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800154c:	2108      	movs	r1, #8
 800154e:	488a      	ldr	r0, [pc, #552]	; (8001778 <main+0x290>)
 8001550:	f002 fc0a 	bl	8003d68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001554:	210c      	movs	r1, #12
 8001556:	4888      	ldr	r0, [pc, #544]	; (8001778 <main+0x290>)
 8001558:	f002 fc06 	bl	8003d68 <HAL_TIM_PWM_Start>
  //start encoder Mode
  // TIM2 For encoder of left motor , TIM5 for encoder of Right motor
  // TIM2:PA5,PB3 ; TIM5 PA0,PA1
//  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
//  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1|TIM_CHANNEL_2);
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 800155c:	2104      	movs	r1, #4
 800155e:	4887      	ldr	r0, [pc, #540]	; (800177c <main+0x294>)
 8001560:	f002 fd58 	bl	8004014 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8001564:	2100      	movs	r1, #0
 8001566:	4886      	ldr	r0, [pc, #536]	; (8001780 <main+0x298>)
 8001568:	f002 fd54 	bl	8004014 <HAL_TIM_Encoder_Start>
  //start interrupt timer 3
  HAL_TIM_Base_Start_IT(&htim3);
 800156c:	4885      	ldr	r0, [pc, #532]	; (8001784 <main+0x29c>)
 800156e:	f002 fb3f 	bl	8003bf0 <HAL_TIM_Base_Start_IT>
//	  HAL_UART_Transmit(&huart2, tx_buff, sizeof(tx_buff),100);
//	  HAL_Delay(100);
// todo pid

	  // transmit data when stm32 recieved data form PC
	  if(uart_flag == 1){
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <main+0x2a0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d12d      	bne.n	80015d6 <main+0xee>
		  //decoding frame data;
//		  split_frame((char*)uart_buff, &my_desired_point);
		  split_frame_vel((char*)uart_buff, &my_desired_point);
 800157a:	4978      	ldr	r1, [pc, #480]	; (800175c <main+0x274>)
 800157c:	4883      	ldr	r0, [pc, #524]	; (800178c <main+0x2a4>)
 800157e:	f7ff febb 	bl	80012f8 <split_frame_vel>
		  if(strcmp(my_desired_point.cmd_d, "RUN") == 0){
 8001582:	4983      	ldr	r1, [pc, #524]	; (8001790 <main+0x2a8>)
 8001584:	4875      	ldr	r0, [pc, #468]	; (800175c <main+0x274>)
 8001586:	f7fe fe2b 	bl	80001e0 <strcmp>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10d      	bne.n	80015ac <main+0xc4>
			  strcpy(myRobot.cmd,my_desired_point.cmd_d);
 8001590:	4972      	ldr	r1, [pc, #456]	; (800175c <main+0x274>)
 8001592:	4880      	ldr	r0, [pc, #512]	; (8001794 <main+0x2ac>)
 8001594:	f005 fd1d 	bl	8006fd2 <strcpy>
			  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port,PE10_EN_DRIVER_Pin,SET);
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159e:	487e      	ldr	r0, [pc, #504]	; (8001798 <main+0x2b0>)
 80015a0:	f001 fe64 	bl	800326c <HAL_GPIO_WritePin>
			  en_run = 1;
 80015a4:	4b7d      	ldr	r3, [pc, #500]	; (800179c <main+0x2b4>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e008      	b.n	80015be <main+0xd6>
		  }
		  else{
			  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port,PE10_EN_DRIVER_Pin,RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b2:	4879      	ldr	r0, [pc, #484]	; (8001798 <main+0x2b0>)
 80015b4:	f001 fe5a 	bl	800326c <HAL_GPIO_WritePin>
			  en_run = 0;
 80015b8:	4b78      	ldr	r3, [pc, #480]	; (800179c <main+0x2b4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

		  //send data to check desire point: !cmd:RUN#v_r:0.00#v_l:0.00#\n
//		  sprintf(data,"!cmd:%s#v_r:%.2f#v_l:%.2f#\n",my_desired_point.cmd_d,my_desired_point.v_r,my_desired_point.v_l);
//		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));

		  HAL_Delay(100);
 80015be:	2064      	movs	r0, #100	; 0x64
 80015c0:	f000 ff98 	bl	80024f4 <HAL_Delay>
		  uart_len = 0;
 80015c4:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <main+0x2b8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
		  uart_flag =0;
 80015ca:	4b6f      	ldr	r3, [pc, #444]	; (8001788 <main+0x2a0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
		  en_PID = 1;
 80015d0:	4b74      	ldr	r3, [pc, #464]	; (80017a4 <main+0x2bc>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
	  }
		 // PID and control motor
	  	  if(en_PID ==1){
 80015d6:	4b73      	ldr	r3, [pc, #460]	; (80017a4 <main+0x2bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d155      	bne.n	800168a <main+0x1a2>
	  		  // after recieve data store desire data to robot
	  		  myRobot.v_r = my_desired_point.v_r;
 80015de:	4b5f      	ldr	r3, [pc, #380]	; (800175c <main+0x274>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4a5d      	ldr	r2, [pc, #372]	; (8001758 <main+0x270>)
 80015e4:	6153      	str	r3, [r2, #20]
	  		  myRobot.v_l = my_desired_point.v_l;
 80015e6:	4b5d      	ldr	r3, [pc, #372]	; (800175c <main+0x274>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a5b      	ldr	r2, [pc, #364]	; (8001758 <main+0x270>)
 80015ec:	6113      	str	r3, [r2, #16]
		  	  //limint vr vl
		  	  if(abs(myRobot.v_r) > v_max){
 80015ee:	4b5a      	ldr	r3, [pc, #360]	; (8001758 <main+0x270>)
 80015f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80015f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f8:	ee17 3a90 	vmov	r3, s15
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bfb8      	it	lt
 8001600:	425b      	neglt	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	dd0e      	ble.n	8001624 <main+0x13c>
		  		  if(myRobot.v_r >= 0 )
 8001606:	4b54      	ldr	r3, [pc, #336]	; (8001758 <main+0x270>)
 8001608:	edd3 7a05 	vldr	s15, [r3, #20]
 800160c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001614:	db03      	blt.n	800161e <main+0x136>
		  			  myRobot.v_r  = (float) v_max;
 8001616:	4b50      	ldr	r3, [pc, #320]	; (8001758 <main+0x270>)
 8001618:	4a63      	ldr	r2, [pc, #396]	; (80017a8 <main+0x2c0>)
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	e002      	b.n	8001624 <main+0x13c>
		  		  else
		  			  myRobot.v_r  = (float)-1* v_max;
 800161e:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <main+0x270>)
 8001620:	4a62      	ldr	r2, [pc, #392]	; (80017ac <main+0x2c4>)
 8001622:	615a      	str	r2, [r3, #20]
		  		  if(myRobot.v_r >= 0 )
		  			  myRobot.v_r  = (float)v_min;
		  		  else
		  			  myRobot.v_r = (float)-v_min ;
		  	  }
		  	  if(abs(myRobot.v_l) > v_max){
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <main+0x270>)
 8001626:	edd3 7a04 	vldr	s15, [r3, #16]
 800162a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162e:	ee17 3a90 	vmov	r3, s15
 8001632:	2b00      	cmp	r3, #0
 8001634:	bfb8      	it	lt
 8001636:	425b      	neglt	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	dd0e      	ble.n	800165a <main+0x172>
		  		  if(myRobot.v_l > 0 )
 800163c:	4b46      	ldr	r3, [pc, #280]	; (8001758 <main+0x270>)
 800163e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	dd03      	ble.n	8001654 <main+0x16c>
		  			  myRobot.v_l  = (float)v_max;
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <main+0x270>)
 800164e:	4a56      	ldr	r2, [pc, #344]	; (80017a8 <main+0x2c0>)
 8001650:	611a      	str	r2, [r3, #16]
 8001652:	e002      	b.n	800165a <main+0x172>
		  		  else
		  			  myRobot.v_l  = (float)-1* v_max;
 8001654:	4b40      	ldr	r3, [pc, #256]	; (8001758 <main+0x270>)
 8001656:	4a55      	ldr	r2, [pc, #340]	; (80017ac <main+0x2c4>)
 8001658:	611a      	str	r2, [r3, #16]
		  			  myRobot.v_l  =(float) v_min;
		  		  else
		  			  myRobot.v_l = (float)-v_min ;
		  	  }
		  	  // limit max min PWM for motor
		  	  myRobot.v_l_PWM = mps_to_PWM(myRobot.v_l);
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <main+0x270>)
 800165c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	f000 fb84 	bl	8001d70 <mps_to_PWM>
 8001668:	eef0 7a40 	vmov.f32	s15, s0
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <main+0x270>)
 800166e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		  	  myRobot.v_r_PWM = mps_to_PWM(myRobot.v_r );
 8001672:	4b39      	ldr	r3, [pc, #228]	; (8001758 <main+0x270>)
 8001674:	edd3 7a05 	vldr	s15, [r3, #20]
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	f000 fb78 	bl	8001d70 <mps_to_PWM>
 8001680:	eef0 7a40 	vmov.f32	s15, s0
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <main+0x270>)
 8001686:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
//	  		  en_PID =0;
	  	  }


		  // PWM cho 2 motor
		  if(en_run == 1){
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <main+0x2b4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d14e      	bne.n	8001730 <main+0x248>
			  //left motor
			  // clockwise
			  if(myRobot.v_l_PWM > 0){
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <main+0x270>)
 8001694:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	dd0e      	ble.n	80016c0 <main+0x1d8>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,(int)myRobot.v_l_PWM);//
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <main+0x270>)
 80016a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <main+0x290>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	ee17 2a90 	vmov	r2, s15
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <main+0x290>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38
 80016be:	e00f      	b.n	80016e0 <main+0x1f8>
			  }
			  //counter Clokwise
			  else{
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);//
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <main+0x290>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2200      	movs	r2, #0
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,(int)-myRobot.v_l_PWM);
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <main+0x270>)
 80016ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016ce:	eef1 7a67 	vneg.f32	s15, s15
 80016d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <main+0x290>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	ee17 2a90 	vmov	r2, s15
 80016de:	639a      	str	r2, [r3, #56]	; 0x38
			  }
			  //right motor
			  // clockwise
			  if(myRobot.v_r_PWM > 0){
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <main+0x270>)
 80016e2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	dd0e      	ble.n	800170e <main+0x226>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,(int)myRobot.v_r_PWM);//
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <main+0x270>)
 80016f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <main+0x290>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	ee17 2a90 	vmov	r2, s15
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <main+0x290>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2200      	movs	r2, #0
 800170a:	641a      	str	r2, [r3, #64]	; 0x40
 800170c:	e731      	b.n	8001572 <main+0x8a>
			  }
			  //counter Clokwise
			  else{
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);//
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <main+0x290>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2200      	movs	r2, #0
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,(int)-1*myRobot.v_r_PWM);
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <main+0x270>)
 8001718:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800171c:	eef1 7a67 	vneg.f32	s15, s15
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <main+0x290>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001728:	ee17 2a90 	vmov	r2, s15
 800172c:	641a      	str	r2, [r3, #64]	; 0x40
 800172e:	e720      	b.n	8001572 <main+0x8a>
			  }
		  }
		  else{
			  strcpy(myRobot.cmd,"STP");
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <main+0x2ac>)
 8001732:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <main+0x2c8>)
 8001734:	601a      	str	r2, [r3, #0]
//			  myRobot.theta = 0.0;
//			  init_Robot(&myRobot);
			  //left motor
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);//
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <main+0x290>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <main+0x290>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
			  //right motor
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);//
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <main+0x290>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2200      	movs	r2, #0
 800174c:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <main+0x290>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
	  if(uart_flag == 1){
 8001756:	e70c      	b.n	8001572 <main+0x8a>
 8001758:	20000480 	.word	0x20000480
 800175c:	200004dc 	.word	0x200004dc
 8001760:	200001f4 	.word	0x200001f4
 8001764:	200003d8 	.word	0x200003d8
 8001768:	3dcccccd 	.word	0x3dcccccd
 800176c:	3ccccccd 	.word	0x3ccccccd
 8001770:	3e051eb8 	.word	0x3e051eb8
 8001774:	200004b4 	.word	0x200004b4
 8001778:	200002b8 	.word	0x200002b8
 800177c:	20000300 	.word	0x20000300
 8001780:	20000390 	.word	0x20000390
 8001784:	20000348 	.word	0x20000348
 8001788:	2000022c 	.word	0x2000022c
 800178c:	200001f8 	.word	0x200001f8
 8001790:	0800c5cc 	.word	0x0800c5cc
 8001794:	2000049c 	.word	0x2000049c
 8001798:	40021000 	.word	0x40021000
 800179c:	200002b0 	.word	0x200002b0
 80017a0:	20000230 	.word	0x20000230
 80017a4:	20000000 	.word	0x20000000
 80017a8:	3e4ccccd 	.word	0x3e4ccccd
 80017ac:	be4ccccd 	.word	0xbe4ccccd
 80017b0:	00505453 	.word	0x00505453

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b094      	sub	sp, #80	; 0x50
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	2230      	movs	r2, #48	; 0x30
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 fb85 	bl	8006ed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <SystemClock_Config+0xb4>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	4a21      	ldr	r2, [pc, #132]	; (8001868 <SystemClock_Config+0xb4>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <SystemClock_Config+0xb4>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	4b1c      	ldr	r3, [pc, #112]	; (800186c <SystemClock_Config+0xb8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <SystemClock_Config+0xb8>)
 80017fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <SystemClock_Config+0xb8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001814:	2301      	movs	r3, #1
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001818:	2310      	movs	r3, #16
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001820:	f107 0320 	add.w	r3, r7, #32
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fd3b 	bl	80032a0 <HAL_RCC_OscConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001830:	f000 fa74 	bl	8001d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001834:	230f      	movs	r3, #15
 8001836:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f001 ff9e 	bl	8003790 <HAL_RCC_ClockConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800185a:	f000 fa5f 	bl	8001d1c <Error_Handler>
  }
}
 800185e:	bf00      	nop
 8001860:	3750      	adds	r7, #80	; 0x50
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	40007000 	.word	0x40007000

08001870 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b096      	sub	sp, #88	; 0x58
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001876:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	615a      	str	r2, [r3, #20]
 80018a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2220      	movs	r2, #32
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f005 fb12 	bl	8006ed2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ae:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <MX_TIM1_Init+0x180>)
 80018b0:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <MX_TIM1_Init+0x184>)
 80018b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80018b4:	4b4e      	ldr	r3, [pc, #312]	; (80019f0 <MX_TIM1_Init+0x180>)
 80018b6:	220f      	movs	r2, #15
 80018b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ba:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <MX_TIM1_Init+0x180>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80018c0:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <MX_TIM1_Init+0x180>)
 80018c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <MX_TIM1_Init+0x180>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ce:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <MX_TIM1_Init+0x180>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <MX_TIM1_Init+0x180>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018da:	4845      	ldr	r0, [pc, #276]	; (80019f0 <MX_TIM1_Init+0x180>)
 80018dc:	f002 f938 	bl	8003b50 <HAL_TIM_Base_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018e6:	f000 fa19 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018f4:	4619      	mov	r1, r3
 80018f6:	483e      	ldr	r0, [pc, #248]	; (80019f0 <MX_TIM1_Init+0x180>)
 80018f8:	f002 fdcc 	bl	8004494 <HAL_TIM_ConfigClockSource>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001902:	f000 fa0b 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001906:	483a      	ldr	r0, [pc, #232]	; (80019f0 <MX_TIM1_Init+0x180>)
 8001908:	f002 f9d4 	bl	8003cb4 <HAL_TIM_PWM_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001912:	f000 fa03 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800191e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001922:	4619      	mov	r1, r3
 8001924:	4832      	ldr	r0, [pc, #200]	; (80019f0 <MX_TIM1_Init+0x180>)
 8001926:	f003 f97d 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001930:	f000 f9f4 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001934:	2360      	movs	r3, #96	; 0x60
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001940:	2300      	movs	r3, #0
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001954:	2200      	movs	r2, #0
 8001956:	4619      	mov	r1, r3
 8001958:	4825      	ldr	r0, [pc, #148]	; (80019f0 <MX_TIM1_Init+0x180>)
 800195a:	f002 fcd9 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001964:	f000 f9da 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196c:	2204      	movs	r2, #4
 800196e:	4619      	mov	r1, r3
 8001970:	481f      	ldr	r0, [pc, #124]	; (80019f0 <MX_TIM1_Init+0x180>)
 8001972:	f002 fccd 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800197c:	f000 f9ce 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	2208      	movs	r2, #8
 8001986:	4619      	mov	r1, r3
 8001988:	4819      	ldr	r0, [pc, #100]	; (80019f0 <MX_TIM1_Init+0x180>)
 800198a:	f002 fcc1 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001994:	f000 f9c2 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	220c      	movs	r2, #12
 800199e:	4619      	mov	r1, r3
 80019a0:	4813      	ldr	r0, [pc, #76]	; (80019f0 <MX_TIM1_Init+0x180>)
 80019a2:	f002 fcb5 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80019ac:	f000 f9b6 	bl	8001d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <MX_TIM1_Init+0x180>)
 80019d4:	f003 f994 	bl	8004d00 <HAL_TIMEx_ConfigBreakDeadTime>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80019de:	f000 f99d 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019e2:	4803      	ldr	r0, [pc, #12]	; (80019f0 <MX_TIM1_Init+0x180>)
 80019e4:	f000 fb0e 	bl	8002004 <HAL_TIM_MspPostInit>

}
 80019e8:	bf00      	nop
 80019ea:	3758      	adds	r7, #88	; 0x58
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200002b8 	.word	0x200002b8
 80019f4:	40010000 	.word	0x40010000

080019f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08c      	sub	sp, #48	; 0x30
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f005 fa63 	bl	8006ed2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <MX_TIM2_Init+0xa4>)
 8001a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <MX_TIM2_Init+0xa4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <MX_TIM2_Init+0xa4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <MX_TIM2_Init+0xa4>)
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_TIM2_Init+0xa4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_TIM2_Init+0xa4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a44:	2301      	movs	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a54:	2301      	movs	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	4619      	mov	r1, r3
 8001a66:	480d      	ldr	r0, [pc, #52]	; (8001a9c <MX_TIM2_Init+0xa4>)
 8001a68:	f002 fa2e 	bl	8003ec8 <HAL_TIM_Encoder_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a72:	f000 f953 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <MX_TIM2_Init+0xa4>)
 8001a84:	f003 f8ce 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a8e:	f000 f945 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	3730      	adds	r7, #48	; 0x30
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000300 	.word	0x20000300

08001aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001abe:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <MX_TIM3_Init+0x98>)
 8001ac0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001ac4:	229f      	movs	r2, #159	; 0x9f
 8001ac6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001ad0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ad4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ae2:	4814      	ldr	r0, [pc, #80]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001ae4:	f002 f834 	bl	8003b50 <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001aee:	f000 f915 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001b00:	f002 fcc8 	bl	8004494 <HAL_TIM_ConfigClockSource>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b0a:	f000 f907 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_TIM3_Init+0x94>)
 8001b1c:	f003 f882 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b26:	f000 f8f9 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000348 	.word	0x20000348
 8001b38:	40000400 	.word	0x40000400

08001b3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	2224      	movs	r2, #36	; 0x24
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f005 f9c1 	bl	8006ed2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <MX_TIM5_Init+0xa0>)
 8001b5a:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <MX_TIM5_Init+0xa4>)
 8001b5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <MX_TIM5_Init+0xa0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <MX_TIM5_Init+0xa0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <MX_TIM5_Init+0xa0>)
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_TIM5_Init+0xa0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <MX_TIM5_Init+0xa0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b86:	2301      	movs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b96:	2301      	movs	r3, #1
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <MX_TIM5_Init+0xa0>)
 8001baa:	f002 f98d 	bl	8003ec8 <HAL_TIM_Encoder_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001bb4:	f000 f8b2 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_TIM5_Init+0xa0>)
 8001bc6:	f003 f82d 	bl	8004c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001bd0:	f000 f8a4 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	3730      	adds	r7, #48	; 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000390 	.word	0x20000390
 8001be0:	40000c00 	.word	0x40000c00

08001be4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <MX_USART2_UART_Init+0x50>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_USART2_UART_Init+0x4c>)
 8001c1c:	f003 f8d6 	bl	8004dcc <HAL_UART_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c26:	f000 f879 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200003d8 	.word	0x200003d8
 8001c34:	40004400 	.word	0x40004400

08001c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_DMA_Init+0x3c>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <MX_DMA_Init+0x3c>)
 8001c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_DMA_Init+0x3c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2011      	movs	r0, #17
 8001c60:	f000 fd47 	bl	80026f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c64:	2011      	movs	r0, #17
 8001c66:	f000 fd60 	bl	800272a <HAL_NVIC_EnableIRQ>

}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800

08001c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <MX_GPIO_Init+0x9c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <MX_GPIO_Init+0x9c>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MX_GPIO_Init+0x9c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <MX_GPIO_Init+0x9c>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <MX_GPIO_Init+0x9c>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_GPIO_Init+0x9c>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_GPIO_Init+0x9c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <MX_GPIO_Init+0x9c>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_GPIO_Init+0x9c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port, PE10_EN_DRIVER_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ce8:	480b      	ldr	r0, [pc, #44]	; (8001d18 <MX_GPIO_Init+0xa0>)
 8001cea:	f001 fabf 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10_EN_DRIVER_Pin */
  GPIO_InitStruct.Pin = PE10_EN_DRIVER_Pin;
 8001cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PE10_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	4804      	ldr	r0, [pc, #16]	; (8001d18 <MX_GPIO_Init+0xa0>)
 8001d08:	f001 f92c 	bl	8002f64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d0c:	bf00      	nop
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40021000 	.word	0x40021000

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d20:	b672      	cpsid	i
}
 8001d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <Error_Handler+0x8>
	...

08001d28 <rad_to_degree>:
 *  Created on: Apr 1, 2024
 *      Author: Nghia
 */
#include "pid_module.h"
//convert unit
float rad_to_degree(float rad){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	ed87 0a01 	vstr	s0, [r7, #4]
	float degree = rad *(180/  3.14);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7fe fc20 	bl	8000578 <__aeabi_f2d>
 8001d38:	a30b      	add	r3, pc, #44	; (adr r3, 8001d68 <rad_to_degree+0x40>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe fc73 	bl	8000628 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe ff65 	bl	8000c18 <__aeabi_d2f>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	60fb      	str	r3, [r7, #12]
	return degree;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	ee07 3a90 	vmov	s15, r3
}
 8001d58:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	f3af 8000 	nop.w
 8001d68:	61d59ae7 	.word	0x61d59ae7
 8001d6c:	404ca994 	.word	0x404ca994

08001d70 <mps_to_PWM>:
	return (float)rpm*pi*d/60;
}
float rpm_to_pwm(float rpm){
	return (float)rpm*1000/80.167;
}
float mps_to_PWM(float mps){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	ed87 0a01 	vstr	s0, [r7, #4]
	return (float) mps*(60/(3.14*d))*(1000/80.167);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fbfc 	bl	8000578 <__aeabi_f2d>
 8001d80:	a30d      	add	r3, pc, #52	; (adr r3, 8001db8 <mps_to_PWM+0x48>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fc4f 	bl	8000628 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	a30b      	add	r3, pc, #44	; (adr r3, 8001dc0 <mps_to_PWM+0x50>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fc46 	bl	8000628 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe ff38 	bl	8000c18 <__aeabi_d2f>
 8001da8:	4603      	mov	r3, r0
 8001daa:	ee07 3a90 	vmov	s15, r3
}
 8001dae:	eeb0 0a67 	vmov.f32	s0, s15
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	a12d0766 	.word	0xa12d0766
 8001dbc:	40725f93 	.word	0x40725f93
 8001dc0:	f6f74f9a 	.word	0xf6f74f9a
 8001dc4:	4028f2aa 	.word	0x4028f2aa

08001dc8 <pid_set_Kp_Ki_Kd>:

// initial pid
void pid_set_Kp_Ki_Kd(PID_handleTypedef* hpid,float Kp,float Ki,float Kd, float delta_t){
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6178      	str	r0, [r7, #20]
 8001dd0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001dd4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001dd8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001ddc:	edc7 1a01 	vstr	s3, [r7, #4]
    hpid->Kp = Kp;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	601a      	str	r2, [r3, #0]
    hpid->Ki = Ki;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
    hpid->Kd = Kd;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	609a      	str	r2, [r3, #8]
    hpid->delta_t = delta_t;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_TIM_Base_MspInit+0x70>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d10e      	bne.n	8001e84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_TIM_Base_MspInit+0x74>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <HAL_TIM_Base_MspInit+0x74>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_TIM_Base_MspInit+0x74>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e82:	e01a      	b.n	8001eba <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_TIM_Base_MspInit+0x78>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d115      	bne.n	8001eba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_TIM_Base_MspInit+0x74>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <HAL_TIM_Base_MspInit+0x74>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_TIM_Base_MspInit+0x74>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2101      	movs	r1, #1
 8001eae:	201d      	movs	r0, #29
 8001eb0:	f000 fc1f 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001eb4:	201d      	movs	r0, #29
 8001eb6:	f000 fc38 	bl	800272a <HAL_NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40000400 	.word	0x40000400

08001ed0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d14a      	bne.n	8001f88 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	4b3f      	ldr	r3, [pc, #252]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a3e      	ldr	r2, [pc, #248]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b3c      	ldr	r3, [pc, #240]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a37      	ldr	r2, [pc, #220]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a30      	ldr	r2, [pc, #192]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f46:	2320      	movs	r3, #32
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f56:	2301      	movs	r3, #1
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4825      	ldr	r0, [pc, #148]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f62:	f000 ffff 	bl	8002f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f66:	2308      	movs	r3, #8
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f76:	2301      	movs	r3, #1
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	481e      	ldr	r0, [pc, #120]	; (8001ffc <HAL_TIM_Encoder_MspInit+0x12c>)
 8001f82:	f000 ffef 	bl	8002f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f86:	e030      	b.n	8001fea <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_TIM_Encoder_MspInit+0x130>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d12b      	bne.n	8001fea <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x124>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fe6:	f000 ffbd 	bl	8002f64 <HAL_GPIO_Init>
}
 8001fea:	bf00      	nop
 8001fec:	3730      	adds	r7, #48	; 0x30
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40000c00 	.word	0x40000c00

08002004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_TIM_MspPostInit+0x68>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d11e      	bne.n	8002064 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_TIM_MspPostInit+0x6c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_TIM_MspPostInit+0x6c>)
 8002030:	f043 0310 	orr.w	r3, r3, #16
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_TIM_MspPostInit+0x6c>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002042:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002046:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	4619      	mov	r1, r3
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <HAL_TIM_MspPostInit+0x70>)
 8002060:	f000 ff80 	bl	8002f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40010000 	.word	0x40010000
 8002070:	40023800 	.word	0x40023800
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a34      	ldr	r2, [pc, #208]	; (8002168 <HAL_UART_MspInit+0xf0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d161      	bne.n	800215e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b33      	ldr	r3, [pc, #204]	; (800216c <HAL_UART_MspInit+0xf4>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a32      	ldr	r2, [pc, #200]	; (800216c <HAL_UART_MspInit+0xf4>)
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_UART_MspInit+0xf4>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_UART_MspInit+0xf4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a2b      	ldr	r2, [pc, #172]	; (800216c <HAL_UART_MspInit+0xf4>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_UART_MspInit+0xf4>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020d2:	230c      	movs	r3, #12
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e2:	2307      	movs	r3, #7
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4820      	ldr	r0, [pc, #128]	; (8002170 <HAL_UART_MspInit+0xf8>)
 80020ee:	f000 ff39 	bl	8002f64 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_UART_MspInit+0xfc>)
 80020f4:	4a20      	ldr	r2, [pc, #128]	; (8002178 <HAL_UART_MspInit+0x100>)
 80020f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_UART_MspInit+0xfc>)
 80020fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_UART_MspInit+0xfc>)
 8002102:	2240      	movs	r2, #64	; 0x40
 8002104:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_UART_MspInit+0xfc>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_UART_MspInit+0xfc>)
 800210e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002112:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_UART_MspInit+0xfc>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <HAL_UART_MspInit+0xfc>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_UART_MspInit+0xfc>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_UART_MspInit+0xfc>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_UART_MspInit+0xfc>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002132:	4810      	ldr	r0, [pc, #64]	; (8002174 <HAL_UART_MspInit+0xfc>)
 8002134:	f000 fb14 	bl	8002760 <HAL_DMA_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800213e:	f7ff fded 	bl	8001d1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <HAL_UART_MspInit+0xfc>)
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_UART_MspInit+0xfc>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2026      	movs	r0, #38	; 0x26
 8002154:	f000 facd 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002158:	2026      	movs	r0, #38	; 0x26
 800215a:	f000 fae6 	bl	800272a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	3728      	adds	r7, #40	; 0x28
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40004400 	.word	0x40004400
 800216c:	40023800 	.word	0x40023800
 8002170:	40020000 	.word	0x40020000
 8002174:	20000420 	.word	0x20000420
 8002178:	400260a0 	.word	0x400260a0

0800217c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002180:	e7fe      	b.n	8002180 <NMI_Handler+0x4>

08002182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <HardFault_Handler+0x4>

08002188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <MemManage_Handler+0x4>

0800218e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002192:	e7fe      	b.n	8002192 <BusFault_Handler+0x4>

08002194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <UsageFault_Handler+0x4>

0800219a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c8:	f000 f974 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <DMA1_Stream6_IRQHandler+0x10>)
 80021d6:	f000 fc5b 	bl	8002a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000420 	.word	0x20000420

080021e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <TIM3_IRQHandler+0x10>)
 80021ea:	f001 ffa1 	bl	8004130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000348 	.word	0x20000348

080021f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <USART2_IRQHandler+0x10>)
 80021fe:	f002 fecb 	bl	8004f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200003d8 	.word	0x200003d8

0800220c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return 1;
 8002210:	2301      	movs	r3, #1
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_kill>:

int _kill(int pid, int sig)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002226:	f004 fea7 	bl	8006f78 <__errno>
 800222a:	4603      	mov	r3, r0
 800222c:	2216      	movs	r2, #22
 800222e:	601a      	str	r2, [r3, #0]
  return -1;
 8002230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_exit>:

void _exit (int status)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ffe7 	bl	800221c <_kill>
  while (1) {}    /* Make sure we hang here */
 800224e:	e7fe      	b.n	800224e <_exit+0x12>

08002250 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	e00a      	b.n	8002278 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002262:	f3af 8000 	nop.w
 8002266:	4601      	mov	r1, r0
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	60ba      	str	r2, [r7, #8]
 800226e:	b2ca      	uxtb	r2, r1
 8002270:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3301      	adds	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	dbf0      	blt.n	8002262 <_read+0x12>
  }

  return len;
 8002280:	687b      	ldr	r3, [r7, #4]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e009      	b.n	80022b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	60ba      	str	r2, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3301      	adds	r3, #1
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dbf1      	blt.n	800229c <_write+0x12>
  }
  return len;
 80022b8:	687b      	ldr	r3, [r7, #4]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_close>:

int _close(int file)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ea:	605a      	str	r2, [r3, #4]
  return 0;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_isatty>:

int _isatty(int file)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <_sbrk+0x5c>)
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <_sbrk+0x60>)
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <_sbrk+0x64>)
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <_sbrk+0x68>)
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	429a      	cmp	r2, r3
 800235a:	d207      	bcs.n	800236c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800235c:	f004 fe0c 	bl	8006f78 <__errno>
 8002360:	4603      	mov	r3, r0
 8002362:	220c      	movs	r2, #12
 8002364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	e009      	b.n	8002380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <_sbrk+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <_sbrk+0x64>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <_sbrk+0x64>)
 800237c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237e:	68fb      	ldr	r3, [r7, #12]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20020000 	.word	0x20020000
 800238c:	00000400 	.word	0x00000400
 8002390:	200004f4 	.word	0x200004f4
 8002394:	20000648 	.word	0x20000648

08002398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <SystemInit+0x20>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <SystemInit+0x20>)
 80023a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023c0:	f7ff ffea 	bl	8002398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c4:	480c      	ldr	r0, [pc, #48]	; (80023f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023c6:	490d      	ldr	r1, [pc, #52]	; (80023fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023dc:	4c0a      	ldr	r4, [pc, #40]	; (8002408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ea:	f004 fdcb 	bl	8006f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ee:	f7ff f87b 	bl	80014e8 <main>
  bx  lr    
 80023f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023fc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002400:	0800ccc0 	.word	0x0800ccc0
  ldr r2, =_sbss
 8002404:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002408:	20000648 	.word	0x20000648

0800240c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC_IRQHandler>
	...

08002410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <HAL_Init+0x40>)
 800241a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_Init+0x40>)
 8002426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_Init+0x40>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 f94f 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	200f      	movs	r0, #15
 8002440:	f000 f808 	bl	8002454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002444:	f7ff fcde 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023c00 	.word	0x40023c00

08002454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x54>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x58>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f967 	bl	8002746 <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f000 f92f 	bl	80026f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <HAL_InitTick+0x5c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000004 	.word	0x20000004
 80024ac:	2000000c 	.word	0x2000000c
 80024b0:	20000008 	.word	0x20000008

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	2000000c 	.word	0x2000000c
 80024d8:	200004f8 	.word	0x200004f8

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	200004f8 	.word	0x200004f8

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000000c 	.word	0x2000000c

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4907      	ldr	r1, [pc, #28]	; (80025d8 <__NVIC_EnableIRQ+0x38>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000e100 	.word	0xe000e100

080025dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	; (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	; (800262c <__NVIC_SetPriority+0x50>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1c3 0307 	rsb	r3, r3, #7
 800264a:	2b04      	cmp	r3, #4
 800264c:	bf28      	it	cs
 800264e:	2304      	movcs	r3, #4
 8002650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3304      	adds	r3, #4
 8002656:	2b06      	cmp	r3, #6
 8002658:	d902      	bls.n	8002660 <NVIC_EncodePriority+0x30>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3b03      	subs	r3, #3
 800265e:	e000      	b.n	8002662 <NVIC_EncodePriority+0x32>
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43d9      	mvns	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	4313      	orrs	r3, r2
         );
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	; 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a8:	d301      	bcc.n	80026ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00f      	b.n	80026ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <SysTick_Config+0x40>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b6:	210f      	movs	r1, #15
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f7ff ff8e 	bl	80025dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <SysTick_Config+0x40>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <SysTick_Config+0x40>)
 80026c8:	2207      	movs	r2, #7
 80026ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	e000e010 	.word	0xe000e010

080026dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff29 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002704:	f7ff ff3e 	bl	8002584 <__NVIC_GetPriorityGrouping>
 8002708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	6978      	ldr	r0, [r7, #20]
 8002710:	f7ff ff8e 	bl	8002630 <NVIC_EncodePriority>
 8002714:	4602      	mov	r2, r0
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff5d 	bl	80025dc <__NVIC_SetPriority>
}
 8002722:	bf00      	nop
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff31 	bl	80025a0 <__NVIC_EnableIRQ>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ffa2 	bl	8002698 <SysTick_Config>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800276c:	f7ff feb6 	bl	80024dc <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e099      	b.n	80028b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800279c:	e00f      	b.n	80027be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800279e:	f7ff fe9d 	bl	80024dc <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d908      	bls.n	80027be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2203      	movs	r2, #3
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e078      	b.n	80028b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e8      	bne.n	800279e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_DMA_Init+0x158>)
 80027d8:	4013      	ands	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	2b04      	cmp	r3, #4
 8002816:	d107      	bne.n	8002828 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4313      	orrs	r3, r2
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f023 0307 	bic.w	r3, r3, #7
 800283e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	2b04      	cmp	r3, #4
 8002850:	d117      	bne.n	8002882 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fb01 	bl	8002e6c <DMA_CheckFifoParam>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2240      	movs	r2, #64	; 0x40
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800287e:	2301      	movs	r3, #1
 8002880:	e016      	b.n	80028b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fab8 	bl	8002e00 <DMA_CalcBaseAndBitshift>
 8002890:	4603      	mov	r3, r0
 8002892:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	223f      	movs	r2, #63	; 0x3f
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	f010803f 	.word	0xf010803f

080028bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_DMA_Start_IT+0x26>
 80028de:	2302      	movs	r3, #2
 80028e0:	e040      	b.n	8002964 <HAL_DMA_Start_IT+0xa8>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d12f      	bne.n	8002956 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fa4a 	bl	8002da4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	223f      	movs	r2, #63	; 0x3f
 8002916:	409a      	lsls	r2, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0216 	orr.w	r2, r2, #22
 800292a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0208 	orr.w	r2, r2, #8
 8002942:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e005      	b.n	8002962 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800295e:	2302      	movs	r3, #2
 8002960:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002962:	7dfb      	ldrb	r3, [r7, #23]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800297a:	f7ff fdaf 	bl	80024dc <HAL_GetTick>
 800297e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d008      	beq.n	800299e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2280      	movs	r2, #128	; 0x80
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e052      	b.n	8002a44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0216 	bic.w	r2, r2, #22
 80029ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <HAL_DMA_Abort+0x62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0208 	bic.w	r2, r2, #8
 80029dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ee:	e013      	b.n	8002a18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029f0:	f7ff fd74 	bl	80024dc <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d90c      	bls.n	8002a18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2203      	movs	r2, #3
 8002a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e015      	b.n	8002a44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e4      	bne.n	80029f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	223f      	movs	r2, #63	; 0x3f
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d004      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2280      	movs	r2, #128	; 0x80
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00c      	b.n	8002a84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2205      	movs	r2, #5
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a9c:	4b8e      	ldr	r3, [pc, #568]	; (8002cd8 <HAL_DMA_IRQHandler+0x248>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a8e      	ldr	r2, [pc, #568]	; (8002cdc <HAL_DMA_IRQHandler+0x24c>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	0a9b      	lsrs	r3, r3, #10
 8002aa8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	2208      	movs	r2, #8
 8002abc:	409a      	lsls	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01a      	beq.n	8002afc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0204 	bic.w	r2, r2, #4
 8002ae2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	2208      	movs	r2, #8
 8002aea:	409a      	lsls	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	2201      	movs	r2, #1
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d012      	beq.n	8002b32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	2201      	movs	r2, #1
 8002b20:	409a      	lsls	r2, r3
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f043 0202 	orr.w	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	2204      	movs	r2, #4
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d012      	beq.n	8002b68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	2204      	movs	r2, #4
 8002b56:	409a      	lsls	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f043 0204 	orr.w	r2, r3, #4
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d043      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d03c      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d018      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d108      	bne.n	8002bc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d024      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4798      	blx	r3
 8002bbe:	e01f      	b.n	8002c00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	4798      	blx	r3
 8002bd0:	e016      	b.n	8002c00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d107      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0208 	bic.w	r2, r2, #8
 8002bee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	2220      	movs	r2, #32
 8002c06:	409a      	lsls	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 808f 	beq.w	8002d30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8087 	beq.w	8002d30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	2220      	movs	r2, #32
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b05      	cmp	r3, #5
 8002c38:	d136      	bne.n	8002ca8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0216 	bic.w	r2, r2, #22
 8002c48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <HAL_DMA_IRQHandler+0x1da>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0208 	bic.w	r2, r2, #8
 8002c78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	223f      	movs	r2, #63	; 0x3f
 8002c80:	409a      	lsls	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d07e      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
        }
        return;
 8002ca6:	e079      	b.n	8002d9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01d      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d031      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
 8002cd4:	e02c      	b.n	8002d30 <HAL_DMA_IRQHandler+0x2a0>
 8002cd6:	bf00      	nop
 8002cd8:	20000004 	.word	0x20000004
 8002cdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d023      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
 8002cf0:	e01e      	b.n	8002d30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10f      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0210 	bic.w	r2, r2, #16
 8002d0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d032      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d022      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2205      	movs	r2, #5
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d307      	bcc.n	8002d78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f2      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x2cc>
 8002d76:	e000      	b.n	8002d7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
 8002d9a:	e000      	b.n	8002d9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d9c:	bf00      	nop
    }
  }
}
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d108      	bne.n	8002de4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002de2:	e007      	b.n	8002df4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	60da      	str	r2, [r3, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	3b10      	subs	r3, #16
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <DMA_CalcBaseAndBitshift+0x64>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e1a:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <DMA_CalcBaseAndBitshift+0x68>)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d909      	bls.n	8002e42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e36:	f023 0303 	bic.w	r3, r3, #3
 8002e3a:	1d1a      	adds	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e40:	e007      	b.n	8002e52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	aaaaaaab 	.word	0xaaaaaaab
 8002e68:	0800c618 	.word	0x0800c618

08002e6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d11f      	bne.n	8002ec6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d856      	bhi.n	8002f3a <DMA_CheckFifoParam+0xce>
 8002e8c:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <DMA_CheckFifoParam+0x28>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eb7 	.word	0x08002eb7
 8002e9c:	08002ea5 	.word	0x08002ea5
 8002ea0:	08002f3b 	.word	0x08002f3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d046      	beq.n	8002f3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb4:	e043      	b.n	8002f3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ebe:	d140      	bne.n	8002f42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec4:	e03d      	b.n	8002f42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ece:	d121      	bne.n	8002f14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d837      	bhi.n	8002f46 <DMA_CheckFifoParam+0xda>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <DMA_CheckFifoParam+0x70>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002eed 	.word	0x08002eed
 8002ee0:	08002ef3 	.word	0x08002ef3
 8002ee4:	08002eed 	.word	0x08002eed
 8002ee8:	08002f05 	.word	0x08002f05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef0:	e030      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d025      	beq.n	8002f4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f02:	e022      	b.n	8002f4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f0c:	d11f      	bne.n	8002f4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f12:	e01c      	b.n	8002f4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d903      	bls.n	8002f22 <DMA_CheckFifoParam+0xb6>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d003      	beq.n	8002f28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f20:	e018      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      break;
 8002f26:	e015      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e00b      	b.n	8002f52 <DMA_CheckFifoParam+0xe6>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e00a      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e008      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
 8002f44:	e006      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;
 8002f46:	bf00      	nop
 8002f48:	e004      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e002      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f4e:	bf00      	nop
 8002f50:	e000      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
      break;
 8002f52:	bf00      	nop
    }
  } 
  
  return status; 
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop

08002f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	; 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e159      	b.n	8003234 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f80:	2201      	movs	r2, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f040 8148 	bne.w	800322e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d005      	beq.n	8002fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d130      	bne.n	8003018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fec:	2201      	movs	r2, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 0201 	and.w	r2, r3, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b03      	cmp	r3, #3
 8003022:	d017      	beq.n	8003054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d123      	bne.n	80030a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	08da      	lsrs	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3208      	adds	r2, #8
 8003068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	220f      	movs	r2, #15
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	08da      	lsrs	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3208      	adds	r2, #8
 80030a2:	69b9      	ldr	r1, [r7, #24]
 80030a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0203 	and.w	r2, r3, #3
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80a2 	beq.w	800322e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	4b57      	ldr	r3, [pc, #348]	; (800324c <HAL_GPIO_Init+0x2e8>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	4a56      	ldr	r2, [pc, #344]	; (800324c <HAL_GPIO_Init+0x2e8>)
 80030f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f8:	6453      	str	r3, [r2, #68]	; 0x44
 80030fa:	4b54      	ldr	r3, [pc, #336]	; (800324c <HAL_GPIO_Init+0x2e8>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003106:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_GPIO_Init+0x2ec>)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	3302      	adds	r3, #2
 800310e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	220f      	movs	r2, #15
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a49      	ldr	r2, [pc, #292]	; (8003254 <HAL_GPIO_Init+0x2f0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d019      	beq.n	8003166 <HAL_GPIO_Init+0x202>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a48      	ldr	r2, [pc, #288]	; (8003258 <HAL_GPIO_Init+0x2f4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_GPIO_Init+0x1fe>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a47      	ldr	r2, [pc, #284]	; (800325c <HAL_GPIO_Init+0x2f8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00d      	beq.n	800315e <HAL_GPIO_Init+0x1fa>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a46      	ldr	r2, [pc, #280]	; (8003260 <HAL_GPIO_Init+0x2fc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d007      	beq.n	800315a <HAL_GPIO_Init+0x1f6>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a45      	ldr	r2, [pc, #276]	; (8003264 <HAL_GPIO_Init+0x300>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <HAL_GPIO_Init+0x1f2>
 8003152:	2304      	movs	r3, #4
 8003154:	e008      	b.n	8003168 <HAL_GPIO_Init+0x204>
 8003156:	2307      	movs	r3, #7
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x204>
 800315a:	2303      	movs	r3, #3
 800315c:	e004      	b.n	8003168 <HAL_GPIO_Init+0x204>
 800315e:	2302      	movs	r3, #2
 8003160:	e002      	b.n	8003168 <HAL_GPIO_Init+0x204>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_GPIO_Init+0x204>
 8003166:	2300      	movs	r3, #0
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	f002 0203 	and.w	r2, r2, #3
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	4093      	lsls	r3, r2
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003178:	4935      	ldr	r1, [pc, #212]	; (8003250 <HAL_GPIO_Init+0x2ec>)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	3302      	adds	r3, #2
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003186:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_GPIO_Init+0x304>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031aa:	4a2f      	ldr	r2, [pc, #188]	; (8003268 <HAL_GPIO_Init+0x304>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_GPIO_Init+0x304>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d4:	4a24      	ldr	r2, [pc, #144]	; (8003268 <HAL_GPIO_Init+0x304>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <HAL_GPIO_Init+0x304>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031fe:	4a1a      	ldr	r2, [pc, #104]	; (8003268 <HAL_GPIO_Init+0x304>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <HAL_GPIO_Init+0x304>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003228:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <HAL_GPIO_Init+0x304>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3301      	adds	r3, #1
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b0f      	cmp	r3, #15
 8003238:	f67f aea2 	bls.w	8002f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3724      	adds	r7, #36	; 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	40013800 	.word	0x40013800
 8003254:	40020000 	.word	0x40020000
 8003258:	40020400 	.word	0x40020400
 800325c:	40020800 	.word	0x40020800
 8003260:	40020c00 	.word	0x40020c00
 8003264:	40021000 	.word	0x40021000
 8003268:	40013c00 	.word	0x40013c00

0800326c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
 8003278:	4613      	mov	r3, r2
 800327a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800327c:	787b      	ldrb	r3, [r7, #1]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003288:	e003      	b.n	8003292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	041a      	lsls	r2, r3, #16
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	619a      	str	r2, [r3, #24]
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e267      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d075      	beq.n	80033aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032be:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d00c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ca:	4b85      	ldr	r3, [pc, #532]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d112      	bne.n	80032fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b82      	ldr	r3, [pc, #520]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e2:	d10b      	bne.n	80032fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	4b7e      	ldr	r3, [pc, #504]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d05b      	beq.n	80033a8 <HAL_RCC_OscConfig+0x108>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d157      	bne.n	80033a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e242      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x74>
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a75      	ldr	r2, [pc, #468]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xb0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x98>
 800331e:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6f      	ldr	r2, [pc, #444]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b6d      	ldr	r3, [pc, #436]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6c      	ldr	r2, [pc, #432]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xb0>
 8003338:	4b69      	ldr	r3, [pc, #420]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a68      	ldr	r2, [pc, #416]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a65      	ldr	r2, [pc, #404]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7ff f8c0 	bl	80024dc <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7ff f8bc 	bl	80024dc <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e207      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xc0>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7ff f8ac 	bl	80024dc <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003388:	f7ff f8a8 	bl	80024dc <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1f3      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0xe8>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b6:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d11c      	bne.n	8003408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x152>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1c7      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4937      	ldr	r1, [pc, #220]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	e03a      	b.n	800347e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCC_OscConfig+0x244>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7ff f861 	bl	80024dc <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341e:	f7ff f85d 	bl	80024dc <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1a8      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4925      	ldr	r1, [pc, #148]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <HAL_RCC_OscConfig+0x244>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7ff f840 	bl	80024dc <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003460:	f7ff f83c 	bl	80024dc <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e187      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d036      	beq.n	80034f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_RCC_OscConfig+0x248>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7ff f820 	bl	80024dc <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a0:	f7ff f81c 	bl	80024dc <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e167      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80034b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x200>
 80034be:	e01b      	b.n	80034f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCC_OscConfig+0x248>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c6:	f7ff f809 	bl	80024dc <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034cc:	e00e      	b.n	80034ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ce:	f7ff f805 	bl	80024dc <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d907      	bls.n	80034ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e150      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
 80034e0:	40023800 	.word	0x40023800
 80034e4:	42470000 	.word	0x42470000
 80034e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ec:	4b88      	ldr	r3, [pc, #544]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ea      	bne.n	80034ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8097 	beq.w	8003634 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350a:	4b81      	ldr	r3, [pc, #516]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10f      	bne.n	8003536 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	4b7d      	ldr	r3, [pc, #500]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a7c      	ldr	r2, [pc, #496]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b7a      	ldr	r3, [pc, #488]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b77      	ldr	r3, [pc, #476]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003542:	4b74      	ldr	r3, [pc, #464]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a73      	ldr	r2, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354e:	f7fe ffc5 	bl	80024dc <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fe ffc1 	bl	80024dc <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e10c      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x2ea>
 800357c:	4b64      	ldr	r3, [pc, #400]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a63      	ldr	r2, [pc, #396]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	e01c      	b.n	80035c4 <HAL_RCC_OscConfig+0x324>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b05      	cmp	r3, #5
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x30c>
 8003592:	4b5f      	ldr	r3, [pc, #380]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	4a5e      	ldr	r2, [pc, #376]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	6713      	str	r3, [r2, #112]	; 0x70
 800359e:	4b5c      	ldr	r3, [pc, #368]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a5b      	ldr	r2, [pc, #364]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0x324>
 80035ac:	4b58      	ldr	r3, [pc, #352]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a57      	ldr	r2, [pc, #348]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	4b55      	ldr	r3, [pc, #340]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a54      	ldr	r2, [pc, #336]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035be:	f023 0304 	bic.w	r3, r3, #4
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d015      	beq.n	80035f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe ff86 	bl	80024dc <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe ff82 	bl	80024dc <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e0cb      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ea:	4b49      	ldr	r3, [pc, #292]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ee      	beq.n	80035d4 <HAL_RCC_OscConfig+0x334>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f8:	f7fe ff70 	bl	80024dc <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fe ff6c 	bl	80024dc <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e0b5      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003616:	4b3e      	ldr	r3, [pc, #248]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1ee      	bne.n	8003600 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d105      	bne.n	8003634 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003628:	4b39      	ldr	r3, [pc, #228]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	4a38      	ldr	r2, [pc, #224]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800362e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003632:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80a1 	beq.w	8003780 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363e:	4b34      	ldr	r3, [pc, #208]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b08      	cmp	r3, #8
 8003648:	d05c      	beq.n	8003704 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d141      	bne.n	80036d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_RCC_OscConfig+0x478>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe ff40 	bl	80024dc <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003660:	f7fe ff3c 	bl	80024dc <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e087      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	4b27      	ldr	r3, [pc, #156]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	3b01      	subs	r3, #1
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	491b      	ldr	r1, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x478>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fe ff15 	bl	80024dc <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b6:	f7fe ff11 	bl	80024dc <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e05c      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x416>
 80036d4:	e054      	b.n	8003780 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCC_OscConfig+0x478>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fe fefe 	bl	80024dc <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fe fefa 	bl	80024dc <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e045      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x444>
 8003702:	e03d      	b.n	8003780 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e038      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
 8003710:	40023800 	.word	0x40023800
 8003714:	40007000 	.word	0x40007000
 8003718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800371c:	4b1b      	ldr	r3, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4ec>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d028      	beq.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d121      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d11a      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003754:	4293      	cmp	r3, r2
 8003756:	d111      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	3b01      	subs	r3, #1
 8003766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d107      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0cc      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d90c      	bls.n	80037cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b65      	ldr	r3, [pc, #404]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d044      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d119      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d003      	beq.n	800384e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	2b03      	cmp	r3, #3
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e067      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4b37      	ldr	r3, [pc, #220]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4934      	ldr	r1, [pc, #208]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	4313      	orrs	r3, r2
 800387e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7fe fe2c 	bl	80024dc <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7fe fe28 	bl	80024dc <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e04f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d20c      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b22      	ldr	r3, [pc, #136]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fd8c 	bl	8002454 <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023c00 	.word	0x40023c00
 800394c:	40023800 	.word	0x40023800
 8003950:	0800c600 	.word	0x0800c600
 8003954:	20000004 	.word	0x20000004
 8003958:	20000008 	.word	0x20000008

0800395c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003960:	b090      	sub	sp, #64	; 0x40
 8003962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
 8003968:	2300      	movs	r3, #0
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396c:	2300      	movs	r3, #0
 800396e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003974:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b08      	cmp	r3, #8
 800397e:	d00d      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x40>
 8003980:	2b08      	cmp	r3, #8
 8003982:	f200 80a1 	bhi.w	8003ac8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x34>
 800398a:	2b04      	cmp	r3, #4
 800398c:	d003      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x3a>
 800398e:	e09b      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003994:	e09b      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003996:	4b53      	ldr	r3, [pc, #332]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800399a:	e098      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800399c:	4b4f      	ldr	r3, [pc, #316]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a6:	4b4d      	ldr	r3, [pc, #308]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d028      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b2:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	2200      	movs	r2, #0
 80039ba:	623b      	str	r3, [r7, #32]
 80039bc:	627a      	str	r2, [r7, #36]	; 0x24
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039c4:	2100      	movs	r1, #0
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039c8:	fb03 f201 	mul.w	r2, r3, r1
 80039cc:	2300      	movs	r3, #0
 80039ce:	fb00 f303 	mul.w	r3, r0, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	4a43      	ldr	r2, [pc, #268]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d6:	fba0 1202 	umull	r1, r2, r0, r2
 80039da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039dc:	460a      	mov	r2, r1
 80039de:	62ba      	str	r2, [r7, #40]	; 0x28
 80039e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e2:	4413      	add	r3, r2
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	2200      	movs	r2, #0
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	61fa      	str	r2, [r7, #28]
 80039ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039f6:	f7fd f95f 	bl	8000cb8 <__aeabi_uldivmod>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4613      	mov	r3, r2
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a02:	e053      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a04:	4b35      	ldr	r3, [pc, #212]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	617a      	str	r2, [r7, #20]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a16:	f04f 0b00 	mov.w	fp, #0
 8003a1a:	4652      	mov	r2, sl
 8003a1c:	465b      	mov	r3, fp
 8003a1e:	f04f 0000 	mov.w	r0, #0
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	0159      	lsls	r1, r3, #5
 8003a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a2c:	0150      	lsls	r0, r2, #5
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	ebb2 080a 	subs.w	r8, r2, sl
 8003a36:	eb63 090b 	sbc.w	r9, r3, fp
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a4e:	ebb2 0408 	subs.w	r4, r2, r8
 8003a52:	eb63 0509 	sbc.w	r5, r3, r9
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	00eb      	lsls	r3, r5, #3
 8003a60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a64:	00e2      	lsls	r2, r4, #3
 8003a66:	4614      	mov	r4, r2
 8003a68:	461d      	mov	r5, r3
 8003a6a:	eb14 030a 	adds.w	r3, r4, sl
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	eb45 030b 	adc.w	r3, r5, fp
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a82:	4629      	mov	r1, r5
 8003a84:	028b      	lsls	r3, r1, #10
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	028a      	lsls	r2, r1, #10
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a96:	2200      	movs	r2, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	60fa      	str	r2, [r7, #12]
 8003a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aa0:	f7fd f90a 	bl	8000cb8 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3740      	adds	r7, #64	; 0x40
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	00f42400 	.word	0x00f42400
 8003ae4:	017d7840 	.word	0x017d7840

08003ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <HAL_RCC_GetHCLKFreq+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000004 	.word	0x20000004

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b04:	f7ff fff0 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0a9b      	lsrs	r3, r3, #10
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	0800c610 	.word	0x0800c610

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b2c:	f7ff ffdc 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	0b5b      	lsrs	r3, r3, #13
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4903      	ldr	r1, [pc, #12]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	0800c610 	.word	0x0800c610

08003b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e041      	b.n	8003be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe f96c 	bl	8001e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 fd70 	bl	8004674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d001      	beq.n	8003c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e044      	b.n	8003c92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x6c>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c32:	d013      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x6c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1a      	ldr	r2, [pc, #104]	; (8003ca4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x6c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a19      	ldr	r2, [pc, #100]	; (8003ca8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x6c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a17      	ldr	r2, [pc, #92]	; (8003cac <HAL_TIM_Base_Start_IT+0xbc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x6c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d111      	bne.n	8003c80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d010      	beq.n	8003c90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7e:	e007      	b.n	8003c90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40000c00 	.word	0x40000c00
 8003cb0:	40014000 	.word	0x40014000

08003cb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e041      	b.n	8003d4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f839 	bl	8003d52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f000 fcbe 	bl	8004674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <HAL_TIM_PWM_Start+0x24>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	bf14      	ite	ne
 8003d84:	2301      	movne	r3, #1
 8003d86:	2300      	moveq	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e022      	b.n	8003dd2 <HAL_TIM_PWM_Start+0x6a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d109      	bne.n	8003da6 <HAL_TIM_PWM_Start+0x3e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e015      	b.n	8003dd2 <HAL_TIM_PWM_Start+0x6a>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d109      	bne.n	8003dc0 <HAL_TIM_PWM_Start+0x58>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e008      	b.n	8003dd2 <HAL_TIM_PWM_Start+0x6a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e068      	b.n	8003eac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_PWM_Start+0x82>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de8:	e013      	b.n	8003e12 <HAL_TIM_PWM_Start+0xaa>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d104      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x92>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df8:	e00b      	b.n	8003e12 <HAL_TIM_PWM_Start+0xaa>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIM_PWM_Start+0xa2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e08:	e003      	b.n	8003e12 <HAL_TIM_PWM_Start+0xaa>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2201      	movs	r2, #1
 8003e18:	6839      	ldr	r1, [r7, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fedc 	bl	8004bd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a23      	ldr	r2, [pc, #140]	; (8003eb4 <HAL_TIM_PWM_Start+0x14c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d107      	bne.n	8003e3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <HAL_TIM_PWM_Start+0x14c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d018      	beq.n	8003e76 <HAL_TIM_PWM_Start+0x10e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4c:	d013      	beq.n	8003e76 <HAL_TIM_PWM_Start+0x10e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <HAL_TIM_PWM_Start+0x150>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00e      	beq.n	8003e76 <HAL_TIM_PWM_Start+0x10e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <HAL_TIM_PWM_Start+0x154>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d009      	beq.n	8003e76 <HAL_TIM_PWM_Start+0x10e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <HAL_TIM_PWM_Start+0x158>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d004      	beq.n	8003e76 <HAL_TIM_PWM_Start+0x10e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <HAL_TIM_PWM_Start+0x15c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d111      	bne.n	8003e9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d010      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e98:	e007      	b.n	8003eaa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40014000 	.word	0x40014000

08003ec8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e097      	b.n	800400c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7fd ffed 	bl	8001ed0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f0c:	f023 0307 	bic.w	r3, r3, #7
 8003f10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f000 fba9 	bl	8004674 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f68:	f023 030c 	bic.w	r3, r3, #12
 8003f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	4313      	orrs	r3, r2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	011a      	lsls	r2, r3, #4
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	031b      	lsls	r3, r3, #12
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003fa6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004024:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800402c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004034:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800403c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d110      	bne.n	8004066 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d102      	bne.n	8004050 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800404a:	7b7b      	ldrb	r3, [r7, #13]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d001      	beq.n	8004054 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e069      	b.n	8004128 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004064:	e031      	b.n	80040ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d110      	bne.n	800408e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800406c:	7bbb      	ldrb	r3, [r7, #14]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d102      	bne.n	8004078 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004072:	7b3b      	ldrb	r3, [r7, #12]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d001      	beq.n	800407c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e055      	b.n	8004128 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800408c:	e01d      	b.n	80040ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d108      	bne.n	80040a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004094:	7bbb      	ldrb	r3, [r7, #14]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800409a:	7b7b      	ldrb	r3, [r7, #13]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d102      	bne.n	80040a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040a0:	7b3b      	ldrb	r3, [r7, #12]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d001      	beq.n	80040aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e03e      	b.n	8004128 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_TIM_Encoder_Start+0xc4>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d008      	beq.n	80040e8 <HAL_TIM_Encoder_Start+0xd4>
 80040d6:	e00f      	b.n	80040f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2201      	movs	r2, #1
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fd79 	bl	8004bd8 <TIM_CCxChannelCmd>
      break;
 80040e6:	e016      	b.n	8004116 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	2104      	movs	r1, #4
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fd71 	bl	8004bd8 <TIM_CCxChannelCmd>
      break;
 80040f6:	e00e      	b.n	8004116 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2201      	movs	r2, #1
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fd69 	bl	8004bd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2201      	movs	r2, #1
 800410c:	2104      	movs	r1, #4
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fd62 	bl	8004bd8 <TIM_CCxChannelCmd>
      break;
 8004114:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d020      	beq.n	8004194 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01b      	beq.n	8004194 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0202 	mvn.w	r2, #2
 8004164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa5b 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 8004180:	e005      	b.n	800418e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fa4d 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fa5e 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d020      	beq.n	80041e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01b      	beq.n	80041e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0204 	mvn.w	r2, #4
 80041b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa35 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 80041cc:	e005      	b.n	80041da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fa27 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fa38 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d020      	beq.n	800422c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01b      	beq.n	800422c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0208 	mvn.w	r2, #8
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2204      	movs	r2, #4
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa0f 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fa01 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fa12 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b00      	cmp	r3, #0
 8004234:	d020      	beq.n	8004278 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0210 	mvn.w	r2, #16
 8004248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2208      	movs	r2, #8
 800424e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f9e9 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f9db 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f9ec 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00c      	beq.n	800429c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0201 	mvn.w	r2, #1
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd f882 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fd7c 	bl	8004db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f9bd 	bl	800465e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0220 	mvn.w	r2, #32
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fd4e 	bl	8004da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800432a:	2302      	movs	r3, #2
 800432c:	e0ae      	b.n	800448c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b0c      	cmp	r3, #12
 800433a:	f200 809f 	bhi.w	800447c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800433e:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004379 	.word	0x08004379
 8004348:	0800447d 	.word	0x0800447d
 800434c:	0800447d 	.word	0x0800447d
 8004350:	0800447d 	.word	0x0800447d
 8004354:	080043b9 	.word	0x080043b9
 8004358:	0800447d 	.word	0x0800447d
 800435c:	0800447d 	.word	0x0800447d
 8004360:	0800447d 	.word	0x0800447d
 8004364:	080043fb 	.word	0x080043fb
 8004368:	0800447d 	.word	0x0800447d
 800436c:	0800447d 	.word	0x0800447d
 8004370:	0800447d 	.word	0x0800447d
 8004374:	0800443b 	.word	0x0800443b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fa04 	bl	800478c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0208 	orr.w	r2, r2, #8
 8004392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6999      	ldr	r1, [r3, #24]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	619a      	str	r2, [r3, #24]
      break;
 80043b6:	e064      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fa4a 	bl	8004858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6999      	ldr	r1, [r3, #24]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	021a      	lsls	r2, r3, #8
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	619a      	str	r2, [r3, #24]
      break;
 80043f8:	e043      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fa95 	bl	8004930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0208 	orr.w	r2, r2, #8
 8004414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0204 	bic.w	r2, r2, #4
 8004424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69d9      	ldr	r1, [r3, #28]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	61da      	str	r2, [r3, #28]
      break;
 8004438:	e023      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fadf 	bl	8004a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69d9      	ldr	r1, [r3, #28]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	021a      	lsls	r2, r3, #8
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	61da      	str	r2, [r3, #28]
      break;
 800447a:	e002      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	75fb      	strb	r3, [r7, #23]
      break;
 8004480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800448a:	7dfb      	ldrb	r3, [r7, #23]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e0b4      	b.n	800461a <HAL_TIM_ConfigClockSource+0x186>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e8:	d03e      	beq.n	8004568 <HAL_TIM_ConfigClockSource+0xd4>
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ee:	f200 8087 	bhi.w	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 80044f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f6:	f000 8086 	beq.w	8004606 <HAL_TIM_ConfigClockSource+0x172>
 80044fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fe:	d87f      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004500:	2b70      	cmp	r3, #112	; 0x70
 8004502:	d01a      	beq.n	800453a <HAL_TIM_ConfigClockSource+0xa6>
 8004504:	2b70      	cmp	r3, #112	; 0x70
 8004506:	d87b      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004508:	2b60      	cmp	r3, #96	; 0x60
 800450a:	d050      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x11a>
 800450c:	2b60      	cmp	r3, #96	; 0x60
 800450e:	d877      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004510:	2b50      	cmp	r3, #80	; 0x50
 8004512:	d03c      	beq.n	800458e <HAL_TIM_ConfigClockSource+0xfa>
 8004514:	2b50      	cmp	r3, #80	; 0x50
 8004516:	d873      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d058      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x13a>
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d86f      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004520:	2b30      	cmp	r3, #48	; 0x30
 8004522:	d064      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 8004524:	2b30      	cmp	r3, #48	; 0x30
 8004526:	d86b      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004528:	2b20      	cmp	r3, #32
 800452a:	d060      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 800452c:	2b20      	cmp	r3, #32
 800452e:	d867      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d05c      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 8004534:	2b10      	cmp	r3, #16
 8004536:	d05a      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 8004538:	e062      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800454a:	f000 fb25 	bl	8004b98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800455c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	609a      	str	r2, [r3, #8]
      break;
 8004566:	e04f      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004578:	f000 fb0e 	bl	8004b98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800458a:	609a      	str	r2, [r3, #8]
      break;
 800458c:	e03c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800459a:	461a      	mov	r2, r3
 800459c:	f000 fa82 	bl	8004aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2150      	movs	r1, #80	; 0x50
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fadb 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 80045ac:	e02c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ba:	461a      	mov	r2, r3
 80045bc:	f000 faa1 	bl	8004b02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2160      	movs	r1, #96	; 0x60
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 facb 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 80045cc:	e01c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045da:	461a      	mov	r2, r3
 80045dc:	f000 fa62 	bl	8004aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2140      	movs	r1, #64	; 0x40
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fabb 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 80045ec:	e00c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f000 fab2 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 80045fe:	e003      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      break;
 8004604:	e000      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a3a      	ldr	r2, [pc, #232]	; (8004770 <TIM_Base_SetConfig+0xfc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00f      	beq.n	80046ac <TIM_Base_SetConfig+0x38>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d00b      	beq.n	80046ac <TIM_Base_SetConfig+0x38>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a37      	ldr	r2, [pc, #220]	; (8004774 <TIM_Base_SetConfig+0x100>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d007      	beq.n	80046ac <TIM_Base_SetConfig+0x38>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a36      	ldr	r2, [pc, #216]	; (8004778 <TIM_Base_SetConfig+0x104>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_Base_SetConfig+0x38>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a35      	ldr	r2, [pc, #212]	; (800477c <TIM_Base_SetConfig+0x108>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d108      	bne.n	80046be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <TIM_Base_SetConfig+0xfc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01b      	beq.n	80046fe <TIM_Base_SetConfig+0x8a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046cc:	d017      	beq.n	80046fe <TIM_Base_SetConfig+0x8a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a28      	ldr	r2, [pc, #160]	; (8004774 <TIM_Base_SetConfig+0x100>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <TIM_Base_SetConfig+0x8a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a27      	ldr	r2, [pc, #156]	; (8004778 <TIM_Base_SetConfig+0x104>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00f      	beq.n	80046fe <TIM_Base_SetConfig+0x8a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a26      	ldr	r2, [pc, #152]	; (800477c <TIM_Base_SetConfig+0x108>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00b      	beq.n	80046fe <TIM_Base_SetConfig+0x8a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a25      	ldr	r2, [pc, #148]	; (8004780 <TIM_Base_SetConfig+0x10c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d007      	beq.n	80046fe <TIM_Base_SetConfig+0x8a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a24      	ldr	r2, [pc, #144]	; (8004784 <TIM_Base_SetConfig+0x110>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d003      	beq.n	80046fe <TIM_Base_SetConfig+0x8a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a23      	ldr	r2, [pc, #140]	; (8004788 <TIM_Base_SetConfig+0x114>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d108      	bne.n	8004710 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a0e      	ldr	r2, [pc, #56]	; (8004770 <TIM_Base_SetConfig+0xfc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d103      	bne.n	8004744 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d105      	bne.n	8004762 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	611a      	str	r2, [r3, #16]
  }
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40010000 	.word	0x40010000
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40014000 	.word	0x40014000
 8004784:	40014400 	.word	0x40014400
 8004788:	40014800 	.word	0x40014800

0800478c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f023 0201 	bic.w	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 0302 	bic.w	r3, r3, #2
 80047d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <TIM_OC1_SetConfig+0xc8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d10c      	bne.n	8004802 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0308 	bic.w	r3, r3, #8
 80047ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f023 0304 	bic.w	r3, r3, #4
 8004800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a13      	ldr	r2, [pc, #76]	; (8004854 <TIM_OC1_SetConfig+0xc8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d111      	bne.n	800482e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	621a      	str	r2, [r3, #32]
}
 8004848:	bf00      	nop
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	40010000 	.word	0x40010000

08004858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f023 0210 	bic.w	r2, r3, #16
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 0320 	bic.w	r3, r3, #32
 80048a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a1e      	ldr	r2, [pc, #120]	; (800492c <TIM_OC2_SetConfig+0xd4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d10d      	bne.n	80048d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a15      	ldr	r2, [pc, #84]	; (800492c <TIM_OC2_SetConfig+0xd4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d113      	bne.n	8004904 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000

08004930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0303 	bic.w	r3, r3, #3
 8004966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1d      	ldr	r2, [pc, #116]	; (8004a00 <TIM_OC3_SetConfig+0xd0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10d      	bne.n	80049aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <TIM_OC3_SetConfig+0xd0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d113      	bne.n	80049da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40010000 	.word	0x40010000

08004a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	031b      	lsls	r3, r3, #12
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a10      	ldr	r2, [pc, #64]	; (8004aa0 <TIM_OC4_SetConfig+0x9c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d109      	bne.n	8004a78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	019b      	lsls	r3, r3, #6
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40010000 	.word	0x40010000

08004aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f023 0201 	bic.w	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f023 030a 	bic.w	r3, r3, #10
 8004ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b087      	sub	sp, #28
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	f023 0210 	bic.w	r2, r3, #16
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	031b      	lsls	r3, r3, #12
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f043 0307 	orr.w	r3, r3, #7
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	609a      	str	r2, [r3, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	021a      	lsls	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	2201      	movs	r2, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1a      	ldr	r2, [r3, #32]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e050      	b.n	8004cde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d018      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c88:	d013      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00e      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d10c      	bne.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800
 8004cf8:	40000c00 	.word	0x40000c00
 8004cfc:	40014000 	.word	0x40014000

08004d00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e03d      	b.n	8004d98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e042      	b.n	8004e64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fd f940 	bl	8002078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2224      	movs	r2, #36	; 0x24
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fe21 	bl	8005a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d112      	bne.n	8004eac <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_UART_Receive_IT+0x26>
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e00b      	b.n	8004eae <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fbd9 	bl	800565a <UART_Start_Receive_IT>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	e000      	b.n	8004eae <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08c      	sub	sp, #48	; 0x30
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d156      	bne.n	8004f80 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_UART_Transmit_DMA+0x26>
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e04f      	b.n	8004f82 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	88fa      	ldrh	r2, [r7, #6]
 8004eec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2221      	movs	r2, #33	; 0x21
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	4a21      	ldr	r2, [pc, #132]	; (8004f8c <HAL_UART_Transmit_DMA+0xd4>)
 8004f08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	4a20      	ldr	r2, [pc, #128]	; (8004f90 <HAL_UART_Transmit_DMA+0xd8>)
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <HAL_UART_Transmit_DMA+0xdc>)
 8004f18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	2200      	movs	r2, #0
 8004f20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004f22:	f107 0308 	add.w	r3, r7, #8
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2e:	6819      	ldr	r1, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3304      	adds	r3, #4
 8004f36:	461a      	mov	r2, r3
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	f7fd fcbf 	bl	80028bc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3314      	adds	r3, #20
 8004f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	617b      	str	r3, [r7, #20]
   return(result);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3314      	adds	r3, #20
 8004f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f68:	627a      	str	r2, [r7, #36]	; 0x24
 8004f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	6a39      	ldr	r1, [r7, #32]
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e5      	bne.n	8004f48 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e000      	b.n	8004f82 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004f80:	2302      	movs	r3, #2
  }
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3730      	adds	r7, #48	; 0x30
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	08005511 	.word	0x08005511
 8004f90:	080055ab 	.word	0x080055ab
 8004f94:	080055c7 	.word	0x080055c7

08004f98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b0ba      	sub	sp, #232	; 0xe8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10f      	bne.n	8004ffe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_UART_IRQHandler+0x66>
 8004fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fc70 	bl	80058dc <UART_Receive_IT>
      return;
 8004ffc:	e25b      	b.n	80054b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80de 	beq.w	80051c4 <HAL_UART_IRQHandler+0x22c>
 8005008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005018:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80d1 	beq.w	80051c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <HAL_UART_IRQHandler+0xae>
 800502e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	f043 0201 	orr.w	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <HAL_UART_IRQHandler+0xd2>
 8005052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f043 0202 	orr.w	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_UART_IRQHandler+0xf6>
 8005076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	f043 0204 	orr.w	r2, r3, #4
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800508e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d011      	beq.n	80050be <HAL_UART_IRQHandler+0x126>
 800509a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d105      	bne.n	80050b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f043 0208 	orr.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 81f2 	beq.w	80054ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_UART_IRQHandler+0x14e>
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fbfb 	bl	80058dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	bf0c      	ite	eq
 80050f4:	2301      	moveq	r3, #1
 80050f6:	2300      	movne	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <HAL_UART_IRQHandler+0x17a>
 800510a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04f      	beq.n	80051b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fb03 	bl	800571e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d141      	bne.n	80051aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3314      	adds	r3, #20
 800512c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800513c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005152:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800515e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800516a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1d9      	bne.n	8005126 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d013      	beq.n	80051a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	4a7e      	ldr	r2, [pc, #504]	; (8005378 <HAL_UART_IRQHandler+0x3e0>)
 8005180:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	4618      	mov	r0, r3
 8005188:	f7fd fc60 	bl	8002a4c <HAL_DMA_Abort_IT>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d016      	beq.n	80051c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800519c:	4610      	mov	r0, r2
 800519e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	e00e      	b.n	80051c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f99e 	bl	80054e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	e00a      	b.n	80051c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f99a 	bl	80054e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b0:	e006      	b.n	80051c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f996 	bl	80054e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80051be:	e175      	b.n	80054ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c0:	bf00      	nop
    return;
 80051c2:	e173      	b.n	80054ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f040 814f 	bne.w	800546c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8148 	beq.w	800546c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8141 	beq.w	800546c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	f040 80b6 	bne.w	800537c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800521c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8145 	beq.w	80054b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800522a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800522e:	429a      	cmp	r2, r3
 8005230:	f080 813e 	bcs.w	80054b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800523a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005246:	f000 8088 	beq.w	800535a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005260:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005276:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800527a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005282:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800528e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1d9      	bne.n	800524a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3314      	adds	r3, #20
 800529c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3314      	adds	r3, #20
 80052b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e1      	bne.n	8005296 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3314      	adds	r3, #20
 80052d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3314      	adds	r3, #20
 80052f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e3      	bne.n	80052d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532a:	f023 0310 	bic.w	r3, r3, #16
 800532e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800533c:	65ba      	str	r2, [r7, #88]	; 0x58
 800533e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800534a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e3      	bne.n	8005318 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005354:	4618      	mov	r0, r3
 8005356:	f7fd fb09 	bl	800296c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005368:	b29b      	uxth	r3, r3
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	b29b      	uxth	r3, r3
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f8c1 	bl	80054f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005376:	e09b      	b.n	80054b0 <HAL_UART_IRQHandler+0x518>
 8005378:	080057e5 	.word	0x080057e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005384:	b29b      	uxth	r3, r3
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 808e 	beq.w	80054b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8089 	beq.w	80054b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053c6:	647a      	str	r2, [r7, #68]	; 0x44
 80053c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e3      	bne.n	80053a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3314      	adds	r3, #20
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	623b      	str	r3, [r7, #32]
   return(result);
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3314      	adds	r3, #20
 80053fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053fe:	633a      	str	r2, [r7, #48]	; 0x30
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e3      	bne.n	80053da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0310 	bic.w	r3, r3, #16
 8005436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005444:	61fa      	str	r2, [r7, #28]
 8005446:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	69b9      	ldr	r1, [r7, #24]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	617b      	str	r3, [r7, #20]
   return(result);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e3      	bne.n	8005420 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800545e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f847 	bl	80054f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800546a:	e023      	b.n	80054b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005474:	2b00      	cmp	r3, #0
 8005476:	d009      	beq.n	800548c <HAL_UART_IRQHandler+0x4f4>
 8005478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f9c1 	bl	800580c <UART_Transmit_IT>
    return;
 800548a:	e014      	b.n	80054b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800548c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00e      	beq.n	80054b6 <HAL_UART_IRQHandler+0x51e>
 8005498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa01 	bl	80058ac <UART_EndTransmit_IT>
    return;
 80054aa:	e004      	b.n	80054b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80054ac:	bf00      	nop
 80054ae:	e002      	b.n	80054b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80054b4:	bf00      	nop
  }
}
 80054b6:	37e8      	adds	r7, #232	; 0xe8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b090      	sub	sp, #64	; 0x40
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d137      	bne.n	800559c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552e:	2200      	movs	r2, #0
 8005530:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3314      	adds	r3, #20
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	623b      	str	r3, [r7, #32]
   return(result);
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005548:	63bb      	str	r3, [r7, #56]	; 0x38
 800554a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3314      	adds	r3, #20
 8005550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005552:	633a      	str	r2, [r7, #48]	; 0x30
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e5      	bne.n	8005532 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	60fb      	str	r3, [r7, #12]
   return(result);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
 800557e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005586:	61fa      	str	r2, [r7, #28]
 8005588:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	69b9      	ldr	r1, [r7, #24]
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	617b      	str	r3, [r7, #20]
   return(result);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e5      	bne.n	8005566 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800559a:	e002      	b.n	80055a2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800559c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800559e:	f7ff ff8d 	bl	80054bc <HAL_UART_TxCpltCallback>
}
 80055a2:	bf00      	nop
 80055a4:	3740      	adds	r7, #64	; 0x40
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff ff89 	bl	80054d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b21      	cmp	r3, #33	; 0x21
 80055f8:	d108      	bne.n	800560c <UART_DMAError+0x46>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005606:	68b8      	ldr	r0, [r7, #8]
 8005608:	f000 f861 	bl	80056ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	bf0c      	ite	eq
 800561a:	2301      	moveq	r3, #1
 800561c:	2300      	movne	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b22      	cmp	r3, #34	; 0x22
 800562c:	d108      	bne.n	8005640 <UART_DMAError+0x7a>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2200      	movs	r2, #0
 8005638:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800563a:	68b8      	ldr	r0, [r7, #8]
 800563c:	f000 f86f 	bl	800571e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005644:	f043 0210 	orr.w	r2, r3, #16
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800564c:	68b8      	ldr	r0, [r7, #8]
 800564e:	f7ff ff49 	bl	80054e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005652:	bf00      	nop
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	4613      	mov	r3, r2
 8005666:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	88fa      	ldrh	r2, [r7, #6]
 8005672:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2222      	movs	r2, #34	; 0x22
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800569e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695a      	ldr	r2, [r3, #20]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0220 	orr.w	r2, r2, #32
 80056be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b089      	sub	sp, #36	; 0x24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	61ba      	str	r2, [r7, #24]
 80056f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6979      	ldr	r1, [r7, #20]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	613b      	str	r3, [r7, #16]
   return(result);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e5      	bne.n	80056d6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005712:	bf00      	nop
 8005714:	3724      	adds	r7, #36	; 0x24
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800571e:	b480      	push	{r7}
 8005720:	b095      	sub	sp, #84	; 0x54
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800573c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005746:	643a      	str	r2, [r7, #64]	; 0x40
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800574c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e5      	bne.n	8005726 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3314      	adds	r3, #20
 8005760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	61fb      	str	r3, [r7, #28]
   return(result);
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	64bb      	str	r3, [r7, #72]	; 0x48
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3314      	adds	r3, #20
 8005778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800577a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800577c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e5      	bne.n	800575a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	2b01      	cmp	r3, #1
 8005794:	d119      	bne.n	80057ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f023 0310 	bic.w	r3, r3, #16
 80057ac:	647b      	str	r3, [r7, #68]	; 0x44
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	330c      	adds	r3, #12
 80057b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b6:	61ba      	str	r2, [r7, #24]
 80057b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6979      	ldr	r1, [r7, #20]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	613b      	str	r3, [r7, #16]
   return(result);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057d8:	bf00      	nop
 80057da:	3754      	adds	r7, #84	; 0x54
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff fe70 	bl	80054e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b21      	cmp	r3, #33	; 0x21
 800581e:	d13e      	bne.n	800589e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005828:	d114      	bne.n	8005854 <UART_Transmit_IT+0x48>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d110      	bne.n	8005854 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005846:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	1c9a      	adds	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	621a      	str	r2, [r3, #32]
 8005852:	e008      	b.n	8005866 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	1c59      	adds	r1, r3, #1
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6211      	str	r1, [r2, #32]
 800585e:	781a      	ldrb	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29b      	uxth	r3, r3
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	4619      	mov	r1, r3
 8005874:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10f      	bne.n	800589a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005888:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005898:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e000      	b.n	80058a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800589e:	2302      	movs	r3, #2
  }
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fdf5 	bl	80054bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08c      	sub	sp, #48	; 0x30
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b22      	cmp	r3, #34	; 0x22
 80058ee:	f040 80ae 	bne.w	8005a4e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fa:	d117      	bne.n	800592c <UART_Receive_IT+0x50>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d113      	bne.n	800592c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	b29a      	uxth	r2, r3
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	1c9a      	adds	r2, r3, #2
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	629a      	str	r2, [r3, #40]	; 0x28
 800592a:	e026      	b.n	800597a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005932:	2300      	movs	r3, #0
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593e:	d007      	beq.n	8005950 <UART_Receive_IT+0x74>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <UART_Receive_IT+0x82>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b2da      	uxtb	r2, r3
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e008      	b.n	8005970 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800596a:	b2da      	uxtb	r2, r3
 800596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29b      	uxth	r3, r3
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4619      	mov	r1, r3
 8005988:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800598a:	2b00      	cmp	r3, #0
 800598c:	d15d      	bne.n	8005a4a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0220 	bic.w	r2, r2, #32
 800599c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0201 	bic.w	r2, r2, #1
 80059bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d135      	bne.n	8005a40 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f023 0310 	bic.w	r3, r3, #16
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	330c      	adds	r3, #12
 80059f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fa:	623a      	str	r2, [r7, #32]
 80059fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	69f9      	ldr	r1, [r7, #28]
 8005a00:	6a3a      	ldr	r2, [r7, #32]
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e5      	bne.n	80059da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d10a      	bne.n	8005a32 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fd5d 	bl	80054f8 <HAL_UARTEx_RxEventCallback>
 8005a3e:	e002      	b.n	8005a46 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fb fc71 	bl	8001328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e002      	b.n	8005a50 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3730      	adds	r7, #48	; 0x30
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a5c:	b0c0      	sub	sp, #256	; 0x100
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a74:	68d9      	ldr	r1, [r3, #12]
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	ea40 0301 	orr.w	r3, r0, r1
 8005a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ab0:	f021 010c 	bic.w	r1, r1, #12
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad2:	6999      	ldr	r1, [r3, #24]
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	ea40 0301 	orr.w	r3, r0, r1
 8005ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b8f      	ldr	r3, [pc, #572]	; (8005d24 <UART_SetConfig+0x2cc>)
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d005      	beq.n	8005af8 <UART_SetConfig+0xa0>
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b8d      	ldr	r3, [pc, #564]	; (8005d28 <UART_SetConfig+0x2d0>)
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d104      	bne.n	8005b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005af8:	f7fe f816 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8005afc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b00:	e003      	b.n	8005b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b02:	f7fd fffd 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8005b06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b14:	f040 810c 	bne.w	8005d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	1891      	adds	r1, r2, r2
 8005b30:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b32:	415b      	adcs	r3, r3
 8005b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	eb12 0801 	adds.w	r8, r2, r1
 8005b40:	4629      	mov	r1, r5
 8005b42:	eb43 0901 	adc.w	r9, r3, r1
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b5a:	4690      	mov	r8, r2
 8005b5c:	4699      	mov	r9, r3
 8005b5e:	4623      	mov	r3, r4
 8005b60:	eb18 0303 	adds.w	r3, r8, r3
 8005b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b68:	462b      	mov	r3, r5
 8005b6a:	eb49 0303 	adc.w	r3, r9, r3
 8005b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b86:	460b      	mov	r3, r1
 8005b88:	18db      	adds	r3, r3, r3
 8005b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	eb42 0303 	adc.w	r3, r2, r3
 8005b92:	657b      	str	r3, [r7, #84]	; 0x54
 8005b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b9c:	f7fb f88c 	bl	8000cb8 <__aeabi_uldivmod>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4b61      	ldr	r3, [pc, #388]	; (8005d2c <UART_SetConfig+0x2d4>)
 8005ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	011c      	lsls	r4, r3, #4
 8005bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	1891      	adds	r1, r2, r2
 8005bc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bc8:	415b      	adcs	r3, r3
 8005bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf0:	4692      	mov	sl, r2
 8005bf2:	469b      	mov	fp, r3
 8005bf4:	4643      	mov	r3, r8
 8005bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8005bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bfe:	464b      	mov	r3, r9
 8005c00:	eb4b 0303 	adc.w	r3, fp, r3
 8005c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	18db      	adds	r3, r3, r3
 8005c20:	643b      	str	r3, [r7, #64]	; 0x40
 8005c22:	4613      	mov	r3, r2
 8005c24:	eb42 0303 	adc.w	r3, r2, r3
 8005c28:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c32:	f7fb f841 	bl	8000cb8 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	; (8005d2c <UART_SetConfig+0x2d4>)
 8005c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	2264      	movs	r2, #100	; 0x64
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	1acb      	subs	r3, r1, r3
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c52:	4b36      	ldr	r3, [pc, #216]	; (8005d2c <UART_SetConfig+0x2d4>)
 8005c54:	fba3 2302 	umull	r2, r3, r3, r2
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c60:	441c      	add	r4, r3
 8005c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c74:	4642      	mov	r2, r8
 8005c76:	464b      	mov	r3, r9
 8005c78:	1891      	adds	r1, r2, r2
 8005c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c7c:	415b      	adcs	r3, r3
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c84:	4641      	mov	r1, r8
 8005c86:	1851      	adds	r1, r2, r1
 8005c88:	6339      	str	r1, [r7, #48]	; 0x30
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	414b      	adcs	r3, r1
 8005c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	00cb      	lsls	r3, r1, #3
 8005ca0:	4651      	mov	r1, sl
 8005ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ca6:	4651      	mov	r1, sl
 8005ca8:	00ca      	lsls	r2, r1, #3
 8005caa:	4610      	mov	r0, r2
 8005cac:	4619      	mov	r1, r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	189b      	adds	r3, r3, r2
 8005cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cb8:	464b      	mov	r3, r9
 8005cba:	460a      	mov	r2, r1
 8005cbc:	eb42 0303 	adc.w	r3, r2, r3
 8005cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005cd8:	460b      	mov	r3, r1
 8005cda:	18db      	adds	r3, r3, r3
 8005cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cde:	4613      	mov	r3, r2
 8005ce0:	eb42 0303 	adc.w	r3, r2, r3
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cee:	f7fa ffe3 	bl	8000cb8 <__aeabi_uldivmod>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <UART_SetConfig+0x2d4>)
 8005cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	2164      	movs	r1, #100	; 0x64
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	3332      	adds	r3, #50	; 0x32
 8005d0a:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <UART_SetConfig+0x2d4>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	f003 0207 	and.w	r2, r3, #7
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4422      	add	r2, r4
 8005d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d20:	e106      	b.n	8005f30 <UART_SetConfig+0x4d8>
 8005d22:	bf00      	nop
 8005d24:	40011000 	.word	0x40011000
 8005d28:	40011400 	.word	0x40011400
 8005d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d42:	4642      	mov	r2, r8
 8005d44:	464b      	mov	r3, r9
 8005d46:	1891      	adds	r1, r2, r2
 8005d48:	6239      	str	r1, [r7, #32]
 8005d4a:	415b      	adcs	r3, r3
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d52:	4641      	mov	r1, r8
 8005d54:	1854      	adds	r4, r2, r1
 8005d56:	4649      	mov	r1, r9
 8005d58:	eb43 0501 	adc.w	r5, r3, r1
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	00eb      	lsls	r3, r5, #3
 8005d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d6a:	00e2      	lsls	r2, r4, #3
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	461d      	mov	r5, r3
 8005d70:	4643      	mov	r3, r8
 8005d72:	18e3      	adds	r3, r4, r3
 8005d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d78:	464b      	mov	r3, r9
 8005d7a:	eb45 0303 	adc.w	r3, r5, r3
 8005d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d9e:	4629      	mov	r1, r5
 8005da0:	008b      	lsls	r3, r1, #2
 8005da2:	4621      	mov	r1, r4
 8005da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da8:	4621      	mov	r1, r4
 8005daa:	008a      	lsls	r2, r1, #2
 8005dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005db0:	f7fa ff82 	bl	8000cb8 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4b60      	ldr	r3, [pc, #384]	; (8005f3c <UART_SetConfig+0x4e4>)
 8005dba:	fba3 2302 	umull	r2, r3, r3, r2
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	011c      	lsls	r4, r3, #4
 8005dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	1891      	adds	r1, r2, r2
 8005dda:	61b9      	str	r1, [r7, #24]
 8005ddc:	415b      	adcs	r3, r3
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005de4:	4641      	mov	r1, r8
 8005de6:	1851      	adds	r1, r2, r1
 8005de8:	6139      	str	r1, [r7, #16]
 8005dea:	4649      	mov	r1, r9
 8005dec:	414b      	adcs	r3, r1
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dfc:	4659      	mov	r1, fp
 8005dfe:	00cb      	lsls	r3, r1, #3
 8005e00:	4651      	mov	r1, sl
 8005e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e06:	4651      	mov	r1, sl
 8005e08:	00ca      	lsls	r2, r1, #3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	4642      	mov	r2, r8
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e18:	464b      	mov	r3, r9
 8005e1a:	460a      	mov	r2, r1
 8005e1c:	eb42 0303 	adc.w	r3, r2, r3
 8005e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	008b      	lsls	r3, r1, #2
 8005e40:	4641      	mov	r1, r8
 8005e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e46:	4641      	mov	r1, r8
 8005e48:	008a      	lsls	r2, r1, #2
 8005e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e4e:	f7fa ff33 	bl	8000cb8 <__aeabi_uldivmod>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	4b38      	ldr	r3, [pc, #224]	; (8005f3c <UART_SetConfig+0x4e4>)
 8005e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	2264      	movs	r2, #100	; 0x64
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	1acb      	subs	r3, r1, r3
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	3332      	adds	r3, #50	; 0x32
 8005e6c:	4a33      	ldr	r2, [pc, #204]	; (8005f3c <UART_SetConfig+0x4e4>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e78:	441c      	add	r4, r3
 8005e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e7e:	2200      	movs	r2, #0
 8005e80:	673b      	str	r3, [r7, #112]	; 0x70
 8005e82:	677a      	str	r2, [r7, #116]	; 0x74
 8005e84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e88:	4642      	mov	r2, r8
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	1891      	adds	r1, r2, r2
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	415b      	adcs	r3, r3
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e98:	4641      	mov	r1, r8
 8005e9a:	1851      	adds	r1, r2, r1
 8005e9c:	6039      	str	r1, [r7, #0]
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	414b      	adcs	r3, r1
 8005ea2:	607b      	str	r3, [r7, #4]
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005eb0:	4659      	mov	r1, fp
 8005eb2:	00cb      	lsls	r3, r1, #3
 8005eb4:	4651      	mov	r1, sl
 8005eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eba:	4651      	mov	r1, sl
 8005ebc:	00ca      	lsls	r2, r1, #3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	189b      	adds	r3, r3, r2
 8005ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eca:	464b      	mov	r3, r9
 8005ecc:	460a      	mov	r2, r1
 8005ece:	eb42 0303 	adc.w	r3, r2, r3
 8005ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ede:	667a      	str	r2, [r7, #100]	; 0x64
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005eec:	4649      	mov	r1, r9
 8005eee:	008b      	lsls	r3, r1, #2
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	008a      	lsls	r2, r1, #2
 8005efa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005efe:	f7fa fedb 	bl	8000cb8 <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <UART_SetConfig+0x4e4>)
 8005f08:	fba3 1302 	umull	r1, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	2164      	movs	r1, #100	; 0x64
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	3332      	adds	r3, #50	; 0x32
 8005f1a:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <UART_SetConfig+0x4e4>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	f003 020f 	and.w	r2, r3, #15
 8005f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4422      	add	r2, r4
 8005f2e:	609a      	str	r2, [r3, #8]
}
 8005f30:	bf00      	nop
 8005f32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f36:	46bd      	mov	sp, r7
 8005f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f3c:	51eb851f 	.word	0x51eb851f

08005f40 <__cvt>:
 8005f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	ec55 4b10 	vmov	r4, r5, d0
 8005f48:	2d00      	cmp	r5, #0
 8005f4a:	460e      	mov	r6, r1
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	462b      	mov	r3, r5
 8005f50:	bfbb      	ittet	lt
 8005f52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f56:	461d      	movlt	r5, r3
 8005f58:	2300      	movge	r3, #0
 8005f5a:	232d      	movlt	r3, #45	; 0x2d
 8005f5c:	700b      	strb	r3, [r1, #0]
 8005f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f64:	4691      	mov	r9, r2
 8005f66:	f023 0820 	bic.w	r8, r3, #32
 8005f6a:	bfbc      	itt	lt
 8005f6c:	4622      	movlt	r2, r4
 8005f6e:	4614      	movlt	r4, r2
 8005f70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f74:	d005      	beq.n	8005f82 <__cvt+0x42>
 8005f76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f7a:	d100      	bne.n	8005f7e <__cvt+0x3e>
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	2102      	movs	r1, #2
 8005f80:	e000      	b.n	8005f84 <__cvt+0x44>
 8005f82:	2103      	movs	r1, #3
 8005f84:	ab03      	add	r3, sp, #12
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	ab02      	add	r3, sp, #8
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	ec45 4b10 	vmov	d0, r4, r5
 8005f90:	4653      	mov	r3, sl
 8005f92:	4632      	mov	r2, r6
 8005f94:	f001 f8b4 	bl	8007100 <_dtoa_r>
 8005f98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	d102      	bne.n	8005fa6 <__cvt+0x66>
 8005fa0:	f019 0f01 	tst.w	r9, #1
 8005fa4:	d022      	beq.n	8005fec <__cvt+0xac>
 8005fa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005faa:	eb07 0906 	add.w	r9, r7, r6
 8005fae:	d110      	bne.n	8005fd2 <__cvt+0x92>
 8005fb0:	783b      	ldrb	r3, [r7, #0]
 8005fb2:	2b30      	cmp	r3, #48	; 0x30
 8005fb4:	d10a      	bne.n	8005fcc <__cvt+0x8c>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4620      	mov	r0, r4
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	f7fa fd9b 	bl	8000af8 <__aeabi_dcmpeq>
 8005fc2:	b918      	cbnz	r0, 8005fcc <__cvt+0x8c>
 8005fc4:	f1c6 0601 	rsb	r6, r6, #1
 8005fc8:	f8ca 6000 	str.w	r6, [sl]
 8005fcc:	f8da 3000 	ldr.w	r3, [sl]
 8005fd0:	4499      	add	r9, r3
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7fa fd8d 	bl	8000af8 <__aeabi_dcmpeq>
 8005fde:	b108      	cbz	r0, 8005fe4 <__cvt+0xa4>
 8005fe0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fe4:	2230      	movs	r2, #48	; 0x30
 8005fe6:	9b03      	ldr	r3, [sp, #12]
 8005fe8:	454b      	cmp	r3, r9
 8005fea:	d307      	bcc.n	8005ffc <__cvt+0xbc>
 8005fec:	9b03      	ldr	r3, [sp, #12]
 8005fee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ff0:	1bdb      	subs	r3, r3, r7
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	b004      	add	sp, #16
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffc:	1c59      	adds	r1, r3, #1
 8005ffe:	9103      	str	r1, [sp, #12]
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e7f0      	b.n	8005fe6 <__cvt+0xa6>

08006004 <__exponent>:
 8006004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006006:	4603      	mov	r3, r0
 8006008:	2900      	cmp	r1, #0
 800600a:	bfb8      	it	lt
 800600c:	4249      	neglt	r1, r1
 800600e:	f803 2b02 	strb.w	r2, [r3], #2
 8006012:	bfb4      	ite	lt
 8006014:	222d      	movlt	r2, #45	; 0x2d
 8006016:	222b      	movge	r2, #43	; 0x2b
 8006018:	2909      	cmp	r1, #9
 800601a:	7042      	strb	r2, [r0, #1]
 800601c:	dd2a      	ble.n	8006074 <__exponent+0x70>
 800601e:	f10d 0207 	add.w	r2, sp, #7
 8006022:	4617      	mov	r7, r2
 8006024:	260a      	movs	r6, #10
 8006026:	4694      	mov	ip, r2
 8006028:	fb91 f5f6 	sdiv	r5, r1, r6
 800602c:	fb06 1415 	mls	r4, r6, r5, r1
 8006030:	3430      	adds	r4, #48	; 0x30
 8006032:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006036:	460c      	mov	r4, r1
 8006038:	2c63      	cmp	r4, #99	; 0x63
 800603a:	f102 32ff 	add.w	r2, r2, #4294967295
 800603e:	4629      	mov	r1, r5
 8006040:	dcf1      	bgt.n	8006026 <__exponent+0x22>
 8006042:	3130      	adds	r1, #48	; 0x30
 8006044:	f1ac 0402 	sub.w	r4, ip, #2
 8006048:	f802 1c01 	strb.w	r1, [r2, #-1]
 800604c:	1c41      	adds	r1, r0, #1
 800604e:	4622      	mov	r2, r4
 8006050:	42ba      	cmp	r2, r7
 8006052:	d30a      	bcc.n	800606a <__exponent+0x66>
 8006054:	f10d 0209 	add.w	r2, sp, #9
 8006058:	eba2 020c 	sub.w	r2, r2, ip
 800605c:	42bc      	cmp	r4, r7
 800605e:	bf88      	it	hi
 8006060:	2200      	movhi	r2, #0
 8006062:	4413      	add	r3, r2
 8006064:	1a18      	subs	r0, r3, r0
 8006066:	b003      	add	sp, #12
 8006068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800606a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800606e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006072:	e7ed      	b.n	8006050 <__exponent+0x4c>
 8006074:	2330      	movs	r3, #48	; 0x30
 8006076:	3130      	adds	r1, #48	; 0x30
 8006078:	7083      	strb	r3, [r0, #2]
 800607a:	70c1      	strb	r1, [r0, #3]
 800607c:	1d03      	adds	r3, r0, #4
 800607e:	e7f1      	b.n	8006064 <__exponent+0x60>

08006080 <_printf_float>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	ed2d 8b02 	vpush	{d8}
 8006088:	b08d      	sub	sp, #52	; 0x34
 800608a:	460c      	mov	r4, r1
 800608c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006090:	4616      	mov	r6, r2
 8006092:	461f      	mov	r7, r3
 8006094:	4605      	mov	r5, r0
 8006096:	f000 ff25 	bl	8006ee4 <_localeconv_r>
 800609a:	f8d0 a000 	ldr.w	sl, [r0]
 800609e:	4650      	mov	r0, sl
 80060a0:	f7fa f8fe 	bl	80002a0 <strlen>
 80060a4:	2300      	movs	r3, #0
 80060a6:	930a      	str	r3, [sp, #40]	; 0x28
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	9305      	str	r3, [sp, #20]
 80060ac:	f8d8 3000 	ldr.w	r3, [r8]
 80060b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060b4:	3307      	adds	r3, #7
 80060b6:	f023 0307 	bic.w	r3, r3, #7
 80060ba:	f103 0208 	add.w	r2, r3, #8
 80060be:	f8c8 2000 	str.w	r2, [r8]
 80060c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060ca:	9307      	str	r3, [sp, #28]
 80060cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80060d0:	ee08 0a10 	vmov	s16, r0
 80060d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80060d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060dc:	4b9e      	ldr	r3, [pc, #632]	; (8006358 <_printf_float+0x2d8>)
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	f7fa fd3b 	bl	8000b5c <__aeabi_dcmpun>
 80060e6:	bb88      	cbnz	r0, 800614c <_printf_float+0xcc>
 80060e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060ec:	4b9a      	ldr	r3, [pc, #616]	; (8006358 <_printf_float+0x2d8>)
 80060ee:	f04f 32ff 	mov.w	r2, #4294967295
 80060f2:	f7fa fd15 	bl	8000b20 <__aeabi_dcmple>
 80060f6:	bb48      	cbnz	r0, 800614c <_printf_float+0xcc>
 80060f8:	2200      	movs	r2, #0
 80060fa:	2300      	movs	r3, #0
 80060fc:	4640      	mov	r0, r8
 80060fe:	4649      	mov	r1, r9
 8006100:	f7fa fd04 	bl	8000b0c <__aeabi_dcmplt>
 8006104:	b110      	cbz	r0, 800610c <_printf_float+0x8c>
 8006106:	232d      	movs	r3, #45	; 0x2d
 8006108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800610c:	4a93      	ldr	r2, [pc, #588]	; (800635c <_printf_float+0x2dc>)
 800610e:	4b94      	ldr	r3, [pc, #592]	; (8006360 <_printf_float+0x2e0>)
 8006110:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006114:	bf94      	ite	ls
 8006116:	4690      	movls	r8, r2
 8006118:	4698      	movhi	r8, r3
 800611a:	2303      	movs	r3, #3
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	9b05      	ldr	r3, [sp, #20]
 8006120:	f023 0304 	bic.w	r3, r3, #4
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	f04f 0900 	mov.w	r9, #0
 800612a:	9700      	str	r7, [sp, #0]
 800612c:	4633      	mov	r3, r6
 800612e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006130:	4621      	mov	r1, r4
 8006132:	4628      	mov	r0, r5
 8006134:	f000 f9da 	bl	80064ec <_printf_common>
 8006138:	3001      	adds	r0, #1
 800613a:	f040 8090 	bne.w	800625e <_printf_float+0x1de>
 800613e:	f04f 30ff 	mov.w	r0, #4294967295
 8006142:	b00d      	add	sp, #52	; 0x34
 8006144:	ecbd 8b02 	vpop	{d8}
 8006148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614c:	4642      	mov	r2, r8
 800614e:	464b      	mov	r3, r9
 8006150:	4640      	mov	r0, r8
 8006152:	4649      	mov	r1, r9
 8006154:	f7fa fd02 	bl	8000b5c <__aeabi_dcmpun>
 8006158:	b140      	cbz	r0, 800616c <_printf_float+0xec>
 800615a:	464b      	mov	r3, r9
 800615c:	2b00      	cmp	r3, #0
 800615e:	bfbc      	itt	lt
 8006160:	232d      	movlt	r3, #45	; 0x2d
 8006162:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006166:	4a7f      	ldr	r2, [pc, #508]	; (8006364 <_printf_float+0x2e4>)
 8006168:	4b7f      	ldr	r3, [pc, #508]	; (8006368 <_printf_float+0x2e8>)
 800616a:	e7d1      	b.n	8006110 <_printf_float+0x90>
 800616c:	6863      	ldr	r3, [r4, #4]
 800616e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006172:	9206      	str	r2, [sp, #24]
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	d13f      	bne.n	80061f8 <_printf_float+0x178>
 8006178:	2306      	movs	r3, #6
 800617a:	6063      	str	r3, [r4, #4]
 800617c:	9b05      	ldr	r3, [sp, #20]
 800617e:	6861      	ldr	r1, [r4, #4]
 8006180:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006184:	2300      	movs	r3, #0
 8006186:	9303      	str	r3, [sp, #12]
 8006188:	ab0a      	add	r3, sp, #40	; 0x28
 800618a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800618e:	ab09      	add	r3, sp, #36	; 0x24
 8006190:	ec49 8b10 	vmov	d0, r8, r9
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	6022      	str	r2, [r4, #0]
 8006198:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800619c:	4628      	mov	r0, r5
 800619e:	f7ff fecf 	bl	8005f40 <__cvt>
 80061a2:	9b06      	ldr	r3, [sp, #24]
 80061a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061a6:	2b47      	cmp	r3, #71	; 0x47
 80061a8:	4680      	mov	r8, r0
 80061aa:	d108      	bne.n	80061be <_printf_float+0x13e>
 80061ac:	1cc8      	adds	r0, r1, #3
 80061ae:	db02      	blt.n	80061b6 <_printf_float+0x136>
 80061b0:	6863      	ldr	r3, [r4, #4]
 80061b2:	4299      	cmp	r1, r3
 80061b4:	dd41      	ble.n	800623a <_printf_float+0x1ba>
 80061b6:	f1ab 0302 	sub.w	r3, fp, #2
 80061ba:	fa5f fb83 	uxtb.w	fp, r3
 80061be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061c2:	d820      	bhi.n	8006206 <_printf_float+0x186>
 80061c4:	3901      	subs	r1, #1
 80061c6:	465a      	mov	r2, fp
 80061c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061cc:	9109      	str	r1, [sp, #36]	; 0x24
 80061ce:	f7ff ff19 	bl	8006004 <__exponent>
 80061d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061d4:	1813      	adds	r3, r2, r0
 80061d6:	2a01      	cmp	r2, #1
 80061d8:	4681      	mov	r9, r0
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	dc02      	bgt.n	80061e4 <_printf_float+0x164>
 80061de:	6822      	ldr	r2, [r4, #0]
 80061e0:	07d2      	lsls	r2, r2, #31
 80061e2:	d501      	bpl.n	80061e8 <_printf_float+0x168>
 80061e4:	3301      	adds	r3, #1
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d09c      	beq.n	800612a <_printf_float+0xaa>
 80061f0:	232d      	movs	r3, #45	; 0x2d
 80061f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f6:	e798      	b.n	800612a <_printf_float+0xaa>
 80061f8:	9a06      	ldr	r2, [sp, #24]
 80061fa:	2a47      	cmp	r2, #71	; 0x47
 80061fc:	d1be      	bne.n	800617c <_printf_float+0xfc>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1bc      	bne.n	800617c <_printf_float+0xfc>
 8006202:	2301      	movs	r3, #1
 8006204:	e7b9      	b.n	800617a <_printf_float+0xfa>
 8006206:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800620a:	d118      	bne.n	800623e <_printf_float+0x1be>
 800620c:	2900      	cmp	r1, #0
 800620e:	6863      	ldr	r3, [r4, #4]
 8006210:	dd0b      	ble.n	800622a <_printf_float+0x1aa>
 8006212:	6121      	str	r1, [r4, #16]
 8006214:	b913      	cbnz	r3, 800621c <_printf_float+0x19c>
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	07d0      	lsls	r0, r2, #31
 800621a:	d502      	bpl.n	8006222 <_printf_float+0x1a2>
 800621c:	3301      	adds	r3, #1
 800621e:	440b      	add	r3, r1
 8006220:	6123      	str	r3, [r4, #16]
 8006222:	65a1      	str	r1, [r4, #88]	; 0x58
 8006224:	f04f 0900 	mov.w	r9, #0
 8006228:	e7de      	b.n	80061e8 <_printf_float+0x168>
 800622a:	b913      	cbnz	r3, 8006232 <_printf_float+0x1b2>
 800622c:	6822      	ldr	r2, [r4, #0]
 800622e:	07d2      	lsls	r2, r2, #31
 8006230:	d501      	bpl.n	8006236 <_printf_float+0x1b6>
 8006232:	3302      	adds	r3, #2
 8006234:	e7f4      	b.n	8006220 <_printf_float+0x1a0>
 8006236:	2301      	movs	r3, #1
 8006238:	e7f2      	b.n	8006220 <_printf_float+0x1a0>
 800623a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006240:	4299      	cmp	r1, r3
 8006242:	db05      	blt.n	8006250 <_printf_float+0x1d0>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	6121      	str	r1, [r4, #16]
 8006248:	07d8      	lsls	r0, r3, #31
 800624a:	d5ea      	bpl.n	8006222 <_printf_float+0x1a2>
 800624c:	1c4b      	adds	r3, r1, #1
 800624e:	e7e7      	b.n	8006220 <_printf_float+0x1a0>
 8006250:	2900      	cmp	r1, #0
 8006252:	bfd4      	ite	le
 8006254:	f1c1 0202 	rsble	r2, r1, #2
 8006258:	2201      	movgt	r2, #1
 800625a:	4413      	add	r3, r2
 800625c:	e7e0      	b.n	8006220 <_printf_float+0x1a0>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	055a      	lsls	r2, r3, #21
 8006262:	d407      	bmi.n	8006274 <_printf_float+0x1f4>
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	4642      	mov	r2, r8
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	d12c      	bne.n	80062cc <_printf_float+0x24c>
 8006272:	e764      	b.n	800613e <_printf_float+0xbe>
 8006274:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006278:	f240 80e0 	bls.w	800643c <_printf_float+0x3bc>
 800627c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006280:	2200      	movs	r2, #0
 8006282:	2300      	movs	r3, #0
 8006284:	f7fa fc38 	bl	8000af8 <__aeabi_dcmpeq>
 8006288:	2800      	cmp	r0, #0
 800628a:	d034      	beq.n	80062f6 <_printf_float+0x276>
 800628c:	4a37      	ldr	r2, [pc, #220]	; (800636c <_printf_float+0x2ec>)
 800628e:	2301      	movs	r3, #1
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	47b8      	blx	r7
 8006296:	3001      	adds	r0, #1
 8006298:	f43f af51 	beq.w	800613e <_printf_float+0xbe>
 800629c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062a0:	429a      	cmp	r2, r3
 80062a2:	db02      	blt.n	80062aa <_printf_float+0x22a>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	07d8      	lsls	r0, r3, #31
 80062a8:	d510      	bpl.n	80062cc <_printf_float+0x24c>
 80062aa:	ee18 3a10 	vmov	r3, s16
 80062ae:	4652      	mov	r2, sl
 80062b0:	4631      	mov	r1, r6
 80062b2:	4628      	mov	r0, r5
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	f43f af41 	beq.w	800613e <_printf_float+0xbe>
 80062bc:	f04f 0800 	mov.w	r8, #0
 80062c0:	f104 091a 	add.w	r9, r4, #26
 80062c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c6:	3b01      	subs	r3, #1
 80062c8:	4543      	cmp	r3, r8
 80062ca:	dc09      	bgt.n	80062e0 <_printf_float+0x260>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	079b      	lsls	r3, r3, #30
 80062d0:	f100 8107 	bmi.w	80064e2 <_printf_float+0x462>
 80062d4:	68e0      	ldr	r0, [r4, #12]
 80062d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d8:	4298      	cmp	r0, r3
 80062da:	bfb8      	it	lt
 80062dc:	4618      	movlt	r0, r3
 80062de:	e730      	b.n	8006142 <_printf_float+0xc2>
 80062e0:	2301      	movs	r3, #1
 80062e2:	464a      	mov	r2, r9
 80062e4:	4631      	mov	r1, r6
 80062e6:	4628      	mov	r0, r5
 80062e8:	47b8      	blx	r7
 80062ea:	3001      	adds	r0, #1
 80062ec:	f43f af27 	beq.w	800613e <_printf_float+0xbe>
 80062f0:	f108 0801 	add.w	r8, r8, #1
 80062f4:	e7e6      	b.n	80062c4 <_printf_float+0x244>
 80062f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dc39      	bgt.n	8006370 <_printf_float+0x2f0>
 80062fc:	4a1b      	ldr	r2, [pc, #108]	; (800636c <_printf_float+0x2ec>)
 80062fe:	2301      	movs	r3, #1
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	47b8      	blx	r7
 8006306:	3001      	adds	r0, #1
 8006308:	f43f af19 	beq.w	800613e <_printf_float+0xbe>
 800630c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006310:	4313      	orrs	r3, r2
 8006312:	d102      	bne.n	800631a <_printf_float+0x29a>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	07d9      	lsls	r1, r3, #31
 8006318:	d5d8      	bpl.n	80062cc <_printf_float+0x24c>
 800631a:	ee18 3a10 	vmov	r3, s16
 800631e:	4652      	mov	r2, sl
 8006320:	4631      	mov	r1, r6
 8006322:	4628      	mov	r0, r5
 8006324:	47b8      	blx	r7
 8006326:	3001      	adds	r0, #1
 8006328:	f43f af09 	beq.w	800613e <_printf_float+0xbe>
 800632c:	f04f 0900 	mov.w	r9, #0
 8006330:	f104 0a1a 	add.w	sl, r4, #26
 8006334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006336:	425b      	negs	r3, r3
 8006338:	454b      	cmp	r3, r9
 800633a:	dc01      	bgt.n	8006340 <_printf_float+0x2c0>
 800633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633e:	e792      	b.n	8006266 <_printf_float+0x1e6>
 8006340:	2301      	movs	r3, #1
 8006342:	4652      	mov	r2, sl
 8006344:	4631      	mov	r1, r6
 8006346:	4628      	mov	r0, r5
 8006348:	47b8      	blx	r7
 800634a:	3001      	adds	r0, #1
 800634c:	f43f aef7 	beq.w	800613e <_printf_float+0xbe>
 8006350:	f109 0901 	add.w	r9, r9, #1
 8006354:	e7ee      	b.n	8006334 <_printf_float+0x2b4>
 8006356:	bf00      	nop
 8006358:	7fefffff 	.word	0x7fefffff
 800635c:	0800c620 	.word	0x0800c620
 8006360:	0800c624 	.word	0x0800c624
 8006364:	0800c628 	.word	0x0800c628
 8006368:	0800c62c 	.word	0x0800c62c
 800636c:	0800c9b8 	.word	0x0800c9b8
 8006370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006372:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006374:	429a      	cmp	r2, r3
 8006376:	bfa8      	it	ge
 8006378:	461a      	movge	r2, r3
 800637a:	2a00      	cmp	r2, #0
 800637c:	4691      	mov	r9, r2
 800637e:	dc37      	bgt.n	80063f0 <_printf_float+0x370>
 8006380:	f04f 0b00 	mov.w	fp, #0
 8006384:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006388:	f104 021a 	add.w	r2, r4, #26
 800638c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800638e:	9305      	str	r3, [sp, #20]
 8006390:	eba3 0309 	sub.w	r3, r3, r9
 8006394:	455b      	cmp	r3, fp
 8006396:	dc33      	bgt.n	8006400 <_printf_float+0x380>
 8006398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800639c:	429a      	cmp	r2, r3
 800639e:	db3b      	blt.n	8006418 <_printf_float+0x398>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	07da      	lsls	r2, r3, #31
 80063a4:	d438      	bmi.n	8006418 <_printf_float+0x398>
 80063a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063aa:	eba2 0903 	sub.w	r9, r2, r3
 80063ae:	9b05      	ldr	r3, [sp, #20]
 80063b0:	1ad2      	subs	r2, r2, r3
 80063b2:	4591      	cmp	r9, r2
 80063b4:	bfa8      	it	ge
 80063b6:	4691      	movge	r9, r2
 80063b8:	f1b9 0f00 	cmp.w	r9, #0
 80063bc:	dc35      	bgt.n	800642a <_printf_float+0x3aa>
 80063be:	f04f 0800 	mov.w	r8, #0
 80063c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063c6:	f104 0a1a 	add.w	sl, r4, #26
 80063ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	eba3 0309 	sub.w	r3, r3, r9
 80063d4:	4543      	cmp	r3, r8
 80063d6:	f77f af79 	ble.w	80062cc <_printf_float+0x24c>
 80063da:	2301      	movs	r3, #1
 80063dc:	4652      	mov	r2, sl
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b8      	blx	r7
 80063e4:	3001      	adds	r0, #1
 80063e6:	f43f aeaa 	beq.w	800613e <_printf_float+0xbe>
 80063ea:	f108 0801 	add.w	r8, r8, #1
 80063ee:	e7ec      	b.n	80063ca <_printf_float+0x34a>
 80063f0:	4613      	mov	r3, r2
 80063f2:	4631      	mov	r1, r6
 80063f4:	4642      	mov	r2, r8
 80063f6:	4628      	mov	r0, r5
 80063f8:	47b8      	blx	r7
 80063fa:	3001      	adds	r0, #1
 80063fc:	d1c0      	bne.n	8006380 <_printf_float+0x300>
 80063fe:	e69e      	b.n	800613e <_printf_float+0xbe>
 8006400:	2301      	movs	r3, #1
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	9205      	str	r2, [sp, #20]
 8006408:	47b8      	blx	r7
 800640a:	3001      	adds	r0, #1
 800640c:	f43f ae97 	beq.w	800613e <_printf_float+0xbe>
 8006410:	9a05      	ldr	r2, [sp, #20]
 8006412:	f10b 0b01 	add.w	fp, fp, #1
 8006416:	e7b9      	b.n	800638c <_printf_float+0x30c>
 8006418:	ee18 3a10 	vmov	r3, s16
 800641c:	4652      	mov	r2, sl
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	d1be      	bne.n	80063a6 <_printf_float+0x326>
 8006428:	e689      	b.n	800613e <_printf_float+0xbe>
 800642a:	9a05      	ldr	r2, [sp, #20]
 800642c:	464b      	mov	r3, r9
 800642e:	4442      	add	r2, r8
 8006430:	4631      	mov	r1, r6
 8006432:	4628      	mov	r0, r5
 8006434:	47b8      	blx	r7
 8006436:	3001      	adds	r0, #1
 8006438:	d1c1      	bne.n	80063be <_printf_float+0x33e>
 800643a:	e680      	b.n	800613e <_printf_float+0xbe>
 800643c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800643e:	2a01      	cmp	r2, #1
 8006440:	dc01      	bgt.n	8006446 <_printf_float+0x3c6>
 8006442:	07db      	lsls	r3, r3, #31
 8006444:	d53a      	bpl.n	80064bc <_printf_float+0x43c>
 8006446:	2301      	movs	r3, #1
 8006448:	4642      	mov	r2, r8
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	f43f ae74 	beq.w	800613e <_printf_float+0xbe>
 8006456:	ee18 3a10 	vmov	r3, s16
 800645a:	4652      	mov	r2, sl
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	f43f ae6b 	beq.w	800613e <_printf_float+0xbe>
 8006468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800646c:	2200      	movs	r2, #0
 800646e:	2300      	movs	r3, #0
 8006470:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006474:	f7fa fb40 	bl	8000af8 <__aeabi_dcmpeq>
 8006478:	b9d8      	cbnz	r0, 80064b2 <_printf_float+0x432>
 800647a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800647e:	f108 0201 	add.w	r2, r8, #1
 8006482:	4631      	mov	r1, r6
 8006484:	4628      	mov	r0, r5
 8006486:	47b8      	blx	r7
 8006488:	3001      	adds	r0, #1
 800648a:	d10e      	bne.n	80064aa <_printf_float+0x42a>
 800648c:	e657      	b.n	800613e <_printf_float+0xbe>
 800648e:	2301      	movs	r3, #1
 8006490:	4652      	mov	r2, sl
 8006492:	4631      	mov	r1, r6
 8006494:	4628      	mov	r0, r5
 8006496:	47b8      	blx	r7
 8006498:	3001      	adds	r0, #1
 800649a:	f43f ae50 	beq.w	800613e <_printf_float+0xbe>
 800649e:	f108 0801 	add.w	r8, r8, #1
 80064a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a4:	3b01      	subs	r3, #1
 80064a6:	4543      	cmp	r3, r8
 80064a8:	dcf1      	bgt.n	800648e <_printf_float+0x40e>
 80064aa:	464b      	mov	r3, r9
 80064ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064b0:	e6da      	b.n	8006268 <_printf_float+0x1e8>
 80064b2:	f04f 0800 	mov.w	r8, #0
 80064b6:	f104 0a1a 	add.w	sl, r4, #26
 80064ba:	e7f2      	b.n	80064a2 <_printf_float+0x422>
 80064bc:	2301      	movs	r3, #1
 80064be:	4642      	mov	r2, r8
 80064c0:	e7df      	b.n	8006482 <_printf_float+0x402>
 80064c2:	2301      	movs	r3, #1
 80064c4:	464a      	mov	r2, r9
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	f43f ae36 	beq.w	800613e <_printf_float+0xbe>
 80064d2:	f108 0801 	add.w	r8, r8, #1
 80064d6:	68e3      	ldr	r3, [r4, #12]
 80064d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064da:	1a5b      	subs	r3, r3, r1
 80064dc:	4543      	cmp	r3, r8
 80064de:	dcf0      	bgt.n	80064c2 <_printf_float+0x442>
 80064e0:	e6f8      	b.n	80062d4 <_printf_float+0x254>
 80064e2:	f04f 0800 	mov.w	r8, #0
 80064e6:	f104 0919 	add.w	r9, r4, #25
 80064ea:	e7f4      	b.n	80064d6 <_printf_float+0x456>

080064ec <_printf_common>:
 80064ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f0:	4616      	mov	r6, r2
 80064f2:	4699      	mov	r9, r3
 80064f4:	688a      	ldr	r2, [r1, #8]
 80064f6:	690b      	ldr	r3, [r1, #16]
 80064f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064fc:	4293      	cmp	r3, r2
 80064fe:	bfb8      	it	lt
 8006500:	4613      	movlt	r3, r2
 8006502:	6033      	str	r3, [r6, #0]
 8006504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006508:	4607      	mov	r7, r0
 800650a:	460c      	mov	r4, r1
 800650c:	b10a      	cbz	r2, 8006512 <_printf_common+0x26>
 800650e:	3301      	adds	r3, #1
 8006510:	6033      	str	r3, [r6, #0]
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	0699      	lsls	r1, r3, #26
 8006516:	bf42      	ittt	mi
 8006518:	6833      	ldrmi	r3, [r6, #0]
 800651a:	3302      	addmi	r3, #2
 800651c:	6033      	strmi	r3, [r6, #0]
 800651e:	6825      	ldr	r5, [r4, #0]
 8006520:	f015 0506 	ands.w	r5, r5, #6
 8006524:	d106      	bne.n	8006534 <_printf_common+0x48>
 8006526:	f104 0a19 	add.w	sl, r4, #25
 800652a:	68e3      	ldr	r3, [r4, #12]
 800652c:	6832      	ldr	r2, [r6, #0]
 800652e:	1a9b      	subs	r3, r3, r2
 8006530:	42ab      	cmp	r3, r5
 8006532:	dc26      	bgt.n	8006582 <_printf_common+0x96>
 8006534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006538:	1e13      	subs	r3, r2, #0
 800653a:	6822      	ldr	r2, [r4, #0]
 800653c:	bf18      	it	ne
 800653e:	2301      	movne	r3, #1
 8006540:	0692      	lsls	r2, r2, #26
 8006542:	d42b      	bmi.n	800659c <_printf_common+0xb0>
 8006544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006548:	4649      	mov	r1, r9
 800654a:	4638      	mov	r0, r7
 800654c:	47c0      	blx	r8
 800654e:	3001      	adds	r0, #1
 8006550:	d01e      	beq.n	8006590 <_printf_common+0xa4>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	6922      	ldr	r2, [r4, #16]
 8006556:	f003 0306 	and.w	r3, r3, #6
 800655a:	2b04      	cmp	r3, #4
 800655c:	bf02      	ittt	eq
 800655e:	68e5      	ldreq	r5, [r4, #12]
 8006560:	6833      	ldreq	r3, [r6, #0]
 8006562:	1aed      	subeq	r5, r5, r3
 8006564:	68a3      	ldr	r3, [r4, #8]
 8006566:	bf0c      	ite	eq
 8006568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800656c:	2500      	movne	r5, #0
 800656e:	4293      	cmp	r3, r2
 8006570:	bfc4      	itt	gt
 8006572:	1a9b      	subgt	r3, r3, r2
 8006574:	18ed      	addgt	r5, r5, r3
 8006576:	2600      	movs	r6, #0
 8006578:	341a      	adds	r4, #26
 800657a:	42b5      	cmp	r5, r6
 800657c:	d11a      	bne.n	80065b4 <_printf_common+0xc8>
 800657e:	2000      	movs	r0, #0
 8006580:	e008      	b.n	8006594 <_printf_common+0xa8>
 8006582:	2301      	movs	r3, #1
 8006584:	4652      	mov	r2, sl
 8006586:	4649      	mov	r1, r9
 8006588:	4638      	mov	r0, r7
 800658a:	47c0      	blx	r8
 800658c:	3001      	adds	r0, #1
 800658e:	d103      	bne.n	8006598 <_printf_common+0xac>
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006598:	3501      	adds	r5, #1
 800659a:	e7c6      	b.n	800652a <_printf_common+0x3e>
 800659c:	18e1      	adds	r1, r4, r3
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	2030      	movs	r0, #48	; 0x30
 80065a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065a6:	4422      	add	r2, r4
 80065a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065b0:	3302      	adds	r3, #2
 80065b2:	e7c7      	b.n	8006544 <_printf_common+0x58>
 80065b4:	2301      	movs	r3, #1
 80065b6:	4622      	mov	r2, r4
 80065b8:	4649      	mov	r1, r9
 80065ba:	4638      	mov	r0, r7
 80065bc:	47c0      	blx	r8
 80065be:	3001      	adds	r0, #1
 80065c0:	d0e6      	beq.n	8006590 <_printf_common+0xa4>
 80065c2:	3601      	adds	r6, #1
 80065c4:	e7d9      	b.n	800657a <_printf_common+0x8e>
	...

080065c8 <_printf_i>:
 80065c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065cc:	7e0f      	ldrb	r7, [r1, #24]
 80065ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065d0:	2f78      	cmp	r7, #120	; 0x78
 80065d2:	4691      	mov	r9, r2
 80065d4:	4680      	mov	r8, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	469a      	mov	sl, r3
 80065da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065de:	d807      	bhi.n	80065f0 <_printf_i+0x28>
 80065e0:	2f62      	cmp	r7, #98	; 0x62
 80065e2:	d80a      	bhi.n	80065fa <_printf_i+0x32>
 80065e4:	2f00      	cmp	r7, #0
 80065e6:	f000 80d4 	beq.w	8006792 <_printf_i+0x1ca>
 80065ea:	2f58      	cmp	r7, #88	; 0x58
 80065ec:	f000 80c0 	beq.w	8006770 <_printf_i+0x1a8>
 80065f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065f8:	e03a      	b.n	8006670 <_printf_i+0xa8>
 80065fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065fe:	2b15      	cmp	r3, #21
 8006600:	d8f6      	bhi.n	80065f0 <_printf_i+0x28>
 8006602:	a101      	add	r1, pc, #4	; (adr r1, 8006608 <_printf_i+0x40>)
 8006604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006608:	08006661 	.word	0x08006661
 800660c:	08006675 	.word	0x08006675
 8006610:	080065f1 	.word	0x080065f1
 8006614:	080065f1 	.word	0x080065f1
 8006618:	080065f1 	.word	0x080065f1
 800661c:	080065f1 	.word	0x080065f1
 8006620:	08006675 	.word	0x08006675
 8006624:	080065f1 	.word	0x080065f1
 8006628:	080065f1 	.word	0x080065f1
 800662c:	080065f1 	.word	0x080065f1
 8006630:	080065f1 	.word	0x080065f1
 8006634:	08006779 	.word	0x08006779
 8006638:	080066a1 	.word	0x080066a1
 800663c:	08006733 	.word	0x08006733
 8006640:	080065f1 	.word	0x080065f1
 8006644:	080065f1 	.word	0x080065f1
 8006648:	0800679b 	.word	0x0800679b
 800664c:	080065f1 	.word	0x080065f1
 8006650:	080066a1 	.word	0x080066a1
 8006654:	080065f1 	.word	0x080065f1
 8006658:	080065f1 	.word	0x080065f1
 800665c:	0800673b 	.word	0x0800673b
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	1d1a      	adds	r2, r3, #4
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	602a      	str	r2, [r5, #0]
 8006668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800666c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006670:	2301      	movs	r3, #1
 8006672:	e09f      	b.n	80067b4 <_printf_i+0x1ec>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	682b      	ldr	r3, [r5, #0]
 8006678:	0607      	lsls	r7, r0, #24
 800667a:	f103 0104 	add.w	r1, r3, #4
 800667e:	6029      	str	r1, [r5, #0]
 8006680:	d501      	bpl.n	8006686 <_printf_i+0xbe>
 8006682:	681e      	ldr	r6, [r3, #0]
 8006684:	e003      	b.n	800668e <_printf_i+0xc6>
 8006686:	0646      	lsls	r6, r0, #25
 8006688:	d5fb      	bpl.n	8006682 <_printf_i+0xba>
 800668a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800668e:	2e00      	cmp	r6, #0
 8006690:	da03      	bge.n	800669a <_printf_i+0xd2>
 8006692:	232d      	movs	r3, #45	; 0x2d
 8006694:	4276      	negs	r6, r6
 8006696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800669a:	485a      	ldr	r0, [pc, #360]	; (8006804 <_printf_i+0x23c>)
 800669c:	230a      	movs	r3, #10
 800669e:	e012      	b.n	80066c6 <_printf_i+0xfe>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	6820      	ldr	r0, [r4, #0]
 80066a4:	1d19      	adds	r1, r3, #4
 80066a6:	6029      	str	r1, [r5, #0]
 80066a8:	0605      	lsls	r5, r0, #24
 80066aa:	d501      	bpl.n	80066b0 <_printf_i+0xe8>
 80066ac:	681e      	ldr	r6, [r3, #0]
 80066ae:	e002      	b.n	80066b6 <_printf_i+0xee>
 80066b0:	0641      	lsls	r1, r0, #25
 80066b2:	d5fb      	bpl.n	80066ac <_printf_i+0xe4>
 80066b4:	881e      	ldrh	r6, [r3, #0]
 80066b6:	4853      	ldr	r0, [pc, #332]	; (8006804 <_printf_i+0x23c>)
 80066b8:	2f6f      	cmp	r7, #111	; 0x6f
 80066ba:	bf0c      	ite	eq
 80066bc:	2308      	moveq	r3, #8
 80066be:	230a      	movne	r3, #10
 80066c0:	2100      	movs	r1, #0
 80066c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066c6:	6865      	ldr	r5, [r4, #4]
 80066c8:	60a5      	str	r5, [r4, #8]
 80066ca:	2d00      	cmp	r5, #0
 80066cc:	bfa2      	ittt	ge
 80066ce:	6821      	ldrge	r1, [r4, #0]
 80066d0:	f021 0104 	bicge.w	r1, r1, #4
 80066d4:	6021      	strge	r1, [r4, #0]
 80066d6:	b90e      	cbnz	r6, 80066dc <_printf_i+0x114>
 80066d8:	2d00      	cmp	r5, #0
 80066da:	d04b      	beq.n	8006774 <_printf_i+0x1ac>
 80066dc:	4615      	mov	r5, r2
 80066de:	fbb6 f1f3 	udiv	r1, r6, r3
 80066e2:	fb03 6711 	mls	r7, r3, r1, r6
 80066e6:	5dc7      	ldrb	r7, [r0, r7]
 80066e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066ec:	4637      	mov	r7, r6
 80066ee:	42bb      	cmp	r3, r7
 80066f0:	460e      	mov	r6, r1
 80066f2:	d9f4      	bls.n	80066de <_printf_i+0x116>
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d10b      	bne.n	8006710 <_printf_i+0x148>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	07de      	lsls	r6, r3, #31
 80066fc:	d508      	bpl.n	8006710 <_printf_i+0x148>
 80066fe:	6923      	ldr	r3, [r4, #16]
 8006700:	6861      	ldr	r1, [r4, #4]
 8006702:	4299      	cmp	r1, r3
 8006704:	bfde      	ittt	le
 8006706:	2330      	movle	r3, #48	; 0x30
 8006708:	f805 3c01 	strble.w	r3, [r5, #-1]
 800670c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006710:	1b52      	subs	r2, r2, r5
 8006712:	6122      	str	r2, [r4, #16]
 8006714:	f8cd a000 	str.w	sl, [sp]
 8006718:	464b      	mov	r3, r9
 800671a:	aa03      	add	r2, sp, #12
 800671c:	4621      	mov	r1, r4
 800671e:	4640      	mov	r0, r8
 8006720:	f7ff fee4 	bl	80064ec <_printf_common>
 8006724:	3001      	adds	r0, #1
 8006726:	d14a      	bne.n	80067be <_printf_i+0x1f6>
 8006728:	f04f 30ff 	mov.w	r0, #4294967295
 800672c:	b004      	add	sp, #16
 800672e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	f043 0320 	orr.w	r3, r3, #32
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	4833      	ldr	r0, [pc, #204]	; (8006808 <_printf_i+0x240>)
 800673c:	2778      	movs	r7, #120	; 0x78
 800673e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	6829      	ldr	r1, [r5, #0]
 8006746:	061f      	lsls	r7, r3, #24
 8006748:	f851 6b04 	ldr.w	r6, [r1], #4
 800674c:	d402      	bmi.n	8006754 <_printf_i+0x18c>
 800674e:	065f      	lsls	r7, r3, #25
 8006750:	bf48      	it	mi
 8006752:	b2b6      	uxthmi	r6, r6
 8006754:	07df      	lsls	r7, r3, #31
 8006756:	bf48      	it	mi
 8006758:	f043 0320 	orrmi.w	r3, r3, #32
 800675c:	6029      	str	r1, [r5, #0]
 800675e:	bf48      	it	mi
 8006760:	6023      	strmi	r3, [r4, #0]
 8006762:	b91e      	cbnz	r6, 800676c <_printf_i+0x1a4>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	f023 0320 	bic.w	r3, r3, #32
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	2310      	movs	r3, #16
 800676e:	e7a7      	b.n	80066c0 <_printf_i+0xf8>
 8006770:	4824      	ldr	r0, [pc, #144]	; (8006804 <_printf_i+0x23c>)
 8006772:	e7e4      	b.n	800673e <_printf_i+0x176>
 8006774:	4615      	mov	r5, r2
 8006776:	e7bd      	b.n	80066f4 <_printf_i+0x12c>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	6826      	ldr	r6, [r4, #0]
 800677c:	6961      	ldr	r1, [r4, #20]
 800677e:	1d18      	adds	r0, r3, #4
 8006780:	6028      	str	r0, [r5, #0]
 8006782:	0635      	lsls	r5, r6, #24
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	d501      	bpl.n	800678c <_printf_i+0x1c4>
 8006788:	6019      	str	r1, [r3, #0]
 800678a:	e002      	b.n	8006792 <_printf_i+0x1ca>
 800678c:	0670      	lsls	r0, r6, #25
 800678e:	d5fb      	bpl.n	8006788 <_printf_i+0x1c0>
 8006790:	8019      	strh	r1, [r3, #0]
 8006792:	2300      	movs	r3, #0
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	4615      	mov	r5, r2
 8006798:	e7bc      	b.n	8006714 <_printf_i+0x14c>
 800679a:	682b      	ldr	r3, [r5, #0]
 800679c:	1d1a      	adds	r2, r3, #4
 800679e:	602a      	str	r2, [r5, #0]
 80067a0:	681d      	ldr	r5, [r3, #0]
 80067a2:	6862      	ldr	r2, [r4, #4]
 80067a4:	2100      	movs	r1, #0
 80067a6:	4628      	mov	r0, r5
 80067a8:	f7f9 fd2a 	bl	8000200 <memchr>
 80067ac:	b108      	cbz	r0, 80067b2 <_printf_i+0x1ea>
 80067ae:	1b40      	subs	r0, r0, r5
 80067b0:	6060      	str	r0, [r4, #4]
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	2300      	movs	r3, #0
 80067b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067bc:	e7aa      	b.n	8006714 <_printf_i+0x14c>
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	462a      	mov	r2, r5
 80067c2:	4649      	mov	r1, r9
 80067c4:	4640      	mov	r0, r8
 80067c6:	47d0      	blx	sl
 80067c8:	3001      	adds	r0, #1
 80067ca:	d0ad      	beq.n	8006728 <_printf_i+0x160>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	079b      	lsls	r3, r3, #30
 80067d0:	d413      	bmi.n	80067fa <_printf_i+0x232>
 80067d2:	68e0      	ldr	r0, [r4, #12]
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	4298      	cmp	r0, r3
 80067d8:	bfb8      	it	lt
 80067da:	4618      	movlt	r0, r3
 80067dc:	e7a6      	b.n	800672c <_printf_i+0x164>
 80067de:	2301      	movs	r3, #1
 80067e0:	4632      	mov	r2, r6
 80067e2:	4649      	mov	r1, r9
 80067e4:	4640      	mov	r0, r8
 80067e6:	47d0      	blx	sl
 80067e8:	3001      	adds	r0, #1
 80067ea:	d09d      	beq.n	8006728 <_printf_i+0x160>
 80067ec:	3501      	adds	r5, #1
 80067ee:	68e3      	ldr	r3, [r4, #12]
 80067f0:	9903      	ldr	r1, [sp, #12]
 80067f2:	1a5b      	subs	r3, r3, r1
 80067f4:	42ab      	cmp	r3, r5
 80067f6:	dcf2      	bgt.n	80067de <_printf_i+0x216>
 80067f8:	e7eb      	b.n	80067d2 <_printf_i+0x20a>
 80067fa:	2500      	movs	r5, #0
 80067fc:	f104 0619 	add.w	r6, r4, #25
 8006800:	e7f5      	b.n	80067ee <_printf_i+0x226>
 8006802:	bf00      	nop
 8006804:	0800c630 	.word	0x0800c630
 8006808:	0800c641 	.word	0x0800c641

0800680c <_scanf_float>:
 800680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006810:	b087      	sub	sp, #28
 8006812:	4617      	mov	r7, r2
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	688b      	ldr	r3, [r1, #8]
 8006818:	1e5a      	subs	r2, r3, #1
 800681a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800681e:	bf83      	ittte	hi
 8006820:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006824:	195b      	addhi	r3, r3, r5
 8006826:	9302      	strhi	r3, [sp, #8]
 8006828:	2300      	movls	r3, #0
 800682a:	bf86      	itte	hi
 800682c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006830:	608b      	strhi	r3, [r1, #8]
 8006832:	9302      	strls	r3, [sp, #8]
 8006834:	680b      	ldr	r3, [r1, #0]
 8006836:	468b      	mov	fp, r1
 8006838:	2500      	movs	r5, #0
 800683a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800683e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006842:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006846:	4680      	mov	r8, r0
 8006848:	460c      	mov	r4, r1
 800684a:	465e      	mov	r6, fp
 800684c:	46aa      	mov	sl, r5
 800684e:	46a9      	mov	r9, r5
 8006850:	9501      	str	r5, [sp, #4]
 8006852:	68a2      	ldr	r2, [r4, #8]
 8006854:	b152      	cbz	r2, 800686c <_scanf_float+0x60>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b4e      	cmp	r3, #78	; 0x4e
 800685c:	d864      	bhi.n	8006928 <_scanf_float+0x11c>
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d83c      	bhi.n	80068dc <_scanf_float+0xd0>
 8006862:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006866:	b2c8      	uxtb	r0, r1
 8006868:	280e      	cmp	r0, #14
 800686a:	d93a      	bls.n	80068e2 <_scanf_float+0xd6>
 800686c:	f1b9 0f00 	cmp.w	r9, #0
 8006870:	d003      	beq.n	800687a <_scanf_float+0x6e>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800687e:	f1ba 0f01 	cmp.w	sl, #1
 8006882:	f200 8113 	bhi.w	8006aac <_scanf_float+0x2a0>
 8006886:	455e      	cmp	r6, fp
 8006888:	f200 8105 	bhi.w	8006a96 <_scanf_float+0x28a>
 800688c:	2501      	movs	r5, #1
 800688e:	4628      	mov	r0, r5
 8006890:	b007      	add	sp, #28
 8006892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006896:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800689a:	2a0d      	cmp	r2, #13
 800689c:	d8e6      	bhi.n	800686c <_scanf_float+0x60>
 800689e:	a101      	add	r1, pc, #4	; (adr r1, 80068a4 <_scanf_float+0x98>)
 80068a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068a4:	080069e3 	.word	0x080069e3
 80068a8:	0800686d 	.word	0x0800686d
 80068ac:	0800686d 	.word	0x0800686d
 80068b0:	0800686d 	.word	0x0800686d
 80068b4:	08006a43 	.word	0x08006a43
 80068b8:	08006a1b 	.word	0x08006a1b
 80068bc:	0800686d 	.word	0x0800686d
 80068c0:	0800686d 	.word	0x0800686d
 80068c4:	080069f1 	.word	0x080069f1
 80068c8:	0800686d 	.word	0x0800686d
 80068cc:	0800686d 	.word	0x0800686d
 80068d0:	0800686d 	.word	0x0800686d
 80068d4:	0800686d 	.word	0x0800686d
 80068d8:	080069a9 	.word	0x080069a9
 80068dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80068e0:	e7db      	b.n	800689a <_scanf_float+0x8e>
 80068e2:	290e      	cmp	r1, #14
 80068e4:	d8c2      	bhi.n	800686c <_scanf_float+0x60>
 80068e6:	a001      	add	r0, pc, #4	; (adr r0, 80068ec <_scanf_float+0xe0>)
 80068e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80068ec:	0800699b 	.word	0x0800699b
 80068f0:	0800686d 	.word	0x0800686d
 80068f4:	0800699b 	.word	0x0800699b
 80068f8:	08006a2f 	.word	0x08006a2f
 80068fc:	0800686d 	.word	0x0800686d
 8006900:	08006949 	.word	0x08006949
 8006904:	08006985 	.word	0x08006985
 8006908:	08006985 	.word	0x08006985
 800690c:	08006985 	.word	0x08006985
 8006910:	08006985 	.word	0x08006985
 8006914:	08006985 	.word	0x08006985
 8006918:	08006985 	.word	0x08006985
 800691c:	08006985 	.word	0x08006985
 8006920:	08006985 	.word	0x08006985
 8006924:	08006985 	.word	0x08006985
 8006928:	2b6e      	cmp	r3, #110	; 0x6e
 800692a:	d809      	bhi.n	8006940 <_scanf_float+0x134>
 800692c:	2b60      	cmp	r3, #96	; 0x60
 800692e:	d8b2      	bhi.n	8006896 <_scanf_float+0x8a>
 8006930:	2b54      	cmp	r3, #84	; 0x54
 8006932:	d077      	beq.n	8006a24 <_scanf_float+0x218>
 8006934:	2b59      	cmp	r3, #89	; 0x59
 8006936:	d199      	bne.n	800686c <_scanf_float+0x60>
 8006938:	2d07      	cmp	r5, #7
 800693a:	d197      	bne.n	800686c <_scanf_float+0x60>
 800693c:	2508      	movs	r5, #8
 800693e:	e029      	b.n	8006994 <_scanf_float+0x188>
 8006940:	2b74      	cmp	r3, #116	; 0x74
 8006942:	d06f      	beq.n	8006a24 <_scanf_float+0x218>
 8006944:	2b79      	cmp	r3, #121	; 0x79
 8006946:	e7f6      	b.n	8006936 <_scanf_float+0x12a>
 8006948:	6821      	ldr	r1, [r4, #0]
 800694a:	05c8      	lsls	r0, r1, #23
 800694c:	d51a      	bpl.n	8006984 <_scanf_float+0x178>
 800694e:	9b02      	ldr	r3, [sp, #8]
 8006950:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006954:	6021      	str	r1, [r4, #0]
 8006956:	f109 0901 	add.w	r9, r9, #1
 800695a:	b11b      	cbz	r3, 8006964 <_scanf_float+0x158>
 800695c:	3b01      	subs	r3, #1
 800695e:	3201      	adds	r2, #1
 8006960:	9302      	str	r3, [sp, #8]
 8006962:	60a2      	str	r2, [r4, #8]
 8006964:	68a3      	ldr	r3, [r4, #8]
 8006966:	3b01      	subs	r3, #1
 8006968:	60a3      	str	r3, [r4, #8]
 800696a:	6923      	ldr	r3, [r4, #16]
 800696c:	3301      	adds	r3, #1
 800696e:	6123      	str	r3, [r4, #16]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3b01      	subs	r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	f340 8084 	ble.w	8006a84 <_scanf_float+0x278>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	3301      	adds	r3, #1
 8006980:	603b      	str	r3, [r7, #0]
 8006982:	e766      	b.n	8006852 <_scanf_float+0x46>
 8006984:	eb1a 0f05 	cmn.w	sl, r5
 8006988:	f47f af70 	bne.w	800686c <_scanf_float+0x60>
 800698c:	6822      	ldr	r2, [r4, #0]
 800698e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006992:	6022      	str	r2, [r4, #0]
 8006994:	f806 3b01 	strb.w	r3, [r6], #1
 8006998:	e7e4      	b.n	8006964 <_scanf_float+0x158>
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	0610      	lsls	r0, r2, #24
 800699e:	f57f af65 	bpl.w	800686c <_scanf_float+0x60>
 80069a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069a6:	e7f4      	b.n	8006992 <_scanf_float+0x186>
 80069a8:	f1ba 0f00 	cmp.w	sl, #0
 80069ac:	d10e      	bne.n	80069cc <_scanf_float+0x1c0>
 80069ae:	f1b9 0f00 	cmp.w	r9, #0
 80069b2:	d10e      	bne.n	80069d2 <_scanf_float+0x1c6>
 80069b4:	6822      	ldr	r2, [r4, #0]
 80069b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069be:	d108      	bne.n	80069d2 <_scanf_float+0x1c6>
 80069c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069c4:	6022      	str	r2, [r4, #0]
 80069c6:	f04f 0a01 	mov.w	sl, #1
 80069ca:	e7e3      	b.n	8006994 <_scanf_float+0x188>
 80069cc:	f1ba 0f02 	cmp.w	sl, #2
 80069d0:	d055      	beq.n	8006a7e <_scanf_float+0x272>
 80069d2:	2d01      	cmp	r5, #1
 80069d4:	d002      	beq.n	80069dc <_scanf_float+0x1d0>
 80069d6:	2d04      	cmp	r5, #4
 80069d8:	f47f af48 	bne.w	800686c <_scanf_float+0x60>
 80069dc:	3501      	adds	r5, #1
 80069de:	b2ed      	uxtb	r5, r5
 80069e0:	e7d8      	b.n	8006994 <_scanf_float+0x188>
 80069e2:	f1ba 0f01 	cmp.w	sl, #1
 80069e6:	f47f af41 	bne.w	800686c <_scanf_float+0x60>
 80069ea:	f04f 0a02 	mov.w	sl, #2
 80069ee:	e7d1      	b.n	8006994 <_scanf_float+0x188>
 80069f0:	b97d      	cbnz	r5, 8006a12 <_scanf_float+0x206>
 80069f2:	f1b9 0f00 	cmp.w	r9, #0
 80069f6:	f47f af3c 	bne.w	8006872 <_scanf_float+0x66>
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a04:	f47f af39 	bne.w	800687a <_scanf_float+0x6e>
 8006a08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a0c:	6022      	str	r2, [r4, #0]
 8006a0e:	2501      	movs	r5, #1
 8006a10:	e7c0      	b.n	8006994 <_scanf_float+0x188>
 8006a12:	2d03      	cmp	r5, #3
 8006a14:	d0e2      	beq.n	80069dc <_scanf_float+0x1d0>
 8006a16:	2d05      	cmp	r5, #5
 8006a18:	e7de      	b.n	80069d8 <_scanf_float+0x1cc>
 8006a1a:	2d02      	cmp	r5, #2
 8006a1c:	f47f af26 	bne.w	800686c <_scanf_float+0x60>
 8006a20:	2503      	movs	r5, #3
 8006a22:	e7b7      	b.n	8006994 <_scanf_float+0x188>
 8006a24:	2d06      	cmp	r5, #6
 8006a26:	f47f af21 	bne.w	800686c <_scanf_float+0x60>
 8006a2a:	2507      	movs	r5, #7
 8006a2c:	e7b2      	b.n	8006994 <_scanf_float+0x188>
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	0591      	lsls	r1, r2, #22
 8006a32:	f57f af1b 	bpl.w	800686c <_scanf_float+0x60>
 8006a36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006a3a:	6022      	str	r2, [r4, #0]
 8006a3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a40:	e7a8      	b.n	8006994 <_scanf_float+0x188>
 8006a42:	6822      	ldr	r2, [r4, #0]
 8006a44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a4c:	d006      	beq.n	8006a5c <_scanf_float+0x250>
 8006a4e:	0550      	lsls	r0, r2, #21
 8006a50:	f57f af0c 	bpl.w	800686c <_scanf_float+0x60>
 8006a54:	f1b9 0f00 	cmp.w	r9, #0
 8006a58:	f43f af0f 	beq.w	800687a <_scanf_float+0x6e>
 8006a5c:	0591      	lsls	r1, r2, #22
 8006a5e:	bf58      	it	pl
 8006a60:	9901      	ldrpl	r1, [sp, #4]
 8006a62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a66:	bf58      	it	pl
 8006a68:	eba9 0101 	subpl.w	r1, r9, r1
 8006a6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006a70:	bf58      	it	pl
 8006a72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a76:	6022      	str	r2, [r4, #0]
 8006a78:	f04f 0900 	mov.w	r9, #0
 8006a7c:	e78a      	b.n	8006994 <_scanf_float+0x188>
 8006a7e:	f04f 0a03 	mov.w	sl, #3
 8006a82:	e787      	b.n	8006994 <_scanf_float+0x188>
 8006a84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a88:	4639      	mov	r1, r7
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4798      	blx	r3
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f43f aedf 	beq.w	8006852 <_scanf_float+0x46>
 8006a94:	e6ea      	b.n	800686c <_scanf_float+0x60>
 8006a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a9e:	463a      	mov	r2, r7
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	4798      	blx	r3
 8006aa4:	6923      	ldr	r3, [r4, #16]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	e6ec      	b.n	8006886 <_scanf_float+0x7a>
 8006aac:	1e6b      	subs	r3, r5, #1
 8006aae:	2b06      	cmp	r3, #6
 8006ab0:	d825      	bhi.n	8006afe <_scanf_float+0x2f2>
 8006ab2:	2d02      	cmp	r5, #2
 8006ab4:	d836      	bhi.n	8006b24 <_scanf_float+0x318>
 8006ab6:	455e      	cmp	r6, fp
 8006ab8:	f67f aee8 	bls.w	800688c <_scanf_float+0x80>
 8006abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ac0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ac4:	463a      	mov	r2, r7
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4798      	blx	r3
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	6123      	str	r3, [r4, #16]
 8006ad0:	e7f1      	b.n	8006ab6 <_scanf_float+0x2aa>
 8006ad2:	9802      	ldr	r0, [sp, #8]
 8006ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ad8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006adc:	9002      	str	r0, [sp, #8]
 8006ade:	463a      	mov	r2, r7
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	4798      	blx	r3
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	6123      	str	r3, [r4, #16]
 8006aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aee:	fa5f fa8a 	uxtb.w	sl, sl
 8006af2:	f1ba 0f02 	cmp.w	sl, #2
 8006af6:	d1ec      	bne.n	8006ad2 <_scanf_float+0x2c6>
 8006af8:	3d03      	subs	r5, #3
 8006afa:	b2ed      	uxtb	r5, r5
 8006afc:	1b76      	subs	r6, r6, r5
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	05da      	lsls	r2, r3, #23
 8006b02:	d52f      	bpl.n	8006b64 <_scanf_float+0x358>
 8006b04:	055b      	lsls	r3, r3, #21
 8006b06:	d510      	bpl.n	8006b2a <_scanf_float+0x31e>
 8006b08:	455e      	cmp	r6, fp
 8006b0a:	f67f aebf 	bls.w	800688c <_scanf_float+0x80>
 8006b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b16:	463a      	mov	r2, r7
 8006b18:	4640      	mov	r0, r8
 8006b1a:	4798      	blx	r3
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	e7f1      	b.n	8006b08 <_scanf_float+0x2fc>
 8006b24:	46aa      	mov	sl, r5
 8006b26:	9602      	str	r6, [sp, #8]
 8006b28:	e7df      	b.n	8006aea <_scanf_float+0x2de>
 8006b2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	2965      	cmp	r1, #101	; 0x65
 8006b32:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b36:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b3a:	6123      	str	r3, [r4, #16]
 8006b3c:	d00c      	beq.n	8006b58 <_scanf_float+0x34c>
 8006b3e:	2945      	cmp	r1, #69	; 0x45
 8006b40:	d00a      	beq.n	8006b58 <_scanf_float+0x34c>
 8006b42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b46:	463a      	mov	r2, r7
 8006b48:	4640      	mov	r0, r8
 8006b4a:	4798      	blx	r3
 8006b4c:	6923      	ldr	r3, [r4, #16]
 8006b4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	1eb5      	subs	r5, r6, #2
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b5c:	463a      	mov	r2, r7
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4798      	blx	r3
 8006b62:	462e      	mov	r6, r5
 8006b64:	6825      	ldr	r5, [r4, #0]
 8006b66:	f015 0510 	ands.w	r5, r5, #16
 8006b6a:	d158      	bne.n	8006c1e <_scanf_float+0x412>
 8006b6c:	7035      	strb	r5, [r6, #0]
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b78:	d11c      	bne.n	8006bb4 <_scanf_float+0x3a8>
 8006b7a:	9b01      	ldr	r3, [sp, #4]
 8006b7c:	454b      	cmp	r3, r9
 8006b7e:	eba3 0209 	sub.w	r2, r3, r9
 8006b82:	d124      	bne.n	8006bce <_scanf_float+0x3c2>
 8006b84:	2200      	movs	r2, #0
 8006b86:	4659      	mov	r1, fp
 8006b88:	4640      	mov	r0, r8
 8006b8a:	f002 fc65 	bl	8009458 <_strtod_r>
 8006b8e:	9b03      	ldr	r3, [sp, #12]
 8006b90:	6821      	ldr	r1, [r4, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f011 0f02 	tst.w	r1, #2
 8006b98:	ec57 6b10 	vmov	r6, r7, d0
 8006b9c:	f103 0204 	add.w	r2, r3, #4
 8006ba0:	d020      	beq.n	8006be4 <_scanf_float+0x3d8>
 8006ba2:	9903      	ldr	r1, [sp, #12]
 8006ba4:	600a      	str	r2, [r1, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	e9c3 6700 	strd	r6, r7, [r3]
 8006bac:	68e3      	ldr	r3, [r4, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60e3      	str	r3, [r4, #12]
 8006bb2:	e66c      	b.n	800688e <_scanf_float+0x82>
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0e4      	beq.n	8006b84 <_scanf_float+0x378>
 8006bba:	9905      	ldr	r1, [sp, #20]
 8006bbc:	230a      	movs	r3, #10
 8006bbe:	462a      	mov	r2, r5
 8006bc0:	3101      	adds	r1, #1
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f002 fcd0 	bl	8009568 <_strtol_r>
 8006bc8:	9b04      	ldr	r3, [sp, #16]
 8006bca:	9e05      	ldr	r6, [sp, #20]
 8006bcc:	1ac2      	subs	r2, r0, r3
 8006bce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006bd2:	429e      	cmp	r6, r3
 8006bd4:	bf28      	it	cs
 8006bd6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006bda:	4912      	ldr	r1, [pc, #72]	; (8006c24 <_scanf_float+0x418>)
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f000 f8e7 	bl	8006db0 <siprintf>
 8006be2:	e7cf      	b.n	8006b84 <_scanf_float+0x378>
 8006be4:	f011 0f04 	tst.w	r1, #4
 8006be8:	9903      	ldr	r1, [sp, #12]
 8006bea:	600a      	str	r2, [r1, #0]
 8006bec:	d1db      	bne.n	8006ba6 <_scanf_float+0x39a>
 8006bee:	f8d3 8000 	ldr.w	r8, [r3]
 8006bf2:	ee10 2a10 	vmov	r2, s0
 8006bf6:	ee10 0a10 	vmov	r0, s0
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	f7f9 ffad 	bl	8000b5c <__aeabi_dcmpun>
 8006c02:	b128      	cbz	r0, 8006c10 <_scanf_float+0x404>
 8006c04:	4808      	ldr	r0, [pc, #32]	; (8006c28 <_scanf_float+0x41c>)
 8006c06:	f000 f9ed 	bl	8006fe4 <nanf>
 8006c0a:	ed88 0a00 	vstr	s0, [r8]
 8006c0e:	e7cd      	b.n	8006bac <_scanf_float+0x3a0>
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7fa f800 	bl	8000c18 <__aeabi_d2f>
 8006c18:	f8c8 0000 	str.w	r0, [r8]
 8006c1c:	e7c6      	b.n	8006bac <_scanf_float+0x3a0>
 8006c1e:	2500      	movs	r5, #0
 8006c20:	e635      	b.n	800688e <_scanf_float+0x82>
 8006c22:	bf00      	nop
 8006c24:	0800c652 	.word	0x0800c652
 8006c28:	0800ca00 	.word	0x0800ca00

08006c2c <std>:
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	4604      	mov	r4, r0
 8006c32:	e9c0 3300 	strd	r3, r3, [r0]
 8006c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c3a:	6083      	str	r3, [r0, #8]
 8006c3c:	8181      	strh	r1, [r0, #12]
 8006c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c40:	81c2      	strh	r2, [r0, #14]
 8006c42:	6183      	str	r3, [r0, #24]
 8006c44:	4619      	mov	r1, r3
 8006c46:	2208      	movs	r2, #8
 8006c48:	305c      	adds	r0, #92	; 0x5c
 8006c4a:	f000 f942 	bl	8006ed2 <memset>
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <std+0x58>)
 8006c50:	6263      	str	r3, [r4, #36]	; 0x24
 8006c52:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <std+0x5c>)
 8006c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c56:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <std+0x60>)
 8006c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <std+0x64>)
 8006c5c:	6323      	str	r3, [r4, #48]	; 0x30
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <std+0x68>)
 8006c60:	6224      	str	r4, [r4, #32]
 8006c62:	429c      	cmp	r4, r3
 8006c64:	d006      	beq.n	8006c74 <std+0x48>
 8006c66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006c6a:	4294      	cmp	r4, r2
 8006c6c:	d002      	beq.n	8006c74 <std+0x48>
 8006c6e:	33d0      	adds	r3, #208	; 0xd0
 8006c70:	429c      	cmp	r4, r3
 8006c72:	d105      	bne.n	8006c80 <std+0x54>
 8006c74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c7c:	f000 b9a6 	b.w	8006fcc <__retarget_lock_init_recursive>
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08006e49 	.word	0x08006e49
 8006c88:	08006e6f 	.word	0x08006e6f
 8006c8c:	08006ea7 	.word	0x08006ea7
 8006c90:	08006ecb 	.word	0x08006ecb
 8006c94:	200004fc 	.word	0x200004fc

08006c98 <stdio_exit_handler>:
 8006c98:	4a02      	ldr	r2, [pc, #8]	; (8006ca4 <stdio_exit_handler+0xc>)
 8006c9a:	4903      	ldr	r1, [pc, #12]	; (8006ca8 <stdio_exit_handler+0x10>)
 8006c9c:	4803      	ldr	r0, [pc, #12]	; (8006cac <stdio_exit_handler+0x14>)
 8006c9e:	f000 b869 	b.w	8006d74 <_fwalk_sglue>
 8006ca2:	bf00      	nop
 8006ca4:	20000010 	.word	0x20000010
 8006ca8:	08009f69 	.word	0x08009f69
 8006cac:	2000001c 	.word	0x2000001c

08006cb0 <cleanup_stdio>:
 8006cb0:	6841      	ldr	r1, [r0, #4]
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <cleanup_stdio+0x34>)
 8006cb4:	4299      	cmp	r1, r3
 8006cb6:	b510      	push	{r4, lr}
 8006cb8:	4604      	mov	r4, r0
 8006cba:	d001      	beq.n	8006cc0 <cleanup_stdio+0x10>
 8006cbc:	f003 f954 	bl	8009f68 <_fflush_r>
 8006cc0:	68a1      	ldr	r1, [r4, #8]
 8006cc2:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <cleanup_stdio+0x38>)
 8006cc4:	4299      	cmp	r1, r3
 8006cc6:	d002      	beq.n	8006cce <cleanup_stdio+0x1e>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f003 f94d 	bl	8009f68 <_fflush_r>
 8006cce:	68e1      	ldr	r1, [r4, #12]
 8006cd0:	4b06      	ldr	r3, [pc, #24]	; (8006cec <cleanup_stdio+0x3c>)
 8006cd2:	4299      	cmp	r1, r3
 8006cd4:	d004      	beq.n	8006ce0 <cleanup_stdio+0x30>
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cdc:	f003 b944 	b.w	8009f68 <_fflush_r>
 8006ce0:	bd10      	pop	{r4, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200004fc 	.word	0x200004fc
 8006ce8:	20000564 	.word	0x20000564
 8006cec:	200005cc 	.word	0x200005cc

08006cf0 <global_stdio_init.part.0>:
 8006cf0:	b510      	push	{r4, lr}
 8006cf2:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <global_stdio_init.part.0+0x30>)
 8006cf4:	4c0b      	ldr	r4, [pc, #44]	; (8006d24 <global_stdio_init.part.0+0x34>)
 8006cf6:	4a0c      	ldr	r2, [pc, #48]	; (8006d28 <global_stdio_init.part.0+0x38>)
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2104      	movs	r1, #4
 8006d00:	f7ff ff94 	bl	8006c2c <std>
 8006d04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006d08:	2201      	movs	r2, #1
 8006d0a:	2109      	movs	r1, #9
 8006d0c:	f7ff ff8e 	bl	8006c2c <std>
 8006d10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006d14:	2202      	movs	r2, #2
 8006d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1a:	2112      	movs	r1, #18
 8006d1c:	f7ff bf86 	b.w	8006c2c <std>
 8006d20:	20000634 	.word	0x20000634
 8006d24:	200004fc 	.word	0x200004fc
 8006d28:	08006c99 	.word	0x08006c99

08006d2c <__sfp_lock_acquire>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	; (8006d34 <__sfp_lock_acquire+0x8>)
 8006d2e:	f000 b94e 	b.w	8006fce <__retarget_lock_acquire_recursive>
 8006d32:	bf00      	nop
 8006d34:	2000063d 	.word	0x2000063d

08006d38 <__sfp_lock_release>:
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <__sfp_lock_release+0x8>)
 8006d3a:	f000 b949 	b.w	8006fd0 <__retarget_lock_release_recursive>
 8006d3e:	bf00      	nop
 8006d40:	2000063d 	.word	0x2000063d

08006d44 <__sinit>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	4604      	mov	r4, r0
 8006d48:	f7ff fff0 	bl	8006d2c <__sfp_lock_acquire>
 8006d4c:	6a23      	ldr	r3, [r4, #32]
 8006d4e:	b11b      	cbz	r3, 8006d58 <__sinit+0x14>
 8006d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d54:	f7ff bff0 	b.w	8006d38 <__sfp_lock_release>
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <__sinit+0x28>)
 8006d5a:	6223      	str	r3, [r4, #32]
 8006d5c:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <__sinit+0x2c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1f5      	bne.n	8006d50 <__sinit+0xc>
 8006d64:	f7ff ffc4 	bl	8006cf0 <global_stdio_init.part.0>
 8006d68:	e7f2      	b.n	8006d50 <__sinit+0xc>
 8006d6a:	bf00      	nop
 8006d6c:	08006cb1 	.word	0x08006cb1
 8006d70:	20000634 	.word	0x20000634

08006d74 <_fwalk_sglue>:
 8006d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d78:	4607      	mov	r7, r0
 8006d7a:	4688      	mov	r8, r1
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	2600      	movs	r6, #0
 8006d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d84:	f1b9 0901 	subs.w	r9, r9, #1
 8006d88:	d505      	bpl.n	8006d96 <_fwalk_sglue+0x22>
 8006d8a:	6824      	ldr	r4, [r4, #0]
 8006d8c:	2c00      	cmp	r4, #0
 8006d8e:	d1f7      	bne.n	8006d80 <_fwalk_sglue+0xc>
 8006d90:	4630      	mov	r0, r6
 8006d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d96:	89ab      	ldrh	r3, [r5, #12]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d907      	bls.n	8006dac <_fwalk_sglue+0x38>
 8006d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006da0:	3301      	adds	r3, #1
 8006da2:	d003      	beq.n	8006dac <_fwalk_sglue+0x38>
 8006da4:	4629      	mov	r1, r5
 8006da6:	4638      	mov	r0, r7
 8006da8:	47c0      	blx	r8
 8006daa:	4306      	orrs	r6, r0
 8006dac:	3568      	adds	r5, #104	; 0x68
 8006dae:	e7e9      	b.n	8006d84 <_fwalk_sglue+0x10>

08006db0 <siprintf>:
 8006db0:	b40e      	push	{r1, r2, r3}
 8006db2:	b500      	push	{lr}
 8006db4:	b09c      	sub	sp, #112	; 0x70
 8006db6:	ab1d      	add	r3, sp, #116	; 0x74
 8006db8:	9002      	str	r0, [sp, #8]
 8006dba:	9006      	str	r0, [sp, #24]
 8006dbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dc0:	4809      	ldr	r0, [pc, #36]	; (8006de8 <siprintf+0x38>)
 8006dc2:	9107      	str	r1, [sp, #28]
 8006dc4:	9104      	str	r1, [sp, #16]
 8006dc6:	4909      	ldr	r1, [pc, #36]	; (8006dec <siprintf+0x3c>)
 8006dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dcc:	9105      	str	r1, [sp, #20]
 8006dce:	6800      	ldr	r0, [r0, #0]
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	a902      	add	r1, sp, #8
 8006dd4:	f002 fc24 	bl	8009620 <_svfiprintf_r>
 8006dd8:	9b02      	ldr	r3, [sp, #8]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	b01c      	add	sp, #112	; 0x70
 8006de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006de4:	b003      	add	sp, #12
 8006de6:	4770      	bx	lr
 8006de8:	20000068 	.word	0x20000068
 8006dec:	ffff0208 	.word	0xffff0208

08006df0 <siscanf>:
 8006df0:	b40e      	push	{r1, r2, r3}
 8006df2:	b510      	push	{r4, lr}
 8006df4:	b09f      	sub	sp, #124	; 0x7c
 8006df6:	ac21      	add	r4, sp, #132	; 0x84
 8006df8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006dfc:	f854 2b04 	ldr.w	r2, [r4], #4
 8006e00:	9201      	str	r2, [sp, #4]
 8006e02:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006e06:	9004      	str	r0, [sp, #16]
 8006e08:	9008      	str	r0, [sp, #32]
 8006e0a:	f7f9 fa49 	bl	80002a0 <strlen>
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <siscanf+0x50>)
 8006e10:	9005      	str	r0, [sp, #20]
 8006e12:	9009      	str	r0, [sp, #36]	; 0x24
 8006e14:	930d      	str	r3, [sp, #52]	; 0x34
 8006e16:	480b      	ldr	r0, [pc, #44]	; (8006e44 <siscanf+0x54>)
 8006e18:	9a01      	ldr	r2, [sp, #4]
 8006e1a:	6800      	ldr	r0, [r0, #0]
 8006e1c:	9403      	str	r4, [sp, #12]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9311      	str	r3, [sp, #68]	; 0x44
 8006e22:	9316      	str	r3, [sp, #88]	; 0x58
 8006e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e28:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006e2c:	a904      	add	r1, sp, #16
 8006e2e:	4623      	mov	r3, r4
 8006e30:	f002 fd4e 	bl	80098d0 <__ssvfiscanf_r>
 8006e34:	b01f      	add	sp, #124	; 0x7c
 8006e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e3a:	b003      	add	sp, #12
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	08006e6b 	.word	0x08006e6b
 8006e44:	20000068 	.word	0x20000068

08006e48 <__sread>:
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e50:	f000 f86e 	bl	8006f30 <_read_r>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	bfab      	itete	ge
 8006e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e5c:	181b      	addge	r3, r3, r0
 8006e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e62:	bfac      	ite	ge
 8006e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e66:	81a3      	strhlt	r3, [r4, #12]
 8006e68:	bd10      	pop	{r4, pc}

08006e6a <__seofread>:
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	4770      	bx	lr

08006e6e <__swrite>:
 8006e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e72:	461f      	mov	r7, r3
 8006e74:	898b      	ldrh	r3, [r1, #12]
 8006e76:	05db      	lsls	r3, r3, #23
 8006e78:	4605      	mov	r5, r0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	4616      	mov	r6, r2
 8006e7e:	d505      	bpl.n	8006e8c <__swrite+0x1e>
 8006e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e84:	2302      	movs	r3, #2
 8006e86:	2200      	movs	r2, #0
 8006e88:	f000 f840 	bl	8006f0c <_lseek_r>
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e96:	81a3      	strh	r3, [r4, #12]
 8006e98:	4632      	mov	r2, r6
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea2:	f000 b857 	b.w	8006f54 <_write_r>

08006ea6 <__sseek>:
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eae:	f000 f82d 	bl	8006f0c <_lseek_r>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	bf15      	itete	ne
 8006eb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ec2:	81a3      	strheq	r3, [r4, #12]
 8006ec4:	bf18      	it	ne
 8006ec6:	81a3      	strhne	r3, [r4, #12]
 8006ec8:	bd10      	pop	{r4, pc}

08006eca <__sclose>:
 8006eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ece:	f000 b80d 	b.w	8006eec <_close_r>

08006ed2 <memset>:
 8006ed2:	4402      	add	r2, r0
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d100      	bne.n	8006edc <memset+0xa>
 8006eda:	4770      	bx	lr
 8006edc:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee0:	e7f9      	b.n	8006ed6 <memset+0x4>
	...

08006ee4 <_localeconv_r>:
 8006ee4:	4800      	ldr	r0, [pc, #0]	; (8006ee8 <_localeconv_r+0x4>)
 8006ee6:	4770      	bx	lr
 8006ee8:	2000015c 	.word	0x2000015c

08006eec <_close_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d06      	ldr	r5, [pc, #24]	; (8006f08 <_close_r+0x1c>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	f7fb f9e3 	bl	80022c2 <_close>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_close_r+0x1a>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_close_r+0x1a>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	20000638 	.word	0x20000638

08006f0c <_lseek_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	4d07      	ldr	r5, [pc, #28]	; (8006f2c <_lseek_r+0x20>)
 8006f10:	4604      	mov	r4, r0
 8006f12:	4608      	mov	r0, r1
 8006f14:	4611      	mov	r1, r2
 8006f16:	2200      	movs	r2, #0
 8006f18:	602a      	str	r2, [r5, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f7fb f9f8 	bl	8002310 <_lseek>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d102      	bne.n	8006f2a <_lseek_r+0x1e>
 8006f24:	682b      	ldr	r3, [r5, #0]
 8006f26:	b103      	cbz	r3, 8006f2a <_lseek_r+0x1e>
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	20000638 	.word	0x20000638

08006f30 <_read_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4d07      	ldr	r5, [pc, #28]	; (8006f50 <_read_r+0x20>)
 8006f34:	4604      	mov	r4, r0
 8006f36:	4608      	mov	r0, r1
 8006f38:	4611      	mov	r1, r2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	602a      	str	r2, [r5, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f7fb f986 	bl	8002250 <_read>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_read_r+0x1e>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_read_r+0x1e>
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	20000638 	.word	0x20000638

08006f54 <_write_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d07      	ldr	r5, [pc, #28]	; (8006f74 <_write_r+0x20>)
 8006f58:	4604      	mov	r4, r0
 8006f5a:	4608      	mov	r0, r1
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	2200      	movs	r2, #0
 8006f60:	602a      	str	r2, [r5, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f7fb f991 	bl	800228a <_write>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_write_r+0x1e>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_write_r+0x1e>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	20000638 	.word	0x20000638

08006f78 <__errno>:
 8006f78:	4b01      	ldr	r3, [pc, #4]	; (8006f80 <__errno+0x8>)
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000068 	.word	0x20000068

08006f84 <__libc_init_array>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	4d0d      	ldr	r5, [pc, #52]	; (8006fbc <__libc_init_array+0x38>)
 8006f88:	4c0d      	ldr	r4, [pc, #52]	; (8006fc0 <__libc_init_array+0x3c>)
 8006f8a:	1b64      	subs	r4, r4, r5
 8006f8c:	10a4      	asrs	r4, r4, #2
 8006f8e:	2600      	movs	r6, #0
 8006f90:	42a6      	cmp	r6, r4
 8006f92:	d109      	bne.n	8006fa8 <__libc_init_array+0x24>
 8006f94:	4d0b      	ldr	r5, [pc, #44]	; (8006fc4 <__libc_init_array+0x40>)
 8006f96:	4c0c      	ldr	r4, [pc, #48]	; (8006fc8 <__libc_init_array+0x44>)
 8006f98:	f005 faea 	bl	800c570 <_init>
 8006f9c:	1b64      	subs	r4, r4, r5
 8006f9e:	10a4      	asrs	r4, r4, #2
 8006fa0:	2600      	movs	r6, #0
 8006fa2:	42a6      	cmp	r6, r4
 8006fa4:	d105      	bne.n	8006fb2 <__libc_init_array+0x2e>
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fac:	4798      	blx	r3
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7ee      	b.n	8006f90 <__libc_init_array+0xc>
 8006fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb6:	4798      	blx	r3
 8006fb8:	3601      	adds	r6, #1
 8006fba:	e7f2      	b.n	8006fa2 <__libc_init_array+0x1e>
 8006fbc:	0800ccb8 	.word	0x0800ccb8
 8006fc0:	0800ccb8 	.word	0x0800ccb8
 8006fc4:	0800ccb8 	.word	0x0800ccb8
 8006fc8:	0800ccbc 	.word	0x0800ccbc

08006fcc <__retarget_lock_init_recursive>:
 8006fcc:	4770      	bx	lr

08006fce <__retarget_lock_acquire_recursive>:
 8006fce:	4770      	bx	lr

08006fd0 <__retarget_lock_release_recursive>:
 8006fd0:	4770      	bx	lr

08006fd2 <strcpy>:
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fd8:	f803 2b01 	strb.w	r2, [r3], #1
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	d1f9      	bne.n	8006fd4 <strcpy+0x2>
 8006fe0:	4770      	bx	lr
	...

08006fe4 <nanf>:
 8006fe4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006fec <nanf+0x8>
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	7fc00000 	.word	0x7fc00000

08006ff0 <quorem>:
 8006ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	6903      	ldr	r3, [r0, #16]
 8006ff6:	690c      	ldr	r4, [r1, #16]
 8006ff8:	42a3      	cmp	r3, r4
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	db7e      	blt.n	80070fc <quorem+0x10c>
 8006ffe:	3c01      	subs	r4, #1
 8007000:	f101 0814 	add.w	r8, r1, #20
 8007004:	f100 0514 	add.w	r5, r0, #20
 8007008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007016:	3301      	adds	r3, #1
 8007018:	429a      	cmp	r2, r3
 800701a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800701e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007022:	fbb2 f6f3 	udiv	r6, r2, r3
 8007026:	d331      	bcc.n	800708c <quorem+0x9c>
 8007028:	f04f 0e00 	mov.w	lr, #0
 800702c:	4640      	mov	r0, r8
 800702e:	46ac      	mov	ip, r5
 8007030:	46f2      	mov	sl, lr
 8007032:	f850 2b04 	ldr.w	r2, [r0], #4
 8007036:	b293      	uxth	r3, r2
 8007038:	fb06 e303 	mla	r3, r6, r3, lr
 800703c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007040:	0c1a      	lsrs	r2, r3, #16
 8007042:	b29b      	uxth	r3, r3
 8007044:	ebaa 0303 	sub.w	r3, sl, r3
 8007048:	f8dc a000 	ldr.w	sl, [ip]
 800704c:	fa13 f38a 	uxtah	r3, r3, sl
 8007050:	fb06 220e 	mla	r2, r6, lr, r2
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	9b00      	ldr	r3, [sp, #0]
 8007058:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800705c:	b292      	uxth	r2, r2
 800705e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007062:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007066:	f8bd 3000 	ldrh.w	r3, [sp]
 800706a:	4581      	cmp	r9, r0
 800706c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007070:	f84c 3b04 	str.w	r3, [ip], #4
 8007074:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007078:	d2db      	bcs.n	8007032 <quorem+0x42>
 800707a:	f855 300b 	ldr.w	r3, [r5, fp]
 800707e:	b92b      	cbnz	r3, 800708c <quorem+0x9c>
 8007080:	9b01      	ldr	r3, [sp, #4]
 8007082:	3b04      	subs	r3, #4
 8007084:	429d      	cmp	r5, r3
 8007086:	461a      	mov	r2, r3
 8007088:	d32c      	bcc.n	80070e4 <quorem+0xf4>
 800708a:	613c      	str	r4, [r7, #16]
 800708c:	4638      	mov	r0, r7
 800708e:	f001 f9ef 	bl	8008470 <__mcmp>
 8007092:	2800      	cmp	r0, #0
 8007094:	db22      	blt.n	80070dc <quorem+0xec>
 8007096:	3601      	adds	r6, #1
 8007098:	4629      	mov	r1, r5
 800709a:	2000      	movs	r0, #0
 800709c:	f858 2b04 	ldr.w	r2, [r8], #4
 80070a0:	f8d1 c000 	ldr.w	ip, [r1]
 80070a4:	b293      	uxth	r3, r2
 80070a6:	1ac3      	subs	r3, r0, r3
 80070a8:	0c12      	lsrs	r2, r2, #16
 80070aa:	fa13 f38c 	uxtah	r3, r3, ip
 80070ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80070b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070bc:	45c1      	cmp	r9, r8
 80070be:	f841 3b04 	str.w	r3, [r1], #4
 80070c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070c6:	d2e9      	bcs.n	800709c <quorem+0xac>
 80070c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070d0:	b922      	cbnz	r2, 80070dc <quorem+0xec>
 80070d2:	3b04      	subs	r3, #4
 80070d4:	429d      	cmp	r5, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	d30a      	bcc.n	80070f0 <quorem+0x100>
 80070da:	613c      	str	r4, [r7, #16]
 80070dc:	4630      	mov	r0, r6
 80070de:	b003      	add	sp, #12
 80070e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	3b04      	subs	r3, #4
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	d1ce      	bne.n	800708a <quorem+0x9a>
 80070ec:	3c01      	subs	r4, #1
 80070ee:	e7c9      	b.n	8007084 <quorem+0x94>
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	3b04      	subs	r3, #4
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	d1f0      	bne.n	80070da <quorem+0xea>
 80070f8:	3c01      	subs	r4, #1
 80070fa:	e7eb      	b.n	80070d4 <quorem+0xe4>
 80070fc:	2000      	movs	r0, #0
 80070fe:	e7ee      	b.n	80070de <quorem+0xee>

08007100 <_dtoa_r>:
 8007100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	ed2d 8b04 	vpush	{d8-d9}
 8007108:	69c5      	ldr	r5, [r0, #28]
 800710a:	b093      	sub	sp, #76	; 0x4c
 800710c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007110:	ec57 6b10 	vmov	r6, r7, d0
 8007114:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007118:	9107      	str	r1, [sp, #28]
 800711a:	4604      	mov	r4, r0
 800711c:	920a      	str	r2, [sp, #40]	; 0x28
 800711e:	930d      	str	r3, [sp, #52]	; 0x34
 8007120:	b975      	cbnz	r5, 8007140 <_dtoa_r+0x40>
 8007122:	2010      	movs	r0, #16
 8007124:	f000 fe2a 	bl	8007d7c <malloc>
 8007128:	4602      	mov	r2, r0
 800712a:	61e0      	str	r0, [r4, #28]
 800712c:	b920      	cbnz	r0, 8007138 <_dtoa_r+0x38>
 800712e:	4bae      	ldr	r3, [pc, #696]	; (80073e8 <_dtoa_r+0x2e8>)
 8007130:	21ef      	movs	r1, #239	; 0xef
 8007132:	48ae      	ldr	r0, [pc, #696]	; (80073ec <_dtoa_r+0x2ec>)
 8007134:	f003 f808 	bl	800a148 <__assert_func>
 8007138:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800713c:	6005      	str	r5, [r0, #0]
 800713e:	60c5      	str	r5, [r0, #12]
 8007140:	69e3      	ldr	r3, [r4, #28]
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	b151      	cbz	r1, 800715c <_dtoa_r+0x5c>
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	604a      	str	r2, [r1, #4]
 800714a:	2301      	movs	r3, #1
 800714c:	4093      	lsls	r3, r2
 800714e:	608b      	str	r3, [r1, #8]
 8007150:	4620      	mov	r0, r4
 8007152:	f000 ff07 	bl	8007f64 <_Bfree>
 8007156:	69e3      	ldr	r3, [r4, #28]
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	1e3b      	subs	r3, r7, #0
 800715e:	bfbb      	ittet	lt
 8007160:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007164:	9303      	strlt	r3, [sp, #12]
 8007166:	2300      	movge	r3, #0
 8007168:	2201      	movlt	r2, #1
 800716a:	bfac      	ite	ge
 800716c:	f8c8 3000 	strge.w	r3, [r8]
 8007170:	f8c8 2000 	strlt.w	r2, [r8]
 8007174:	4b9e      	ldr	r3, [pc, #632]	; (80073f0 <_dtoa_r+0x2f0>)
 8007176:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800717a:	ea33 0308 	bics.w	r3, r3, r8
 800717e:	d11b      	bne.n	80071b8 <_dtoa_r+0xb8>
 8007180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007182:	f242 730f 	movw	r3, #9999	; 0x270f
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800718c:	4333      	orrs	r3, r6
 800718e:	f000 8593 	beq.w	8007cb8 <_dtoa_r+0xbb8>
 8007192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007194:	b963      	cbnz	r3, 80071b0 <_dtoa_r+0xb0>
 8007196:	4b97      	ldr	r3, [pc, #604]	; (80073f4 <_dtoa_r+0x2f4>)
 8007198:	e027      	b.n	80071ea <_dtoa_r+0xea>
 800719a:	4b97      	ldr	r3, [pc, #604]	; (80073f8 <_dtoa_r+0x2f8>)
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	3308      	adds	r3, #8
 80071a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	9800      	ldr	r0, [sp, #0]
 80071a6:	b013      	add	sp, #76	; 0x4c
 80071a8:	ecbd 8b04 	vpop	{d8-d9}
 80071ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b0:	4b90      	ldr	r3, [pc, #576]	; (80073f4 <_dtoa_r+0x2f4>)
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	3303      	adds	r3, #3
 80071b6:	e7f3      	b.n	80071a0 <_dtoa_r+0xa0>
 80071b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071bc:	2200      	movs	r2, #0
 80071be:	ec51 0b17 	vmov	r0, r1, d7
 80071c2:	eeb0 8a47 	vmov.f32	s16, s14
 80071c6:	eef0 8a67 	vmov.f32	s17, s15
 80071ca:	2300      	movs	r3, #0
 80071cc:	f7f9 fc94 	bl	8000af8 <__aeabi_dcmpeq>
 80071d0:	4681      	mov	r9, r0
 80071d2:	b160      	cbz	r0, 80071ee <_dtoa_r+0xee>
 80071d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071d6:	2301      	movs	r3, #1
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8568 	beq.w	8007cb2 <_dtoa_r+0xbb2>
 80071e2:	4b86      	ldr	r3, [pc, #536]	; (80073fc <_dtoa_r+0x2fc>)
 80071e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	e7da      	b.n	80071a4 <_dtoa_r+0xa4>
 80071ee:	aa10      	add	r2, sp, #64	; 0x40
 80071f0:	a911      	add	r1, sp, #68	; 0x44
 80071f2:	4620      	mov	r0, r4
 80071f4:	eeb0 0a48 	vmov.f32	s0, s16
 80071f8:	eef0 0a68 	vmov.f32	s1, s17
 80071fc:	f001 fa4e 	bl	800869c <__d2b>
 8007200:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007204:	4682      	mov	sl, r0
 8007206:	2d00      	cmp	r5, #0
 8007208:	d07f      	beq.n	800730a <_dtoa_r+0x20a>
 800720a:	ee18 3a90 	vmov	r3, s17
 800720e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007212:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007216:	ec51 0b18 	vmov	r0, r1, d8
 800721a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800721e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007222:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007226:	4619      	mov	r1, r3
 8007228:	2200      	movs	r2, #0
 800722a:	4b75      	ldr	r3, [pc, #468]	; (8007400 <_dtoa_r+0x300>)
 800722c:	f7f9 f844 	bl	80002b8 <__aeabi_dsub>
 8007230:	a367      	add	r3, pc, #412	; (adr r3, 80073d0 <_dtoa_r+0x2d0>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f9 f9f7 	bl	8000628 <__aeabi_dmul>
 800723a:	a367      	add	r3, pc, #412	; (adr r3, 80073d8 <_dtoa_r+0x2d8>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f7f9 f83c 	bl	80002bc <__adddf3>
 8007244:	4606      	mov	r6, r0
 8007246:	4628      	mov	r0, r5
 8007248:	460f      	mov	r7, r1
 800724a:	f7f9 f983 	bl	8000554 <__aeabi_i2d>
 800724e:	a364      	add	r3, pc, #400	; (adr r3, 80073e0 <_dtoa_r+0x2e0>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f7f9 f9e8 	bl	8000628 <__aeabi_dmul>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4630      	mov	r0, r6
 800725e:	4639      	mov	r1, r7
 8007260:	f7f9 f82c 	bl	80002bc <__adddf3>
 8007264:	4606      	mov	r6, r0
 8007266:	460f      	mov	r7, r1
 8007268:	f7f9 fc8e 	bl	8000b88 <__aeabi_d2iz>
 800726c:	2200      	movs	r2, #0
 800726e:	4683      	mov	fp, r0
 8007270:	2300      	movs	r3, #0
 8007272:	4630      	mov	r0, r6
 8007274:	4639      	mov	r1, r7
 8007276:	f7f9 fc49 	bl	8000b0c <__aeabi_dcmplt>
 800727a:	b148      	cbz	r0, 8007290 <_dtoa_r+0x190>
 800727c:	4658      	mov	r0, fp
 800727e:	f7f9 f969 	bl	8000554 <__aeabi_i2d>
 8007282:	4632      	mov	r2, r6
 8007284:	463b      	mov	r3, r7
 8007286:	f7f9 fc37 	bl	8000af8 <__aeabi_dcmpeq>
 800728a:	b908      	cbnz	r0, 8007290 <_dtoa_r+0x190>
 800728c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007290:	f1bb 0f16 	cmp.w	fp, #22
 8007294:	d857      	bhi.n	8007346 <_dtoa_r+0x246>
 8007296:	4b5b      	ldr	r3, [pc, #364]	; (8007404 <_dtoa_r+0x304>)
 8007298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	ec51 0b18 	vmov	r0, r1, d8
 80072a4:	f7f9 fc32 	bl	8000b0c <__aeabi_dcmplt>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d04e      	beq.n	800734a <_dtoa_r+0x24a>
 80072ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072b0:	2300      	movs	r3, #0
 80072b2:	930c      	str	r3, [sp, #48]	; 0x30
 80072b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072b6:	1b5b      	subs	r3, r3, r5
 80072b8:	1e5a      	subs	r2, r3, #1
 80072ba:	bf45      	ittet	mi
 80072bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80072c0:	9305      	strmi	r3, [sp, #20]
 80072c2:	2300      	movpl	r3, #0
 80072c4:	2300      	movmi	r3, #0
 80072c6:	9206      	str	r2, [sp, #24]
 80072c8:	bf54      	ite	pl
 80072ca:	9305      	strpl	r3, [sp, #20]
 80072cc:	9306      	strmi	r3, [sp, #24]
 80072ce:	f1bb 0f00 	cmp.w	fp, #0
 80072d2:	db3c      	blt.n	800734e <_dtoa_r+0x24e>
 80072d4:	9b06      	ldr	r3, [sp, #24]
 80072d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80072da:	445b      	add	r3, fp
 80072dc:	9306      	str	r3, [sp, #24]
 80072de:	2300      	movs	r3, #0
 80072e0:	9308      	str	r3, [sp, #32]
 80072e2:	9b07      	ldr	r3, [sp, #28]
 80072e4:	2b09      	cmp	r3, #9
 80072e6:	d868      	bhi.n	80073ba <_dtoa_r+0x2ba>
 80072e8:	2b05      	cmp	r3, #5
 80072ea:	bfc4      	itt	gt
 80072ec:	3b04      	subgt	r3, #4
 80072ee:	9307      	strgt	r3, [sp, #28]
 80072f0:	9b07      	ldr	r3, [sp, #28]
 80072f2:	f1a3 0302 	sub.w	r3, r3, #2
 80072f6:	bfcc      	ite	gt
 80072f8:	2500      	movgt	r5, #0
 80072fa:	2501      	movle	r5, #1
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	f200 8085 	bhi.w	800740c <_dtoa_r+0x30c>
 8007302:	e8df f003 	tbb	[pc, r3]
 8007306:	3b2e      	.short	0x3b2e
 8007308:	5839      	.short	0x5839
 800730a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800730e:	441d      	add	r5, r3
 8007310:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007314:	2b20      	cmp	r3, #32
 8007316:	bfc1      	itttt	gt
 8007318:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800731c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007320:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007324:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007328:	bfd6      	itet	le
 800732a:	f1c3 0320 	rsble	r3, r3, #32
 800732e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007332:	fa06 f003 	lslle.w	r0, r6, r3
 8007336:	f7f9 f8fd 	bl	8000534 <__aeabi_ui2d>
 800733a:	2201      	movs	r2, #1
 800733c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007340:	3d01      	subs	r5, #1
 8007342:	920e      	str	r2, [sp, #56]	; 0x38
 8007344:	e76f      	b.n	8007226 <_dtoa_r+0x126>
 8007346:	2301      	movs	r3, #1
 8007348:	e7b3      	b.n	80072b2 <_dtoa_r+0x1b2>
 800734a:	900c      	str	r0, [sp, #48]	; 0x30
 800734c:	e7b2      	b.n	80072b4 <_dtoa_r+0x1b4>
 800734e:	9b05      	ldr	r3, [sp, #20]
 8007350:	eba3 030b 	sub.w	r3, r3, fp
 8007354:	9305      	str	r3, [sp, #20]
 8007356:	f1cb 0300 	rsb	r3, fp, #0
 800735a:	9308      	str	r3, [sp, #32]
 800735c:	2300      	movs	r3, #0
 800735e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007360:	e7bf      	b.n	80072e2 <_dtoa_r+0x1e2>
 8007362:	2300      	movs	r3, #0
 8007364:	9309      	str	r3, [sp, #36]	; 0x24
 8007366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007368:	2b00      	cmp	r3, #0
 800736a:	dc52      	bgt.n	8007412 <_dtoa_r+0x312>
 800736c:	2301      	movs	r3, #1
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	9304      	str	r3, [sp, #16]
 8007372:	461a      	mov	r2, r3
 8007374:	920a      	str	r2, [sp, #40]	; 0x28
 8007376:	e00b      	b.n	8007390 <_dtoa_r+0x290>
 8007378:	2301      	movs	r3, #1
 800737a:	e7f3      	b.n	8007364 <_dtoa_r+0x264>
 800737c:	2300      	movs	r3, #0
 800737e:	9309      	str	r3, [sp, #36]	; 0x24
 8007380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007382:	445b      	add	r3, fp
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	3301      	adds	r3, #1
 8007388:	2b01      	cmp	r3, #1
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	bfb8      	it	lt
 800738e:	2301      	movlt	r3, #1
 8007390:	69e0      	ldr	r0, [r4, #28]
 8007392:	2100      	movs	r1, #0
 8007394:	2204      	movs	r2, #4
 8007396:	f102 0614 	add.w	r6, r2, #20
 800739a:	429e      	cmp	r6, r3
 800739c:	d93d      	bls.n	800741a <_dtoa_r+0x31a>
 800739e:	6041      	str	r1, [r0, #4]
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 fd9f 	bl	8007ee4 <_Balloc>
 80073a6:	9000      	str	r0, [sp, #0]
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d139      	bne.n	8007420 <_dtoa_r+0x320>
 80073ac:	4b16      	ldr	r3, [pc, #88]	; (8007408 <_dtoa_r+0x308>)
 80073ae:	4602      	mov	r2, r0
 80073b0:	f240 11af 	movw	r1, #431	; 0x1af
 80073b4:	e6bd      	b.n	8007132 <_dtoa_r+0x32>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e7e1      	b.n	800737e <_dtoa_r+0x27e>
 80073ba:	2501      	movs	r5, #1
 80073bc:	2300      	movs	r3, #0
 80073be:	9307      	str	r3, [sp, #28]
 80073c0:	9509      	str	r5, [sp, #36]	; 0x24
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	9304      	str	r3, [sp, #16]
 80073ca:	2200      	movs	r2, #0
 80073cc:	2312      	movs	r3, #18
 80073ce:	e7d1      	b.n	8007374 <_dtoa_r+0x274>
 80073d0:	636f4361 	.word	0x636f4361
 80073d4:	3fd287a7 	.word	0x3fd287a7
 80073d8:	8b60c8b3 	.word	0x8b60c8b3
 80073dc:	3fc68a28 	.word	0x3fc68a28
 80073e0:	509f79fb 	.word	0x509f79fb
 80073e4:	3fd34413 	.word	0x3fd34413
 80073e8:	0800c664 	.word	0x0800c664
 80073ec:	0800c67b 	.word	0x0800c67b
 80073f0:	7ff00000 	.word	0x7ff00000
 80073f4:	0800c660 	.word	0x0800c660
 80073f8:	0800c657 	.word	0x0800c657
 80073fc:	0800c9b9 	.word	0x0800c9b9
 8007400:	3ff80000 	.word	0x3ff80000
 8007404:	0800c768 	.word	0x0800c768
 8007408:	0800c6d3 	.word	0x0800c6d3
 800740c:	2301      	movs	r3, #1
 800740e:	9309      	str	r3, [sp, #36]	; 0x24
 8007410:	e7d7      	b.n	80073c2 <_dtoa_r+0x2c2>
 8007412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	9304      	str	r3, [sp, #16]
 8007418:	e7ba      	b.n	8007390 <_dtoa_r+0x290>
 800741a:	3101      	adds	r1, #1
 800741c:	0052      	lsls	r2, r2, #1
 800741e:	e7ba      	b.n	8007396 <_dtoa_r+0x296>
 8007420:	69e3      	ldr	r3, [r4, #28]
 8007422:	9a00      	ldr	r2, [sp, #0]
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	2b0e      	cmp	r3, #14
 800742a:	f200 80a8 	bhi.w	800757e <_dtoa_r+0x47e>
 800742e:	2d00      	cmp	r5, #0
 8007430:	f000 80a5 	beq.w	800757e <_dtoa_r+0x47e>
 8007434:	f1bb 0f00 	cmp.w	fp, #0
 8007438:	dd38      	ble.n	80074ac <_dtoa_r+0x3ac>
 800743a:	4bc0      	ldr	r3, [pc, #768]	; (800773c <_dtoa_r+0x63c>)
 800743c:	f00b 020f 	and.w	r2, fp, #15
 8007440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007444:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007448:	e9d3 6700 	ldrd	r6, r7, [r3]
 800744c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007450:	d019      	beq.n	8007486 <_dtoa_r+0x386>
 8007452:	4bbb      	ldr	r3, [pc, #748]	; (8007740 <_dtoa_r+0x640>)
 8007454:	ec51 0b18 	vmov	r0, r1, d8
 8007458:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800745c:	f7f9 fa0e 	bl	800087c <__aeabi_ddiv>
 8007460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007464:	f008 080f 	and.w	r8, r8, #15
 8007468:	2503      	movs	r5, #3
 800746a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007740 <_dtoa_r+0x640>
 800746e:	f1b8 0f00 	cmp.w	r8, #0
 8007472:	d10a      	bne.n	800748a <_dtoa_r+0x38a>
 8007474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007478:	4632      	mov	r2, r6
 800747a:	463b      	mov	r3, r7
 800747c:	f7f9 f9fe 	bl	800087c <__aeabi_ddiv>
 8007480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007484:	e02b      	b.n	80074de <_dtoa_r+0x3de>
 8007486:	2502      	movs	r5, #2
 8007488:	e7ef      	b.n	800746a <_dtoa_r+0x36a>
 800748a:	f018 0f01 	tst.w	r8, #1
 800748e:	d008      	beq.n	80074a2 <_dtoa_r+0x3a2>
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007498:	f7f9 f8c6 	bl	8000628 <__aeabi_dmul>
 800749c:	3501      	adds	r5, #1
 800749e:	4606      	mov	r6, r0
 80074a0:	460f      	mov	r7, r1
 80074a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074a6:	f109 0908 	add.w	r9, r9, #8
 80074aa:	e7e0      	b.n	800746e <_dtoa_r+0x36e>
 80074ac:	f000 809f 	beq.w	80075ee <_dtoa_r+0x4ee>
 80074b0:	f1cb 0600 	rsb	r6, fp, #0
 80074b4:	4ba1      	ldr	r3, [pc, #644]	; (800773c <_dtoa_r+0x63c>)
 80074b6:	4fa2      	ldr	r7, [pc, #648]	; (8007740 <_dtoa_r+0x640>)
 80074b8:	f006 020f 	and.w	r2, r6, #15
 80074bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	ec51 0b18 	vmov	r0, r1, d8
 80074c8:	f7f9 f8ae 	bl	8000628 <__aeabi_dmul>
 80074cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d0:	1136      	asrs	r6, r6, #4
 80074d2:	2300      	movs	r3, #0
 80074d4:	2502      	movs	r5, #2
 80074d6:	2e00      	cmp	r6, #0
 80074d8:	d17e      	bne.n	80075d8 <_dtoa_r+0x4d8>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1d0      	bne.n	8007480 <_dtoa_r+0x380>
 80074de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8084 	beq.w	80075f2 <_dtoa_r+0x4f2>
 80074ea:	4b96      	ldr	r3, [pc, #600]	; (8007744 <_dtoa_r+0x644>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	4640      	mov	r0, r8
 80074f0:	4649      	mov	r1, r9
 80074f2:	f7f9 fb0b 	bl	8000b0c <__aeabi_dcmplt>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d07b      	beq.n	80075f2 <_dtoa_r+0x4f2>
 80074fa:	9b04      	ldr	r3, [sp, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d078      	beq.n	80075f2 <_dtoa_r+0x4f2>
 8007500:	9b01      	ldr	r3, [sp, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	dd39      	ble.n	800757a <_dtoa_r+0x47a>
 8007506:	4b90      	ldr	r3, [pc, #576]	; (8007748 <_dtoa_r+0x648>)
 8007508:	2200      	movs	r2, #0
 800750a:	4640      	mov	r0, r8
 800750c:	4649      	mov	r1, r9
 800750e:	f7f9 f88b 	bl	8000628 <__aeabi_dmul>
 8007512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007516:	9e01      	ldr	r6, [sp, #4]
 8007518:	f10b 37ff 	add.w	r7, fp, #4294967295
 800751c:	3501      	adds	r5, #1
 800751e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007522:	4628      	mov	r0, r5
 8007524:	f7f9 f816 	bl	8000554 <__aeabi_i2d>
 8007528:	4642      	mov	r2, r8
 800752a:	464b      	mov	r3, r9
 800752c:	f7f9 f87c 	bl	8000628 <__aeabi_dmul>
 8007530:	4b86      	ldr	r3, [pc, #536]	; (800774c <_dtoa_r+0x64c>)
 8007532:	2200      	movs	r2, #0
 8007534:	f7f8 fec2 	bl	80002bc <__adddf3>
 8007538:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800753c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007540:	9303      	str	r3, [sp, #12]
 8007542:	2e00      	cmp	r6, #0
 8007544:	d158      	bne.n	80075f8 <_dtoa_r+0x4f8>
 8007546:	4b82      	ldr	r3, [pc, #520]	; (8007750 <_dtoa_r+0x650>)
 8007548:	2200      	movs	r2, #0
 800754a:	4640      	mov	r0, r8
 800754c:	4649      	mov	r1, r9
 800754e:	f7f8 feb3 	bl	80002b8 <__aeabi_dsub>
 8007552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007556:	4680      	mov	r8, r0
 8007558:	4689      	mov	r9, r1
 800755a:	f7f9 faf5 	bl	8000b48 <__aeabi_dcmpgt>
 800755e:	2800      	cmp	r0, #0
 8007560:	f040 8296 	bne.w	8007a90 <_dtoa_r+0x990>
 8007564:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007568:	4640      	mov	r0, r8
 800756a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800756e:	4649      	mov	r1, r9
 8007570:	f7f9 facc 	bl	8000b0c <__aeabi_dcmplt>
 8007574:	2800      	cmp	r0, #0
 8007576:	f040 8289 	bne.w	8007a8c <_dtoa_r+0x98c>
 800757a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800757e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007580:	2b00      	cmp	r3, #0
 8007582:	f2c0 814e 	blt.w	8007822 <_dtoa_r+0x722>
 8007586:	f1bb 0f0e 	cmp.w	fp, #14
 800758a:	f300 814a 	bgt.w	8007822 <_dtoa_r+0x722>
 800758e:	4b6b      	ldr	r3, [pc, #428]	; (800773c <_dtoa_r+0x63c>)
 8007590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007594:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	f280 80dc 	bge.w	8007758 <_dtoa_r+0x658>
 80075a0:	9b04      	ldr	r3, [sp, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f300 80d8 	bgt.w	8007758 <_dtoa_r+0x658>
 80075a8:	f040 826f 	bne.w	8007a8a <_dtoa_r+0x98a>
 80075ac:	4b68      	ldr	r3, [pc, #416]	; (8007750 <_dtoa_r+0x650>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	4640      	mov	r0, r8
 80075b2:	4649      	mov	r1, r9
 80075b4:	f7f9 f838 	bl	8000628 <__aeabi_dmul>
 80075b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075bc:	f7f9 faba 	bl	8000b34 <__aeabi_dcmpge>
 80075c0:	9e04      	ldr	r6, [sp, #16]
 80075c2:	4637      	mov	r7, r6
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f040 8245 	bne.w	8007a54 <_dtoa_r+0x954>
 80075ca:	9d00      	ldr	r5, [sp, #0]
 80075cc:	2331      	movs	r3, #49	; 0x31
 80075ce:	f805 3b01 	strb.w	r3, [r5], #1
 80075d2:	f10b 0b01 	add.w	fp, fp, #1
 80075d6:	e241      	b.n	8007a5c <_dtoa_r+0x95c>
 80075d8:	07f2      	lsls	r2, r6, #31
 80075da:	d505      	bpl.n	80075e8 <_dtoa_r+0x4e8>
 80075dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e0:	f7f9 f822 	bl	8000628 <__aeabi_dmul>
 80075e4:	3501      	adds	r5, #1
 80075e6:	2301      	movs	r3, #1
 80075e8:	1076      	asrs	r6, r6, #1
 80075ea:	3708      	adds	r7, #8
 80075ec:	e773      	b.n	80074d6 <_dtoa_r+0x3d6>
 80075ee:	2502      	movs	r5, #2
 80075f0:	e775      	b.n	80074de <_dtoa_r+0x3de>
 80075f2:	9e04      	ldr	r6, [sp, #16]
 80075f4:	465f      	mov	r7, fp
 80075f6:	e792      	b.n	800751e <_dtoa_r+0x41e>
 80075f8:	9900      	ldr	r1, [sp, #0]
 80075fa:	4b50      	ldr	r3, [pc, #320]	; (800773c <_dtoa_r+0x63c>)
 80075fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007600:	4431      	add	r1, r6
 8007602:	9102      	str	r1, [sp, #8]
 8007604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007606:	eeb0 9a47 	vmov.f32	s18, s14
 800760a:	eef0 9a67 	vmov.f32	s19, s15
 800760e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007616:	2900      	cmp	r1, #0
 8007618:	d044      	beq.n	80076a4 <_dtoa_r+0x5a4>
 800761a:	494e      	ldr	r1, [pc, #312]	; (8007754 <_dtoa_r+0x654>)
 800761c:	2000      	movs	r0, #0
 800761e:	f7f9 f92d 	bl	800087c <__aeabi_ddiv>
 8007622:	ec53 2b19 	vmov	r2, r3, d9
 8007626:	f7f8 fe47 	bl	80002b8 <__aeabi_dsub>
 800762a:	9d00      	ldr	r5, [sp, #0]
 800762c:	ec41 0b19 	vmov	d9, r0, r1
 8007630:	4649      	mov	r1, r9
 8007632:	4640      	mov	r0, r8
 8007634:	f7f9 faa8 	bl	8000b88 <__aeabi_d2iz>
 8007638:	4606      	mov	r6, r0
 800763a:	f7f8 ff8b 	bl	8000554 <__aeabi_i2d>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	f7f8 fe37 	bl	80002b8 <__aeabi_dsub>
 800764a:	3630      	adds	r6, #48	; 0x30
 800764c:	f805 6b01 	strb.w	r6, [r5], #1
 8007650:	ec53 2b19 	vmov	r2, r3, d9
 8007654:	4680      	mov	r8, r0
 8007656:	4689      	mov	r9, r1
 8007658:	f7f9 fa58 	bl	8000b0c <__aeabi_dcmplt>
 800765c:	2800      	cmp	r0, #0
 800765e:	d164      	bne.n	800772a <_dtoa_r+0x62a>
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	4937      	ldr	r1, [pc, #220]	; (8007744 <_dtoa_r+0x644>)
 8007666:	2000      	movs	r0, #0
 8007668:	f7f8 fe26 	bl	80002b8 <__aeabi_dsub>
 800766c:	ec53 2b19 	vmov	r2, r3, d9
 8007670:	f7f9 fa4c 	bl	8000b0c <__aeabi_dcmplt>
 8007674:	2800      	cmp	r0, #0
 8007676:	f040 80b6 	bne.w	80077e6 <_dtoa_r+0x6e6>
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	429d      	cmp	r5, r3
 800767e:	f43f af7c 	beq.w	800757a <_dtoa_r+0x47a>
 8007682:	4b31      	ldr	r3, [pc, #196]	; (8007748 <_dtoa_r+0x648>)
 8007684:	ec51 0b19 	vmov	r0, r1, d9
 8007688:	2200      	movs	r2, #0
 800768a:	f7f8 ffcd 	bl	8000628 <__aeabi_dmul>
 800768e:	4b2e      	ldr	r3, [pc, #184]	; (8007748 <_dtoa_r+0x648>)
 8007690:	ec41 0b19 	vmov	d9, r0, r1
 8007694:	2200      	movs	r2, #0
 8007696:	4640      	mov	r0, r8
 8007698:	4649      	mov	r1, r9
 800769a:	f7f8 ffc5 	bl	8000628 <__aeabi_dmul>
 800769e:	4680      	mov	r8, r0
 80076a0:	4689      	mov	r9, r1
 80076a2:	e7c5      	b.n	8007630 <_dtoa_r+0x530>
 80076a4:	ec51 0b17 	vmov	r0, r1, d7
 80076a8:	f7f8 ffbe 	bl	8000628 <__aeabi_dmul>
 80076ac:	9b02      	ldr	r3, [sp, #8]
 80076ae:	9d00      	ldr	r5, [sp, #0]
 80076b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80076b2:	ec41 0b19 	vmov	d9, r0, r1
 80076b6:	4649      	mov	r1, r9
 80076b8:	4640      	mov	r0, r8
 80076ba:	f7f9 fa65 	bl	8000b88 <__aeabi_d2iz>
 80076be:	4606      	mov	r6, r0
 80076c0:	f7f8 ff48 	bl	8000554 <__aeabi_i2d>
 80076c4:	3630      	adds	r6, #48	; 0x30
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f8 fdf3 	bl	80002b8 <__aeabi_dsub>
 80076d2:	f805 6b01 	strb.w	r6, [r5], #1
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	429d      	cmp	r5, r3
 80076da:	4680      	mov	r8, r0
 80076dc:	4689      	mov	r9, r1
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	d124      	bne.n	800772e <_dtoa_r+0x62e>
 80076e4:	4b1b      	ldr	r3, [pc, #108]	; (8007754 <_dtoa_r+0x654>)
 80076e6:	ec51 0b19 	vmov	r0, r1, d9
 80076ea:	f7f8 fde7 	bl	80002bc <__adddf3>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4640      	mov	r0, r8
 80076f4:	4649      	mov	r1, r9
 80076f6:	f7f9 fa27 	bl	8000b48 <__aeabi_dcmpgt>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d173      	bne.n	80077e6 <_dtoa_r+0x6e6>
 80076fe:	ec53 2b19 	vmov	r2, r3, d9
 8007702:	4914      	ldr	r1, [pc, #80]	; (8007754 <_dtoa_r+0x654>)
 8007704:	2000      	movs	r0, #0
 8007706:	f7f8 fdd7 	bl	80002b8 <__aeabi_dsub>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4640      	mov	r0, r8
 8007710:	4649      	mov	r1, r9
 8007712:	f7f9 f9fb 	bl	8000b0c <__aeabi_dcmplt>
 8007716:	2800      	cmp	r0, #0
 8007718:	f43f af2f 	beq.w	800757a <_dtoa_r+0x47a>
 800771c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800771e:	1e6b      	subs	r3, r5, #1
 8007720:	930f      	str	r3, [sp, #60]	; 0x3c
 8007722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007726:	2b30      	cmp	r3, #48	; 0x30
 8007728:	d0f8      	beq.n	800771c <_dtoa_r+0x61c>
 800772a:	46bb      	mov	fp, r7
 800772c:	e04a      	b.n	80077c4 <_dtoa_r+0x6c4>
 800772e:	4b06      	ldr	r3, [pc, #24]	; (8007748 <_dtoa_r+0x648>)
 8007730:	f7f8 ff7a 	bl	8000628 <__aeabi_dmul>
 8007734:	4680      	mov	r8, r0
 8007736:	4689      	mov	r9, r1
 8007738:	e7bd      	b.n	80076b6 <_dtoa_r+0x5b6>
 800773a:	bf00      	nop
 800773c:	0800c768 	.word	0x0800c768
 8007740:	0800c740 	.word	0x0800c740
 8007744:	3ff00000 	.word	0x3ff00000
 8007748:	40240000 	.word	0x40240000
 800774c:	401c0000 	.word	0x401c0000
 8007750:	40140000 	.word	0x40140000
 8007754:	3fe00000 	.word	0x3fe00000
 8007758:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800775c:	9d00      	ldr	r5, [sp, #0]
 800775e:	4642      	mov	r2, r8
 8007760:	464b      	mov	r3, r9
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	f7f9 f889 	bl	800087c <__aeabi_ddiv>
 800776a:	f7f9 fa0d 	bl	8000b88 <__aeabi_d2iz>
 800776e:	9001      	str	r0, [sp, #4]
 8007770:	f7f8 fef0 	bl	8000554 <__aeabi_i2d>
 8007774:	4642      	mov	r2, r8
 8007776:	464b      	mov	r3, r9
 8007778:	f7f8 ff56 	bl	8000628 <__aeabi_dmul>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4630      	mov	r0, r6
 8007782:	4639      	mov	r1, r7
 8007784:	f7f8 fd98 	bl	80002b8 <__aeabi_dsub>
 8007788:	9e01      	ldr	r6, [sp, #4]
 800778a:	9f04      	ldr	r7, [sp, #16]
 800778c:	3630      	adds	r6, #48	; 0x30
 800778e:	f805 6b01 	strb.w	r6, [r5], #1
 8007792:	9e00      	ldr	r6, [sp, #0]
 8007794:	1bae      	subs	r6, r5, r6
 8007796:	42b7      	cmp	r7, r6
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	d134      	bne.n	8007808 <_dtoa_r+0x708>
 800779e:	f7f8 fd8d 	bl	80002bc <__adddf3>
 80077a2:	4642      	mov	r2, r8
 80077a4:	464b      	mov	r3, r9
 80077a6:	4606      	mov	r6, r0
 80077a8:	460f      	mov	r7, r1
 80077aa:	f7f9 f9cd 	bl	8000b48 <__aeabi_dcmpgt>
 80077ae:	b9c8      	cbnz	r0, 80077e4 <_dtoa_r+0x6e4>
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	4630      	mov	r0, r6
 80077b6:	4639      	mov	r1, r7
 80077b8:	f7f9 f99e 	bl	8000af8 <__aeabi_dcmpeq>
 80077bc:	b110      	cbz	r0, 80077c4 <_dtoa_r+0x6c4>
 80077be:	9b01      	ldr	r3, [sp, #4]
 80077c0:	07db      	lsls	r3, r3, #31
 80077c2:	d40f      	bmi.n	80077e4 <_dtoa_r+0x6e4>
 80077c4:	4651      	mov	r1, sl
 80077c6:	4620      	mov	r0, r4
 80077c8:	f000 fbcc 	bl	8007f64 <_Bfree>
 80077cc:	2300      	movs	r3, #0
 80077ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077d0:	702b      	strb	r3, [r5, #0]
 80077d2:	f10b 0301 	add.w	r3, fp, #1
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f43f ace2 	beq.w	80071a4 <_dtoa_r+0xa4>
 80077e0:	601d      	str	r5, [r3, #0]
 80077e2:	e4df      	b.n	80071a4 <_dtoa_r+0xa4>
 80077e4:	465f      	mov	r7, fp
 80077e6:	462b      	mov	r3, r5
 80077e8:	461d      	mov	r5, r3
 80077ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077ee:	2a39      	cmp	r2, #57	; 0x39
 80077f0:	d106      	bne.n	8007800 <_dtoa_r+0x700>
 80077f2:	9a00      	ldr	r2, [sp, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d1f7      	bne.n	80077e8 <_dtoa_r+0x6e8>
 80077f8:	9900      	ldr	r1, [sp, #0]
 80077fa:	2230      	movs	r2, #48	; 0x30
 80077fc:	3701      	adds	r7, #1
 80077fe:	700a      	strb	r2, [r1, #0]
 8007800:	781a      	ldrb	r2, [r3, #0]
 8007802:	3201      	adds	r2, #1
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	e790      	b.n	800772a <_dtoa_r+0x62a>
 8007808:	4ba3      	ldr	r3, [pc, #652]	; (8007a98 <_dtoa_r+0x998>)
 800780a:	2200      	movs	r2, #0
 800780c:	f7f8 ff0c 	bl	8000628 <__aeabi_dmul>
 8007810:	2200      	movs	r2, #0
 8007812:	2300      	movs	r3, #0
 8007814:	4606      	mov	r6, r0
 8007816:	460f      	mov	r7, r1
 8007818:	f7f9 f96e 	bl	8000af8 <__aeabi_dcmpeq>
 800781c:	2800      	cmp	r0, #0
 800781e:	d09e      	beq.n	800775e <_dtoa_r+0x65e>
 8007820:	e7d0      	b.n	80077c4 <_dtoa_r+0x6c4>
 8007822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007824:	2a00      	cmp	r2, #0
 8007826:	f000 80ca 	beq.w	80079be <_dtoa_r+0x8be>
 800782a:	9a07      	ldr	r2, [sp, #28]
 800782c:	2a01      	cmp	r2, #1
 800782e:	f300 80ad 	bgt.w	800798c <_dtoa_r+0x88c>
 8007832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007834:	2a00      	cmp	r2, #0
 8007836:	f000 80a5 	beq.w	8007984 <_dtoa_r+0x884>
 800783a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800783e:	9e08      	ldr	r6, [sp, #32]
 8007840:	9d05      	ldr	r5, [sp, #20]
 8007842:	9a05      	ldr	r2, [sp, #20]
 8007844:	441a      	add	r2, r3
 8007846:	9205      	str	r2, [sp, #20]
 8007848:	9a06      	ldr	r2, [sp, #24]
 800784a:	2101      	movs	r1, #1
 800784c:	441a      	add	r2, r3
 800784e:	4620      	mov	r0, r4
 8007850:	9206      	str	r2, [sp, #24]
 8007852:	f000 fc87 	bl	8008164 <__i2b>
 8007856:	4607      	mov	r7, r0
 8007858:	b165      	cbz	r5, 8007874 <_dtoa_r+0x774>
 800785a:	9b06      	ldr	r3, [sp, #24]
 800785c:	2b00      	cmp	r3, #0
 800785e:	dd09      	ble.n	8007874 <_dtoa_r+0x774>
 8007860:	42ab      	cmp	r3, r5
 8007862:	9a05      	ldr	r2, [sp, #20]
 8007864:	bfa8      	it	ge
 8007866:	462b      	movge	r3, r5
 8007868:	1ad2      	subs	r2, r2, r3
 800786a:	9205      	str	r2, [sp, #20]
 800786c:	9a06      	ldr	r2, [sp, #24]
 800786e:	1aed      	subs	r5, r5, r3
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	9306      	str	r3, [sp, #24]
 8007874:	9b08      	ldr	r3, [sp, #32]
 8007876:	b1f3      	cbz	r3, 80078b6 <_dtoa_r+0x7b6>
 8007878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 80a3 	beq.w	80079c6 <_dtoa_r+0x8c6>
 8007880:	2e00      	cmp	r6, #0
 8007882:	dd10      	ble.n	80078a6 <_dtoa_r+0x7a6>
 8007884:	4639      	mov	r1, r7
 8007886:	4632      	mov	r2, r6
 8007888:	4620      	mov	r0, r4
 800788a:	f000 fd2b 	bl	80082e4 <__pow5mult>
 800788e:	4652      	mov	r2, sl
 8007890:	4601      	mov	r1, r0
 8007892:	4607      	mov	r7, r0
 8007894:	4620      	mov	r0, r4
 8007896:	f000 fc7b 	bl	8008190 <__multiply>
 800789a:	4651      	mov	r1, sl
 800789c:	4680      	mov	r8, r0
 800789e:	4620      	mov	r0, r4
 80078a0:	f000 fb60 	bl	8007f64 <_Bfree>
 80078a4:	46c2      	mov	sl, r8
 80078a6:	9b08      	ldr	r3, [sp, #32]
 80078a8:	1b9a      	subs	r2, r3, r6
 80078aa:	d004      	beq.n	80078b6 <_dtoa_r+0x7b6>
 80078ac:	4651      	mov	r1, sl
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 fd18 	bl	80082e4 <__pow5mult>
 80078b4:	4682      	mov	sl, r0
 80078b6:	2101      	movs	r1, #1
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 fc53 	bl	8008164 <__i2b>
 80078be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	4606      	mov	r6, r0
 80078c4:	f340 8081 	ble.w	80079ca <_dtoa_r+0x8ca>
 80078c8:	461a      	mov	r2, r3
 80078ca:	4601      	mov	r1, r0
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 fd09 	bl	80082e4 <__pow5mult>
 80078d2:	9b07      	ldr	r3, [sp, #28]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	4606      	mov	r6, r0
 80078d8:	dd7a      	ble.n	80079d0 <_dtoa_r+0x8d0>
 80078da:	f04f 0800 	mov.w	r8, #0
 80078de:	6933      	ldr	r3, [r6, #16]
 80078e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078e4:	6918      	ldr	r0, [r3, #16]
 80078e6:	f000 fbef 	bl	80080c8 <__hi0bits>
 80078ea:	f1c0 0020 	rsb	r0, r0, #32
 80078ee:	9b06      	ldr	r3, [sp, #24]
 80078f0:	4418      	add	r0, r3
 80078f2:	f010 001f 	ands.w	r0, r0, #31
 80078f6:	f000 8094 	beq.w	8007a22 <_dtoa_r+0x922>
 80078fa:	f1c0 0320 	rsb	r3, r0, #32
 80078fe:	2b04      	cmp	r3, #4
 8007900:	f340 8085 	ble.w	8007a0e <_dtoa_r+0x90e>
 8007904:	9b05      	ldr	r3, [sp, #20]
 8007906:	f1c0 001c 	rsb	r0, r0, #28
 800790a:	4403      	add	r3, r0
 800790c:	9305      	str	r3, [sp, #20]
 800790e:	9b06      	ldr	r3, [sp, #24]
 8007910:	4403      	add	r3, r0
 8007912:	4405      	add	r5, r0
 8007914:	9306      	str	r3, [sp, #24]
 8007916:	9b05      	ldr	r3, [sp, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	dd05      	ble.n	8007928 <_dtoa_r+0x828>
 800791c:	4651      	mov	r1, sl
 800791e:	461a      	mov	r2, r3
 8007920:	4620      	mov	r0, r4
 8007922:	f000 fd39 	bl	8008398 <__lshift>
 8007926:	4682      	mov	sl, r0
 8007928:	9b06      	ldr	r3, [sp, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	dd05      	ble.n	800793a <_dtoa_r+0x83a>
 800792e:	4631      	mov	r1, r6
 8007930:	461a      	mov	r2, r3
 8007932:	4620      	mov	r0, r4
 8007934:	f000 fd30 	bl	8008398 <__lshift>
 8007938:	4606      	mov	r6, r0
 800793a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800793c:	2b00      	cmp	r3, #0
 800793e:	d072      	beq.n	8007a26 <_dtoa_r+0x926>
 8007940:	4631      	mov	r1, r6
 8007942:	4650      	mov	r0, sl
 8007944:	f000 fd94 	bl	8008470 <__mcmp>
 8007948:	2800      	cmp	r0, #0
 800794a:	da6c      	bge.n	8007a26 <_dtoa_r+0x926>
 800794c:	2300      	movs	r3, #0
 800794e:	4651      	mov	r1, sl
 8007950:	220a      	movs	r2, #10
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fb28 	bl	8007fa8 <__multadd>
 8007958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800795e:	4682      	mov	sl, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 81b0 	beq.w	8007cc6 <_dtoa_r+0xbc6>
 8007966:	2300      	movs	r3, #0
 8007968:	4639      	mov	r1, r7
 800796a:	220a      	movs	r2, #10
 800796c:	4620      	mov	r0, r4
 800796e:	f000 fb1b 	bl	8007fa8 <__multadd>
 8007972:	9b01      	ldr	r3, [sp, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	4607      	mov	r7, r0
 8007978:	f300 8096 	bgt.w	8007aa8 <_dtoa_r+0x9a8>
 800797c:	9b07      	ldr	r3, [sp, #28]
 800797e:	2b02      	cmp	r3, #2
 8007980:	dc59      	bgt.n	8007a36 <_dtoa_r+0x936>
 8007982:	e091      	b.n	8007aa8 <_dtoa_r+0x9a8>
 8007984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800798a:	e758      	b.n	800783e <_dtoa_r+0x73e>
 800798c:	9b04      	ldr	r3, [sp, #16]
 800798e:	1e5e      	subs	r6, r3, #1
 8007990:	9b08      	ldr	r3, [sp, #32]
 8007992:	42b3      	cmp	r3, r6
 8007994:	bfbf      	itttt	lt
 8007996:	9b08      	ldrlt	r3, [sp, #32]
 8007998:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800799a:	9608      	strlt	r6, [sp, #32]
 800799c:	1af3      	sublt	r3, r6, r3
 800799e:	bfb4      	ite	lt
 80079a0:	18d2      	addlt	r2, r2, r3
 80079a2:	1b9e      	subge	r6, r3, r6
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	bfbc      	itt	lt
 80079a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80079aa:	2600      	movlt	r6, #0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bfb7      	itett	lt
 80079b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80079b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80079b8:	1a9d      	sublt	r5, r3, r2
 80079ba:	2300      	movlt	r3, #0
 80079bc:	e741      	b.n	8007842 <_dtoa_r+0x742>
 80079be:	9e08      	ldr	r6, [sp, #32]
 80079c0:	9d05      	ldr	r5, [sp, #20]
 80079c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80079c4:	e748      	b.n	8007858 <_dtoa_r+0x758>
 80079c6:	9a08      	ldr	r2, [sp, #32]
 80079c8:	e770      	b.n	80078ac <_dtoa_r+0x7ac>
 80079ca:	9b07      	ldr	r3, [sp, #28]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	dc19      	bgt.n	8007a04 <_dtoa_r+0x904>
 80079d0:	9b02      	ldr	r3, [sp, #8]
 80079d2:	b9bb      	cbnz	r3, 8007a04 <_dtoa_r+0x904>
 80079d4:	9b03      	ldr	r3, [sp, #12]
 80079d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079da:	b99b      	cbnz	r3, 8007a04 <_dtoa_r+0x904>
 80079dc:	9b03      	ldr	r3, [sp, #12]
 80079de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079e2:	0d1b      	lsrs	r3, r3, #20
 80079e4:	051b      	lsls	r3, r3, #20
 80079e6:	b183      	cbz	r3, 8007a0a <_dtoa_r+0x90a>
 80079e8:	9b05      	ldr	r3, [sp, #20]
 80079ea:	3301      	adds	r3, #1
 80079ec:	9305      	str	r3, [sp, #20]
 80079ee:	9b06      	ldr	r3, [sp, #24]
 80079f0:	3301      	adds	r3, #1
 80079f2:	9306      	str	r3, [sp, #24]
 80079f4:	f04f 0801 	mov.w	r8, #1
 80079f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f47f af6f 	bne.w	80078de <_dtoa_r+0x7de>
 8007a00:	2001      	movs	r0, #1
 8007a02:	e774      	b.n	80078ee <_dtoa_r+0x7ee>
 8007a04:	f04f 0800 	mov.w	r8, #0
 8007a08:	e7f6      	b.n	80079f8 <_dtoa_r+0x8f8>
 8007a0a:	4698      	mov	r8, r3
 8007a0c:	e7f4      	b.n	80079f8 <_dtoa_r+0x8f8>
 8007a0e:	d082      	beq.n	8007916 <_dtoa_r+0x816>
 8007a10:	9a05      	ldr	r2, [sp, #20]
 8007a12:	331c      	adds	r3, #28
 8007a14:	441a      	add	r2, r3
 8007a16:	9205      	str	r2, [sp, #20]
 8007a18:	9a06      	ldr	r2, [sp, #24]
 8007a1a:	441a      	add	r2, r3
 8007a1c:	441d      	add	r5, r3
 8007a1e:	9206      	str	r2, [sp, #24]
 8007a20:	e779      	b.n	8007916 <_dtoa_r+0x816>
 8007a22:	4603      	mov	r3, r0
 8007a24:	e7f4      	b.n	8007a10 <_dtoa_r+0x910>
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	dc37      	bgt.n	8007a9c <_dtoa_r+0x99c>
 8007a2c:	9b07      	ldr	r3, [sp, #28]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	dd34      	ble.n	8007a9c <_dtoa_r+0x99c>
 8007a32:	9b04      	ldr	r3, [sp, #16]
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	b963      	cbnz	r3, 8007a54 <_dtoa_r+0x954>
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 fab2 	bl	8007fa8 <__multadd>
 8007a44:	4601      	mov	r1, r0
 8007a46:	4606      	mov	r6, r0
 8007a48:	4650      	mov	r0, sl
 8007a4a:	f000 fd11 	bl	8008470 <__mcmp>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f73f adbb 	bgt.w	80075ca <_dtoa_r+0x4ca>
 8007a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a56:	9d00      	ldr	r5, [sp, #0]
 8007a58:	ea6f 0b03 	mvn.w	fp, r3
 8007a5c:	f04f 0800 	mov.w	r8, #0
 8007a60:	4631      	mov	r1, r6
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 fa7e 	bl	8007f64 <_Bfree>
 8007a68:	2f00      	cmp	r7, #0
 8007a6a:	f43f aeab 	beq.w	80077c4 <_dtoa_r+0x6c4>
 8007a6e:	f1b8 0f00 	cmp.w	r8, #0
 8007a72:	d005      	beq.n	8007a80 <_dtoa_r+0x980>
 8007a74:	45b8      	cmp	r8, r7
 8007a76:	d003      	beq.n	8007a80 <_dtoa_r+0x980>
 8007a78:	4641      	mov	r1, r8
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 fa72 	bl	8007f64 <_Bfree>
 8007a80:	4639      	mov	r1, r7
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 fa6e 	bl	8007f64 <_Bfree>
 8007a88:	e69c      	b.n	80077c4 <_dtoa_r+0x6c4>
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	4637      	mov	r7, r6
 8007a8e:	e7e1      	b.n	8007a54 <_dtoa_r+0x954>
 8007a90:	46bb      	mov	fp, r7
 8007a92:	4637      	mov	r7, r6
 8007a94:	e599      	b.n	80075ca <_dtoa_r+0x4ca>
 8007a96:	bf00      	nop
 8007a98:	40240000 	.word	0x40240000
 8007a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80c8 	beq.w	8007c34 <_dtoa_r+0xb34>
 8007aa4:	9b04      	ldr	r3, [sp, #16]
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	dd05      	ble.n	8007ab8 <_dtoa_r+0x9b8>
 8007aac:	4639      	mov	r1, r7
 8007aae:	462a      	mov	r2, r5
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 fc71 	bl	8008398 <__lshift>
 8007ab6:	4607      	mov	r7, r0
 8007ab8:	f1b8 0f00 	cmp.w	r8, #0
 8007abc:	d05b      	beq.n	8007b76 <_dtoa_r+0xa76>
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 fa0f 	bl	8007ee4 <_Balloc>
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	b928      	cbnz	r0, 8007ad6 <_dtoa_r+0x9d6>
 8007aca:	4b83      	ldr	r3, [pc, #524]	; (8007cd8 <_dtoa_r+0xbd8>)
 8007acc:	4602      	mov	r2, r0
 8007ace:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007ad2:	f7ff bb2e 	b.w	8007132 <_dtoa_r+0x32>
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	3202      	adds	r2, #2
 8007ada:	0092      	lsls	r2, r2, #2
 8007adc:	f107 010c 	add.w	r1, r7, #12
 8007ae0:	300c      	adds	r0, #12
 8007ae2:	f002 fb19 	bl	800a118 <memcpy>
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 fc54 	bl	8008398 <__lshift>
 8007af0:	9b00      	ldr	r3, [sp, #0]
 8007af2:	3301      	adds	r3, #1
 8007af4:	9304      	str	r3, [sp, #16]
 8007af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007afa:	4413      	add	r3, r2
 8007afc:	9308      	str	r3, [sp, #32]
 8007afe:	9b02      	ldr	r3, [sp, #8]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	46b8      	mov	r8, r7
 8007b06:	9306      	str	r3, [sp, #24]
 8007b08:	4607      	mov	r7, r0
 8007b0a:	9b04      	ldr	r3, [sp, #16]
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	4650      	mov	r0, sl
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	f7ff fa6c 	bl	8006ff0 <quorem>
 8007b18:	4641      	mov	r1, r8
 8007b1a:	9002      	str	r0, [sp, #8]
 8007b1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b20:	4650      	mov	r0, sl
 8007b22:	f000 fca5 	bl	8008470 <__mcmp>
 8007b26:	463a      	mov	r2, r7
 8007b28:	9005      	str	r0, [sp, #20]
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 fcbb 	bl	80084a8 <__mdiff>
 8007b32:	68c2      	ldr	r2, [r0, #12]
 8007b34:	4605      	mov	r5, r0
 8007b36:	bb02      	cbnz	r2, 8007b7a <_dtoa_r+0xa7a>
 8007b38:	4601      	mov	r1, r0
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	f000 fc98 	bl	8008470 <__mcmp>
 8007b40:	4602      	mov	r2, r0
 8007b42:	4629      	mov	r1, r5
 8007b44:	4620      	mov	r0, r4
 8007b46:	9209      	str	r2, [sp, #36]	; 0x24
 8007b48:	f000 fa0c 	bl	8007f64 <_Bfree>
 8007b4c:	9b07      	ldr	r3, [sp, #28]
 8007b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b50:	9d04      	ldr	r5, [sp, #16]
 8007b52:	ea43 0102 	orr.w	r1, r3, r2
 8007b56:	9b06      	ldr	r3, [sp, #24]
 8007b58:	4319      	orrs	r1, r3
 8007b5a:	d110      	bne.n	8007b7e <_dtoa_r+0xa7e>
 8007b5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b60:	d029      	beq.n	8007bb6 <_dtoa_r+0xab6>
 8007b62:	9b05      	ldr	r3, [sp, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dd02      	ble.n	8007b6e <_dtoa_r+0xa6e>
 8007b68:	9b02      	ldr	r3, [sp, #8]
 8007b6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	f883 9000 	strb.w	r9, [r3]
 8007b74:	e774      	b.n	8007a60 <_dtoa_r+0x960>
 8007b76:	4638      	mov	r0, r7
 8007b78:	e7ba      	b.n	8007af0 <_dtoa_r+0x9f0>
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	e7e1      	b.n	8007b42 <_dtoa_r+0xa42>
 8007b7e:	9b05      	ldr	r3, [sp, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	db04      	blt.n	8007b8e <_dtoa_r+0xa8e>
 8007b84:	9907      	ldr	r1, [sp, #28]
 8007b86:	430b      	orrs	r3, r1
 8007b88:	9906      	ldr	r1, [sp, #24]
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	d120      	bne.n	8007bd0 <_dtoa_r+0xad0>
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	dded      	ble.n	8007b6e <_dtoa_r+0xa6e>
 8007b92:	4651      	mov	r1, sl
 8007b94:	2201      	movs	r2, #1
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 fbfe 	bl	8008398 <__lshift>
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4682      	mov	sl, r0
 8007ba0:	f000 fc66 	bl	8008470 <__mcmp>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	dc03      	bgt.n	8007bb0 <_dtoa_r+0xab0>
 8007ba8:	d1e1      	bne.n	8007b6e <_dtoa_r+0xa6e>
 8007baa:	f019 0f01 	tst.w	r9, #1
 8007bae:	d0de      	beq.n	8007b6e <_dtoa_r+0xa6e>
 8007bb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bb4:	d1d8      	bne.n	8007b68 <_dtoa_r+0xa68>
 8007bb6:	9a01      	ldr	r2, [sp, #4]
 8007bb8:	2339      	movs	r3, #57	; 0x39
 8007bba:	7013      	strb	r3, [r2, #0]
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	461d      	mov	r5, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007bc6:	2a39      	cmp	r2, #57	; 0x39
 8007bc8:	d06c      	beq.n	8007ca4 <_dtoa_r+0xba4>
 8007bca:	3201      	adds	r2, #1
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	e747      	b.n	8007a60 <_dtoa_r+0x960>
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	dd07      	ble.n	8007be4 <_dtoa_r+0xae4>
 8007bd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bd8:	d0ed      	beq.n	8007bb6 <_dtoa_r+0xab6>
 8007bda:	9a01      	ldr	r2, [sp, #4]
 8007bdc:	f109 0301 	add.w	r3, r9, #1
 8007be0:	7013      	strb	r3, [r2, #0]
 8007be2:	e73d      	b.n	8007a60 <_dtoa_r+0x960>
 8007be4:	9b04      	ldr	r3, [sp, #16]
 8007be6:	9a08      	ldr	r2, [sp, #32]
 8007be8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d043      	beq.n	8007c78 <_dtoa_r+0xb78>
 8007bf0:	4651      	mov	r1, sl
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	220a      	movs	r2, #10
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 f9d6 	bl	8007fa8 <__multadd>
 8007bfc:	45b8      	cmp	r8, r7
 8007bfe:	4682      	mov	sl, r0
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	f04f 020a 	mov.w	r2, #10
 8007c08:	4641      	mov	r1, r8
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	d107      	bne.n	8007c1e <_dtoa_r+0xb1e>
 8007c0e:	f000 f9cb 	bl	8007fa8 <__multadd>
 8007c12:	4680      	mov	r8, r0
 8007c14:	4607      	mov	r7, r0
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	9304      	str	r3, [sp, #16]
 8007c1c:	e775      	b.n	8007b0a <_dtoa_r+0xa0a>
 8007c1e:	f000 f9c3 	bl	8007fa8 <__multadd>
 8007c22:	4639      	mov	r1, r7
 8007c24:	4680      	mov	r8, r0
 8007c26:	2300      	movs	r3, #0
 8007c28:	220a      	movs	r2, #10
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 f9bc 	bl	8007fa8 <__multadd>
 8007c30:	4607      	mov	r7, r0
 8007c32:	e7f0      	b.n	8007c16 <_dtoa_r+0xb16>
 8007c34:	9b04      	ldr	r3, [sp, #16]
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	9d00      	ldr	r5, [sp, #0]
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4650      	mov	r0, sl
 8007c3e:	f7ff f9d7 	bl	8006ff0 <quorem>
 8007c42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c46:	9b00      	ldr	r3, [sp, #0]
 8007c48:	f805 9b01 	strb.w	r9, [r5], #1
 8007c4c:	1aea      	subs	r2, r5, r3
 8007c4e:	9b01      	ldr	r3, [sp, #4]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	dd07      	ble.n	8007c64 <_dtoa_r+0xb64>
 8007c54:	4651      	mov	r1, sl
 8007c56:	2300      	movs	r3, #0
 8007c58:	220a      	movs	r2, #10
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 f9a4 	bl	8007fa8 <__multadd>
 8007c60:	4682      	mov	sl, r0
 8007c62:	e7ea      	b.n	8007c3a <_dtoa_r+0xb3a>
 8007c64:	9b01      	ldr	r3, [sp, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bfc8      	it	gt
 8007c6a:	461d      	movgt	r5, r3
 8007c6c:	9b00      	ldr	r3, [sp, #0]
 8007c6e:	bfd8      	it	le
 8007c70:	2501      	movle	r5, #1
 8007c72:	441d      	add	r5, r3
 8007c74:	f04f 0800 	mov.w	r8, #0
 8007c78:	4651      	mov	r1, sl
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 fb8b 	bl	8008398 <__lshift>
 8007c82:	4631      	mov	r1, r6
 8007c84:	4682      	mov	sl, r0
 8007c86:	f000 fbf3 	bl	8008470 <__mcmp>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	dc96      	bgt.n	8007bbc <_dtoa_r+0xabc>
 8007c8e:	d102      	bne.n	8007c96 <_dtoa_r+0xb96>
 8007c90:	f019 0f01 	tst.w	r9, #1
 8007c94:	d192      	bne.n	8007bbc <_dtoa_r+0xabc>
 8007c96:	462b      	mov	r3, r5
 8007c98:	461d      	mov	r5, r3
 8007c9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c9e:	2a30      	cmp	r2, #48	; 0x30
 8007ca0:	d0fa      	beq.n	8007c98 <_dtoa_r+0xb98>
 8007ca2:	e6dd      	b.n	8007a60 <_dtoa_r+0x960>
 8007ca4:	9a00      	ldr	r2, [sp, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d189      	bne.n	8007bbe <_dtoa_r+0xabe>
 8007caa:	f10b 0b01 	add.w	fp, fp, #1
 8007cae:	2331      	movs	r3, #49	; 0x31
 8007cb0:	e796      	b.n	8007be0 <_dtoa_r+0xae0>
 8007cb2:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <_dtoa_r+0xbdc>)
 8007cb4:	f7ff ba99 	b.w	80071ea <_dtoa_r+0xea>
 8007cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f47f aa6d 	bne.w	800719a <_dtoa_r+0x9a>
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <_dtoa_r+0xbe0>)
 8007cc2:	f7ff ba92 	b.w	80071ea <_dtoa_r+0xea>
 8007cc6:	9b01      	ldr	r3, [sp, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	dcb5      	bgt.n	8007c38 <_dtoa_r+0xb38>
 8007ccc:	9b07      	ldr	r3, [sp, #28]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	f73f aeb1 	bgt.w	8007a36 <_dtoa_r+0x936>
 8007cd4:	e7b0      	b.n	8007c38 <_dtoa_r+0xb38>
 8007cd6:	bf00      	nop
 8007cd8:	0800c6d3 	.word	0x0800c6d3
 8007cdc:	0800c9b8 	.word	0x0800c9b8
 8007ce0:	0800c657 	.word	0x0800c657

08007ce4 <_free_r>:
 8007ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	d044      	beq.n	8007d74 <_free_r+0x90>
 8007cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cee:	9001      	str	r0, [sp, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8007cf6:	bfb8      	it	lt
 8007cf8:	18e4      	addlt	r4, r4, r3
 8007cfa:	f000 f8e7 	bl	8007ecc <__malloc_lock>
 8007cfe:	4a1e      	ldr	r2, [pc, #120]	; (8007d78 <_free_r+0x94>)
 8007d00:	9801      	ldr	r0, [sp, #4]
 8007d02:	6813      	ldr	r3, [r2, #0]
 8007d04:	b933      	cbnz	r3, 8007d14 <_free_r+0x30>
 8007d06:	6063      	str	r3, [r4, #4]
 8007d08:	6014      	str	r4, [r2, #0]
 8007d0a:	b003      	add	sp, #12
 8007d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d10:	f000 b8e2 	b.w	8007ed8 <__malloc_unlock>
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	d908      	bls.n	8007d2a <_free_r+0x46>
 8007d18:	6825      	ldr	r5, [r4, #0]
 8007d1a:	1961      	adds	r1, r4, r5
 8007d1c:	428b      	cmp	r3, r1
 8007d1e:	bf01      	itttt	eq
 8007d20:	6819      	ldreq	r1, [r3, #0]
 8007d22:	685b      	ldreq	r3, [r3, #4]
 8007d24:	1949      	addeq	r1, r1, r5
 8007d26:	6021      	streq	r1, [r4, #0]
 8007d28:	e7ed      	b.n	8007d06 <_free_r+0x22>
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	b10b      	cbz	r3, 8007d34 <_free_r+0x50>
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	d9fa      	bls.n	8007d2a <_free_r+0x46>
 8007d34:	6811      	ldr	r1, [r2, #0]
 8007d36:	1855      	adds	r5, r2, r1
 8007d38:	42a5      	cmp	r5, r4
 8007d3a:	d10b      	bne.n	8007d54 <_free_r+0x70>
 8007d3c:	6824      	ldr	r4, [r4, #0]
 8007d3e:	4421      	add	r1, r4
 8007d40:	1854      	adds	r4, r2, r1
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	6011      	str	r1, [r2, #0]
 8007d46:	d1e0      	bne.n	8007d0a <_free_r+0x26>
 8007d48:	681c      	ldr	r4, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	6053      	str	r3, [r2, #4]
 8007d4e:	440c      	add	r4, r1
 8007d50:	6014      	str	r4, [r2, #0]
 8007d52:	e7da      	b.n	8007d0a <_free_r+0x26>
 8007d54:	d902      	bls.n	8007d5c <_free_r+0x78>
 8007d56:	230c      	movs	r3, #12
 8007d58:	6003      	str	r3, [r0, #0]
 8007d5a:	e7d6      	b.n	8007d0a <_free_r+0x26>
 8007d5c:	6825      	ldr	r5, [r4, #0]
 8007d5e:	1961      	adds	r1, r4, r5
 8007d60:	428b      	cmp	r3, r1
 8007d62:	bf04      	itt	eq
 8007d64:	6819      	ldreq	r1, [r3, #0]
 8007d66:	685b      	ldreq	r3, [r3, #4]
 8007d68:	6063      	str	r3, [r4, #4]
 8007d6a:	bf04      	itt	eq
 8007d6c:	1949      	addeq	r1, r1, r5
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	6054      	str	r4, [r2, #4]
 8007d72:	e7ca      	b.n	8007d0a <_free_r+0x26>
 8007d74:	b003      	add	sp, #12
 8007d76:	bd30      	pop	{r4, r5, pc}
 8007d78:	20000640 	.word	0x20000640

08007d7c <malloc>:
 8007d7c:	4b02      	ldr	r3, [pc, #8]	; (8007d88 <malloc+0xc>)
 8007d7e:	4601      	mov	r1, r0
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	f000 b823 	b.w	8007dcc <_malloc_r>
 8007d86:	bf00      	nop
 8007d88:	20000068 	.word	0x20000068

08007d8c <sbrk_aligned>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	4e0e      	ldr	r6, [pc, #56]	; (8007dc8 <sbrk_aligned+0x3c>)
 8007d90:	460c      	mov	r4, r1
 8007d92:	6831      	ldr	r1, [r6, #0]
 8007d94:	4605      	mov	r5, r0
 8007d96:	b911      	cbnz	r1, 8007d9e <sbrk_aligned+0x12>
 8007d98:	f002 f9ae 	bl	800a0f8 <_sbrk_r>
 8007d9c:	6030      	str	r0, [r6, #0]
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	f002 f9a9 	bl	800a0f8 <_sbrk_r>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	d00a      	beq.n	8007dc0 <sbrk_aligned+0x34>
 8007daa:	1cc4      	adds	r4, r0, #3
 8007dac:	f024 0403 	bic.w	r4, r4, #3
 8007db0:	42a0      	cmp	r0, r4
 8007db2:	d007      	beq.n	8007dc4 <sbrk_aligned+0x38>
 8007db4:	1a21      	subs	r1, r4, r0
 8007db6:	4628      	mov	r0, r5
 8007db8:	f002 f99e 	bl	800a0f8 <_sbrk_r>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d101      	bne.n	8007dc4 <sbrk_aligned+0x38>
 8007dc0:	f04f 34ff 	mov.w	r4, #4294967295
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	20000644 	.word	0x20000644

08007dcc <_malloc_r>:
 8007dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd0:	1ccd      	adds	r5, r1, #3
 8007dd2:	f025 0503 	bic.w	r5, r5, #3
 8007dd6:	3508      	adds	r5, #8
 8007dd8:	2d0c      	cmp	r5, #12
 8007dda:	bf38      	it	cc
 8007ddc:	250c      	movcc	r5, #12
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	4607      	mov	r7, r0
 8007de2:	db01      	blt.n	8007de8 <_malloc_r+0x1c>
 8007de4:	42a9      	cmp	r1, r5
 8007de6:	d905      	bls.n	8007df4 <_malloc_r+0x28>
 8007de8:	230c      	movs	r3, #12
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	2600      	movs	r6, #0
 8007dee:	4630      	mov	r0, r6
 8007df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007df4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ec8 <_malloc_r+0xfc>
 8007df8:	f000 f868 	bl	8007ecc <__malloc_lock>
 8007dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8007e00:	461c      	mov	r4, r3
 8007e02:	bb5c      	cbnz	r4, 8007e5c <_malloc_r+0x90>
 8007e04:	4629      	mov	r1, r5
 8007e06:	4638      	mov	r0, r7
 8007e08:	f7ff ffc0 	bl	8007d8c <sbrk_aligned>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	4604      	mov	r4, r0
 8007e10:	d155      	bne.n	8007ebe <_malloc_r+0xf2>
 8007e12:	f8d8 4000 	ldr.w	r4, [r8]
 8007e16:	4626      	mov	r6, r4
 8007e18:	2e00      	cmp	r6, #0
 8007e1a:	d145      	bne.n	8007ea8 <_malloc_r+0xdc>
 8007e1c:	2c00      	cmp	r4, #0
 8007e1e:	d048      	beq.n	8007eb2 <_malloc_r+0xe6>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	4631      	mov	r1, r6
 8007e24:	4638      	mov	r0, r7
 8007e26:	eb04 0903 	add.w	r9, r4, r3
 8007e2a:	f002 f965 	bl	800a0f8 <_sbrk_r>
 8007e2e:	4581      	cmp	r9, r0
 8007e30:	d13f      	bne.n	8007eb2 <_malloc_r+0xe6>
 8007e32:	6821      	ldr	r1, [r4, #0]
 8007e34:	1a6d      	subs	r5, r5, r1
 8007e36:	4629      	mov	r1, r5
 8007e38:	4638      	mov	r0, r7
 8007e3a:	f7ff ffa7 	bl	8007d8c <sbrk_aligned>
 8007e3e:	3001      	adds	r0, #1
 8007e40:	d037      	beq.n	8007eb2 <_malloc_r+0xe6>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	442b      	add	r3, r5
 8007e46:	6023      	str	r3, [r4, #0]
 8007e48:	f8d8 3000 	ldr.w	r3, [r8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d038      	beq.n	8007ec2 <_malloc_r+0xf6>
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	42a2      	cmp	r2, r4
 8007e54:	d12b      	bne.n	8007eae <_malloc_r+0xe2>
 8007e56:	2200      	movs	r2, #0
 8007e58:	605a      	str	r2, [r3, #4]
 8007e5a:	e00f      	b.n	8007e7c <_malloc_r+0xb0>
 8007e5c:	6822      	ldr	r2, [r4, #0]
 8007e5e:	1b52      	subs	r2, r2, r5
 8007e60:	d41f      	bmi.n	8007ea2 <_malloc_r+0xd6>
 8007e62:	2a0b      	cmp	r2, #11
 8007e64:	d917      	bls.n	8007e96 <_malloc_r+0xca>
 8007e66:	1961      	adds	r1, r4, r5
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	6025      	str	r5, [r4, #0]
 8007e6c:	bf18      	it	ne
 8007e6e:	6059      	strne	r1, [r3, #4]
 8007e70:	6863      	ldr	r3, [r4, #4]
 8007e72:	bf08      	it	eq
 8007e74:	f8c8 1000 	streq.w	r1, [r8]
 8007e78:	5162      	str	r2, [r4, r5]
 8007e7a:	604b      	str	r3, [r1, #4]
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	f104 060b 	add.w	r6, r4, #11
 8007e82:	f000 f829 	bl	8007ed8 <__malloc_unlock>
 8007e86:	f026 0607 	bic.w	r6, r6, #7
 8007e8a:	1d23      	adds	r3, r4, #4
 8007e8c:	1af2      	subs	r2, r6, r3
 8007e8e:	d0ae      	beq.n	8007dee <_malloc_r+0x22>
 8007e90:	1b9b      	subs	r3, r3, r6
 8007e92:	50a3      	str	r3, [r4, r2]
 8007e94:	e7ab      	b.n	8007dee <_malloc_r+0x22>
 8007e96:	42a3      	cmp	r3, r4
 8007e98:	6862      	ldr	r2, [r4, #4]
 8007e9a:	d1dd      	bne.n	8007e58 <_malloc_r+0x8c>
 8007e9c:	f8c8 2000 	str.w	r2, [r8]
 8007ea0:	e7ec      	b.n	8007e7c <_malloc_r+0xb0>
 8007ea2:	4623      	mov	r3, r4
 8007ea4:	6864      	ldr	r4, [r4, #4]
 8007ea6:	e7ac      	b.n	8007e02 <_malloc_r+0x36>
 8007ea8:	4634      	mov	r4, r6
 8007eaa:	6876      	ldr	r6, [r6, #4]
 8007eac:	e7b4      	b.n	8007e18 <_malloc_r+0x4c>
 8007eae:	4613      	mov	r3, r2
 8007eb0:	e7cc      	b.n	8007e4c <_malloc_r+0x80>
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	603b      	str	r3, [r7, #0]
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	f000 f80e 	bl	8007ed8 <__malloc_unlock>
 8007ebc:	e797      	b.n	8007dee <_malloc_r+0x22>
 8007ebe:	6025      	str	r5, [r4, #0]
 8007ec0:	e7dc      	b.n	8007e7c <_malloc_r+0xb0>
 8007ec2:	605b      	str	r3, [r3, #4]
 8007ec4:	deff      	udf	#255	; 0xff
 8007ec6:	bf00      	nop
 8007ec8:	20000640 	.word	0x20000640

08007ecc <__malloc_lock>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	; (8007ed4 <__malloc_lock+0x8>)
 8007ece:	f7ff b87e 	b.w	8006fce <__retarget_lock_acquire_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	2000063c 	.word	0x2000063c

08007ed8 <__malloc_unlock>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__malloc_unlock+0x8>)
 8007eda:	f7ff b879 	b.w	8006fd0 <__retarget_lock_release_recursive>
 8007ede:	bf00      	nop
 8007ee0:	2000063c 	.word	0x2000063c

08007ee4 <_Balloc>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	69c6      	ldr	r6, [r0, #28]
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	b976      	cbnz	r6, 8007f0c <_Balloc+0x28>
 8007eee:	2010      	movs	r0, #16
 8007ef0:	f7ff ff44 	bl	8007d7c <malloc>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	61e0      	str	r0, [r4, #28]
 8007ef8:	b920      	cbnz	r0, 8007f04 <_Balloc+0x20>
 8007efa:	4b18      	ldr	r3, [pc, #96]	; (8007f5c <_Balloc+0x78>)
 8007efc:	4818      	ldr	r0, [pc, #96]	; (8007f60 <_Balloc+0x7c>)
 8007efe:	216b      	movs	r1, #107	; 0x6b
 8007f00:	f002 f922 	bl	800a148 <__assert_func>
 8007f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f08:	6006      	str	r6, [r0, #0]
 8007f0a:	60c6      	str	r6, [r0, #12]
 8007f0c:	69e6      	ldr	r6, [r4, #28]
 8007f0e:	68f3      	ldr	r3, [r6, #12]
 8007f10:	b183      	cbz	r3, 8007f34 <_Balloc+0x50>
 8007f12:	69e3      	ldr	r3, [r4, #28]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f1a:	b9b8      	cbnz	r0, 8007f4c <_Balloc+0x68>
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	fa01 f605 	lsl.w	r6, r1, r5
 8007f22:	1d72      	adds	r2, r6, #5
 8007f24:	0092      	lsls	r2, r2, #2
 8007f26:	4620      	mov	r0, r4
 8007f28:	f002 f92c 	bl	800a184 <_calloc_r>
 8007f2c:	b160      	cbz	r0, 8007f48 <_Balloc+0x64>
 8007f2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f32:	e00e      	b.n	8007f52 <_Balloc+0x6e>
 8007f34:	2221      	movs	r2, #33	; 0x21
 8007f36:	2104      	movs	r1, #4
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f002 f923 	bl	800a184 <_calloc_r>
 8007f3e:	69e3      	ldr	r3, [r4, #28]
 8007f40:	60f0      	str	r0, [r6, #12]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e4      	bne.n	8007f12 <_Balloc+0x2e>
 8007f48:	2000      	movs	r0, #0
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}
 8007f4c:	6802      	ldr	r2, [r0, #0]
 8007f4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f52:	2300      	movs	r3, #0
 8007f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f58:	e7f7      	b.n	8007f4a <_Balloc+0x66>
 8007f5a:	bf00      	nop
 8007f5c:	0800c664 	.word	0x0800c664
 8007f60:	0800c6e4 	.word	0x0800c6e4

08007f64 <_Bfree>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	69c6      	ldr	r6, [r0, #28]
 8007f68:	4605      	mov	r5, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	b976      	cbnz	r6, 8007f8c <_Bfree+0x28>
 8007f6e:	2010      	movs	r0, #16
 8007f70:	f7ff ff04 	bl	8007d7c <malloc>
 8007f74:	4602      	mov	r2, r0
 8007f76:	61e8      	str	r0, [r5, #28]
 8007f78:	b920      	cbnz	r0, 8007f84 <_Bfree+0x20>
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <_Bfree+0x3c>)
 8007f7c:	4809      	ldr	r0, [pc, #36]	; (8007fa4 <_Bfree+0x40>)
 8007f7e:	218f      	movs	r1, #143	; 0x8f
 8007f80:	f002 f8e2 	bl	800a148 <__assert_func>
 8007f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f88:	6006      	str	r6, [r0, #0]
 8007f8a:	60c6      	str	r6, [r0, #12]
 8007f8c:	b13c      	cbz	r4, 8007f9e <_Bfree+0x3a>
 8007f8e:	69eb      	ldr	r3, [r5, #28]
 8007f90:	6862      	ldr	r2, [r4, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f98:	6021      	str	r1, [r4, #0]
 8007f9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	0800c664 	.word	0x0800c664
 8007fa4:	0800c6e4 	.word	0x0800c6e4

08007fa8 <__multadd>:
 8007fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fac:	690d      	ldr	r5, [r1, #16]
 8007fae:	4607      	mov	r7, r0
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	461e      	mov	r6, r3
 8007fb4:	f101 0c14 	add.w	ip, r1, #20
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f8dc 3000 	ldr.w	r3, [ip]
 8007fbe:	b299      	uxth	r1, r3
 8007fc0:	fb02 6101 	mla	r1, r2, r1, r6
 8007fc4:	0c1e      	lsrs	r6, r3, #16
 8007fc6:	0c0b      	lsrs	r3, r1, #16
 8007fc8:	fb02 3306 	mla	r3, r2, r6, r3
 8007fcc:	b289      	uxth	r1, r1
 8007fce:	3001      	adds	r0, #1
 8007fd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fd4:	4285      	cmp	r5, r0
 8007fd6:	f84c 1b04 	str.w	r1, [ip], #4
 8007fda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fde:	dcec      	bgt.n	8007fba <__multadd+0x12>
 8007fe0:	b30e      	cbz	r6, 8008026 <__multadd+0x7e>
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dc19      	bgt.n	800801c <__multadd+0x74>
 8007fe8:	6861      	ldr	r1, [r4, #4]
 8007fea:	4638      	mov	r0, r7
 8007fec:	3101      	adds	r1, #1
 8007fee:	f7ff ff79 	bl	8007ee4 <_Balloc>
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	b928      	cbnz	r0, 8008002 <__multadd+0x5a>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	4b0c      	ldr	r3, [pc, #48]	; (800802c <__multadd+0x84>)
 8007ffa:	480d      	ldr	r0, [pc, #52]	; (8008030 <__multadd+0x88>)
 8007ffc:	21ba      	movs	r1, #186	; 0xba
 8007ffe:	f002 f8a3 	bl	800a148 <__assert_func>
 8008002:	6922      	ldr	r2, [r4, #16]
 8008004:	3202      	adds	r2, #2
 8008006:	f104 010c 	add.w	r1, r4, #12
 800800a:	0092      	lsls	r2, r2, #2
 800800c:	300c      	adds	r0, #12
 800800e:	f002 f883 	bl	800a118 <memcpy>
 8008012:	4621      	mov	r1, r4
 8008014:	4638      	mov	r0, r7
 8008016:	f7ff ffa5 	bl	8007f64 <_Bfree>
 800801a:	4644      	mov	r4, r8
 800801c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008020:	3501      	adds	r5, #1
 8008022:	615e      	str	r6, [r3, #20]
 8008024:	6125      	str	r5, [r4, #16]
 8008026:	4620      	mov	r0, r4
 8008028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800802c:	0800c6d3 	.word	0x0800c6d3
 8008030:	0800c6e4 	.word	0x0800c6e4

08008034 <__s2b>:
 8008034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008038:	460c      	mov	r4, r1
 800803a:	4615      	mov	r5, r2
 800803c:	461f      	mov	r7, r3
 800803e:	2209      	movs	r2, #9
 8008040:	3308      	adds	r3, #8
 8008042:	4606      	mov	r6, r0
 8008044:	fb93 f3f2 	sdiv	r3, r3, r2
 8008048:	2100      	movs	r1, #0
 800804a:	2201      	movs	r2, #1
 800804c:	429a      	cmp	r2, r3
 800804e:	db09      	blt.n	8008064 <__s2b+0x30>
 8008050:	4630      	mov	r0, r6
 8008052:	f7ff ff47 	bl	8007ee4 <_Balloc>
 8008056:	b940      	cbnz	r0, 800806a <__s2b+0x36>
 8008058:	4602      	mov	r2, r0
 800805a:	4b19      	ldr	r3, [pc, #100]	; (80080c0 <__s2b+0x8c>)
 800805c:	4819      	ldr	r0, [pc, #100]	; (80080c4 <__s2b+0x90>)
 800805e:	21d3      	movs	r1, #211	; 0xd3
 8008060:	f002 f872 	bl	800a148 <__assert_func>
 8008064:	0052      	lsls	r2, r2, #1
 8008066:	3101      	adds	r1, #1
 8008068:	e7f0      	b.n	800804c <__s2b+0x18>
 800806a:	9b08      	ldr	r3, [sp, #32]
 800806c:	6143      	str	r3, [r0, #20]
 800806e:	2d09      	cmp	r5, #9
 8008070:	f04f 0301 	mov.w	r3, #1
 8008074:	6103      	str	r3, [r0, #16]
 8008076:	dd16      	ble.n	80080a6 <__s2b+0x72>
 8008078:	f104 0909 	add.w	r9, r4, #9
 800807c:	46c8      	mov	r8, r9
 800807e:	442c      	add	r4, r5
 8008080:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008084:	4601      	mov	r1, r0
 8008086:	3b30      	subs	r3, #48	; 0x30
 8008088:	220a      	movs	r2, #10
 800808a:	4630      	mov	r0, r6
 800808c:	f7ff ff8c 	bl	8007fa8 <__multadd>
 8008090:	45a0      	cmp	r8, r4
 8008092:	d1f5      	bne.n	8008080 <__s2b+0x4c>
 8008094:	f1a5 0408 	sub.w	r4, r5, #8
 8008098:	444c      	add	r4, r9
 800809a:	1b2d      	subs	r5, r5, r4
 800809c:	1963      	adds	r3, r4, r5
 800809e:	42bb      	cmp	r3, r7
 80080a0:	db04      	blt.n	80080ac <__s2b+0x78>
 80080a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080a6:	340a      	adds	r4, #10
 80080a8:	2509      	movs	r5, #9
 80080aa:	e7f6      	b.n	800809a <__s2b+0x66>
 80080ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080b0:	4601      	mov	r1, r0
 80080b2:	3b30      	subs	r3, #48	; 0x30
 80080b4:	220a      	movs	r2, #10
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7ff ff76 	bl	8007fa8 <__multadd>
 80080bc:	e7ee      	b.n	800809c <__s2b+0x68>
 80080be:	bf00      	nop
 80080c0:	0800c6d3 	.word	0x0800c6d3
 80080c4:	0800c6e4 	.word	0x0800c6e4

080080c8 <__hi0bits>:
 80080c8:	0c03      	lsrs	r3, r0, #16
 80080ca:	041b      	lsls	r3, r3, #16
 80080cc:	b9d3      	cbnz	r3, 8008104 <__hi0bits+0x3c>
 80080ce:	0400      	lsls	r0, r0, #16
 80080d0:	2310      	movs	r3, #16
 80080d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080d6:	bf04      	itt	eq
 80080d8:	0200      	lsleq	r0, r0, #8
 80080da:	3308      	addeq	r3, #8
 80080dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080e0:	bf04      	itt	eq
 80080e2:	0100      	lsleq	r0, r0, #4
 80080e4:	3304      	addeq	r3, #4
 80080e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080ea:	bf04      	itt	eq
 80080ec:	0080      	lsleq	r0, r0, #2
 80080ee:	3302      	addeq	r3, #2
 80080f0:	2800      	cmp	r0, #0
 80080f2:	db05      	blt.n	8008100 <__hi0bits+0x38>
 80080f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080f8:	f103 0301 	add.w	r3, r3, #1
 80080fc:	bf08      	it	eq
 80080fe:	2320      	moveq	r3, #32
 8008100:	4618      	mov	r0, r3
 8008102:	4770      	bx	lr
 8008104:	2300      	movs	r3, #0
 8008106:	e7e4      	b.n	80080d2 <__hi0bits+0xa>

08008108 <__lo0bits>:
 8008108:	6803      	ldr	r3, [r0, #0]
 800810a:	f013 0207 	ands.w	r2, r3, #7
 800810e:	d00c      	beq.n	800812a <__lo0bits+0x22>
 8008110:	07d9      	lsls	r1, r3, #31
 8008112:	d422      	bmi.n	800815a <__lo0bits+0x52>
 8008114:	079a      	lsls	r2, r3, #30
 8008116:	bf49      	itett	mi
 8008118:	085b      	lsrmi	r3, r3, #1
 800811a:	089b      	lsrpl	r3, r3, #2
 800811c:	6003      	strmi	r3, [r0, #0]
 800811e:	2201      	movmi	r2, #1
 8008120:	bf5c      	itt	pl
 8008122:	6003      	strpl	r3, [r0, #0]
 8008124:	2202      	movpl	r2, #2
 8008126:	4610      	mov	r0, r2
 8008128:	4770      	bx	lr
 800812a:	b299      	uxth	r1, r3
 800812c:	b909      	cbnz	r1, 8008132 <__lo0bits+0x2a>
 800812e:	0c1b      	lsrs	r3, r3, #16
 8008130:	2210      	movs	r2, #16
 8008132:	b2d9      	uxtb	r1, r3
 8008134:	b909      	cbnz	r1, 800813a <__lo0bits+0x32>
 8008136:	3208      	adds	r2, #8
 8008138:	0a1b      	lsrs	r3, r3, #8
 800813a:	0719      	lsls	r1, r3, #28
 800813c:	bf04      	itt	eq
 800813e:	091b      	lsreq	r3, r3, #4
 8008140:	3204      	addeq	r2, #4
 8008142:	0799      	lsls	r1, r3, #30
 8008144:	bf04      	itt	eq
 8008146:	089b      	lsreq	r3, r3, #2
 8008148:	3202      	addeq	r2, #2
 800814a:	07d9      	lsls	r1, r3, #31
 800814c:	d403      	bmi.n	8008156 <__lo0bits+0x4e>
 800814e:	085b      	lsrs	r3, r3, #1
 8008150:	f102 0201 	add.w	r2, r2, #1
 8008154:	d003      	beq.n	800815e <__lo0bits+0x56>
 8008156:	6003      	str	r3, [r0, #0]
 8008158:	e7e5      	b.n	8008126 <__lo0bits+0x1e>
 800815a:	2200      	movs	r2, #0
 800815c:	e7e3      	b.n	8008126 <__lo0bits+0x1e>
 800815e:	2220      	movs	r2, #32
 8008160:	e7e1      	b.n	8008126 <__lo0bits+0x1e>
	...

08008164 <__i2b>:
 8008164:	b510      	push	{r4, lr}
 8008166:	460c      	mov	r4, r1
 8008168:	2101      	movs	r1, #1
 800816a:	f7ff febb 	bl	8007ee4 <_Balloc>
 800816e:	4602      	mov	r2, r0
 8008170:	b928      	cbnz	r0, 800817e <__i2b+0x1a>
 8008172:	4b05      	ldr	r3, [pc, #20]	; (8008188 <__i2b+0x24>)
 8008174:	4805      	ldr	r0, [pc, #20]	; (800818c <__i2b+0x28>)
 8008176:	f240 1145 	movw	r1, #325	; 0x145
 800817a:	f001 ffe5 	bl	800a148 <__assert_func>
 800817e:	2301      	movs	r3, #1
 8008180:	6144      	str	r4, [r0, #20]
 8008182:	6103      	str	r3, [r0, #16]
 8008184:	bd10      	pop	{r4, pc}
 8008186:	bf00      	nop
 8008188:	0800c6d3 	.word	0x0800c6d3
 800818c:	0800c6e4 	.word	0x0800c6e4

08008190 <__multiply>:
 8008190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	4691      	mov	r9, r2
 8008196:	690a      	ldr	r2, [r1, #16]
 8008198:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800819c:	429a      	cmp	r2, r3
 800819e:	bfb8      	it	lt
 80081a0:	460b      	movlt	r3, r1
 80081a2:	460c      	mov	r4, r1
 80081a4:	bfbc      	itt	lt
 80081a6:	464c      	movlt	r4, r9
 80081a8:	4699      	movlt	r9, r3
 80081aa:	6927      	ldr	r7, [r4, #16]
 80081ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081b0:	68a3      	ldr	r3, [r4, #8]
 80081b2:	6861      	ldr	r1, [r4, #4]
 80081b4:	eb07 060a 	add.w	r6, r7, sl
 80081b8:	42b3      	cmp	r3, r6
 80081ba:	b085      	sub	sp, #20
 80081bc:	bfb8      	it	lt
 80081be:	3101      	addlt	r1, #1
 80081c0:	f7ff fe90 	bl	8007ee4 <_Balloc>
 80081c4:	b930      	cbnz	r0, 80081d4 <__multiply+0x44>
 80081c6:	4602      	mov	r2, r0
 80081c8:	4b44      	ldr	r3, [pc, #272]	; (80082dc <__multiply+0x14c>)
 80081ca:	4845      	ldr	r0, [pc, #276]	; (80082e0 <__multiply+0x150>)
 80081cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80081d0:	f001 ffba 	bl	800a148 <__assert_func>
 80081d4:	f100 0514 	add.w	r5, r0, #20
 80081d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081dc:	462b      	mov	r3, r5
 80081de:	2200      	movs	r2, #0
 80081e0:	4543      	cmp	r3, r8
 80081e2:	d321      	bcc.n	8008228 <__multiply+0x98>
 80081e4:	f104 0314 	add.w	r3, r4, #20
 80081e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80081ec:	f109 0314 	add.w	r3, r9, #20
 80081f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80081f4:	9202      	str	r2, [sp, #8]
 80081f6:	1b3a      	subs	r2, r7, r4
 80081f8:	3a15      	subs	r2, #21
 80081fa:	f022 0203 	bic.w	r2, r2, #3
 80081fe:	3204      	adds	r2, #4
 8008200:	f104 0115 	add.w	r1, r4, #21
 8008204:	428f      	cmp	r7, r1
 8008206:	bf38      	it	cc
 8008208:	2204      	movcc	r2, #4
 800820a:	9201      	str	r2, [sp, #4]
 800820c:	9a02      	ldr	r2, [sp, #8]
 800820e:	9303      	str	r3, [sp, #12]
 8008210:	429a      	cmp	r2, r3
 8008212:	d80c      	bhi.n	800822e <__multiply+0x9e>
 8008214:	2e00      	cmp	r6, #0
 8008216:	dd03      	ble.n	8008220 <__multiply+0x90>
 8008218:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800821c:	2b00      	cmp	r3, #0
 800821e:	d05b      	beq.n	80082d8 <__multiply+0x148>
 8008220:	6106      	str	r6, [r0, #16]
 8008222:	b005      	add	sp, #20
 8008224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008228:	f843 2b04 	str.w	r2, [r3], #4
 800822c:	e7d8      	b.n	80081e0 <__multiply+0x50>
 800822e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008232:	f1ba 0f00 	cmp.w	sl, #0
 8008236:	d024      	beq.n	8008282 <__multiply+0xf2>
 8008238:	f104 0e14 	add.w	lr, r4, #20
 800823c:	46a9      	mov	r9, r5
 800823e:	f04f 0c00 	mov.w	ip, #0
 8008242:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008246:	f8d9 1000 	ldr.w	r1, [r9]
 800824a:	fa1f fb82 	uxth.w	fp, r2
 800824e:	b289      	uxth	r1, r1
 8008250:	fb0a 110b 	mla	r1, sl, fp, r1
 8008254:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008258:	f8d9 2000 	ldr.w	r2, [r9]
 800825c:	4461      	add	r1, ip
 800825e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008262:	fb0a c20b 	mla	r2, sl, fp, ip
 8008266:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800826a:	b289      	uxth	r1, r1
 800826c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008270:	4577      	cmp	r7, lr
 8008272:	f849 1b04 	str.w	r1, [r9], #4
 8008276:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800827a:	d8e2      	bhi.n	8008242 <__multiply+0xb2>
 800827c:	9a01      	ldr	r2, [sp, #4]
 800827e:	f845 c002 	str.w	ip, [r5, r2]
 8008282:	9a03      	ldr	r2, [sp, #12]
 8008284:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008288:	3304      	adds	r3, #4
 800828a:	f1b9 0f00 	cmp.w	r9, #0
 800828e:	d021      	beq.n	80082d4 <__multiply+0x144>
 8008290:	6829      	ldr	r1, [r5, #0]
 8008292:	f104 0c14 	add.w	ip, r4, #20
 8008296:	46ae      	mov	lr, r5
 8008298:	f04f 0a00 	mov.w	sl, #0
 800829c:	f8bc b000 	ldrh.w	fp, [ip]
 80082a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082a4:	fb09 220b 	mla	r2, r9, fp, r2
 80082a8:	4452      	add	r2, sl
 80082aa:	b289      	uxth	r1, r1
 80082ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082b0:	f84e 1b04 	str.w	r1, [lr], #4
 80082b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80082b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082bc:	f8be 1000 	ldrh.w	r1, [lr]
 80082c0:	fb09 110a 	mla	r1, r9, sl, r1
 80082c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80082c8:	4567      	cmp	r7, ip
 80082ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80082ce:	d8e5      	bhi.n	800829c <__multiply+0x10c>
 80082d0:	9a01      	ldr	r2, [sp, #4]
 80082d2:	50a9      	str	r1, [r5, r2]
 80082d4:	3504      	adds	r5, #4
 80082d6:	e799      	b.n	800820c <__multiply+0x7c>
 80082d8:	3e01      	subs	r6, #1
 80082da:	e79b      	b.n	8008214 <__multiply+0x84>
 80082dc:	0800c6d3 	.word	0x0800c6d3
 80082e0:	0800c6e4 	.word	0x0800c6e4

080082e4 <__pow5mult>:
 80082e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e8:	4615      	mov	r5, r2
 80082ea:	f012 0203 	ands.w	r2, r2, #3
 80082ee:	4606      	mov	r6, r0
 80082f0:	460f      	mov	r7, r1
 80082f2:	d007      	beq.n	8008304 <__pow5mult+0x20>
 80082f4:	4c25      	ldr	r4, [pc, #148]	; (800838c <__pow5mult+0xa8>)
 80082f6:	3a01      	subs	r2, #1
 80082f8:	2300      	movs	r3, #0
 80082fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082fe:	f7ff fe53 	bl	8007fa8 <__multadd>
 8008302:	4607      	mov	r7, r0
 8008304:	10ad      	asrs	r5, r5, #2
 8008306:	d03d      	beq.n	8008384 <__pow5mult+0xa0>
 8008308:	69f4      	ldr	r4, [r6, #28]
 800830a:	b97c      	cbnz	r4, 800832c <__pow5mult+0x48>
 800830c:	2010      	movs	r0, #16
 800830e:	f7ff fd35 	bl	8007d7c <malloc>
 8008312:	4602      	mov	r2, r0
 8008314:	61f0      	str	r0, [r6, #28]
 8008316:	b928      	cbnz	r0, 8008324 <__pow5mult+0x40>
 8008318:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <__pow5mult+0xac>)
 800831a:	481e      	ldr	r0, [pc, #120]	; (8008394 <__pow5mult+0xb0>)
 800831c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008320:	f001 ff12 	bl	800a148 <__assert_func>
 8008324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008328:	6004      	str	r4, [r0, #0]
 800832a:	60c4      	str	r4, [r0, #12]
 800832c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008334:	b94c      	cbnz	r4, 800834a <__pow5mult+0x66>
 8008336:	f240 2171 	movw	r1, #625	; 0x271
 800833a:	4630      	mov	r0, r6
 800833c:	f7ff ff12 	bl	8008164 <__i2b>
 8008340:	2300      	movs	r3, #0
 8008342:	f8c8 0008 	str.w	r0, [r8, #8]
 8008346:	4604      	mov	r4, r0
 8008348:	6003      	str	r3, [r0, #0]
 800834a:	f04f 0900 	mov.w	r9, #0
 800834e:	07eb      	lsls	r3, r5, #31
 8008350:	d50a      	bpl.n	8008368 <__pow5mult+0x84>
 8008352:	4639      	mov	r1, r7
 8008354:	4622      	mov	r2, r4
 8008356:	4630      	mov	r0, r6
 8008358:	f7ff ff1a 	bl	8008190 <__multiply>
 800835c:	4639      	mov	r1, r7
 800835e:	4680      	mov	r8, r0
 8008360:	4630      	mov	r0, r6
 8008362:	f7ff fdff 	bl	8007f64 <_Bfree>
 8008366:	4647      	mov	r7, r8
 8008368:	106d      	asrs	r5, r5, #1
 800836a:	d00b      	beq.n	8008384 <__pow5mult+0xa0>
 800836c:	6820      	ldr	r0, [r4, #0]
 800836e:	b938      	cbnz	r0, 8008380 <__pow5mult+0x9c>
 8008370:	4622      	mov	r2, r4
 8008372:	4621      	mov	r1, r4
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff ff0b 	bl	8008190 <__multiply>
 800837a:	6020      	str	r0, [r4, #0]
 800837c:	f8c0 9000 	str.w	r9, [r0]
 8008380:	4604      	mov	r4, r0
 8008382:	e7e4      	b.n	800834e <__pow5mult+0x6a>
 8008384:	4638      	mov	r0, r7
 8008386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800838a:	bf00      	nop
 800838c:	0800c830 	.word	0x0800c830
 8008390:	0800c664 	.word	0x0800c664
 8008394:	0800c6e4 	.word	0x0800c6e4

08008398 <__lshift>:
 8008398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800839c:	460c      	mov	r4, r1
 800839e:	6849      	ldr	r1, [r1, #4]
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	4607      	mov	r7, r0
 80083aa:	4691      	mov	r9, r2
 80083ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083b0:	f108 0601 	add.w	r6, r8, #1
 80083b4:	42b3      	cmp	r3, r6
 80083b6:	db0b      	blt.n	80083d0 <__lshift+0x38>
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff fd93 	bl	8007ee4 <_Balloc>
 80083be:	4605      	mov	r5, r0
 80083c0:	b948      	cbnz	r0, 80083d6 <__lshift+0x3e>
 80083c2:	4602      	mov	r2, r0
 80083c4:	4b28      	ldr	r3, [pc, #160]	; (8008468 <__lshift+0xd0>)
 80083c6:	4829      	ldr	r0, [pc, #164]	; (800846c <__lshift+0xd4>)
 80083c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80083cc:	f001 febc 	bl	800a148 <__assert_func>
 80083d0:	3101      	adds	r1, #1
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	e7ee      	b.n	80083b4 <__lshift+0x1c>
 80083d6:	2300      	movs	r3, #0
 80083d8:	f100 0114 	add.w	r1, r0, #20
 80083dc:	f100 0210 	add.w	r2, r0, #16
 80083e0:	4618      	mov	r0, r3
 80083e2:	4553      	cmp	r3, sl
 80083e4:	db33      	blt.n	800844e <__lshift+0xb6>
 80083e6:	6920      	ldr	r0, [r4, #16]
 80083e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083ec:	f104 0314 	add.w	r3, r4, #20
 80083f0:	f019 091f 	ands.w	r9, r9, #31
 80083f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083fc:	d02b      	beq.n	8008456 <__lshift+0xbe>
 80083fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008402:	468a      	mov	sl, r1
 8008404:	2200      	movs	r2, #0
 8008406:	6818      	ldr	r0, [r3, #0]
 8008408:	fa00 f009 	lsl.w	r0, r0, r9
 800840c:	4310      	orrs	r0, r2
 800840e:	f84a 0b04 	str.w	r0, [sl], #4
 8008412:	f853 2b04 	ldr.w	r2, [r3], #4
 8008416:	459c      	cmp	ip, r3
 8008418:	fa22 f20e 	lsr.w	r2, r2, lr
 800841c:	d8f3      	bhi.n	8008406 <__lshift+0x6e>
 800841e:	ebac 0304 	sub.w	r3, ip, r4
 8008422:	3b15      	subs	r3, #21
 8008424:	f023 0303 	bic.w	r3, r3, #3
 8008428:	3304      	adds	r3, #4
 800842a:	f104 0015 	add.w	r0, r4, #21
 800842e:	4584      	cmp	ip, r0
 8008430:	bf38      	it	cc
 8008432:	2304      	movcc	r3, #4
 8008434:	50ca      	str	r2, [r1, r3]
 8008436:	b10a      	cbz	r2, 800843c <__lshift+0xa4>
 8008438:	f108 0602 	add.w	r6, r8, #2
 800843c:	3e01      	subs	r6, #1
 800843e:	4638      	mov	r0, r7
 8008440:	612e      	str	r6, [r5, #16]
 8008442:	4621      	mov	r1, r4
 8008444:	f7ff fd8e 	bl	8007f64 <_Bfree>
 8008448:	4628      	mov	r0, r5
 800844a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008452:	3301      	adds	r3, #1
 8008454:	e7c5      	b.n	80083e2 <__lshift+0x4a>
 8008456:	3904      	subs	r1, #4
 8008458:	f853 2b04 	ldr.w	r2, [r3], #4
 800845c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008460:	459c      	cmp	ip, r3
 8008462:	d8f9      	bhi.n	8008458 <__lshift+0xc0>
 8008464:	e7ea      	b.n	800843c <__lshift+0xa4>
 8008466:	bf00      	nop
 8008468:	0800c6d3 	.word	0x0800c6d3
 800846c:	0800c6e4 	.word	0x0800c6e4

08008470 <__mcmp>:
 8008470:	b530      	push	{r4, r5, lr}
 8008472:	6902      	ldr	r2, [r0, #16]
 8008474:	690c      	ldr	r4, [r1, #16]
 8008476:	1b12      	subs	r2, r2, r4
 8008478:	d10e      	bne.n	8008498 <__mcmp+0x28>
 800847a:	f100 0314 	add.w	r3, r0, #20
 800847e:	3114      	adds	r1, #20
 8008480:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008484:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008488:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800848c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008490:	42a5      	cmp	r5, r4
 8008492:	d003      	beq.n	800849c <__mcmp+0x2c>
 8008494:	d305      	bcc.n	80084a2 <__mcmp+0x32>
 8008496:	2201      	movs	r2, #1
 8008498:	4610      	mov	r0, r2
 800849a:	bd30      	pop	{r4, r5, pc}
 800849c:	4283      	cmp	r3, r0
 800849e:	d3f3      	bcc.n	8008488 <__mcmp+0x18>
 80084a0:	e7fa      	b.n	8008498 <__mcmp+0x28>
 80084a2:	f04f 32ff 	mov.w	r2, #4294967295
 80084a6:	e7f7      	b.n	8008498 <__mcmp+0x28>

080084a8 <__mdiff>:
 80084a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	460c      	mov	r4, r1
 80084ae:	4606      	mov	r6, r0
 80084b0:	4611      	mov	r1, r2
 80084b2:	4620      	mov	r0, r4
 80084b4:	4690      	mov	r8, r2
 80084b6:	f7ff ffdb 	bl	8008470 <__mcmp>
 80084ba:	1e05      	subs	r5, r0, #0
 80084bc:	d110      	bne.n	80084e0 <__mdiff+0x38>
 80084be:	4629      	mov	r1, r5
 80084c0:	4630      	mov	r0, r6
 80084c2:	f7ff fd0f 	bl	8007ee4 <_Balloc>
 80084c6:	b930      	cbnz	r0, 80084d6 <__mdiff+0x2e>
 80084c8:	4b3a      	ldr	r3, [pc, #232]	; (80085b4 <__mdiff+0x10c>)
 80084ca:	4602      	mov	r2, r0
 80084cc:	f240 2137 	movw	r1, #567	; 0x237
 80084d0:	4839      	ldr	r0, [pc, #228]	; (80085b8 <__mdiff+0x110>)
 80084d2:	f001 fe39 	bl	800a148 <__assert_func>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e0:	bfa4      	itt	ge
 80084e2:	4643      	movge	r3, r8
 80084e4:	46a0      	movge	r8, r4
 80084e6:	4630      	mov	r0, r6
 80084e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084ec:	bfa6      	itte	ge
 80084ee:	461c      	movge	r4, r3
 80084f0:	2500      	movge	r5, #0
 80084f2:	2501      	movlt	r5, #1
 80084f4:	f7ff fcf6 	bl	8007ee4 <_Balloc>
 80084f8:	b920      	cbnz	r0, 8008504 <__mdiff+0x5c>
 80084fa:	4b2e      	ldr	r3, [pc, #184]	; (80085b4 <__mdiff+0x10c>)
 80084fc:	4602      	mov	r2, r0
 80084fe:	f240 2145 	movw	r1, #581	; 0x245
 8008502:	e7e5      	b.n	80084d0 <__mdiff+0x28>
 8008504:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008508:	6926      	ldr	r6, [r4, #16]
 800850a:	60c5      	str	r5, [r0, #12]
 800850c:	f104 0914 	add.w	r9, r4, #20
 8008510:	f108 0514 	add.w	r5, r8, #20
 8008514:	f100 0e14 	add.w	lr, r0, #20
 8008518:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800851c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008520:	f108 0210 	add.w	r2, r8, #16
 8008524:	46f2      	mov	sl, lr
 8008526:	2100      	movs	r1, #0
 8008528:	f859 3b04 	ldr.w	r3, [r9], #4
 800852c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008530:	fa11 f88b 	uxtah	r8, r1, fp
 8008534:	b299      	uxth	r1, r3
 8008536:	0c1b      	lsrs	r3, r3, #16
 8008538:	eba8 0801 	sub.w	r8, r8, r1
 800853c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008540:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008544:	fa1f f888 	uxth.w	r8, r8
 8008548:	1419      	asrs	r1, r3, #16
 800854a:	454e      	cmp	r6, r9
 800854c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008550:	f84a 3b04 	str.w	r3, [sl], #4
 8008554:	d8e8      	bhi.n	8008528 <__mdiff+0x80>
 8008556:	1b33      	subs	r3, r6, r4
 8008558:	3b15      	subs	r3, #21
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	3304      	adds	r3, #4
 8008560:	3415      	adds	r4, #21
 8008562:	42a6      	cmp	r6, r4
 8008564:	bf38      	it	cc
 8008566:	2304      	movcc	r3, #4
 8008568:	441d      	add	r5, r3
 800856a:	4473      	add	r3, lr
 800856c:	469e      	mov	lr, r3
 800856e:	462e      	mov	r6, r5
 8008570:	4566      	cmp	r6, ip
 8008572:	d30e      	bcc.n	8008592 <__mdiff+0xea>
 8008574:	f10c 0203 	add.w	r2, ip, #3
 8008578:	1b52      	subs	r2, r2, r5
 800857a:	f022 0203 	bic.w	r2, r2, #3
 800857e:	3d03      	subs	r5, #3
 8008580:	45ac      	cmp	ip, r5
 8008582:	bf38      	it	cc
 8008584:	2200      	movcc	r2, #0
 8008586:	4413      	add	r3, r2
 8008588:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800858c:	b17a      	cbz	r2, 80085ae <__mdiff+0x106>
 800858e:	6107      	str	r7, [r0, #16]
 8008590:	e7a4      	b.n	80084dc <__mdiff+0x34>
 8008592:	f856 8b04 	ldr.w	r8, [r6], #4
 8008596:	fa11 f288 	uxtah	r2, r1, r8
 800859a:	1414      	asrs	r4, r2, #16
 800859c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085a0:	b292      	uxth	r2, r2
 80085a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085a6:	f84e 2b04 	str.w	r2, [lr], #4
 80085aa:	1421      	asrs	r1, r4, #16
 80085ac:	e7e0      	b.n	8008570 <__mdiff+0xc8>
 80085ae:	3f01      	subs	r7, #1
 80085b0:	e7ea      	b.n	8008588 <__mdiff+0xe0>
 80085b2:	bf00      	nop
 80085b4:	0800c6d3 	.word	0x0800c6d3
 80085b8:	0800c6e4 	.word	0x0800c6e4

080085bc <__ulp>:
 80085bc:	b082      	sub	sp, #8
 80085be:	ed8d 0b00 	vstr	d0, [sp]
 80085c2:	9a01      	ldr	r2, [sp, #4]
 80085c4:	4b0f      	ldr	r3, [pc, #60]	; (8008604 <__ulp+0x48>)
 80085c6:	4013      	ands	r3, r2
 80085c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	dc08      	bgt.n	80085e2 <__ulp+0x26>
 80085d0:	425b      	negs	r3, r3
 80085d2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80085d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80085da:	da04      	bge.n	80085e6 <__ulp+0x2a>
 80085dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80085e0:	4113      	asrs	r3, r2
 80085e2:	2200      	movs	r2, #0
 80085e4:	e008      	b.n	80085f8 <__ulp+0x3c>
 80085e6:	f1a2 0314 	sub.w	r3, r2, #20
 80085ea:	2b1e      	cmp	r3, #30
 80085ec:	bfda      	itte	le
 80085ee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80085f2:	40da      	lsrle	r2, r3
 80085f4:	2201      	movgt	r2, #1
 80085f6:	2300      	movs	r3, #0
 80085f8:	4619      	mov	r1, r3
 80085fa:	4610      	mov	r0, r2
 80085fc:	ec41 0b10 	vmov	d0, r0, r1
 8008600:	b002      	add	sp, #8
 8008602:	4770      	bx	lr
 8008604:	7ff00000 	.word	0x7ff00000

08008608 <__b2d>:
 8008608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860c:	6906      	ldr	r6, [r0, #16]
 800860e:	f100 0814 	add.w	r8, r0, #20
 8008612:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008616:	1f37      	subs	r7, r6, #4
 8008618:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800861c:	4610      	mov	r0, r2
 800861e:	f7ff fd53 	bl	80080c8 <__hi0bits>
 8008622:	f1c0 0320 	rsb	r3, r0, #32
 8008626:	280a      	cmp	r0, #10
 8008628:	600b      	str	r3, [r1, #0]
 800862a:	491b      	ldr	r1, [pc, #108]	; (8008698 <__b2d+0x90>)
 800862c:	dc15      	bgt.n	800865a <__b2d+0x52>
 800862e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008632:	fa22 f30c 	lsr.w	r3, r2, ip
 8008636:	45b8      	cmp	r8, r7
 8008638:	ea43 0501 	orr.w	r5, r3, r1
 800863c:	bf34      	ite	cc
 800863e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008642:	2300      	movcs	r3, #0
 8008644:	3015      	adds	r0, #21
 8008646:	fa02 f000 	lsl.w	r0, r2, r0
 800864a:	fa23 f30c 	lsr.w	r3, r3, ip
 800864e:	4303      	orrs	r3, r0
 8008650:	461c      	mov	r4, r3
 8008652:	ec45 4b10 	vmov	d0, r4, r5
 8008656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800865a:	45b8      	cmp	r8, r7
 800865c:	bf3a      	itte	cc
 800865e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008662:	f1a6 0708 	subcc.w	r7, r6, #8
 8008666:	2300      	movcs	r3, #0
 8008668:	380b      	subs	r0, #11
 800866a:	d012      	beq.n	8008692 <__b2d+0x8a>
 800866c:	f1c0 0120 	rsb	r1, r0, #32
 8008670:	fa23 f401 	lsr.w	r4, r3, r1
 8008674:	4082      	lsls	r2, r0
 8008676:	4322      	orrs	r2, r4
 8008678:	4547      	cmp	r7, r8
 800867a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800867e:	bf8c      	ite	hi
 8008680:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008684:	2200      	movls	r2, #0
 8008686:	4083      	lsls	r3, r0
 8008688:	40ca      	lsrs	r2, r1
 800868a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800868e:	4313      	orrs	r3, r2
 8008690:	e7de      	b.n	8008650 <__b2d+0x48>
 8008692:	ea42 0501 	orr.w	r5, r2, r1
 8008696:	e7db      	b.n	8008650 <__b2d+0x48>
 8008698:	3ff00000 	.word	0x3ff00000

0800869c <__d2b>:
 800869c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086a0:	460f      	mov	r7, r1
 80086a2:	2101      	movs	r1, #1
 80086a4:	ec59 8b10 	vmov	r8, r9, d0
 80086a8:	4616      	mov	r6, r2
 80086aa:	f7ff fc1b 	bl	8007ee4 <_Balloc>
 80086ae:	4604      	mov	r4, r0
 80086b0:	b930      	cbnz	r0, 80086c0 <__d2b+0x24>
 80086b2:	4602      	mov	r2, r0
 80086b4:	4b24      	ldr	r3, [pc, #144]	; (8008748 <__d2b+0xac>)
 80086b6:	4825      	ldr	r0, [pc, #148]	; (800874c <__d2b+0xb0>)
 80086b8:	f240 310f 	movw	r1, #783	; 0x30f
 80086bc:	f001 fd44 	bl	800a148 <__assert_func>
 80086c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086c8:	bb2d      	cbnz	r5, 8008716 <__d2b+0x7a>
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	f1b8 0300 	subs.w	r3, r8, #0
 80086d0:	d026      	beq.n	8008720 <__d2b+0x84>
 80086d2:	4668      	mov	r0, sp
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	f7ff fd17 	bl	8008108 <__lo0bits>
 80086da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086de:	b1e8      	cbz	r0, 800871c <__d2b+0x80>
 80086e0:	f1c0 0320 	rsb	r3, r0, #32
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	430b      	orrs	r3, r1
 80086ea:	40c2      	lsrs	r2, r0
 80086ec:	6163      	str	r3, [r4, #20]
 80086ee:	9201      	str	r2, [sp, #4]
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	61a3      	str	r3, [r4, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bf14      	ite	ne
 80086f8:	2202      	movne	r2, #2
 80086fa:	2201      	moveq	r2, #1
 80086fc:	6122      	str	r2, [r4, #16]
 80086fe:	b1bd      	cbz	r5, 8008730 <__d2b+0x94>
 8008700:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008704:	4405      	add	r5, r0
 8008706:	603d      	str	r5, [r7, #0]
 8008708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800870c:	6030      	str	r0, [r6, #0]
 800870e:	4620      	mov	r0, r4
 8008710:	b003      	add	sp, #12
 8008712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800871a:	e7d6      	b.n	80086ca <__d2b+0x2e>
 800871c:	6161      	str	r1, [r4, #20]
 800871e:	e7e7      	b.n	80086f0 <__d2b+0x54>
 8008720:	a801      	add	r0, sp, #4
 8008722:	f7ff fcf1 	bl	8008108 <__lo0bits>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	6163      	str	r3, [r4, #20]
 800872a:	3020      	adds	r0, #32
 800872c:	2201      	movs	r2, #1
 800872e:	e7e5      	b.n	80086fc <__d2b+0x60>
 8008730:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008734:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008738:	6038      	str	r0, [r7, #0]
 800873a:	6918      	ldr	r0, [r3, #16]
 800873c:	f7ff fcc4 	bl	80080c8 <__hi0bits>
 8008740:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008744:	e7e2      	b.n	800870c <__d2b+0x70>
 8008746:	bf00      	nop
 8008748:	0800c6d3 	.word	0x0800c6d3
 800874c:	0800c6e4 	.word	0x0800c6e4

08008750 <__ratio>:
 8008750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	4688      	mov	r8, r1
 8008756:	4669      	mov	r1, sp
 8008758:	4681      	mov	r9, r0
 800875a:	f7ff ff55 	bl	8008608 <__b2d>
 800875e:	a901      	add	r1, sp, #4
 8008760:	4640      	mov	r0, r8
 8008762:	ec55 4b10 	vmov	r4, r5, d0
 8008766:	f7ff ff4f 	bl	8008608 <__b2d>
 800876a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800876e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008772:	eba3 0c02 	sub.w	ip, r3, r2
 8008776:	e9dd 3200 	ldrd	r3, r2, [sp]
 800877a:	1a9b      	subs	r3, r3, r2
 800877c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008780:	ec51 0b10 	vmov	r0, r1, d0
 8008784:	2b00      	cmp	r3, #0
 8008786:	bfd6      	itet	le
 8008788:	460a      	movle	r2, r1
 800878a:	462a      	movgt	r2, r5
 800878c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008790:	468b      	mov	fp, r1
 8008792:	462f      	mov	r7, r5
 8008794:	bfd4      	ite	le
 8008796:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800879a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800879e:	4620      	mov	r0, r4
 80087a0:	ee10 2a10 	vmov	r2, s0
 80087a4:	465b      	mov	r3, fp
 80087a6:	4639      	mov	r1, r7
 80087a8:	f7f8 f868 	bl	800087c <__aeabi_ddiv>
 80087ac:	ec41 0b10 	vmov	d0, r0, r1
 80087b0:	b003      	add	sp, #12
 80087b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087b6 <__copybits>:
 80087b6:	3901      	subs	r1, #1
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	1149      	asrs	r1, r1, #5
 80087bc:	6914      	ldr	r4, [r2, #16]
 80087be:	3101      	adds	r1, #1
 80087c0:	f102 0314 	add.w	r3, r2, #20
 80087c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087cc:	1f05      	subs	r5, r0, #4
 80087ce:	42a3      	cmp	r3, r4
 80087d0:	d30c      	bcc.n	80087ec <__copybits+0x36>
 80087d2:	1aa3      	subs	r3, r4, r2
 80087d4:	3b11      	subs	r3, #17
 80087d6:	f023 0303 	bic.w	r3, r3, #3
 80087da:	3211      	adds	r2, #17
 80087dc:	42a2      	cmp	r2, r4
 80087de:	bf88      	it	hi
 80087e0:	2300      	movhi	r3, #0
 80087e2:	4418      	add	r0, r3
 80087e4:	2300      	movs	r3, #0
 80087e6:	4288      	cmp	r0, r1
 80087e8:	d305      	bcc.n	80087f6 <__copybits+0x40>
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80087f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80087f4:	e7eb      	b.n	80087ce <__copybits+0x18>
 80087f6:	f840 3b04 	str.w	r3, [r0], #4
 80087fa:	e7f4      	b.n	80087e6 <__copybits+0x30>

080087fc <__any_on>:
 80087fc:	f100 0214 	add.w	r2, r0, #20
 8008800:	6900      	ldr	r0, [r0, #16]
 8008802:	114b      	asrs	r3, r1, #5
 8008804:	4298      	cmp	r0, r3
 8008806:	b510      	push	{r4, lr}
 8008808:	db11      	blt.n	800882e <__any_on+0x32>
 800880a:	dd0a      	ble.n	8008822 <__any_on+0x26>
 800880c:	f011 011f 	ands.w	r1, r1, #31
 8008810:	d007      	beq.n	8008822 <__any_on+0x26>
 8008812:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008816:	fa24 f001 	lsr.w	r0, r4, r1
 800881a:	fa00 f101 	lsl.w	r1, r0, r1
 800881e:	428c      	cmp	r4, r1
 8008820:	d10b      	bne.n	800883a <__any_on+0x3e>
 8008822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008826:	4293      	cmp	r3, r2
 8008828:	d803      	bhi.n	8008832 <__any_on+0x36>
 800882a:	2000      	movs	r0, #0
 800882c:	bd10      	pop	{r4, pc}
 800882e:	4603      	mov	r3, r0
 8008830:	e7f7      	b.n	8008822 <__any_on+0x26>
 8008832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008836:	2900      	cmp	r1, #0
 8008838:	d0f5      	beq.n	8008826 <__any_on+0x2a>
 800883a:	2001      	movs	r0, #1
 800883c:	e7f6      	b.n	800882c <__any_on+0x30>

0800883e <sulp>:
 800883e:	b570      	push	{r4, r5, r6, lr}
 8008840:	4604      	mov	r4, r0
 8008842:	460d      	mov	r5, r1
 8008844:	ec45 4b10 	vmov	d0, r4, r5
 8008848:	4616      	mov	r6, r2
 800884a:	f7ff feb7 	bl	80085bc <__ulp>
 800884e:	ec51 0b10 	vmov	r0, r1, d0
 8008852:	b17e      	cbz	r6, 8008874 <sulp+0x36>
 8008854:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008858:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd09      	ble.n	8008874 <sulp+0x36>
 8008860:	051b      	lsls	r3, r3, #20
 8008862:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008866:	2400      	movs	r4, #0
 8008868:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800886c:	4622      	mov	r2, r4
 800886e:	462b      	mov	r3, r5
 8008870:	f7f7 feda 	bl	8000628 <__aeabi_dmul>
 8008874:	bd70      	pop	{r4, r5, r6, pc}
	...

08008878 <_strtod_l>:
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	ed2d 8b02 	vpush	{d8}
 8008880:	b09b      	sub	sp, #108	; 0x6c
 8008882:	4604      	mov	r4, r0
 8008884:	9213      	str	r2, [sp, #76]	; 0x4c
 8008886:	2200      	movs	r2, #0
 8008888:	9216      	str	r2, [sp, #88]	; 0x58
 800888a:	460d      	mov	r5, r1
 800888c:	f04f 0800 	mov.w	r8, #0
 8008890:	f04f 0900 	mov.w	r9, #0
 8008894:	460a      	mov	r2, r1
 8008896:	9215      	str	r2, [sp, #84]	; 0x54
 8008898:	7811      	ldrb	r1, [r2, #0]
 800889a:	292b      	cmp	r1, #43	; 0x2b
 800889c:	d04c      	beq.n	8008938 <_strtod_l+0xc0>
 800889e:	d83a      	bhi.n	8008916 <_strtod_l+0x9e>
 80088a0:	290d      	cmp	r1, #13
 80088a2:	d834      	bhi.n	800890e <_strtod_l+0x96>
 80088a4:	2908      	cmp	r1, #8
 80088a6:	d834      	bhi.n	8008912 <_strtod_l+0x9a>
 80088a8:	2900      	cmp	r1, #0
 80088aa:	d03d      	beq.n	8008928 <_strtod_l+0xb0>
 80088ac:	2200      	movs	r2, #0
 80088ae:	920a      	str	r2, [sp, #40]	; 0x28
 80088b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80088b2:	7832      	ldrb	r2, [r6, #0]
 80088b4:	2a30      	cmp	r2, #48	; 0x30
 80088b6:	f040 80b4 	bne.w	8008a22 <_strtod_l+0x1aa>
 80088ba:	7872      	ldrb	r2, [r6, #1]
 80088bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80088c0:	2a58      	cmp	r2, #88	; 0x58
 80088c2:	d170      	bne.n	80089a6 <_strtod_l+0x12e>
 80088c4:	9302      	str	r3, [sp, #8]
 80088c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	ab16      	add	r3, sp, #88	; 0x58
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	4a8e      	ldr	r2, [pc, #568]	; (8008b08 <_strtod_l+0x290>)
 80088d0:	ab17      	add	r3, sp, #92	; 0x5c
 80088d2:	a915      	add	r1, sp, #84	; 0x54
 80088d4:	4620      	mov	r0, r4
 80088d6:	f001 fcd3 	bl	800a280 <__gethex>
 80088da:	f010 070f 	ands.w	r7, r0, #15
 80088de:	4605      	mov	r5, r0
 80088e0:	d005      	beq.n	80088ee <_strtod_l+0x76>
 80088e2:	2f06      	cmp	r7, #6
 80088e4:	d12a      	bne.n	800893c <_strtod_l+0xc4>
 80088e6:	3601      	adds	r6, #1
 80088e8:	2300      	movs	r3, #0
 80088ea:	9615      	str	r6, [sp, #84]	; 0x54
 80088ec:	930a      	str	r3, [sp, #40]	; 0x28
 80088ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f040 857f 	bne.w	80093f4 <_strtod_l+0xb7c>
 80088f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f8:	b1db      	cbz	r3, 8008932 <_strtod_l+0xba>
 80088fa:	4642      	mov	r2, r8
 80088fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008900:	ec43 2b10 	vmov	d0, r2, r3
 8008904:	b01b      	add	sp, #108	; 0x6c
 8008906:	ecbd 8b02 	vpop	{d8}
 800890a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890e:	2920      	cmp	r1, #32
 8008910:	d1cc      	bne.n	80088ac <_strtod_l+0x34>
 8008912:	3201      	adds	r2, #1
 8008914:	e7bf      	b.n	8008896 <_strtod_l+0x1e>
 8008916:	292d      	cmp	r1, #45	; 0x2d
 8008918:	d1c8      	bne.n	80088ac <_strtod_l+0x34>
 800891a:	2101      	movs	r1, #1
 800891c:	910a      	str	r1, [sp, #40]	; 0x28
 800891e:	1c51      	adds	r1, r2, #1
 8008920:	9115      	str	r1, [sp, #84]	; 0x54
 8008922:	7852      	ldrb	r2, [r2, #1]
 8008924:	2a00      	cmp	r2, #0
 8008926:	d1c3      	bne.n	80088b0 <_strtod_l+0x38>
 8008928:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800892a:	9515      	str	r5, [sp, #84]	; 0x54
 800892c:	2b00      	cmp	r3, #0
 800892e:	f040 855f 	bne.w	80093f0 <_strtod_l+0xb78>
 8008932:	4642      	mov	r2, r8
 8008934:	464b      	mov	r3, r9
 8008936:	e7e3      	b.n	8008900 <_strtod_l+0x88>
 8008938:	2100      	movs	r1, #0
 800893a:	e7ef      	b.n	800891c <_strtod_l+0xa4>
 800893c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800893e:	b13a      	cbz	r2, 8008950 <_strtod_l+0xd8>
 8008940:	2135      	movs	r1, #53	; 0x35
 8008942:	a818      	add	r0, sp, #96	; 0x60
 8008944:	f7ff ff37 	bl	80087b6 <__copybits>
 8008948:	9916      	ldr	r1, [sp, #88]	; 0x58
 800894a:	4620      	mov	r0, r4
 800894c:	f7ff fb0a 	bl	8007f64 <_Bfree>
 8008950:	3f01      	subs	r7, #1
 8008952:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008954:	2f04      	cmp	r7, #4
 8008956:	d806      	bhi.n	8008966 <_strtod_l+0xee>
 8008958:	e8df f007 	tbb	[pc, r7]
 800895c:	201d0314 	.word	0x201d0314
 8008960:	14          	.byte	0x14
 8008961:	00          	.byte	0x00
 8008962:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008966:	05e9      	lsls	r1, r5, #23
 8008968:	bf48      	it	mi
 800896a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800896e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008972:	0d1b      	lsrs	r3, r3, #20
 8008974:	051b      	lsls	r3, r3, #20
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1b9      	bne.n	80088ee <_strtod_l+0x76>
 800897a:	f7fe fafd 	bl	8006f78 <__errno>
 800897e:	2322      	movs	r3, #34	; 0x22
 8008980:	6003      	str	r3, [r0, #0]
 8008982:	e7b4      	b.n	80088ee <_strtod_l+0x76>
 8008984:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008988:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800898c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008990:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008994:	e7e7      	b.n	8008966 <_strtod_l+0xee>
 8008996:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008b10 <_strtod_l+0x298>
 800899a:	e7e4      	b.n	8008966 <_strtod_l+0xee>
 800899c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80089a0:	f04f 38ff 	mov.w	r8, #4294967295
 80089a4:	e7df      	b.n	8008966 <_strtod_l+0xee>
 80089a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	9215      	str	r2, [sp, #84]	; 0x54
 80089ac:	785b      	ldrb	r3, [r3, #1]
 80089ae:	2b30      	cmp	r3, #48	; 0x30
 80089b0:	d0f9      	beq.n	80089a6 <_strtod_l+0x12e>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d09b      	beq.n	80088ee <_strtod_l+0x76>
 80089b6:	2301      	movs	r3, #1
 80089b8:	f04f 0a00 	mov.w	sl, #0
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80089c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80089c6:	46d3      	mov	fp, sl
 80089c8:	220a      	movs	r2, #10
 80089ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 80089cc:	7806      	ldrb	r6, [r0, #0]
 80089ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80089d2:	b2d9      	uxtb	r1, r3
 80089d4:	2909      	cmp	r1, #9
 80089d6:	d926      	bls.n	8008a26 <_strtod_l+0x1ae>
 80089d8:	494c      	ldr	r1, [pc, #304]	; (8008b0c <_strtod_l+0x294>)
 80089da:	2201      	movs	r2, #1
 80089dc:	f001 fb79 	bl	800a0d2 <strncmp>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d030      	beq.n	8008a46 <_strtod_l+0x1ce>
 80089e4:	2000      	movs	r0, #0
 80089e6:	4632      	mov	r2, r6
 80089e8:	9005      	str	r0, [sp, #20]
 80089ea:	465e      	mov	r6, fp
 80089ec:	4603      	mov	r3, r0
 80089ee:	2a65      	cmp	r2, #101	; 0x65
 80089f0:	d001      	beq.n	80089f6 <_strtod_l+0x17e>
 80089f2:	2a45      	cmp	r2, #69	; 0x45
 80089f4:	d113      	bne.n	8008a1e <_strtod_l+0x1a6>
 80089f6:	b91e      	cbnz	r6, 8008a00 <_strtod_l+0x188>
 80089f8:	9a04      	ldr	r2, [sp, #16]
 80089fa:	4302      	orrs	r2, r0
 80089fc:	d094      	beq.n	8008928 <_strtod_l+0xb0>
 80089fe:	2600      	movs	r6, #0
 8008a00:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008a02:	1c6a      	adds	r2, r5, #1
 8008a04:	9215      	str	r2, [sp, #84]	; 0x54
 8008a06:	786a      	ldrb	r2, [r5, #1]
 8008a08:	2a2b      	cmp	r2, #43	; 0x2b
 8008a0a:	d074      	beq.n	8008af6 <_strtod_l+0x27e>
 8008a0c:	2a2d      	cmp	r2, #45	; 0x2d
 8008a0e:	d078      	beq.n	8008b02 <_strtod_l+0x28a>
 8008a10:	f04f 0c00 	mov.w	ip, #0
 8008a14:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008a18:	2909      	cmp	r1, #9
 8008a1a:	d97f      	bls.n	8008b1c <_strtod_l+0x2a4>
 8008a1c:	9515      	str	r5, [sp, #84]	; 0x54
 8008a1e:	2700      	movs	r7, #0
 8008a20:	e09e      	b.n	8008b60 <_strtod_l+0x2e8>
 8008a22:	2300      	movs	r3, #0
 8008a24:	e7c8      	b.n	80089b8 <_strtod_l+0x140>
 8008a26:	f1bb 0f08 	cmp.w	fp, #8
 8008a2a:	bfd8      	it	le
 8008a2c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008a2e:	f100 0001 	add.w	r0, r0, #1
 8008a32:	bfda      	itte	le
 8008a34:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a38:	9309      	strle	r3, [sp, #36]	; 0x24
 8008a3a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008a3e:	f10b 0b01 	add.w	fp, fp, #1
 8008a42:	9015      	str	r0, [sp, #84]	; 0x54
 8008a44:	e7c1      	b.n	80089ca <_strtod_l+0x152>
 8008a46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	9215      	str	r2, [sp, #84]	; 0x54
 8008a4c:	785a      	ldrb	r2, [r3, #1]
 8008a4e:	f1bb 0f00 	cmp.w	fp, #0
 8008a52:	d037      	beq.n	8008ac4 <_strtod_l+0x24c>
 8008a54:	9005      	str	r0, [sp, #20]
 8008a56:	465e      	mov	r6, fp
 8008a58:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008a5c:	2b09      	cmp	r3, #9
 8008a5e:	d912      	bls.n	8008a86 <_strtod_l+0x20e>
 8008a60:	2301      	movs	r3, #1
 8008a62:	e7c4      	b.n	80089ee <_strtod_l+0x176>
 8008a64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	9215      	str	r2, [sp, #84]	; 0x54
 8008a6a:	785a      	ldrb	r2, [r3, #1]
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	2a30      	cmp	r2, #48	; 0x30
 8008a70:	d0f8      	beq.n	8008a64 <_strtod_l+0x1ec>
 8008a72:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008a76:	2b08      	cmp	r3, #8
 8008a78:	f200 84c1 	bhi.w	80093fe <_strtod_l+0xb86>
 8008a7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a7e:	9005      	str	r0, [sp, #20]
 8008a80:	2000      	movs	r0, #0
 8008a82:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a84:	4606      	mov	r6, r0
 8008a86:	3a30      	subs	r2, #48	; 0x30
 8008a88:	f100 0301 	add.w	r3, r0, #1
 8008a8c:	d014      	beq.n	8008ab8 <_strtod_l+0x240>
 8008a8e:	9905      	ldr	r1, [sp, #20]
 8008a90:	4419      	add	r1, r3
 8008a92:	9105      	str	r1, [sp, #20]
 8008a94:	4633      	mov	r3, r6
 8008a96:	eb00 0c06 	add.w	ip, r0, r6
 8008a9a:	210a      	movs	r1, #10
 8008a9c:	4563      	cmp	r3, ip
 8008a9e:	d113      	bne.n	8008ac8 <_strtod_l+0x250>
 8008aa0:	1833      	adds	r3, r6, r0
 8008aa2:	2b08      	cmp	r3, #8
 8008aa4:	f106 0601 	add.w	r6, r6, #1
 8008aa8:	4406      	add	r6, r0
 8008aaa:	dc1a      	bgt.n	8008ae2 <_strtod_l+0x26a>
 8008aac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aae:	230a      	movs	r3, #10
 8008ab0:	fb03 2301 	mla	r3, r3, r1, r2
 8008ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008aba:	1c51      	adds	r1, r2, #1
 8008abc:	9115      	str	r1, [sp, #84]	; 0x54
 8008abe:	7852      	ldrb	r2, [r2, #1]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	e7c9      	b.n	8008a58 <_strtod_l+0x1e0>
 8008ac4:	4658      	mov	r0, fp
 8008ac6:	e7d2      	b.n	8008a6e <_strtod_l+0x1f6>
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	f103 0301 	add.w	r3, r3, #1
 8008ace:	dc03      	bgt.n	8008ad8 <_strtod_l+0x260>
 8008ad0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ad2:	434f      	muls	r7, r1
 8008ad4:	9709      	str	r7, [sp, #36]	; 0x24
 8008ad6:	e7e1      	b.n	8008a9c <_strtod_l+0x224>
 8008ad8:	2b10      	cmp	r3, #16
 8008ada:	bfd8      	it	le
 8008adc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008ae0:	e7dc      	b.n	8008a9c <_strtod_l+0x224>
 8008ae2:	2e10      	cmp	r6, #16
 8008ae4:	bfdc      	itt	le
 8008ae6:	230a      	movle	r3, #10
 8008ae8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008aec:	e7e3      	b.n	8008ab6 <_strtod_l+0x23e>
 8008aee:	2300      	movs	r3, #0
 8008af0:	9305      	str	r3, [sp, #20]
 8008af2:	2301      	movs	r3, #1
 8008af4:	e780      	b.n	80089f8 <_strtod_l+0x180>
 8008af6:	f04f 0c00 	mov.w	ip, #0
 8008afa:	1caa      	adds	r2, r5, #2
 8008afc:	9215      	str	r2, [sp, #84]	; 0x54
 8008afe:	78aa      	ldrb	r2, [r5, #2]
 8008b00:	e788      	b.n	8008a14 <_strtod_l+0x19c>
 8008b02:	f04f 0c01 	mov.w	ip, #1
 8008b06:	e7f8      	b.n	8008afa <_strtod_l+0x282>
 8008b08:	0800c840 	.word	0x0800c840
 8008b0c:	0800c83c 	.word	0x0800c83c
 8008b10:	7ff00000 	.word	0x7ff00000
 8008b14:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b16:	1c51      	adds	r1, r2, #1
 8008b18:	9115      	str	r1, [sp, #84]	; 0x54
 8008b1a:	7852      	ldrb	r2, [r2, #1]
 8008b1c:	2a30      	cmp	r2, #48	; 0x30
 8008b1e:	d0f9      	beq.n	8008b14 <_strtod_l+0x29c>
 8008b20:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008b24:	2908      	cmp	r1, #8
 8008b26:	f63f af7a 	bhi.w	8008a1e <_strtod_l+0x1a6>
 8008b2a:	3a30      	subs	r2, #48	; 0x30
 8008b2c:	9208      	str	r2, [sp, #32]
 8008b2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b30:	920c      	str	r2, [sp, #48]	; 0x30
 8008b32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b34:	1c57      	adds	r7, r2, #1
 8008b36:	9715      	str	r7, [sp, #84]	; 0x54
 8008b38:	7852      	ldrb	r2, [r2, #1]
 8008b3a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008b3e:	f1be 0f09 	cmp.w	lr, #9
 8008b42:	d938      	bls.n	8008bb6 <_strtod_l+0x33e>
 8008b44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b46:	1a7f      	subs	r7, r7, r1
 8008b48:	2f08      	cmp	r7, #8
 8008b4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008b4e:	dc03      	bgt.n	8008b58 <_strtod_l+0x2e0>
 8008b50:	9908      	ldr	r1, [sp, #32]
 8008b52:	428f      	cmp	r7, r1
 8008b54:	bfa8      	it	ge
 8008b56:	460f      	movge	r7, r1
 8008b58:	f1bc 0f00 	cmp.w	ip, #0
 8008b5c:	d000      	beq.n	8008b60 <_strtod_l+0x2e8>
 8008b5e:	427f      	negs	r7, r7
 8008b60:	2e00      	cmp	r6, #0
 8008b62:	d14f      	bne.n	8008c04 <_strtod_l+0x38c>
 8008b64:	9904      	ldr	r1, [sp, #16]
 8008b66:	4301      	orrs	r1, r0
 8008b68:	f47f aec1 	bne.w	80088ee <_strtod_l+0x76>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f47f aedb 	bne.w	8008928 <_strtod_l+0xb0>
 8008b72:	2a69      	cmp	r2, #105	; 0x69
 8008b74:	d029      	beq.n	8008bca <_strtod_l+0x352>
 8008b76:	dc26      	bgt.n	8008bc6 <_strtod_l+0x34e>
 8008b78:	2a49      	cmp	r2, #73	; 0x49
 8008b7a:	d026      	beq.n	8008bca <_strtod_l+0x352>
 8008b7c:	2a4e      	cmp	r2, #78	; 0x4e
 8008b7e:	f47f aed3 	bne.w	8008928 <_strtod_l+0xb0>
 8008b82:	499b      	ldr	r1, [pc, #620]	; (8008df0 <_strtod_l+0x578>)
 8008b84:	a815      	add	r0, sp, #84	; 0x54
 8008b86:	f001 fdbb 	bl	800a700 <__match>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	f43f aecc 	beq.w	8008928 <_strtod_l+0xb0>
 8008b90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	2b28      	cmp	r3, #40	; 0x28
 8008b96:	d12f      	bne.n	8008bf8 <_strtod_l+0x380>
 8008b98:	4996      	ldr	r1, [pc, #600]	; (8008df4 <_strtod_l+0x57c>)
 8008b9a:	aa18      	add	r2, sp, #96	; 0x60
 8008b9c:	a815      	add	r0, sp, #84	; 0x54
 8008b9e:	f001 fdc3 	bl	800a728 <__hexnan>
 8008ba2:	2805      	cmp	r0, #5
 8008ba4:	d128      	bne.n	8008bf8 <_strtod_l+0x380>
 8008ba6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ba8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008bac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008bb0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008bb4:	e69b      	b.n	80088ee <_strtod_l+0x76>
 8008bb6:	9f08      	ldr	r7, [sp, #32]
 8008bb8:	210a      	movs	r1, #10
 8008bba:	fb01 2107 	mla	r1, r1, r7, r2
 8008bbe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008bc2:	9208      	str	r2, [sp, #32]
 8008bc4:	e7b5      	b.n	8008b32 <_strtod_l+0x2ba>
 8008bc6:	2a6e      	cmp	r2, #110	; 0x6e
 8008bc8:	e7d9      	b.n	8008b7e <_strtod_l+0x306>
 8008bca:	498b      	ldr	r1, [pc, #556]	; (8008df8 <_strtod_l+0x580>)
 8008bcc:	a815      	add	r0, sp, #84	; 0x54
 8008bce:	f001 fd97 	bl	800a700 <__match>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	f43f aea8 	beq.w	8008928 <_strtod_l+0xb0>
 8008bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bda:	4988      	ldr	r1, [pc, #544]	; (8008dfc <_strtod_l+0x584>)
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	a815      	add	r0, sp, #84	; 0x54
 8008be0:	9315      	str	r3, [sp, #84]	; 0x54
 8008be2:	f001 fd8d 	bl	800a700 <__match>
 8008be6:	b910      	cbnz	r0, 8008bee <_strtod_l+0x376>
 8008be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bea:	3301      	adds	r3, #1
 8008bec:	9315      	str	r3, [sp, #84]	; 0x54
 8008bee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008e0c <_strtod_l+0x594>
 8008bf2:	f04f 0800 	mov.w	r8, #0
 8008bf6:	e67a      	b.n	80088ee <_strtod_l+0x76>
 8008bf8:	4881      	ldr	r0, [pc, #516]	; (8008e00 <_strtod_l+0x588>)
 8008bfa:	f001 fa9d 	bl	800a138 <nan>
 8008bfe:	ec59 8b10 	vmov	r8, r9, d0
 8008c02:	e674      	b.n	80088ee <_strtod_l+0x76>
 8008c04:	9b05      	ldr	r3, [sp, #20]
 8008c06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c08:	1afb      	subs	r3, r7, r3
 8008c0a:	f1bb 0f00 	cmp.w	fp, #0
 8008c0e:	bf08      	it	eq
 8008c10:	46b3      	moveq	fp, r6
 8008c12:	2e10      	cmp	r6, #16
 8008c14:	9308      	str	r3, [sp, #32]
 8008c16:	4635      	mov	r5, r6
 8008c18:	bfa8      	it	ge
 8008c1a:	2510      	movge	r5, #16
 8008c1c:	f7f7 fc8a 	bl	8000534 <__aeabi_ui2d>
 8008c20:	2e09      	cmp	r6, #9
 8008c22:	4680      	mov	r8, r0
 8008c24:	4689      	mov	r9, r1
 8008c26:	dd13      	ble.n	8008c50 <_strtod_l+0x3d8>
 8008c28:	4b76      	ldr	r3, [pc, #472]	; (8008e04 <_strtod_l+0x58c>)
 8008c2a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008c32:	f7f7 fcf9 	bl	8000628 <__aeabi_dmul>
 8008c36:	4680      	mov	r8, r0
 8008c38:	4650      	mov	r0, sl
 8008c3a:	4689      	mov	r9, r1
 8008c3c:	f7f7 fc7a 	bl	8000534 <__aeabi_ui2d>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4640      	mov	r0, r8
 8008c46:	4649      	mov	r1, r9
 8008c48:	f7f7 fb38 	bl	80002bc <__adddf3>
 8008c4c:	4680      	mov	r8, r0
 8008c4e:	4689      	mov	r9, r1
 8008c50:	2e0f      	cmp	r6, #15
 8008c52:	dc38      	bgt.n	8008cc6 <_strtod_l+0x44e>
 8008c54:	9b08      	ldr	r3, [sp, #32]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f43f ae49 	beq.w	80088ee <_strtod_l+0x76>
 8008c5c:	dd24      	ble.n	8008ca8 <_strtod_l+0x430>
 8008c5e:	2b16      	cmp	r3, #22
 8008c60:	dc0b      	bgt.n	8008c7a <_strtod_l+0x402>
 8008c62:	4968      	ldr	r1, [pc, #416]	; (8008e04 <_strtod_l+0x58c>)
 8008c64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c6c:	4642      	mov	r2, r8
 8008c6e:	464b      	mov	r3, r9
 8008c70:	f7f7 fcda 	bl	8000628 <__aeabi_dmul>
 8008c74:	4680      	mov	r8, r0
 8008c76:	4689      	mov	r9, r1
 8008c78:	e639      	b.n	80088ee <_strtod_l+0x76>
 8008c7a:	9a08      	ldr	r2, [sp, #32]
 8008c7c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008c80:	4293      	cmp	r3, r2
 8008c82:	db20      	blt.n	8008cc6 <_strtod_l+0x44e>
 8008c84:	4c5f      	ldr	r4, [pc, #380]	; (8008e04 <_strtod_l+0x58c>)
 8008c86:	f1c6 060f 	rsb	r6, r6, #15
 8008c8a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008c8e:	4642      	mov	r2, r8
 8008c90:	464b      	mov	r3, r9
 8008c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c96:	f7f7 fcc7 	bl	8000628 <__aeabi_dmul>
 8008c9a:	9b08      	ldr	r3, [sp, #32]
 8008c9c:	1b9e      	subs	r6, r3, r6
 8008c9e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008ca2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ca6:	e7e3      	b.n	8008c70 <_strtod_l+0x3f8>
 8008ca8:	9b08      	ldr	r3, [sp, #32]
 8008caa:	3316      	adds	r3, #22
 8008cac:	db0b      	blt.n	8008cc6 <_strtod_l+0x44e>
 8008cae:	9b05      	ldr	r3, [sp, #20]
 8008cb0:	1bdf      	subs	r7, r3, r7
 8008cb2:	4b54      	ldr	r3, [pc, #336]	; (8008e04 <_strtod_l+0x58c>)
 8008cb4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	4649      	mov	r1, r9
 8008cc0:	f7f7 fddc 	bl	800087c <__aeabi_ddiv>
 8008cc4:	e7d6      	b.n	8008c74 <_strtod_l+0x3fc>
 8008cc6:	9b08      	ldr	r3, [sp, #32]
 8008cc8:	1b75      	subs	r5, r6, r5
 8008cca:	441d      	add	r5, r3
 8008ccc:	2d00      	cmp	r5, #0
 8008cce:	dd70      	ble.n	8008db2 <_strtod_l+0x53a>
 8008cd0:	f015 030f 	ands.w	r3, r5, #15
 8008cd4:	d00a      	beq.n	8008cec <_strtod_l+0x474>
 8008cd6:	494b      	ldr	r1, [pc, #300]	; (8008e04 <_strtod_l+0x58c>)
 8008cd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cdc:	4642      	mov	r2, r8
 8008cde:	464b      	mov	r3, r9
 8008ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce4:	f7f7 fca0 	bl	8000628 <__aeabi_dmul>
 8008ce8:	4680      	mov	r8, r0
 8008cea:	4689      	mov	r9, r1
 8008cec:	f035 050f 	bics.w	r5, r5, #15
 8008cf0:	d04d      	beq.n	8008d8e <_strtod_l+0x516>
 8008cf2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008cf6:	dd22      	ble.n	8008d3e <_strtod_l+0x4c6>
 8008cf8:	2500      	movs	r5, #0
 8008cfa:	46ab      	mov	fp, r5
 8008cfc:	9509      	str	r5, [sp, #36]	; 0x24
 8008cfe:	9505      	str	r5, [sp, #20]
 8008d00:	2322      	movs	r3, #34	; 0x22
 8008d02:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008e0c <_strtod_l+0x594>
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	f04f 0800 	mov.w	r8, #0
 8008d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f43f aded 	beq.w	80088ee <_strtod_l+0x76>
 8008d14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d16:	4620      	mov	r0, r4
 8008d18:	f7ff f924 	bl	8007f64 <_Bfree>
 8008d1c:	9905      	ldr	r1, [sp, #20]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f7ff f920 	bl	8007f64 <_Bfree>
 8008d24:	4659      	mov	r1, fp
 8008d26:	4620      	mov	r0, r4
 8008d28:	f7ff f91c 	bl	8007f64 <_Bfree>
 8008d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff f918 	bl	8007f64 <_Bfree>
 8008d34:	4629      	mov	r1, r5
 8008d36:	4620      	mov	r0, r4
 8008d38:	f7ff f914 	bl	8007f64 <_Bfree>
 8008d3c:	e5d7      	b.n	80088ee <_strtod_l+0x76>
 8008d3e:	4b32      	ldr	r3, [pc, #200]	; (8008e08 <_strtod_l+0x590>)
 8008d40:	9304      	str	r3, [sp, #16]
 8008d42:	2300      	movs	r3, #0
 8008d44:	112d      	asrs	r5, r5, #4
 8008d46:	4640      	mov	r0, r8
 8008d48:	4649      	mov	r1, r9
 8008d4a:	469a      	mov	sl, r3
 8008d4c:	2d01      	cmp	r5, #1
 8008d4e:	dc21      	bgt.n	8008d94 <_strtod_l+0x51c>
 8008d50:	b10b      	cbz	r3, 8008d56 <_strtod_l+0x4de>
 8008d52:	4680      	mov	r8, r0
 8008d54:	4689      	mov	r9, r1
 8008d56:	492c      	ldr	r1, [pc, #176]	; (8008e08 <_strtod_l+0x590>)
 8008d58:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008d5c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008d60:	4642      	mov	r2, r8
 8008d62:	464b      	mov	r3, r9
 8008d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d68:	f7f7 fc5e 	bl	8000628 <__aeabi_dmul>
 8008d6c:	4b27      	ldr	r3, [pc, #156]	; (8008e0c <_strtod_l+0x594>)
 8008d6e:	460a      	mov	r2, r1
 8008d70:	400b      	ands	r3, r1
 8008d72:	4927      	ldr	r1, [pc, #156]	; (8008e10 <_strtod_l+0x598>)
 8008d74:	428b      	cmp	r3, r1
 8008d76:	4680      	mov	r8, r0
 8008d78:	d8be      	bhi.n	8008cf8 <_strtod_l+0x480>
 8008d7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008d7e:	428b      	cmp	r3, r1
 8008d80:	bf86      	itte	hi
 8008d82:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008e14 <_strtod_l+0x59c>
 8008d86:	f04f 38ff 	movhi.w	r8, #4294967295
 8008d8a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9304      	str	r3, [sp, #16]
 8008d92:	e07b      	b.n	8008e8c <_strtod_l+0x614>
 8008d94:	07ea      	lsls	r2, r5, #31
 8008d96:	d505      	bpl.n	8008da4 <_strtod_l+0x52c>
 8008d98:	9b04      	ldr	r3, [sp, #16]
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7f7 fc43 	bl	8000628 <__aeabi_dmul>
 8008da2:	2301      	movs	r3, #1
 8008da4:	9a04      	ldr	r2, [sp, #16]
 8008da6:	3208      	adds	r2, #8
 8008da8:	f10a 0a01 	add.w	sl, sl, #1
 8008dac:	106d      	asrs	r5, r5, #1
 8008dae:	9204      	str	r2, [sp, #16]
 8008db0:	e7cc      	b.n	8008d4c <_strtod_l+0x4d4>
 8008db2:	d0ec      	beq.n	8008d8e <_strtod_l+0x516>
 8008db4:	426d      	negs	r5, r5
 8008db6:	f015 020f 	ands.w	r2, r5, #15
 8008dba:	d00a      	beq.n	8008dd2 <_strtod_l+0x55a>
 8008dbc:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <_strtod_l+0x58c>)
 8008dbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	f7f7 fd57 	bl	800087c <__aeabi_ddiv>
 8008dce:	4680      	mov	r8, r0
 8008dd0:	4689      	mov	r9, r1
 8008dd2:	112d      	asrs	r5, r5, #4
 8008dd4:	d0db      	beq.n	8008d8e <_strtod_l+0x516>
 8008dd6:	2d1f      	cmp	r5, #31
 8008dd8:	dd1e      	ble.n	8008e18 <_strtod_l+0x5a0>
 8008dda:	2500      	movs	r5, #0
 8008ddc:	46ab      	mov	fp, r5
 8008dde:	9509      	str	r5, [sp, #36]	; 0x24
 8008de0:	9505      	str	r5, [sp, #20]
 8008de2:	2322      	movs	r3, #34	; 0x22
 8008de4:	f04f 0800 	mov.w	r8, #0
 8008de8:	f04f 0900 	mov.w	r9, #0
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	e78d      	b.n	8008d0c <_strtod_l+0x494>
 8008df0:	0800c62d 	.word	0x0800c62d
 8008df4:	0800c854 	.word	0x0800c854
 8008df8:	0800c625 	.word	0x0800c625
 8008dfc:	0800c65a 	.word	0x0800c65a
 8008e00:	0800ca00 	.word	0x0800ca00
 8008e04:	0800c768 	.word	0x0800c768
 8008e08:	0800c740 	.word	0x0800c740
 8008e0c:	7ff00000 	.word	0x7ff00000
 8008e10:	7ca00000 	.word	0x7ca00000
 8008e14:	7fefffff 	.word	0x7fefffff
 8008e18:	f015 0310 	ands.w	r3, r5, #16
 8008e1c:	bf18      	it	ne
 8008e1e:	236a      	movne	r3, #106	; 0x6a
 8008e20:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80091c4 <_strtod_l+0x94c>
 8008e24:	9304      	str	r3, [sp, #16]
 8008e26:	4640      	mov	r0, r8
 8008e28:	4649      	mov	r1, r9
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	07ea      	lsls	r2, r5, #31
 8008e2e:	d504      	bpl.n	8008e3a <_strtod_l+0x5c2>
 8008e30:	e9da 2300 	ldrd	r2, r3, [sl]
 8008e34:	f7f7 fbf8 	bl	8000628 <__aeabi_dmul>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	106d      	asrs	r5, r5, #1
 8008e3c:	f10a 0a08 	add.w	sl, sl, #8
 8008e40:	d1f4      	bne.n	8008e2c <_strtod_l+0x5b4>
 8008e42:	b10b      	cbz	r3, 8008e48 <_strtod_l+0x5d0>
 8008e44:	4680      	mov	r8, r0
 8008e46:	4689      	mov	r9, r1
 8008e48:	9b04      	ldr	r3, [sp, #16]
 8008e4a:	b1bb      	cbz	r3, 8008e7c <_strtod_l+0x604>
 8008e4c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008e50:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	4649      	mov	r1, r9
 8008e58:	dd10      	ble.n	8008e7c <_strtod_l+0x604>
 8008e5a:	2b1f      	cmp	r3, #31
 8008e5c:	f340 811e 	ble.w	800909c <_strtod_l+0x824>
 8008e60:	2b34      	cmp	r3, #52	; 0x34
 8008e62:	bfde      	ittt	le
 8008e64:	f04f 33ff 	movle.w	r3, #4294967295
 8008e68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008e6c:	4093      	lslle	r3, r2
 8008e6e:	f04f 0800 	mov.w	r8, #0
 8008e72:	bfcc      	ite	gt
 8008e74:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008e78:	ea03 0901 	andle.w	r9, r3, r1
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2300      	movs	r3, #0
 8008e80:	4640      	mov	r0, r8
 8008e82:	4649      	mov	r1, r9
 8008e84:	f7f7 fe38 	bl	8000af8 <__aeabi_dcmpeq>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d1a6      	bne.n	8008dda <_strtod_l+0x562>
 8008e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e92:	4633      	mov	r3, r6
 8008e94:	465a      	mov	r2, fp
 8008e96:	4620      	mov	r0, r4
 8008e98:	f7ff f8cc 	bl	8008034 <__s2b>
 8008e9c:	9009      	str	r0, [sp, #36]	; 0x24
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f43f af2a 	beq.w	8008cf8 <_strtod_l+0x480>
 8008ea4:	9a08      	ldr	r2, [sp, #32]
 8008ea6:	9b05      	ldr	r3, [sp, #20]
 8008ea8:	2a00      	cmp	r2, #0
 8008eaa:	eba3 0307 	sub.w	r3, r3, r7
 8008eae:	bfa8      	it	ge
 8008eb0:	2300      	movge	r3, #0
 8008eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8008eb4:	2500      	movs	r5, #0
 8008eb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008eba:	9312      	str	r3, [sp, #72]	; 0x48
 8008ebc:	46ab      	mov	fp, r5
 8008ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	6859      	ldr	r1, [r3, #4]
 8008ec4:	f7ff f80e 	bl	8007ee4 <_Balloc>
 8008ec8:	9005      	str	r0, [sp, #20]
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	f43f af18 	beq.w	8008d00 <_strtod_l+0x488>
 8008ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	3202      	adds	r2, #2
 8008ed6:	f103 010c 	add.w	r1, r3, #12
 8008eda:	0092      	lsls	r2, r2, #2
 8008edc:	300c      	adds	r0, #12
 8008ede:	f001 f91b 	bl	800a118 <memcpy>
 8008ee2:	ec49 8b10 	vmov	d0, r8, r9
 8008ee6:	aa18      	add	r2, sp, #96	; 0x60
 8008ee8:	a917      	add	r1, sp, #92	; 0x5c
 8008eea:	4620      	mov	r0, r4
 8008eec:	f7ff fbd6 	bl	800869c <__d2b>
 8008ef0:	ec49 8b18 	vmov	d8, r8, r9
 8008ef4:	9016      	str	r0, [sp, #88]	; 0x58
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f43f af02 	beq.w	8008d00 <_strtod_l+0x488>
 8008efc:	2101      	movs	r1, #1
 8008efe:	4620      	mov	r0, r4
 8008f00:	f7ff f930 	bl	8008164 <__i2b>
 8008f04:	4683      	mov	fp, r0
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f43f aefa 	beq.w	8008d00 <_strtod_l+0x488>
 8008f0c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008f0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f10:	2e00      	cmp	r6, #0
 8008f12:	bfab      	itete	ge
 8008f14:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008f16:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008f18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008f1a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008f1e:	bfac      	ite	ge
 8008f20:	eb06 0a03 	addge.w	sl, r6, r3
 8008f24:	1b9f      	sublt	r7, r3, r6
 8008f26:	9b04      	ldr	r3, [sp, #16]
 8008f28:	1af6      	subs	r6, r6, r3
 8008f2a:	4416      	add	r6, r2
 8008f2c:	4ba0      	ldr	r3, [pc, #640]	; (80091b0 <_strtod_l+0x938>)
 8008f2e:	3e01      	subs	r6, #1
 8008f30:	429e      	cmp	r6, r3
 8008f32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008f36:	f280 80c4 	bge.w	80090c2 <_strtod_l+0x84a>
 8008f3a:	1b9b      	subs	r3, r3, r6
 8008f3c:	2b1f      	cmp	r3, #31
 8008f3e:	eba2 0203 	sub.w	r2, r2, r3
 8008f42:	f04f 0101 	mov.w	r1, #1
 8008f46:	f300 80b0 	bgt.w	80090aa <_strtod_l+0x832>
 8008f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4e:	930e      	str	r3, [sp, #56]	; 0x38
 8008f50:	2300      	movs	r3, #0
 8008f52:	930d      	str	r3, [sp, #52]	; 0x34
 8008f54:	eb0a 0602 	add.w	r6, sl, r2
 8008f58:	9b04      	ldr	r3, [sp, #16]
 8008f5a:	45b2      	cmp	sl, r6
 8008f5c:	4417      	add	r7, r2
 8008f5e:	441f      	add	r7, r3
 8008f60:	4653      	mov	r3, sl
 8008f62:	bfa8      	it	ge
 8008f64:	4633      	movge	r3, r6
 8008f66:	42bb      	cmp	r3, r7
 8008f68:	bfa8      	it	ge
 8008f6a:	463b      	movge	r3, r7
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	bfc2      	ittt	gt
 8008f70:	1af6      	subgt	r6, r6, r3
 8008f72:	1aff      	subgt	r7, r7, r3
 8008f74:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dd17      	ble.n	8008fae <_strtod_l+0x736>
 8008f7e:	4659      	mov	r1, fp
 8008f80:	461a      	mov	r2, r3
 8008f82:	4620      	mov	r0, r4
 8008f84:	f7ff f9ae 	bl	80082e4 <__pow5mult>
 8008f88:	4683      	mov	fp, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	f43f aeb8 	beq.w	8008d00 <_strtod_l+0x488>
 8008f90:	4601      	mov	r1, r0
 8008f92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008f94:	4620      	mov	r0, r4
 8008f96:	f7ff f8fb 	bl	8008190 <__multiply>
 8008f9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	f43f aeaf 	beq.w	8008d00 <_strtod_l+0x488>
 8008fa2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f7fe ffdd 	bl	8007f64 <_Bfree>
 8008faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fac:	9316      	str	r3, [sp, #88]	; 0x58
 8008fae:	2e00      	cmp	r6, #0
 8008fb0:	f300 808c 	bgt.w	80090cc <_strtod_l+0x854>
 8008fb4:	9b08      	ldr	r3, [sp, #32]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	dd08      	ble.n	8008fcc <_strtod_l+0x754>
 8008fba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fbc:	9905      	ldr	r1, [sp, #20]
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f7ff f990 	bl	80082e4 <__pow5mult>
 8008fc4:	9005      	str	r0, [sp, #20]
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f43f ae9a 	beq.w	8008d00 <_strtod_l+0x488>
 8008fcc:	2f00      	cmp	r7, #0
 8008fce:	dd08      	ble.n	8008fe2 <_strtod_l+0x76a>
 8008fd0:	9905      	ldr	r1, [sp, #20]
 8008fd2:	463a      	mov	r2, r7
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f7ff f9df 	bl	8008398 <__lshift>
 8008fda:	9005      	str	r0, [sp, #20]
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f43f ae8f 	beq.w	8008d00 <_strtod_l+0x488>
 8008fe2:	f1ba 0f00 	cmp.w	sl, #0
 8008fe6:	dd08      	ble.n	8008ffa <_strtod_l+0x782>
 8008fe8:	4659      	mov	r1, fp
 8008fea:	4652      	mov	r2, sl
 8008fec:	4620      	mov	r0, r4
 8008fee:	f7ff f9d3 	bl	8008398 <__lshift>
 8008ff2:	4683      	mov	fp, r0
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f43f ae83 	beq.w	8008d00 <_strtod_l+0x488>
 8008ffa:	9a05      	ldr	r2, [sp, #20]
 8008ffc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ffe:	4620      	mov	r0, r4
 8009000:	f7ff fa52 	bl	80084a8 <__mdiff>
 8009004:	4605      	mov	r5, r0
 8009006:	2800      	cmp	r0, #0
 8009008:	f43f ae7a 	beq.w	8008d00 <_strtod_l+0x488>
 800900c:	68c3      	ldr	r3, [r0, #12]
 800900e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009010:	2300      	movs	r3, #0
 8009012:	60c3      	str	r3, [r0, #12]
 8009014:	4659      	mov	r1, fp
 8009016:	f7ff fa2b 	bl	8008470 <__mcmp>
 800901a:	2800      	cmp	r0, #0
 800901c:	da60      	bge.n	80090e0 <_strtod_l+0x868>
 800901e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009020:	ea53 0308 	orrs.w	r3, r3, r8
 8009024:	f040 8084 	bne.w	8009130 <_strtod_l+0x8b8>
 8009028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800902c:	2b00      	cmp	r3, #0
 800902e:	d17f      	bne.n	8009130 <_strtod_l+0x8b8>
 8009030:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009034:	0d1b      	lsrs	r3, r3, #20
 8009036:	051b      	lsls	r3, r3, #20
 8009038:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800903c:	d978      	bls.n	8009130 <_strtod_l+0x8b8>
 800903e:	696b      	ldr	r3, [r5, #20]
 8009040:	b913      	cbnz	r3, 8009048 <_strtod_l+0x7d0>
 8009042:	692b      	ldr	r3, [r5, #16]
 8009044:	2b01      	cmp	r3, #1
 8009046:	dd73      	ble.n	8009130 <_strtod_l+0x8b8>
 8009048:	4629      	mov	r1, r5
 800904a:	2201      	movs	r2, #1
 800904c:	4620      	mov	r0, r4
 800904e:	f7ff f9a3 	bl	8008398 <__lshift>
 8009052:	4659      	mov	r1, fp
 8009054:	4605      	mov	r5, r0
 8009056:	f7ff fa0b 	bl	8008470 <__mcmp>
 800905a:	2800      	cmp	r0, #0
 800905c:	dd68      	ble.n	8009130 <_strtod_l+0x8b8>
 800905e:	9904      	ldr	r1, [sp, #16]
 8009060:	4a54      	ldr	r2, [pc, #336]	; (80091b4 <_strtod_l+0x93c>)
 8009062:	464b      	mov	r3, r9
 8009064:	2900      	cmp	r1, #0
 8009066:	f000 8084 	beq.w	8009172 <_strtod_l+0x8fa>
 800906a:	ea02 0109 	and.w	r1, r2, r9
 800906e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009072:	dc7e      	bgt.n	8009172 <_strtod_l+0x8fa>
 8009074:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009078:	f77f aeb3 	ble.w	8008de2 <_strtod_l+0x56a>
 800907c:	4b4e      	ldr	r3, [pc, #312]	; (80091b8 <_strtod_l+0x940>)
 800907e:	4640      	mov	r0, r8
 8009080:	4649      	mov	r1, r9
 8009082:	2200      	movs	r2, #0
 8009084:	f7f7 fad0 	bl	8000628 <__aeabi_dmul>
 8009088:	4b4a      	ldr	r3, [pc, #296]	; (80091b4 <_strtod_l+0x93c>)
 800908a:	400b      	ands	r3, r1
 800908c:	4680      	mov	r8, r0
 800908e:	4689      	mov	r9, r1
 8009090:	2b00      	cmp	r3, #0
 8009092:	f47f ae3f 	bne.w	8008d14 <_strtod_l+0x49c>
 8009096:	2322      	movs	r3, #34	; 0x22
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	e63b      	b.n	8008d14 <_strtod_l+0x49c>
 800909c:	f04f 32ff 	mov.w	r2, #4294967295
 80090a0:	fa02 f303 	lsl.w	r3, r2, r3
 80090a4:	ea03 0808 	and.w	r8, r3, r8
 80090a8:	e6e8      	b.n	8008e7c <_strtod_l+0x604>
 80090aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80090ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80090b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80090b6:	36e2      	adds	r6, #226	; 0xe2
 80090b8:	fa01 f306 	lsl.w	r3, r1, r6
 80090bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80090c0:	e748      	b.n	8008f54 <_strtod_l+0x6dc>
 80090c2:	2100      	movs	r1, #0
 80090c4:	2301      	movs	r3, #1
 80090c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80090ca:	e743      	b.n	8008f54 <_strtod_l+0x6dc>
 80090cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090ce:	4632      	mov	r2, r6
 80090d0:	4620      	mov	r0, r4
 80090d2:	f7ff f961 	bl	8008398 <__lshift>
 80090d6:	9016      	str	r0, [sp, #88]	; 0x58
 80090d8:	2800      	cmp	r0, #0
 80090da:	f47f af6b 	bne.w	8008fb4 <_strtod_l+0x73c>
 80090de:	e60f      	b.n	8008d00 <_strtod_l+0x488>
 80090e0:	46ca      	mov	sl, r9
 80090e2:	d171      	bne.n	80091c8 <_strtod_l+0x950>
 80090e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090ea:	b352      	cbz	r2, 8009142 <_strtod_l+0x8ca>
 80090ec:	4a33      	ldr	r2, [pc, #204]	; (80091bc <_strtod_l+0x944>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d12a      	bne.n	8009148 <_strtod_l+0x8d0>
 80090f2:	9b04      	ldr	r3, [sp, #16]
 80090f4:	4641      	mov	r1, r8
 80090f6:	b1fb      	cbz	r3, 8009138 <_strtod_l+0x8c0>
 80090f8:	4b2e      	ldr	r3, [pc, #184]	; (80091b4 <_strtod_l+0x93c>)
 80090fa:	ea09 0303 	and.w	r3, r9, r3
 80090fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009102:	f04f 32ff 	mov.w	r2, #4294967295
 8009106:	d81a      	bhi.n	800913e <_strtod_l+0x8c6>
 8009108:	0d1b      	lsrs	r3, r3, #20
 800910a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800910e:	fa02 f303 	lsl.w	r3, r2, r3
 8009112:	4299      	cmp	r1, r3
 8009114:	d118      	bne.n	8009148 <_strtod_l+0x8d0>
 8009116:	4b2a      	ldr	r3, [pc, #168]	; (80091c0 <_strtod_l+0x948>)
 8009118:	459a      	cmp	sl, r3
 800911a:	d102      	bne.n	8009122 <_strtod_l+0x8aa>
 800911c:	3101      	adds	r1, #1
 800911e:	f43f adef 	beq.w	8008d00 <_strtod_l+0x488>
 8009122:	4b24      	ldr	r3, [pc, #144]	; (80091b4 <_strtod_l+0x93c>)
 8009124:	ea0a 0303 	and.w	r3, sl, r3
 8009128:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800912c:	f04f 0800 	mov.w	r8, #0
 8009130:	9b04      	ldr	r3, [sp, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1a2      	bne.n	800907c <_strtod_l+0x804>
 8009136:	e5ed      	b.n	8008d14 <_strtod_l+0x49c>
 8009138:	f04f 33ff 	mov.w	r3, #4294967295
 800913c:	e7e9      	b.n	8009112 <_strtod_l+0x89a>
 800913e:	4613      	mov	r3, r2
 8009140:	e7e7      	b.n	8009112 <_strtod_l+0x89a>
 8009142:	ea53 0308 	orrs.w	r3, r3, r8
 8009146:	d08a      	beq.n	800905e <_strtod_l+0x7e6>
 8009148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800914a:	b1e3      	cbz	r3, 8009186 <_strtod_l+0x90e>
 800914c:	ea13 0f0a 	tst.w	r3, sl
 8009150:	d0ee      	beq.n	8009130 <_strtod_l+0x8b8>
 8009152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009154:	9a04      	ldr	r2, [sp, #16]
 8009156:	4640      	mov	r0, r8
 8009158:	4649      	mov	r1, r9
 800915a:	b1c3      	cbz	r3, 800918e <_strtod_l+0x916>
 800915c:	f7ff fb6f 	bl	800883e <sulp>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	ec51 0b18 	vmov	r0, r1, d8
 8009168:	f7f7 f8a8 	bl	80002bc <__adddf3>
 800916c:	4680      	mov	r8, r0
 800916e:	4689      	mov	r9, r1
 8009170:	e7de      	b.n	8009130 <_strtod_l+0x8b8>
 8009172:	4013      	ands	r3, r2
 8009174:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009178:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800917c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009180:	f04f 38ff 	mov.w	r8, #4294967295
 8009184:	e7d4      	b.n	8009130 <_strtod_l+0x8b8>
 8009186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009188:	ea13 0f08 	tst.w	r3, r8
 800918c:	e7e0      	b.n	8009150 <_strtod_l+0x8d8>
 800918e:	f7ff fb56 	bl	800883e <sulp>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	ec51 0b18 	vmov	r0, r1, d8
 800919a:	f7f7 f88d 	bl	80002b8 <__aeabi_dsub>
 800919e:	2200      	movs	r2, #0
 80091a0:	2300      	movs	r3, #0
 80091a2:	4680      	mov	r8, r0
 80091a4:	4689      	mov	r9, r1
 80091a6:	f7f7 fca7 	bl	8000af8 <__aeabi_dcmpeq>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d0c0      	beq.n	8009130 <_strtod_l+0x8b8>
 80091ae:	e618      	b.n	8008de2 <_strtod_l+0x56a>
 80091b0:	fffffc02 	.word	0xfffffc02
 80091b4:	7ff00000 	.word	0x7ff00000
 80091b8:	39500000 	.word	0x39500000
 80091bc:	000fffff 	.word	0x000fffff
 80091c0:	7fefffff 	.word	0x7fefffff
 80091c4:	0800c868 	.word	0x0800c868
 80091c8:	4659      	mov	r1, fp
 80091ca:	4628      	mov	r0, r5
 80091cc:	f7ff fac0 	bl	8008750 <__ratio>
 80091d0:	ec57 6b10 	vmov	r6, r7, d0
 80091d4:	ee10 0a10 	vmov	r0, s0
 80091d8:	2200      	movs	r2, #0
 80091da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091de:	4639      	mov	r1, r7
 80091e0:	f7f7 fc9e 	bl	8000b20 <__aeabi_dcmple>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d071      	beq.n	80092cc <_strtod_l+0xa54>
 80091e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d17c      	bne.n	80092e8 <_strtod_l+0xa70>
 80091ee:	f1b8 0f00 	cmp.w	r8, #0
 80091f2:	d15a      	bne.n	80092aa <_strtod_l+0xa32>
 80091f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d15d      	bne.n	80092b8 <_strtod_l+0xa40>
 80091fc:	4b90      	ldr	r3, [pc, #576]	; (8009440 <_strtod_l+0xbc8>)
 80091fe:	2200      	movs	r2, #0
 8009200:	4630      	mov	r0, r6
 8009202:	4639      	mov	r1, r7
 8009204:	f7f7 fc82 	bl	8000b0c <__aeabi_dcmplt>
 8009208:	2800      	cmp	r0, #0
 800920a:	d15c      	bne.n	80092c6 <_strtod_l+0xa4e>
 800920c:	4630      	mov	r0, r6
 800920e:	4639      	mov	r1, r7
 8009210:	4b8c      	ldr	r3, [pc, #560]	; (8009444 <_strtod_l+0xbcc>)
 8009212:	2200      	movs	r2, #0
 8009214:	f7f7 fa08 	bl	8000628 <__aeabi_dmul>
 8009218:	4606      	mov	r6, r0
 800921a:	460f      	mov	r7, r1
 800921c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009220:	9606      	str	r6, [sp, #24]
 8009222:	9307      	str	r3, [sp, #28]
 8009224:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009228:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800922c:	4b86      	ldr	r3, [pc, #536]	; (8009448 <_strtod_l+0xbd0>)
 800922e:	ea0a 0303 	and.w	r3, sl, r3
 8009232:	930d      	str	r3, [sp, #52]	; 0x34
 8009234:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009236:	4b85      	ldr	r3, [pc, #532]	; (800944c <_strtod_l+0xbd4>)
 8009238:	429a      	cmp	r2, r3
 800923a:	f040 8090 	bne.w	800935e <_strtod_l+0xae6>
 800923e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009242:	ec49 8b10 	vmov	d0, r8, r9
 8009246:	f7ff f9b9 	bl	80085bc <__ulp>
 800924a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800924e:	ec51 0b10 	vmov	r0, r1, d0
 8009252:	f7f7 f9e9 	bl	8000628 <__aeabi_dmul>
 8009256:	4642      	mov	r2, r8
 8009258:	464b      	mov	r3, r9
 800925a:	f7f7 f82f 	bl	80002bc <__adddf3>
 800925e:	460b      	mov	r3, r1
 8009260:	4979      	ldr	r1, [pc, #484]	; (8009448 <_strtod_l+0xbd0>)
 8009262:	4a7b      	ldr	r2, [pc, #492]	; (8009450 <_strtod_l+0xbd8>)
 8009264:	4019      	ands	r1, r3
 8009266:	4291      	cmp	r1, r2
 8009268:	4680      	mov	r8, r0
 800926a:	d944      	bls.n	80092f6 <_strtod_l+0xa7e>
 800926c:	ee18 2a90 	vmov	r2, s17
 8009270:	4b78      	ldr	r3, [pc, #480]	; (8009454 <_strtod_l+0xbdc>)
 8009272:	429a      	cmp	r2, r3
 8009274:	d104      	bne.n	8009280 <_strtod_l+0xa08>
 8009276:	ee18 3a10 	vmov	r3, s16
 800927a:	3301      	adds	r3, #1
 800927c:	f43f ad40 	beq.w	8008d00 <_strtod_l+0x488>
 8009280:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009454 <_strtod_l+0xbdc>
 8009284:	f04f 38ff 	mov.w	r8, #4294967295
 8009288:	9916      	ldr	r1, [sp, #88]	; 0x58
 800928a:	4620      	mov	r0, r4
 800928c:	f7fe fe6a 	bl	8007f64 <_Bfree>
 8009290:	9905      	ldr	r1, [sp, #20]
 8009292:	4620      	mov	r0, r4
 8009294:	f7fe fe66 	bl	8007f64 <_Bfree>
 8009298:	4659      	mov	r1, fp
 800929a:	4620      	mov	r0, r4
 800929c:	f7fe fe62 	bl	8007f64 <_Bfree>
 80092a0:	4629      	mov	r1, r5
 80092a2:	4620      	mov	r0, r4
 80092a4:	f7fe fe5e 	bl	8007f64 <_Bfree>
 80092a8:	e609      	b.n	8008ebe <_strtod_l+0x646>
 80092aa:	f1b8 0f01 	cmp.w	r8, #1
 80092ae:	d103      	bne.n	80092b8 <_strtod_l+0xa40>
 80092b0:	f1b9 0f00 	cmp.w	r9, #0
 80092b4:	f43f ad95 	beq.w	8008de2 <_strtod_l+0x56a>
 80092b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009410 <_strtod_l+0xb98>
 80092bc:	4f60      	ldr	r7, [pc, #384]	; (8009440 <_strtod_l+0xbc8>)
 80092be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092c2:	2600      	movs	r6, #0
 80092c4:	e7ae      	b.n	8009224 <_strtod_l+0x9ac>
 80092c6:	4f5f      	ldr	r7, [pc, #380]	; (8009444 <_strtod_l+0xbcc>)
 80092c8:	2600      	movs	r6, #0
 80092ca:	e7a7      	b.n	800921c <_strtod_l+0x9a4>
 80092cc:	4b5d      	ldr	r3, [pc, #372]	; (8009444 <_strtod_l+0xbcc>)
 80092ce:	4630      	mov	r0, r6
 80092d0:	4639      	mov	r1, r7
 80092d2:	2200      	movs	r2, #0
 80092d4:	f7f7 f9a8 	bl	8000628 <__aeabi_dmul>
 80092d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092da:	4606      	mov	r6, r0
 80092dc:	460f      	mov	r7, r1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d09c      	beq.n	800921c <_strtod_l+0x9a4>
 80092e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80092e6:	e79d      	b.n	8009224 <_strtod_l+0x9ac>
 80092e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009418 <_strtod_l+0xba0>
 80092ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092f0:	ec57 6b17 	vmov	r6, r7, d7
 80092f4:	e796      	b.n	8009224 <_strtod_l+0x9ac>
 80092f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80092fa:	9b04      	ldr	r3, [sp, #16]
 80092fc:	46ca      	mov	sl, r9
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1c2      	bne.n	8009288 <_strtod_l+0xa10>
 8009302:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009308:	0d1b      	lsrs	r3, r3, #20
 800930a:	051b      	lsls	r3, r3, #20
 800930c:	429a      	cmp	r2, r3
 800930e:	d1bb      	bne.n	8009288 <_strtod_l+0xa10>
 8009310:	4630      	mov	r0, r6
 8009312:	4639      	mov	r1, r7
 8009314:	f7f7 fce8 	bl	8000ce8 <__aeabi_d2lz>
 8009318:	f7f7 f958 	bl	80005cc <__aeabi_l2d>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4630      	mov	r0, r6
 8009322:	4639      	mov	r1, r7
 8009324:	f7f6 ffc8 	bl	80002b8 <__aeabi_dsub>
 8009328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800932a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800932e:	ea43 0308 	orr.w	r3, r3, r8
 8009332:	4313      	orrs	r3, r2
 8009334:	4606      	mov	r6, r0
 8009336:	460f      	mov	r7, r1
 8009338:	d054      	beq.n	80093e4 <_strtod_l+0xb6c>
 800933a:	a339      	add	r3, pc, #228	; (adr r3, 8009420 <_strtod_l+0xba8>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f7 fbe4 	bl	8000b0c <__aeabi_dcmplt>
 8009344:	2800      	cmp	r0, #0
 8009346:	f47f ace5 	bne.w	8008d14 <_strtod_l+0x49c>
 800934a:	a337      	add	r3, pc, #220	; (adr r3, 8009428 <_strtod_l+0xbb0>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	4630      	mov	r0, r6
 8009352:	4639      	mov	r1, r7
 8009354:	f7f7 fbf8 	bl	8000b48 <__aeabi_dcmpgt>
 8009358:	2800      	cmp	r0, #0
 800935a:	d095      	beq.n	8009288 <_strtod_l+0xa10>
 800935c:	e4da      	b.n	8008d14 <_strtod_l+0x49c>
 800935e:	9b04      	ldr	r3, [sp, #16]
 8009360:	b333      	cbz	r3, 80093b0 <_strtod_l+0xb38>
 8009362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009364:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009368:	d822      	bhi.n	80093b0 <_strtod_l+0xb38>
 800936a:	a331      	add	r3, pc, #196	; (adr r3, 8009430 <_strtod_l+0xbb8>)
 800936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009370:	4630      	mov	r0, r6
 8009372:	4639      	mov	r1, r7
 8009374:	f7f7 fbd4 	bl	8000b20 <__aeabi_dcmple>
 8009378:	b1a0      	cbz	r0, 80093a4 <_strtod_l+0xb2c>
 800937a:	4639      	mov	r1, r7
 800937c:	4630      	mov	r0, r6
 800937e:	f7f7 fc2b 	bl	8000bd8 <__aeabi_d2uiz>
 8009382:	2801      	cmp	r0, #1
 8009384:	bf38      	it	cc
 8009386:	2001      	movcc	r0, #1
 8009388:	f7f7 f8d4 	bl	8000534 <__aeabi_ui2d>
 800938c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800938e:	4606      	mov	r6, r0
 8009390:	460f      	mov	r7, r1
 8009392:	bb23      	cbnz	r3, 80093de <_strtod_l+0xb66>
 8009394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009398:	9010      	str	r0, [sp, #64]	; 0x40
 800939a:	9311      	str	r3, [sp, #68]	; 0x44
 800939c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80093a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80093b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80093b4:	eeb0 0a48 	vmov.f32	s0, s16
 80093b8:	eef0 0a68 	vmov.f32	s1, s17
 80093bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80093c0:	f7ff f8fc 	bl	80085bc <__ulp>
 80093c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80093c8:	ec53 2b10 	vmov	r2, r3, d0
 80093cc:	f7f7 f92c 	bl	8000628 <__aeabi_dmul>
 80093d0:	ec53 2b18 	vmov	r2, r3, d8
 80093d4:	f7f6 ff72 	bl	80002bc <__adddf3>
 80093d8:	4680      	mov	r8, r0
 80093da:	4689      	mov	r9, r1
 80093dc:	e78d      	b.n	80092fa <_strtod_l+0xa82>
 80093de:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80093e2:	e7db      	b.n	800939c <_strtod_l+0xb24>
 80093e4:	a314      	add	r3, pc, #80	; (adr r3, 8009438 <_strtod_l+0xbc0>)
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	f7f7 fb8f 	bl	8000b0c <__aeabi_dcmplt>
 80093ee:	e7b3      	b.n	8009358 <_strtod_l+0xae0>
 80093f0:	2300      	movs	r3, #0
 80093f2:	930a      	str	r3, [sp, #40]	; 0x28
 80093f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	f7ff ba7c 	b.w	80088f6 <_strtod_l+0x7e>
 80093fe:	2a65      	cmp	r2, #101	; 0x65
 8009400:	f43f ab75 	beq.w	8008aee <_strtod_l+0x276>
 8009404:	2a45      	cmp	r2, #69	; 0x45
 8009406:	f43f ab72 	beq.w	8008aee <_strtod_l+0x276>
 800940a:	2301      	movs	r3, #1
 800940c:	f7ff bbaa 	b.w	8008b64 <_strtod_l+0x2ec>
 8009410:	00000000 	.word	0x00000000
 8009414:	bff00000 	.word	0xbff00000
 8009418:	00000000 	.word	0x00000000
 800941c:	3ff00000 	.word	0x3ff00000
 8009420:	94a03595 	.word	0x94a03595
 8009424:	3fdfffff 	.word	0x3fdfffff
 8009428:	35afe535 	.word	0x35afe535
 800942c:	3fe00000 	.word	0x3fe00000
 8009430:	ffc00000 	.word	0xffc00000
 8009434:	41dfffff 	.word	0x41dfffff
 8009438:	94a03595 	.word	0x94a03595
 800943c:	3fcfffff 	.word	0x3fcfffff
 8009440:	3ff00000 	.word	0x3ff00000
 8009444:	3fe00000 	.word	0x3fe00000
 8009448:	7ff00000 	.word	0x7ff00000
 800944c:	7fe00000 	.word	0x7fe00000
 8009450:	7c9fffff 	.word	0x7c9fffff
 8009454:	7fefffff 	.word	0x7fefffff

08009458 <_strtod_r>:
 8009458:	4b01      	ldr	r3, [pc, #4]	; (8009460 <_strtod_r+0x8>)
 800945a:	f7ff ba0d 	b.w	8008878 <_strtod_l>
 800945e:	bf00      	nop
 8009460:	2000006c 	.word	0x2000006c

08009464 <_strtol_l.constprop.0>:
 8009464:	2b01      	cmp	r3, #1
 8009466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800946a:	d001      	beq.n	8009470 <_strtol_l.constprop.0+0xc>
 800946c:	2b24      	cmp	r3, #36	; 0x24
 800946e:	d906      	bls.n	800947e <_strtol_l.constprop.0+0x1a>
 8009470:	f7fd fd82 	bl	8006f78 <__errno>
 8009474:	2316      	movs	r3, #22
 8009476:	6003      	str	r3, [r0, #0]
 8009478:	2000      	movs	r0, #0
 800947a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009564 <_strtol_l.constprop.0+0x100>
 8009482:	460d      	mov	r5, r1
 8009484:	462e      	mov	r6, r5
 8009486:	f815 4b01 	ldrb.w	r4, [r5], #1
 800948a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800948e:	f017 0708 	ands.w	r7, r7, #8
 8009492:	d1f7      	bne.n	8009484 <_strtol_l.constprop.0+0x20>
 8009494:	2c2d      	cmp	r4, #45	; 0x2d
 8009496:	d132      	bne.n	80094fe <_strtol_l.constprop.0+0x9a>
 8009498:	782c      	ldrb	r4, [r5, #0]
 800949a:	2701      	movs	r7, #1
 800949c:	1cb5      	adds	r5, r6, #2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d05b      	beq.n	800955a <_strtol_l.constprop.0+0xf6>
 80094a2:	2b10      	cmp	r3, #16
 80094a4:	d109      	bne.n	80094ba <_strtol_l.constprop.0+0x56>
 80094a6:	2c30      	cmp	r4, #48	; 0x30
 80094a8:	d107      	bne.n	80094ba <_strtol_l.constprop.0+0x56>
 80094aa:	782c      	ldrb	r4, [r5, #0]
 80094ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80094b0:	2c58      	cmp	r4, #88	; 0x58
 80094b2:	d14d      	bne.n	8009550 <_strtol_l.constprop.0+0xec>
 80094b4:	786c      	ldrb	r4, [r5, #1]
 80094b6:	2310      	movs	r3, #16
 80094b8:	3502      	adds	r5, #2
 80094ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80094be:	f108 38ff 	add.w	r8, r8, #4294967295
 80094c2:	f04f 0e00 	mov.w	lr, #0
 80094c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80094ca:	4676      	mov	r6, lr
 80094cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80094d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80094d4:	f1bc 0f09 	cmp.w	ip, #9
 80094d8:	d816      	bhi.n	8009508 <_strtol_l.constprop.0+0xa4>
 80094da:	4664      	mov	r4, ip
 80094dc:	42a3      	cmp	r3, r4
 80094de:	dd24      	ble.n	800952a <_strtol_l.constprop.0+0xc6>
 80094e0:	f1be 3fff 	cmp.w	lr, #4294967295
 80094e4:	d008      	beq.n	80094f8 <_strtol_l.constprop.0+0x94>
 80094e6:	45b1      	cmp	r9, r6
 80094e8:	d31c      	bcc.n	8009524 <_strtol_l.constprop.0+0xc0>
 80094ea:	d101      	bne.n	80094f0 <_strtol_l.constprop.0+0x8c>
 80094ec:	45a2      	cmp	sl, r4
 80094ee:	db19      	blt.n	8009524 <_strtol_l.constprop.0+0xc0>
 80094f0:	fb06 4603 	mla	r6, r6, r3, r4
 80094f4:	f04f 0e01 	mov.w	lr, #1
 80094f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094fc:	e7e8      	b.n	80094d0 <_strtol_l.constprop.0+0x6c>
 80094fe:	2c2b      	cmp	r4, #43	; 0x2b
 8009500:	bf04      	itt	eq
 8009502:	782c      	ldrbeq	r4, [r5, #0]
 8009504:	1cb5      	addeq	r5, r6, #2
 8009506:	e7ca      	b.n	800949e <_strtol_l.constprop.0+0x3a>
 8009508:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800950c:	f1bc 0f19 	cmp.w	ip, #25
 8009510:	d801      	bhi.n	8009516 <_strtol_l.constprop.0+0xb2>
 8009512:	3c37      	subs	r4, #55	; 0x37
 8009514:	e7e2      	b.n	80094dc <_strtol_l.constprop.0+0x78>
 8009516:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800951a:	f1bc 0f19 	cmp.w	ip, #25
 800951e:	d804      	bhi.n	800952a <_strtol_l.constprop.0+0xc6>
 8009520:	3c57      	subs	r4, #87	; 0x57
 8009522:	e7db      	b.n	80094dc <_strtol_l.constprop.0+0x78>
 8009524:	f04f 3eff 	mov.w	lr, #4294967295
 8009528:	e7e6      	b.n	80094f8 <_strtol_l.constprop.0+0x94>
 800952a:	f1be 3fff 	cmp.w	lr, #4294967295
 800952e:	d105      	bne.n	800953c <_strtol_l.constprop.0+0xd8>
 8009530:	2322      	movs	r3, #34	; 0x22
 8009532:	6003      	str	r3, [r0, #0]
 8009534:	4646      	mov	r6, r8
 8009536:	b942      	cbnz	r2, 800954a <_strtol_l.constprop.0+0xe6>
 8009538:	4630      	mov	r0, r6
 800953a:	e79e      	b.n	800947a <_strtol_l.constprop.0+0x16>
 800953c:	b107      	cbz	r7, 8009540 <_strtol_l.constprop.0+0xdc>
 800953e:	4276      	negs	r6, r6
 8009540:	2a00      	cmp	r2, #0
 8009542:	d0f9      	beq.n	8009538 <_strtol_l.constprop.0+0xd4>
 8009544:	f1be 0f00 	cmp.w	lr, #0
 8009548:	d000      	beq.n	800954c <_strtol_l.constprop.0+0xe8>
 800954a:	1e69      	subs	r1, r5, #1
 800954c:	6011      	str	r1, [r2, #0]
 800954e:	e7f3      	b.n	8009538 <_strtol_l.constprop.0+0xd4>
 8009550:	2430      	movs	r4, #48	; 0x30
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1b1      	bne.n	80094ba <_strtol_l.constprop.0+0x56>
 8009556:	2308      	movs	r3, #8
 8009558:	e7af      	b.n	80094ba <_strtol_l.constprop.0+0x56>
 800955a:	2c30      	cmp	r4, #48	; 0x30
 800955c:	d0a5      	beq.n	80094aa <_strtol_l.constprop.0+0x46>
 800955e:	230a      	movs	r3, #10
 8009560:	e7ab      	b.n	80094ba <_strtol_l.constprop.0+0x56>
 8009562:	bf00      	nop
 8009564:	0800c891 	.word	0x0800c891

08009568 <_strtol_r>:
 8009568:	f7ff bf7c 	b.w	8009464 <_strtol_l.constprop.0>

0800956c <__ssputs_r>:
 800956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	688e      	ldr	r6, [r1, #8]
 8009572:	461f      	mov	r7, r3
 8009574:	42be      	cmp	r6, r7
 8009576:	680b      	ldr	r3, [r1, #0]
 8009578:	4682      	mov	sl, r0
 800957a:	460c      	mov	r4, r1
 800957c:	4690      	mov	r8, r2
 800957e:	d82c      	bhi.n	80095da <__ssputs_r+0x6e>
 8009580:	898a      	ldrh	r2, [r1, #12]
 8009582:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009586:	d026      	beq.n	80095d6 <__ssputs_r+0x6a>
 8009588:	6965      	ldr	r5, [r4, #20]
 800958a:	6909      	ldr	r1, [r1, #16]
 800958c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009590:	eba3 0901 	sub.w	r9, r3, r1
 8009594:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009598:	1c7b      	adds	r3, r7, #1
 800959a:	444b      	add	r3, r9
 800959c:	106d      	asrs	r5, r5, #1
 800959e:	429d      	cmp	r5, r3
 80095a0:	bf38      	it	cc
 80095a2:	461d      	movcc	r5, r3
 80095a4:	0553      	lsls	r3, r2, #21
 80095a6:	d527      	bpl.n	80095f8 <__ssputs_r+0x8c>
 80095a8:	4629      	mov	r1, r5
 80095aa:	f7fe fc0f 	bl	8007dcc <_malloc_r>
 80095ae:	4606      	mov	r6, r0
 80095b0:	b360      	cbz	r0, 800960c <__ssputs_r+0xa0>
 80095b2:	6921      	ldr	r1, [r4, #16]
 80095b4:	464a      	mov	r2, r9
 80095b6:	f000 fdaf 	bl	800a118 <memcpy>
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c4:	81a3      	strh	r3, [r4, #12]
 80095c6:	6126      	str	r6, [r4, #16]
 80095c8:	6165      	str	r5, [r4, #20]
 80095ca:	444e      	add	r6, r9
 80095cc:	eba5 0509 	sub.w	r5, r5, r9
 80095d0:	6026      	str	r6, [r4, #0]
 80095d2:	60a5      	str	r5, [r4, #8]
 80095d4:	463e      	mov	r6, r7
 80095d6:	42be      	cmp	r6, r7
 80095d8:	d900      	bls.n	80095dc <__ssputs_r+0x70>
 80095da:	463e      	mov	r6, r7
 80095dc:	6820      	ldr	r0, [r4, #0]
 80095de:	4632      	mov	r2, r6
 80095e0:	4641      	mov	r1, r8
 80095e2:	f000 fd5c 	bl	800a09e <memmove>
 80095e6:	68a3      	ldr	r3, [r4, #8]
 80095e8:	1b9b      	subs	r3, r3, r6
 80095ea:	60a3      	str	r3, [r4, #8]
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	4433      	add	r3, r6
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	2000      	movs	r0, #0
 80095f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f8:	462a      	mov	r2, r5
 80095fa:	f001 f942 	bl	800a882 <_realloc_r>
 80095fe:	4606      	mov	r6, r0
 8009600:	2800      	cmp	r0, #0
 8009602:	d1e0      	bne.n	80095c6 <__ssputs_r+0x5a>
 8009604:	6921      	ldr	r1, [r4, #16]
 8009606:	4650      	mov	r0, sl
 8009608:	f7fe fb6c 	bl	8007ce4 <_free_r>
 800960c:	230c      	movs	r3, #12
 800960e:	f8ca 3000 	str.w	r3, [sl]
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	e7e9      	b.n	80095f4 <__ssputs_r+0x88>

08009620 <_svfiprintf_r>:
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	4698      	mov	r8, r3
 8009626:	898b      	ldrh	r3, [r1, #12]
 8009628:	061b      	lsls	r3, r3, #24
 800962a:	b09d      	sub	sp, #116	; 0x74
 800962c:	4607      	mov	r7, r0
 800962e:	460d      	mov	r5, r1
 8009630:	4614      	mov	r4, r2
 8009632:	d50e      	bpl.n	8009652 <_svfiprintf_r+0x32>
 8009634:	690b      	ldr	r3, [r1, #16]
 8009636:	b963      	cbnz	r3, 8009652 <_svfiprintf_r+0x32>
 8009638:	2140      	movs	r1, #64	; 0x40
 800963a:	f7fe fbc7 	bl	8007dcc <_malloc_r>
 800963e:	6028      	str	r0, [r5, #0]
 8009640:	6128      	str	r0, [r5, #16]
 8009642:	b920      	cbnz	r0, 800964e <_svfiprintf_r+0x2e>
 8009644:	230c      	movs	r3, #12
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	f04f 30ff 	mov.w	r0, #4294967295
 800964c:	e0d0      	b.n	80097f0 <_svfiprintf_r+0x1d0>
 800964e:	2340      	movs	r3, #64	; 0x40
 8009650:	616b      	str	r3, [r5, #20]
 8009652:	2300      	movs	r3, #0
 8009654:	9309      	str	r3, [sp, #36]	; 0x24
 8009656:	2320      	movs	r3, #32
 8009658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800965c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009660:	2330      	movs	r3, #48	; 0x30
 8009662:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009808 <_svfiprintf_r+0x1e8>
 8009666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800966a:	f04f 0901 	mov.w	r9, #1
 800966e:	4623      	mov	r3, r4
 8009670:	469a      	mov	sl, r3
 8009672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009676:	b10a      	cbz	r2, 800967c <_svfiprintf_r+0x5c>
 8009678:	2a25      	cmp	r2, #37	; 0x25
 800967a:	d1f9      	bne.n	8009670 <_svfiprintf_r+0x50>
 800967c:	ebba 0b04 	subs.w	fp, sl, r4
 8009680:	d00b      	beq.n	800969a <_svfiprintf_r+0x7a>
 8009682:	465b      	mov	r3, fp
 8009684:	4622      	mov	r2, r4
 8009686:	4629      	mov	r1, r5
 8009688:	4638      	mov	r0, r7
 800968a:	f7ff ff6f 	bl	800956c <__ssputs_r>
 800968e:	3001      	adds	r0, #1
 8009690:	f000 80a9 	beq.w	80097e6 <_svfiprintf_r+0x1c6>
 8009694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009696:	445a      	add	r2, fp
 8009698:	9209      	str	r2, [sp, #36]	; 0x24
 800969a:	f89a 3000 	ldrb.w	r3, [sl]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 80a1 	beq.w	80097e6 <_svfiprintf_r+0x1c6>
 80096a4:	2300      	movs	r3, #0
 80096a6:	f04f 32ff 	mov.w	r2, #4294967295
 80096aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ae:	f10a 0a01 	add.w	sl, sl, #1
 80096b2:	9304      	str	r3, [sp, #16]
 80096b4:	9307      	str	r3, [sp, #28]
 80096b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096ba:	931a      	str	r3, [sp, #104]	; 0x68
 80096bc:	4654      	mov	r4, sl
 80096be:	2205      	movs	r2, #5
 80096c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c4:	4850      	ldr	r0, [pc, #320]	; (8009808 <_svfiprintf_r+0x1e8>)
 80096c6:	f7f6 fd9b 	bl	8000200 <memchr>
 80096ca:	9a04      	ldr	r2, [sp, #16]
 80096cc:	b9d8      	cbnz	r0, 8009706 <_svfiprintf_r+0xe6>
 80096ce:	06d0      	lsls	r0, r2, #27
 80096d0:	bf44      	itt	mi
 80096d2:	2320      	movmi	r3, #32
 80096d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096d8:	0711      	lsls	r1, r2, #28
 80096da:	bf44      	itt	mi
 80096dc:	232b      	movmi	r3, #43	; 0x2b
 80096de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e2:	f89a 3000 	ldrb.w	r3, [sl]
 80096e6:	2b2a      	cmp	r3, #42	; 0x2a
 80096e8:	d015      	beq.n	8009716 <_svfiprintf_r+0xf6>
 80096ea:	9a07      	ldr	r2, [sp, #28]
 80096ec:	4654      	mov	r4, sl
 80096ee:	2000      	movs	r0, #0
 80096f0:	f04f 0c0a 	mov.w	ip, #10
 80096f4:	4621      	mov	r1, r4
 80096f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096fa:	3b30      	subs	r3, #48	; 0x30
 80096fc:	2b09      	cmp	r3, #9
 80096fe:	d94d      	bls.n	800979c <_svfiprintf_r+0x17c>
 8009700:	b1b0      	cbz	r0, 8009730 <_svfiprintf_r+0x110>
 8009702:	9207      	str	r2, [sp, #28]
 8009704:	e014      	b.n	8009730 <_svfiprintf_r+0x110>
 8009706:	eba0 0308 	sub.w	r3, r0, r8
 800970a:	fa09 f303 	lsl.w	r3, r9, r3
 800970e:	4313      	orrs	r3, r2
 8009710:	9304      	str	r3, [sp, #16]
 8009712:	46a2      	mov	sl, r4
 8009714:	e7d2      	b.n	80096bc <_svfiprintf_r+0x9c>
 8009716:	9b03      	ldr	r3, [sp, #12]
 8009718:	1d19      	adds	r1, r3, #4
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	9103      	str	r1, [sp, #12]
 800971e:	2b00      	cmp	r3, #0
 8009720:	bfbb      	ittet	lt
 8009722:	425b      	neglt	r3, r3
 8009724:	f042 0202 	orrlt.w	r2, r2, #2
 8009728:	9307      	strge	r3, [sp, #28]
 800972a:	9307      	strlt	r3, [sp, #28]
 800972c:	bfb8      	it	lt
 800972e:	9204      	strlt	r2, [sp, #16]
 8009730:	7823      	ldrb	r3, [r4, #0]
 8009732:	2b2e      	cmp	r3, #46	; 0x2e
 8009734:	d10c      	bne.n	8009750 <_svfiprintf_r+0x130>
 8009736:	7863      	ldrb	r3, [r4, #1]
 8009738:	2b2a      	cmp	r3, #42	; 0x2a
 800973a:	d134      	bne.n	80097a6 <_svfiprintf_r+0x186>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	1d1a      	adds	r2, r3, #4
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	9203      	str	r2, [sp, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	bfb8      	it	lt
 8009748:	f04f 33ff 	movlt.w	r3, #4294967295
 800974c:	3402      	adds	r4, #2
 800974e:	9305      	str	r3, [sp, #20]
 8009750:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009818 <_svfiprintf_r+0x1f8>
 8009754:	7821      	ldrb	r1, [r4, #0]
 8009756:	2203      	movs	r2, #3
 8009758:	4650      	mov	r0, sl
 800975a:	f7f6 fd51 	bl	8000200 <memchr>
 800975e:	b138      	cbz	r0, 8009770 <_svfiprintf_r+0x150>
 8009760:	9b04      	ldr	r3, [sp, #16]
 8009762:	eba0 000a 	sub.w	r0, r0, sl
 8009766:	2240      	movs	r2, #64	; 0x40
 8009768:	4082      	lsls	r2, r0
 800976a:	4313      	orrs	r3, r2
 800976c:	3401      	adds	r4, #1
 800976e:	9304      	str	r3, [sp, #16]
 8009770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009774:	4825      	ldr	r0, [pc, #148]	; (800980c <_svfiprintf_r+0x1ec>)
 8009776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800977a:	2206      	movs	r2, #6
 800977c:	f7f6 fd40 	bl	8000200 <memchr>
 8009780:	2800      	cmp	r0, #0
 8009782:	d038      	beq.n	80097f6 <_svfiprintf_r+0x1d6>
 8009784:	4b22      	ldr	r3, [pc, #136]	; (8009810 <_svfiprintf_r+0x1f0>)
 8009786:	bb1b      	cbnz	r3, 80097d0 <_svfiprintf_r+0x1b0>
 8009788:	9b03      	ldr	r3, [sp, #12]
 800978a:	3307      	adds	r3, #7
 800978c:	f023 0307 	bic.w	r3, r3, #7
 8009790:	3308      	adds	r3, #8
 8009792:	9303      	str	r3, [sp, #12]
 8009794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009796:	4433      	add	r3, r6
 8009798:	9309      	str	r3, [sp, #36]	; 0x24
 800979a:	e768      	b.n	800966e <_svfiprintf_r+0x4e>
 800979c:	fb0c 3202 	mla	r2, ip, r2, r3
 80097a0:	460c      	mov	r4, r1
 80097a2:	2001      	movs	r0, #1
 80097a4:	e7a6      	b.n	80096f4 <_svfiprintf_r+0xd4>
 80097a6:	2300      	movs	r3, #0
 80097a8:	3401      	adds	r4, #1
 80097aa:	9305      	str	r3, [sp, #20]
 80097ac:	4619      	mov	r1, r3
 80097ae:	f04f 0c0a 	mov.w	ip, #10
 80097b2:	4620      	mov	r0, r4
 80097b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097b8:	3a30      	subs	r2, #48	; 0x30
 80097ba:	2a09      	cmp	r2, #9
 80097bc:	d903      	bls.n	80097c6 <_svfiprintf_r+0x1a6>
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d0c6      	beq.n	8009750 <_svfiprintf_r+0x130>
 80097c2:	9105      	str	r1, [sp, #20]
 80097c4:	e7c4      	b.n	8009750 <_svfiprintf_r+0x130>
 80097c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ca:	4604      	mov	r4, r0
 80097cc:	2301      	movs	r3, #1
 80097ce:	e7f0      	b.n	80097b2 <_svfiprintf_r+0x192>
 80097d0:	ab03      	add	r3, sp, #12
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	462a      	mov	r2, r5
 80097d6:	4b0f      	ldr	r3, [pc, #60]	; (8009814 <_svfiprintf_r+0x1f4>)
 80097d8:	a904      	add	r1, sp, #16
 80097da:	4638      	mov	r0, r7
 80097dc:	f7fc fc50 	bl	8006080 <_printf_float>
 80097e0:	1c42      	adds	r2, r0, #1
 80097e2:	4606      	mov	r6, r0
 80097e4:	d1d6      	bne.n	8009794 <_svfiprintf_r+0x174>
 80097e6:	89ab      	ldrh	r3, [r5, #12]
 80097e8:	065b      	lsls	r3, r3, #25
 80097ea:	f53f af2d 	bmi.w	8009648 <_svfiprintf_r+0x28>
 80097ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097f0:	b01d      	add	sp, #116	; 0x74
 80097f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f6:	ab03      	add	r3, sp, #12
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	462a      	mov	r2, r5
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <_svfiprintf_r+0x1f4>)
 80097fe:	a904      	add	r1, sp, #16
 8009800:	4638      	mov	r0, r7
 8009802:	f7fc fee1 	bl	80065c8 <_printf_i>
 8009806:	e7eb      	b.n	80097e0 <_svfiprintf_r+0x1c0>
 8009808:	0800c991 	.word	0x0800c991
 800980c:	0800c99b 	.word	0x0800c99b
 8009810:	08006081 	.word	0x08006081
 8009814:	0800956d 	.word	0x0800956d
 8009818:	0800c997 	.word	0x0800c997

0800981c <_sungetc_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	1c4b      	adds	r3, r1, #1
 8009820:	4614      	mov	r4, r2
 8009822:	d103      	bne.n	800982c <_sungetc_r+0x10>
 8009824:	f04f 35ff 	mov.w	r5, #4294967295
 8009828:	4628      	mov	r0, r5
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	8993      	ldrh	r3, [r2, #12]
 800982e:	f023 0320 	bic.w	r3, r3, #32
 8009832:	8193      	strh	r3, [r2, #12]
 8009834:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009836:	6852      	ldr	r2, [r2, #4]
 8009838:	b2cd      	uxtb	r5, r1
 800983a:	b18b      	cbz	r3, 8009860 <_sungetc_r+0x44>
 800983c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800983e:	4293      	cmp	r3, r2
 8009840:	dd08      	ble.n	8009854 <_sungetc_r+0x38>
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	1e5a      	subs	r2, r3, #1
 8009846:	6022      	str	r2, [r4, #0]
 8009848:	f803 5c01 	strb.w	r5, [r3, #-1]
 800984c:	6863      	ldr	r3, [r4, #4]
 800984e:	3301      	adds	r3, #1
 8009850:	6063      	str	r3, [r4, #4]
 8009852:	e7e9      	b.n	8009828 <_sungetc_r+0xc>
 8009854:	4621      	mov	r1, r4
 8009856:	f000 fbe8 	bl	800a02a <__submore>
 800985a:	2800      	cmp	r0, #0
 800985c:	d0f1      	beq.n	8009842 <_sungetc_r+0x26>
 800985e:	e7e1      	b.n	8009824 <_sungetc_r+0x8>
 8009860:	6921      	ldr	r1, [r4, #16]
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	b151      	cbz	r1, 800987c <_sungetc_r+0x60>
 8009866:	4299      	cmp	r1, r3
 8009868:	d208      	bcs.n	800987c <_sungetc_r+0x60>
 800986a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800986e:	42a9      	cmp	r1, r5
 8009870:	d104      	bne.n	800987c <_sungetc_r+0x60>
 8009872:	3b01      	subs	r3, #1
 8009874:	3201      	adds	r2, #1
 8009876:	6023      	str	r3, [r4, #0]
 8009878:	6062      	str	r2, [r4, #4]
 800987a:	e7d5      	b.n	8009828 <_sungetc_r+0xc>
 800987c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009884:	6363      	str	r3, [r4, #52]	; 0x34
 8009886:	2303      	movs	r3, #3
 8009888:	63a3      	str	r3, [r4, #56]	; 0x38
 800988a:	4623      	mov	r3, r4
 800988c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	2301      	movs	r3, #1
 8009894:	e7dc      	b.n	8009850 <_sungetc_r+0x34>

08009896 <__ssrefill_r>:
 8009896:	b510      	push	{r4, lr}
 8009898:	460c      	mov	r4, r1
 800989a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800989c:	b169      	cbz	r1, 80098ba <__ssrefill_r+0x24>
 800989e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098a2:	4299      	cmp	r1, r3
 80098a4:	d001      	beq.n	80098aa <__ssrefill_r+0x14>
 80098a6:	f7fe fa1d 	bl	8007ce4 <_free_r>
 80098aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098ac:	6063      	str	r3, [r4, #4]
 80098ae:	2000      	movs	r0, #0
 80098b0:	6360      	str	r0, [r4, #52]	; 0x34
 80098b2:	b113      	cbz	r3, 80098ba <__ssrefill_r+0x24>
 80098b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	bd10      	pop	{r4, pc}
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	2300      	movs	r3, #0
 80098c0:	6063      	str	r3, [r4, #4]
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f043 0320 	orr.w	r3, r3, #32
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	f04f 30ff 	mov.w	r0, #4294967295
 80098ce:	e7f3      	b.n	80098b8 <__ssrefill_r+0x22>

080098d0 <__ssvfiscanf_r>:
 80098d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	460c      	mov	r4, r1
 80098d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80098da:	2100      	movs	r1, #0
 80098dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80098e0:	49a6      	ldr	r1, [pc, #664]	; (8009b7c <__ssvfiscanf_r+0x2ac>)
 80098e2:	91a0      	str	r1, [sp, #640]	; 0x280
 80098e4:	f10d 0804 	add.w	r8, sp, #4
 80098e8:	49a5      	ldr	r1, [pc, #660]	; (8009b80 <__ssvfiscanf_r+0x2b0>)
 80098ea:	4fa6      	ldr	r7, [pc, #664]	; (8009b84 <__ssvfiscanf_r+0x2b4>)
 80098ec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009b88 <__ssvfiscanf_r+0x2b8>
 80098f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80098f4:	4606      	mov	r6, r0
 80098f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	7813      	ldrb	r3, [r2, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 815a 	beq.w	8009bb6 <__ssvfiscanf_r+0x2e6>
 8009902:	5cf9      	ldrb	r1, [r7, r3]
 8009904:	f011 0108 	ands.w	r1, r1, #8
 8009908:	f102 0501 	add.w	r5, r2, #1
 800990c:	d019      	beq.n	8009942 <__ssvfiscanf_r+0x72>
 800990e:	6863      	ldr	r3, [r4, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	dd0f      	ble.n	8009934 <__ssvfiscanf_r+0x64>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	781a      	ldrb	r2, [r3, #0]
 8009918:	5cba      	ldrb	r2, [r7, r2]
 800991a:	0712      	lsls	r2, r2, #28
 800991c:	d401      	bmi.n	8009922 <__ssvfiscanf_r+0x52>
 800991e:	462a      	mov	r2, r5
 8009920:	e7eb      	b.n	80098fa <__ssvfiscanf_r+0x2a>
 8009922:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009924:	3201      	adds	r2, #1
 8009926:	9245      	str	r2, [sp, #276]	; 0x114
 8009928:	6862      	ldr	r2, [r4, #4]
 800992a:	3301      	adds	r3, #1
 800992c:	3a01      	subs	r2, #1
 800992e:	6062      	str	r2, [r4, #4]
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	e7ec      	b.n	800990e <__ssvfiscanf_r+0x3e>
 8009934:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009936:	4621      	mov	r1, r4
 8009938:	4630      	mov	r0, r6
 800993a:	4798      	blx	r3
 800993c:	2800      	cmp	r0, #0
 800993e:	d0e9      	beq.n	8009914 <__ssvfiscanf_r+0x44>
 8009940:	e7ed      	b.n	800991e <__ssvfiscanf_r+0x4e>
 8009942:	2b25      	cmp	r3, #37	; 0x25
 8009944:	d012      	beq.n	800996c <__ssvfiscanf_r+0x9c>
 8009946:	469a      	mov	sl, r3
 8009948:	6863      	ldr	r3, [r4, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f340 8091 	ble.w	8009a72 <__ssvfiscanf_r+0x1a2>
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	7813      	ldrb	r3, [r2, #0]
 8009954:	4553      	cmp	r3, sl
 8009956:	f040 812e 	bne.w	8009bb6 <__ssvfiscanf_r+0x2e6>
 800995a:	6863      	ldr	r3, [r4, #4]
 800995c:	3b01      	subs	r3, #1
 800995e:	6063      	str	r3, [r4, #4]
 8009960:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009962:	3201      	adds	r2, #1
 8009964:	3301      	adds	r3, #1
 8009966:	6022      	str	r2, [r4, #0]
 8009968:	9345      	str	r3, [sp, #276]	; 0x114
 800996a:	e7d8      	b.n	800991e <__ssvfiscanf_r+0x4e>
 800996c:	9141      	str	r1, [sp, #260]	; 0x104
 800996e:	9143      	str	r1, [sp, #268]	; 0x10c
 8009970:	7853      	ldrb	r3, [r2, #1]
 8009972:	2b2a      	cmp	r3, #42	; 0x2a
 8009974:	bf02      	ittt	eq
 8009976:	2310      	moveq	r3, #16
 8009978:	1c95      	addeq	r5, r2, #2
 800997a:	9341      	streq	r3, [sp, #260]	; 0x104
 800997c:	220a      	movs	r2, #10
 800997e:	46aa      	mov	sl, r5
 8009980:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009984:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009988:	2b09      	cmp	r3, #9
 800998a:	d91c      	bls.n	80099c6 <__ssvfiscanf_r+0xf6>
 800998c:	487e      	ldr	r0, [pc, #504]	; (8009b88 <__ssvfiscanf_r+0x2b8>)
 800998e:	2203      	movs	r2, #3
 8009990:	f7f6 fc36 	bl	8000200 <memchr>
 8009994:	b138      	cbz	r0, 80099a6 <__ssvfiscanf_r+0xd6>
 8009996:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009998:	eba0 0009 	sub.w	r0, r0, r9
 800999c:	2301      	movs	r3, #1
 800999e:	4083      	lsls	r3, r0
 80099a0:	4313      	orrs	r3, r2
 80099a2:	9341      	str	r3, [sp, #260]	; 0x104
 80099a4:	4655      	mov	r5, sl
 80099a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80099aa:	2b78      	cmp	r3, #120	; 0x78
 80099ac:	d806      	bhi.n	80099bc <__ssvfiscanf_r+0xec>
 80099ae:	2b57      	cmp	r3, #87	; 0x57
 80099b0:	d810      	bhi.n	80099d4 <__ssvfiscanf_r+0x104>
 80099b2:	2b25      	cmp	r3, #37	; 0x25
 80099b4:	d0c7      	beq.n	8009946 <__ssvfiscanf_r+0x76>
 80099b6:	d857      	bhi.n	8009a68 <__ssvfiscanf_r+0x198>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d065      	beq.n	8009a88 <__ssvfiscanf_r+0x1b8>
 80099bc:	2303      	movs	r3, #3
 80099be:	9347      	str	r3, [sp, #284]	; 0x11c
 80099c0:	230a      	movs	r3, #10
 80099c2:	9342      	str	r3, [sp, #264]	; 0x108
 80099c4:	e076      	b.n	8009ab4 <__ssvfiscanf_r+0x1e4>
 80099c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80099c8:	fb02 1103 	mla	r1, r2, r3, r1
 80099cc:	3930      	subs	r1, #48	; 0x30
 80099ce:	9143      	str	r1, [sp, #268]	; 0x10c
 80099d0:	4655      	mov	r5, sl
 80099d2:	e7d4      	b.n	800997e <__ssvfiscanf_r+0xae>
 80099d4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80099d8:	2a20      	cmp	r2, #32
 80099da:	d8ef      	bhi.n	80099bc <__ssvfiscanf_r+0xec>
 80099dc:	a101      	add	r1, pc, #4	; (adr r1, 80099e4 <__ssvfiscanf_r+0x114>)
 80099de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80099e2:	bf00      	nop
 80099e4:	08009a97 	.word	0x08009a97
 80099e8:	080099bd 	.word	0x080099bd
 80099ec:	080099bd 	.word	0x080099bd
 80099f0:	08009af5 	.word	0x08009af5
 80099f4:	080099bd 	.word	0x080099bd
 80099f8:	080099bd 	.word	0x080099bd
 80099fc:	080099bd 	.word	0x080099bd
 8009a00:	080099bd 	.word	0x080099bd
 8009a04:	080099bd 	.word	0x080099bd
 8009a08:	080099bd 	.word	0x080099bd
 8009a0c:	080099bd 	.word	0x080099bd
 8009a10:	08009b0b 	.word	0x08009b0b
 8009a14:	08009af1 	.word	0x08009af1
 8009a18:	08009a6f 	.word	0x08009a6f
 8009a1c:	08009a6f 	.word	0x08009a6f
 8009a20:	08009a6f 	.word	0x08009a6f
 8009a24:	080099bd 	.word	0x080099bd
 8009a28:	08009aad 	.word	0x08009aad
 8009a2c:	080099bd 	.word	0x080099bd
 8009a30:	080099bd 	.word	0x080099bd
 8009a34:	080099bd 	.word	0x080099bd
 8009a38:	080099bd 	.word	0x080099bd
 8009a3c:	08009b1b 	.word	0x08009b1b
 8009a40:	08009ae9 	.word	0x08009ae9
 8009a44:	08009a8f 	.word	0x08009a8f
 8009a48:	080099bd 	.word	0x080099bd
 8009a4c:	080099bd 	.word	0x080099bd
 8009a50:	08009b17 	.word	0x08009b17
 8009a54:	080099bd 	.word	0x080099bd
 8009a58:	08009af1 	.word	0x08009af1
 8009a5c:	080099bd 	.word	0x080099bd
 8009a60:	080099bd 	.word	0x080099bd
 8009a64:	08009a97 	.word	0x08009a97
 8009a68:	3b45      	subs	r3, #69	; 0x45
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d8a6      	bhi.n	80099bc <__ssvfiscanf_r+0xec>
 8009a6e:	2305      	movs	r3, #5
 8009a70:	e01f      	b.n	8009ab2 <__ssvfiscanf_r+0x1e2>
 8009a72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a74:	4621      	mov	r1, r4
 8009a76:	4630      	mov	r0, r6
 8009a78:	4798      	blx	r3
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f43f af68 	beq.w	8009950 <__ssvfiscanf_r+0x80>
 8009a80:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f040 808d 	bne.w	8009ba2 <__ssvfiscanf_r+0x2d2>
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8c:	e08f      	b.n	8009bae <__ssvfiscanf_r+0x2de>
 8009a8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a90:	f042 0220 	orr.w	r2, r2, #32
 8009a94:	9241      	str	r2, [sp, #260]	; 0x104
 8009a96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a9c:	9241      	str	r2, [sp, #260]	; 0x104
 8009a9e:	2210      	movs	r2, #16
 8009aa0:	2b6f      	cmp	r3, #111	; 0x6f
 8009aa2:	9242      	str	r2, [sp, #264]	; 0x108
 8009aa4:	bf34      	ite	cc
 8009aa6:	2303      	movcc	r3, #3
 8009aa8:	2304      	movcs	r3, #4
 8009aaa:	e002      	b.n	8009ab2 <__ssvfiscanf_r+0x1e2>
 8009aac:	2300      	movs	r3, #0
 8009aae:	9342      	str	r3, [sp, #264]	; 0x108
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ab4:	6863      	ldr	r3, [r4, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dd3d      	ble.n	8009b36 <__ssvfiscanf_r+0x266>
 8009aba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009abc:	0659      	lsls	r1, r3, #25
 8009abe:	d404      	bmi.n	8009aca <__ssvfiscanf_r+0x1fa>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	781a      	ldrb	r2, [r3, #0]
 8009ac4:	5cba      	ldrb	r2, [r7, r2]
 8009ac6:	0712      	lsls	r2, r2, #28
 8009ac8:	d43c      	bmi.n	8009b44 <__ssvfiscanf_r+0x274>
 8009aca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	dc4b      	bgt.n	8009b68 <__ssvfiscanf_r+0x298>
 8009ad0:	466b      	mov	r3, sp
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	a941      	add	r1, sp, #260	; 0x104
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f000 f872 	bl	8009bc0 <_scanf_chars>
 8009adc:	2801      	cmp	r0, #1
 8009ade:	d06a      	beq.n	8009bb6 <__ssvfiscanf_r+0x2e6>
 8009ae0:	2802      	cmp	r0, #2
 8009ae2:	f47f af1c 	bne.w	800991e <__ssvfiscanf_r+0x4e>
 8009ae6:	e7cb      	b.n	8009a80 <__ssvfiscanf_r+0x1b0>
 8009ae8:	2308      	movs	r3, #8
 8009aea:	9342      	str	r3, [sp, #264]	; 0x108
 8009aec:	2304      	movs	r3, #4
 8009aee:	e7e0      	b.n	8009ab2 <__ssvfiscanf_r+0x1e2>
 8009af0:	220a      	movs	r2, #10
 8009af2:	e7d5      	b.n	8009aa0 <__ssvfiscanf_r+0x1d0>
 8009af4:	4629      	mov	r1, r5
 8009af6:	4640      	mov	r0, r8
 8009af8:	f000 fa5e 	bl	8009fb8 <__sccl>
 8009afc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b02:	9341      	str	r3, [sp, #260]	; 0x104
 8009b04:	4605      	mov	r5, r0
 8009b06:	2301      	movs	r3, #1
 8009b08:	e7d3      	b.n	8009ab2 <__ssvfiscanf_r+0x1e2>
 8009b0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b10:	9341      	str	r3, [sp, #260]	; 0x104
 8009b12:	2300      	movs	r3, #0
 8009b14:	e7cd      	b.n	8009ab2 <__ssvfiscanf_r+0x1e2>
 8009b16:	2302      	movs	r3, #2
 8009b18:	e7cb      	b.n	8009ab2 <__ssvfiscanf_r+0x1e2>
 8009b1a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009b1c:	06c3      	lsls	r3, r0, #27
 8009b1e:	f53f aefe 	bmi.w	800991e <__ssvfiscanf_r+0x4e>
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b26:	1d19      	adds	r1, r3, #4
 8009b28:	9100      	str	r1, [sp, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	07c0      	lsls	r0, r0, #31
 8009b2e:	bf4c      	ite	mi
 8009b30:	801a      	strhmi	r2, [r3, #0]
 8009b32:	601a      	strpl	r2, [r3, #0]
 8009b34:	e6f3      	b.n	800991e <__ssvfiscanf_r+0x4e>
 8009b36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b38:	4621      	mov	r1, r4
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	4798      	blx	r3
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d0bb      	beq.n	8009aba <__ssvfiscanf_r+0x1ea>
 8009b42:	e79d      	b.n	8009a80 <__ssvfiscanf_r+0x1b0>
 8009b44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b46:	3201      	adds	r2, #1
 8009b48:	9245      	str	r2, [sp, #276]	; 0x114
 8009b4a:	6862      	ldr	r2, [r4, #4]
 8009b4c:	3a01      	subs	r2, #1
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	6062      	str	r2, [r4, #4]
 8009b52:	dd02      	ble.n	8009b5a <__ssvfiscanf_r+0x28a>
 8009b54:	3301      	adds	r3, #1
 8009b56:	6023      	str	r3, [r4, #0]
 8009b58:	e7b2      	b.n	8009ac0 <__ssvfiscanf_r+0x1f0>
 8009b5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4798      	blx	r3
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d0ac      	beq.n	8009ac0 <__ssvfiscanf_r+0x1f0>
 8009b66:	e78b      	b.n	8009a80 <__ssvfiscanf_r+0x1b0>
 8009b68:	2b04      	cmp	r3, #4
 8009b6a:	dc0f      	bgt.n	8009b8c <__ssvfiscanf_r+0x2bc>
 8009b6c:	466b      	mov	r3, sp
 8009b6e:	4622      	mov	r2, r4
 8009b70:	a941      	add	r1, sp, #260	; 0x104
 8009b72:	4630      	mov	r0, r6
 8009b74:	f000 f87e 	bl	8009c74 <_scanf_i>
 8009b78:	e7b0      	b.n	8009adc <__ssvfiscanf_r+0x20c>
 8009b7a:	bf00      	nop
 8009b7c:	0800981d 	.word	0x0800981d
 8009b80:	08009897 	.word	0x08009897
 8009b84:	0800c891 	.word	0x0800c891
 8009b88:	0800c997 	.word	0x0800c997
 8009b8c:	4b0b      	ldr	r3, [pc, #44]	; (8009bbc <__ssvfiscanf_r+0x2ec>)
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f43f aec5 	beq.w	800991e <__ssvfiscanf_r+0x4e>
 8009b94:	466b      	mov	r3, sp
 8009b96:	4622      	mov	r2, r4
 8009b98:	a941      	add	r1, sp, #260	; 0x104
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7fc fe36 	bl	800680c <_scanf_float>
 8009ba0:	e79c      	b.n	8009adc <__ssvfiscanf_r+0x20c>
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ba8:	bf18      	it	ne
 8009baa:	f04f 30ff 	movne.w	r0, #4294967295
 8009bae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009bb8:	e7f9      	b.n	8009bae <__ssvfiscanf_r+0x2de>
 8009bba:	bf00      	nop
 8009bbc:	0800680d 	.word	0x0800680d

08009bc0 <_scanf_chars>:
 8009bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bc4:	4615      	mov	r5, r2
 8009bc6:	688a      	ldr	r2, [r1, #8]
 8009bc8:	4680      	mov	r8, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	b932      	cbnz	r2, 8009bdc <_scanf_chars+0x1c>
 8009bce:	698a      	ldr	r2, [r1, #24]
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	bf0c      	ite	eq
 8009bd4:	2201      	moveq	r2, #1
 8009bd6:	f04f 32ff 	movne.w	r2, #4294967295
 8009bda:	608a      	str	r2, [r1, #8]
 8009bdc:	6822      	ldr	r2, [r4, #0]
 8009bde:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009c70 <_scanf_chars+0xb0>
 8009be2:	06d1      	lsls	r1, r2, #27
 8009be4:	bf5f      	itttt	pl
 8009be6:	681a      	ldrpl	r2, [r3, #0]
 8009be8:	1d11      	addpl	r1, r2, #4
 8009bea:	6019      	strpl	r1, [r3, #0]
 8009bec:	6816      	ldrpl	r6, [r2, #0]
 8009bee:	2700      	movs	r7, #0
 8009bf0:	69a0      	ldr	r0, [r4, #24]
 8009bf2:	b188      	cbz	r0, 8009c18 <_scanf_chars+0x58>
 8009bf4:	2801      	cmp	r0, #1
 8009bf6:	d107      	bne.n	8009c08 <_scanf_chars+0x48>
 8009bf8:	682a      	ldr	r2, [r5, #0]
 8009bfa:	7811      	ldrb	r1, [r2, #0]
 8009bfc:	6962      	ldr	r2, [r4, #20]
 8009bfe:	5c52      	ldrb	r2, [r2, r1]
 8009c00:	b952      	cbnz	r2, 8009c18 <_scanf_chars+0x58>
 8009c02:	2f00      	cmp	r7, #0
 8009c04:	d031      	beq.n	8009c6a <_scanf_chars+0xaa>
 8009c06:	e022      	b.n	8009c4e <_scanf_chars+0x8e>
 8009c08:	2802      	cmp	r0, #2
 8009c0a:	d120      	bne.n	8009c4e <_scanf_chars+0x8e>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009c14:	071b      	lsls	r3, r3, #28
 8009c16:	d41a      	bmi.n	8009c4e <_scanf_chars+0x8e>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	06da      	lsls	r2, r3, #27
 8009c1c:	bf5e      	ittt	pl
 8009c1e:	682b      	ldrpl	r3, [r5, #0]
 8009c20:	781b      	ldrbpl	r3, [r3, #0]
 8009c22:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009c26:	682a      	ldr	r2, [r5, #0]
 8009c28:	686b      	ldr	r3, [r5, #4]
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	602a      	str	r2, [r5, #0]
 8009c2e:	68a2      	ldr	r2, [r4, #8]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	3a01      	subs	r2, #1
 8009c34:	606b      	str	r3, [r5, #4]
 8009c36:	3701      	adds	r7, #1
 8009c38:	60a2      	str	r2, [r4, #8]
 8009c3a:	b142      	cbz	r2, 8009c4e <_scanf_chars+0x8e>
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dcd7      	bgt.n	8009bf0 <_scanf_chars+0x30>
 8009c40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c44:	4629      	mov	r1, r5
 8009c46:	4640      	mov	r0, r8
 8009c48:	4798      	blx	r3
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d0d0      	beq.n	8009bf0 <_scanf_chars+0x30>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	f013 0310 	ands.w	r3, r3, #16
 8009c54:	d105      	bne.n	8009c62 <_scanf_chars+0xa2>
 8009c56:	68e2      	ldr	r2, [r4, #12]
 8009c58:	3201      	adds	r2, #1
 8009c5a:	60e2      	str	r2, [r4, #12]
 8009c5c:	69a2      	ldr	r2, [r4, #24]
 8009c5e:	b102      	cbz	r2, 8009c62 <_scanf_chars+0xa2>
 8009c60:	7033      	strb	r3, [r6, #0]
 8009c62:	6923      	ldr	r3, [r4, #16]
 8009c64:	443b      	add	r3, r7
 8009c66:	6123      	str	r3, [r4, #16]
 8009c68:	2000      	movs	r0, #0
 8009c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c6e:	bf00      	nop
 8009c70:	0800c891 	.word	0x0800c891

08009c74 <_scanf_i>:
 8009c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	4698      	mov	r8, r3
 8009c7a:	4b74      	ldr	r3, [pc, #464]	; (8009e4c <_scanf_i+0x1d8>)
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	4682      	mov	sl, r0
 8009c80:	4616      	mov	r6, r2
 8009c82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c86:	b087      	sub	sp, #28
 8009c88:	ab03      	add	r3, sp, #12
 8009c8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009c8e:	4b70      	ldr	r3, [pc, #448]	; (8009e50 <_scanf_i+0x1dc>)
 8009c90:	69a1      	ldr	r1, [r4, #24]
 8009c92:	4a70      	ldr	r2, [pc, #448]	; (8009e54 <_scanf_i+0x1e0>)
 8009c94:	2903      	cmp	r1, #3
 8009c96:	bf18      	it	ne
 8009c98:	461a      	movne	r2, r3
 8009c9a:	68a3      	ldr	r3, [r4, #8]
 8009c9c:	9201      	str	r2, [sp, #4]
 8009c9e:	1e5a      	subs	r2, r3, #1
 8009ca0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009ca4:	bf88      	it	hi
 8009ca6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009caa:	4627      	mov	r7, r4
 8009cac:	bf82      	ittt	hi
 8009cae:	eb03 0905 	addhi.w	r9, r3, r5
 8009cb2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009cb6:	60a3      	strhi	r3, [r4, #8]
 8009cb8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009cbc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009cc0:	bf98      	it	ls
 8009cc2:	f04f 0900 	movls.w	r9, #0
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	463d      	mov	r5, r7
 8009cca:	f04f 0b00 	mov.w	fp, #0
 8009cce:	6831      	ldr	r1, [r6, #0]
 8009cd0:	ab03      	add	r3, sp, #12
 8009cd2:	7809      	ldrb	r1, [r1, #0]
 8009cd4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009cd8:	2202      	movs	r2, #2
 8009cda:	f7f6 fa91 	bl	8000200 <memchr>
 8009cde:	b328      	cbz	r0, 8009d2c <_scanf_i+0xb8>
 8009ce0:	f1bb 0f01 	cmp.w	fp, #1
 8009ce4:	d159      	bne.n	8009d9a <_scanf_i+0x126>
 8009ce6:	6862      	ldr	r2, [r4, #4]
 8009ce8:	b92a      	cbnz	r2, 8009cf6 <_scanf_i+0x82>
 8009cea:	6822      	ldr	r2, [r4, #0]
 8009cec:	2308      	movs	r3, #8
 8009cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cf2:	6063      	str	r3, [r4, #4]
 8009cf4:	6022      	str	r2, [r4, #0]
 8009cf6:	6822      	ldr	r2, [r4, #0]
 8009cf8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009cfc:	6022      	str	r2, [r4, #0]
 8009cfe:	68a2      	ldr	r2, [r4, #8]
 8009d00:	1e51      	subs	r1, r2, #1
 8009d02:	60a1      	str	r1, [r4, #8]
 8009d04:	b192      	cbz	r2, 8009d2c <_scanf_i+0xb8>
 8009d06:	6832      	ldr	r2, [r6, #0]
 8009d08:	1c51      	adds	r1, r2, #1
 8009d0a:	6031      	str	r1, [r6, #0]
 8009d0c:	7812      	ldrb	r2, [r2, #0]
 8009d0e:	f805 2b01 	strb.w	r2, [r5], #1
 8009d12:	6872      	ldr	r2, [r6, #4]
 8009d14:	3a01      	subs	r2, #1
 8009d16:	2a00      	cmp	r2, #0
 8009d18:	6072      	str	r2, [r6, #4]
 8009d1a:	dc07      	bgt.n	8009d2c <_scanf_i+0xb8>
 8009d1c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009d20:	4631      	mov	r1, r6
 8009d22:	4650      	mov	r0, sl
 8009d24:	4790      	blx	r2
 8009d26:	2800      	cmp	r0, #0
 8009d28:	f040 8085 	bne.w	8009e36 <_scanf_i+0x1c2>
 8009d2c:	f10b 0b01 	add.w	fp, fp, #1
 8009d30:	f1bb 0f03 	cmp.w	fp, #3
 8009d34:	d1cb      	bne.n	8009cce <_scanf_i+0x5a>
 8009d36:	6863      	ldr	r3, [r4, #4]
 8009d38:	b90b      	cbnz	r3, 8009d3e <_scanf_i+0xca>
 8009d3a:	230a      	movs	r3, #10
 8009d3c:	6063      	str	r3, [r4, #4]
 8009d3e:	6863      	ldr	r3, [r4, #4]
 8009d40:	4945      	ldr	r1, [pc, #276]	; (8009e58 <_scanf_i+0x1e4>)
 8009d42:	6960      	ldr	r0, [r4, #20]
 8009d44:	1ac9      	subs	r1, r1, r3
 8009d46:	f000 f937 	bl	8009fb8 <__sccl>
 8009d4a:	f04f 0b00 	mov.w	fp, #0
 8009d4e:	68a3      	ldr	r3, [r4, #8]
 8009d50:	6822      	ldr	r2, [r4, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d03d      	beq.n	8009dd2 <_scanf_i+0x15e>
 8009d56:	6831      	ldr	r1, [r6, #0]
 8009d58:	6960      	ldr	r0, [r4, #20]
 8009d5a:	f891 c000 	ldrb.w	ip, [r1]
 8009d5e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d035      	beq.n	8009dd2 <_scanf_i+0x15e>
 8009d66:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009d6a:	d124      	bne.n	8009db6 <_scanf_i+0x142>
 8009d6c:	0510      	lsls	r0, r2, #20
 8009d6e:	d522      	bpl.n	8009db6 <_scanf_i+0x142>
 8009d70:	f10b 0b01 	add.w	fp, fp, #1
 8009d74:	f1b9 0f00 	cmp.w	r9, #0
 8009d78:	d003      	beq.n	8009d82 <_scanf_i+0x10e>
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009d80:	60a3      	str	r3, [r4, #8]
 8009d82:	6873      	ldr	r3, [r6, #4]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	6073      	str	r3, [r6, #4]
 8009d8a:	dd1b      	ble.n	8009dc4 <_scanf_i+0x150>
 8009d8c:	6833      	ldr	r3, [r6, #0]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	6033      	str	r3, [r6, #0]
 8009d92:	68a3      	ldr	r3, [r4, #8]
 8009d94:	3b01      	subs	r3, #1
 8009d96:	60a3      	str	r3, [r4, #8]
 8009d98:	e7d9      	b.n	8009d4e <_scanf_i+0xda>
 8009d9a:	f1bb 0f02 	cmp.w	fp, #2
 8009d9e:	d1ae      	bne.n	8009cfe <_scanf_i+0x8a>
 8009da0:	6822      	ldr	r2, [r4, #0]
 8009da2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009da6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009daa:	d1bf      	bne.n	8009d2c <_scanf_i+0xb8>
 8009dac:	2310      	movs	r3, #16
 8009dae:	6063      	str	r3, [r4, #4]
 8009db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009db4:	e7a2      	b.n	8009cfc <_scanf_i+0x88>
 8009db6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009dba:	6022      	str	r2, [r4, #0]
 8009dbc:	780b      	ldrb	r3, [r1, #0]
 8009dbe:	f805 3b01 	strb.w	r3, [r5], #1
 8009dc2:	e7de      	b.n	8009d82 <_scanf_i+0x10e>
 8009dc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4650      	mov	r0, sl
 8009dcc:	4798      	blx	r3
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d0df      	beq.n	8009d92 <_scanf_i+0x11e>
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	05d9      	lsls	r1, r3, #23
 8009dd6:	d50d      	bpl.n	8009df4 <_scanf_i+0x180>
 8009dd8:	42bd      	cmp	r5, r7
 8009dda:	d909      	bls.n	8009df0 <_scanf_i+0x17c>
 8009ddc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009de0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009de4:	4632      	mov	r2, r6
 8009de6:	4650      	mov	r0, sl
 8009de8:	4798      	blx	r3
 8009dea:	f105 39ff 	add.w	r9, r5, #4294967295
 8009dee:	464d      	mov	r5, r9
 8009df0:	42bd      	cmp	r5, r7
 8009df2:	d028      	beq.n	8009e46 <_scanf_i+0x1d2>
 8009df4:	6822      	ldr	r2, [r4, #0]
 8009df6:	f012 0210 	ands.w	r2, r2, #16
 8009dfa:	d113      	bne.n	8009e24 <_scanf_i+0x1b0>
 8009dfc:	702a      	strb	r2, [r5, #0]
 8009dfe:	6863      	ldr	r3, [r4, #4]
 8009e00:	9e01      	ldr	r6, [sp, #4]
 8009e02:	4639      	mov	r1, r7
 8009e04:	4650      	mov	r0, sl
 8009e06:	47b0      	blx	r6
 8009e08:	f8d8 3000 	ldr.w	r3, [r8]
 8009e0c:	6821      	ldr	r1, [r4, #0]
 8009e0e:	1d1a      	adds	r2, r3, #4
 8009e10:	f8c8 2000 	str.w	r2, [r8]
 8009e14:	f011 0f20 	tst.w	r1, #32
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	d00f      	beq.n	8009e3c <_scanf_i+0x1c8>
 8009e1c:	6018      	str	r0, [r3, #0]
 8009e1e:	68e3      	ldr	r3, [r4, #12]
 8009e20:	3301      	adds	r3, #1
 8009e22:	60e3      	str	r3, [r4, #12]
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	1bed      	subs	r5, r5, r7
 8009e28:	445d      	add	r5, fp
 8009e2a:	442b      	add	r3, r5
 8009e2c:	6123      	str	r3, [r4, #16]
 8009e2e:	2000      	movs	r0, #0
 8009e30:	b007      	add	sp, #28
 8009e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e36:	f04f 0b00 	mov.w	fp, #0
 8009e3a:	e7ca      	b.n	8009dd2 <_scanf_i+0x15e>
 8009e3c:	07ca      	lsls	r2, r1, #31
 8009e3e:	bf4c      	ite	mi
 8009e40:	8018      	strhmi	r0, [r3, #0]
 8009e42:	6018      	strpl	r0, [r3, #0]
 8009e44:	e7eb      	b.n	8009e1e <_scanf_i+0x1aa>
 8009e46:	2001      	movs	r0, #1
 8009e48:	e7f2      	b.n	8009e30 <_scanf_i+0x1bc>
 8009e4a:	bf00      	nop
 8009e4c:	0800c5f4 	.word	0x0800c5f4
 8009e50:	0800a9c5 	.word	0x0800a9c5
 8009e54:	08009569 	.word	0x08009569
 8009e58:	0800c9b2 	.word	0x0800c9b2

08009e5c <__sflush_r>:
 8009e5c:	898a      	ldrh	r2, [r1, #12]
 8009e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e62:	4605      	mov	r5, r0
 8009e64:	0710      	lsls	r0, r2, #28
 8009e66:	460c      	mov	r4, r1
 8009e68:	d458      	bmi.n	8009f1c <__sflush_r+0xc0>
 8009e6a:	684b      	ldr	r3, [r1, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	dc05      	bgt.n	8009e7c <__sflush_r+0x20>
 8009e70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	dc02      	bgt.n	8009e7c <__sflush_r+0x20>
 8009e76:	2000      	movs	r0, #0
 8009e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e7e:	2e00      	cmp	r6, #0
 8009e80:	d0f9      	beq.n	8009e76 <__sflush_r+0x1a>
 8009e82:	2300      	movs	r3, #0
 8009e84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e88:	682f      	ldr	r7, [r5, #0]
 8009e8a:	6a21      	ldr	r1, [r4, #32]
 8009e8c:	602b      	str	r3, [r5, #0]
 8009e8e:	d032      	beq.n	8009ef6 <__sflush_r+0x9a>
 8009e90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	075a      	lsls	r2, r3, #29
 8009e96:	d505      	bpl.n	8009ea4 <__sflush_r+0x48>
 8009e98:	6863      	ldr	r3, [r4, #4]
 8009e9a:	1ac0      	subs	r0, r0, r3
 8009e9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e9e:	b10b      	cbz	r3, 8009ea4 <__sflush_r+0x48>
 8009ea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ea2:	1ac0      	subs	r0, r0, r3
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eaa:	6a21      	ldr	r1, [r4, #32]
 8009eac:	4628      	mov	r0, r5
 8009eae:	47b0      	blx	r6
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	d106      	bne.n	8009ec4 <__sflush_r+0x68>
 8009eb6:	6829      	ldr	r1, [r5, #0]
 8009eb8:	291d      	cmp	r1, #29
 8009eba:	d82b      	bhi.n	8009f14 <__sflush_r+0xb8>
 8009ebc:	4a29      	ldr	r2, [pc, #164]	; (8009f64 <__sflush_r+0x108>)
 8009ebe:	410a      	asrs	r2, r1
 8009ec0:	07d6      	lsls	r6, r2, #31
 8009ec2:	d427      	bmi.n	8009f14 <__sflush_r+0xb8>
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	6062      	str	r2, [r4, #4]
 8009ec8:	04d9      	lsls	r1, r3, #19
 8009eca:	6922      	ldr	r2, [r4, #16]
 8009ecc:	6022      	str	r2, [r4, #0]
 8009ece:	d504      	bpl.n	8009eda <__sflush_r+0x7e>
 8009ed0:	1c42      	adds	r2, r0, #1
 8009ed2:	d101      	bne.n	8009ed8 <__sflush_r+0x7c>
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	b903      	cbnz	r3, 8009eda <__sflush_r+0x7e>
 8009ed8:	6560      	str	r0, [r4, #84]	; 0x54
 8009eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009edc:	602f      	str	r7, [r5, #0]
 8009ede:	2900      	cmp	r1, #0
 8009ee0:	d0c9      	beq.n	8009e76 <__sflush_r+0x1a>
 8009ee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ee6:	4299      	cmp	r1, r3
 8009ee8:	d002      	beq.n	8009ef0 <__sflush_r+0x94>
 8009eea:	4628      	mov	r0, r5
 8009eec:	f7fd fefa 	bl	8007ce4 <_free_r>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	6360      	str	r0, [r4, #52]	; 0x34
 8009ef4:	e7c0      	b.n	8009e78 <__sflush_r+0x1c>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	4628      	mov	r0, r5
 8009efa:	47b0      	blx	r6
 8009efc:	1c41      	adds	r1, r0, #1
 8009efe:	d1c8      	bne.n	8009e92 <__sflush_r+0x36>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0c5      	beq.n	8009e92 <__sflush_r+0x36>
 8009f06:	2b1d      	cmp	r3, #29
 8009f08:	d001      	beq.n	8009f0e <__sflush_r+0xb2>
 8009f0a:	2b16      	cmp	r3, #22
 8009f0c:	d101      	bne.n	8009f12 <__sflush_r+0xb6>
 8009f0e:	602f      	str	r7, [r5, #0]
 8009f10:	e7b1      	b.n	8009e76 <__sflush_r+0x1a>
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	e7ad      	b.n	8009e78 <__sflush_r+0x1c>
 8009f1c:	690f      	ldr	r7, [r1, #16]
 8009f1e:	2f00      	cmp	r7, #0
 8009f20:	d0a9      	beq.n	8009e76 <__sflush_r+0x1a>
 8009f22:	0793      	lsls	r3, r2, #30
 8009f24:	680e      	ldr	r6, [r1, #0]
 8009f26:	bf08      	it	eq
 8009f28:	694b      	ldreq	r3, [r1, #20]
 8009f2a:	600f      	str	r7, [r1, #0]
 8009f2c:	bf18      	it	ne
 8009f2e:	2300      	movne	r3, #0
 8009f30:	eba6 0807 	sub.w	r8, r6, r7
 8009f34:	608b      	str	r3, [r1, #8]
 8009f36:	f1b8 0f00 	cmp.w	r8, #0
 8009f3a:	dd9c      	ble.n	8009e76 <__sflush_r+0x1a>
 8009f3c:	6a21      	ldr	r1, [r4, #32]
 8009f3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f40:	4643      	mov	r3, r8
 8009f42:	463a      	mov	r2, r7
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b0      	blx	r6
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	dc06      	bgt.n	8009f5a <__sflush_r+0xfe>
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295
 8009f58:	e78e      	b.n	8009e78 <__sflush_r+0x1c>
 8009f5a:	4407      	add	r7, r0
 8009f5c:	eba8 0800 	sub.w	r8, r8, r0
 8009f60:	e7e9      	b.n	8009f36 <__sflush_r+0xda>
 8009f62:	bf00      	nop
 8009f64:	dfbffffe 	.word	0xdfbffffe

08009f68 <_fflush_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	690b      	ldr	r3, [r1, #16]
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	b913      	cbnz	r3, 8009f78 <_fflush_r+0x10>
 8009f72:	2500      	movs	r5, #0
 8009f74:	4628      	mov	r0, r5
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	b118      	cbz	r0, 8009f82 <_fflush_r+0x1a>
 8009f7a:	6a03      	ldr	r3, [r0, #32]
 8009f7c:	b90b      	cbnz	r3, 8009f82 <_fflush_r+0x1a>
 8009f7e:	f7fc fee1 	bl	8006d44 <__sinit>
 8009f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0f3      	beq.n	8009f72 <_fflush_r+0xa>
 8009f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f8c:	07d0      	lsls	r0, r2, #31
 8009f8e:	d404      	bmi.n	8009f9a <_fflush_r+0x32>
 8009f90:	0599      	lsls	r1, r3, #22
 8009f92:	d402      	bmi.n	8009f9a <_fflush_r+0x32>
 8009f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f96:	f7fd f81a 	bl	8006fce <__retarget_lock_acquire_recursive>
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	f7ff ff5d 	bl	8009e5c <__sflush_r>
 8009fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fa4:	07da      	lsls	r2, r3, #31
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	d4e4      	bmi.n	8009f74 <_fflush_r+0xc>
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	059b      	lsls	r3, r3, #22
 8009fae:	d4e1      	bmi.n	8009f74 <_fflush_r+0xc>
 8009fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fb2:	f7fd f80d 	bl	8006fd0 <__retarget_lock_release_recursive>
 8009fb6:	e7dd      	b.n	8009f74 <_fflush_r+0xc>

08009fb8 <__sccl>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	780b      	ldrb	r3, [r1, #0]
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	2b5e      	cmp	r3, #94	; 0x5e
 8009fc0:	bf0b      	itete	eq
 8009fc2:	784b      	ldrbeq	r3, [r1, #1]
 8009fc4:	1c4a      	addne	r2, r1, #1
 8009fc6:	1c8a      	addeq	r2, r1, #2
 8009fc8:	2100      	movne	r1, #0
 8009fca:	bf08      	it	eq
 8009fcc:	2101      	moveq	r1, #1
 8009fce:	3801      	subs	r0, #1
 8009fd0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009fd4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009fd8:	42a8      	cmp	r0, r5
 8009fda:	d1fb      	bne.n	8009fd4 <__sccl+0x1c>
 8009fdc:	b90b      	cbnz	r3, 8009fe2 <__sccl+0x2a>
 8009fde:	1e50      	subs	r0, r2, #1
 8009fe0:	bd70      	pop	{r4, r5, r6, pc}
 8009fe2:	f081 0101 	eor.w	r1, r1, #1
 8009fe6:	54e1      	strb	r1, [r4, r3]
 8009fe8:	4610      	mov	r0, r2
 8009fea:	4602      	mov	r2, r0
 8009fec:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ff0:	2d2d      	cmp	r5, #45	; 0x2d
 8009ff2:	d005      	beq.n	800a000 <__sccl+0x48>
 8009ff4:	2d5d      	cmp	r5, #93	; 0x5d
 8009ff6:	d016      	beq.n	800a026 <__sccl+0x6e>
 8009ff8:	2d00      	cmp	r5, #0
 8009ffa:	d0f1      	beq.n	8009fe0 <__sccl+0x28>
 8009ffc:	462b      	mov	r3, r5
 8009ffe:	e7f2      	b.n	8009fe6 <__sccl+0x2e>
 800a000:	7846      	ldrb	r6, [r0, #1]
 800a002:	2e5d      	cmp	r6, #93	; 0x5d
 800a004:	d0fa      	beq.n	8009ffc <__sccl+0x44>
 800a006:	42b3      	cmp	r3, r6
 800a008:	dcf8      	bgt.n	8009ffc <__sccl+0x44>
 800a00a:	3002      	adds	r0, #2
 800a00c:	461a      	mov	r2, r3
 800a00e:	3201      	adds	r2, #1
 800a010:	4296      	cmp	r6, r2
 800a012:	54a1      	strb	r1, [r4, r2]
 800a014:	dcfb      	bgt.n	800a00e <__sccl+0x56>
 800a016:	1af2      	subs	r2, r6, r3
 800a018:	3a01      	subs	r2, #1
 800a01a:	1c5d      	adds	r5, r3, #1
 800a01c:	42b3      	cmp	r3, r6
 800a01e:	bfa8      	it	ge
 800a020:	2200      	movge	r2, #0
 800a022:	18ab      	adds	r3, r5, r2
 800a024:	e7e1      	b.n	8009fea <__sccl+0x32>
 800a026:	4610      	mov	r0, r2
 800a028:	e7da      	b.n	8009fe0 <__sccl+0x28>

0800a02a <__submore>:
 800a02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02e:	460c      	mov	r4, r1
 800a030:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a036:	4299      	cmp	r1, r3
 800a038:	d11d      	bne.n	800a076 <__submore+0x4c>
 800a03a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a03e:	f7fd fec5 	bl	8007dcc <_malloc_r>
 800a042:	b918      	cbnz	r0, 800a04c <__submore+0x22>
 800a044:	f04f 30ff 	mov.w	r0, #4294967295
 800a048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a04c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a050:	63a3      	str	r3, [r4, #56]	; 0x38
 800a052:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a056:	6360      	str	r0, [r4, #52]	; 0x34
 800a058:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a05c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a060:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a064:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a068:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a06c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a070:	6020      	str	r0, [r4, #0]
 800a072:	2000      	movs	r0, #0
 800a074:	e7e8      	b.n	800a048 <__submore+0x1e>
 800a076:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a078:	0077      	lsls	r7, r6, #1
 800a07a:	463a      	mov	r2, r7
 800a07c:	f000 fc01 	bl	800a882 <_realloc_r>
 800a080:	4605      	mov	r5, r0
 800a082:	2800      	cmp	r0, #0
 800a084:	d0de      	beq.n	800a044 <__submore+0x1a>
 800a086:	eb00 0806 	add.w	r8, r0, r6
 800a08a:	4601      	mov	r1, r0
 800a08c:	4632      	mov	r2, r6
 800a08e:	4640      	mov	r0, r8
 800a090:	f000 f842 	bl	800a118 <memcpy>
 800a094:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a098:	f8c4 8000 	str.w	r8, [r4]
 800a09c:	e7e9      	b.n	800a072 <__submore+0x48>

0800a09e <memmove>:
 800a09e:	4288      	cmp	r0, r1
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	eb01 0402 	add.w	r4, r1, r2
 800a0a6:	d902      	bls.n	800a0ae <memmove+0x10>
 800a0a8:	4284      	cmp	r4, r0
 800a0aa:	4623      	mov	r3, r4
 800a0ac:	d807      	bhi.n	800a0be <memmove+0x20>
 800a0ae:	1e43      	subs	r3, r0, #1
 800a0b0:	42a1      	cmp	r1, r4
 800a0b2:	d008      	beq.n	800a0c6 <memmove+0x28>
 800a0b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0bc:	e7f8      	b.n	800a0b0 <memmove+0x12>
 800a0be:	4402      	add	r2, r0
 800a0c0:	4601      	mov	r1, r0
 800a0c2:	428a      	cmp	r2, r1
 800a0c4:	d100      	bne.n	800a0c8 <memmove+0x2a>
 800a0c6:	bd10      	pop	{r4, pc}
 800a0c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0d0:	e7f7      	b.n	800a0c2 <memmove+0x24>

0800a0d2 <strncmp>:
 800a0d2:	b510      	push	{r4, lr}
 800a0d4:	b16a      	cbz	r2, 800a0f2 <strncmp+0x20>
 800a0d6:	3901      	subs	r1, #1
 800a0d8:	1884      	adds	r4, r0, r2
 800a0da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d103      	bne.n	800a0ee <strncmp+0x1c>
 800a0e6:	42a0      	cmp	r0, r4
 800a0e8:	d001      	beq.n	800a0ee <strncmp+0x1c>
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	d1f5      	bne.n	800a0da <strncmp+0x8>
 800a0ee:	1ad0      	subs	r0, r2, r3
 800a0f0:	bd10      	pop	{r4, pc}
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	e7fc      	b.n	800a0f0 <strncmp+0x1e>
	...

0800a0f8 <_sbrk_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d06      	ldr	r5, [pc, #24]	; (800a114 <_sbrk_r+0x1c>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4604      	mov	r4, r0
 800a100:	4608      	mov	r0, r1
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	f7f8 f912 	bl	800232c <_sbrk>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_sbrk_r+0x1a>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_sbrk_r+0x1a>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20000638 	.word	0x20000638

0800a118 <memcpy>:
 800a118:	440a      	add	r2, r1
 800a11a:	4291      	cmp	r1, r2
 800a11c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a120:	d100      	bne.n	800a124 <memcpy+0xc>
 800a122:	4770      	bx	lr
 800a124:	b510      	push	{r4, lr}
 800a126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a12a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a12e:	4291      	cmp	r1, r2
 800a130:	d1f9      	bne.n	800a126 <memcpy+0xe>
 800a132:	bd10      	pop	{r4, pc}
 800a134:	0000      	movs	r0, r0
	...

0800a138 <nan>:
 800a138:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a140 <nan+0x8>
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	00000000 	.word	0x00000000
 800a144:	7ff80000 	.word	0x7ff80000

0800a148 <__assert_func>:
 800a148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a14a:	4614      	mov	r4, r2
 800a14c:	461a      	mov	r2, r3
 800a14e:	4b09      	ldr	r3, [pc, #36]	; (800a174 <__assert_func+0x2c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4605      	mov	r5, r0
 800a154:	68d8      	ldr	r0, [r3, #12]
 800a156:	b14c      	cbz	r4, 800a16c <__assert_func+0x24>
 800a158:	4b07      	ldr	r3, [pc, #28]	; (800a178 <__assert_func+0x30>)
 800a15a:	9100      	str	r1, [sp, #0]
 800a15c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a160:	4906      	ldr	r1, [pc, #24]	; (800a17c <__assert_func+0x34>)
 800a162:	462b      	mov	r3, r5
 800a164:	f000 fc3e 	bl	800a9e4 <fiprintf>
 800a168:	f000 fc4e 	bl	800aa08 <abort>
 800a16c:	4b04      	ldr	r3, [pc, #16]	; (800a180 <__assert_func+0x38>)
 800a16e:	461c      	mov	r4, r3
 800a170:	e7f3      	b.n	800a15a <__assert_func+0x12>
 800a172:	bf00      	nop
 800a174:	20000068 	.word	0x20000068
 800a178:	0800c9c5 	.word	0x0800c9c5
 800a17c:	0800c9d2 	.word	0x0800c9d2
 800a180:	0800ca00 	.word	0x0800ca00

0800a184 <_calloc_r>:
 800a184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a186:	fba1 2402 	umull	r2, r4, r1, r2
 800a18a:	b94c      	cbnz	r4, 800a1a0 <_calloc_r+0x1c>
 800a18c:	4611      	mov	r1, r2
 800a18e:	9201      	str	r2, [sp, #4]
 800a190:	f7fd fe1c 	bl	8007dcc <_malloc_r>
 800a194:	9a01      	ldr	r2, [sp, #4]
 800a196:	4605      	mov	r5, r0
 800a198:	b930      	cbnz	r0, 800a1a8 <_calloc_r+0x24>
 800a19a:	4628      	mov	r0, r5
 800a19c:	b003      	add	sp, #12
 800a19e:	bd30      	pop	{r4, r5, pc}
 800a1a0:	220c      	movs	r2, #12
 800a1a2:	6002      	str	r2, [r0, #0]
 800a1a4:	2500      	movs	r5, #0
 800a1a6:	e7f8      	b.n	800a19a <_calloc_r+0x16>
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	f7fc fe92 	bl	8006ed2 <memset>
 800a1ae:	e7f4      	b.n	800a19a <_calloc_r+0x16>

0800a1b0 <rshift>:
 800a1b0:	6903      	ldr	r3, [r0, #16]
 800a1b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1be:	f100 0414 	add.w	r4, r0, #20
 800a1c2:	dd45      	ble.n	800a250 <rshift+0xa0>
 800a1c4:	f011 011f 	ands.w	r1, r1, #31
 800a1c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1d0:	d10c      	bne.n	800a1ec <rshift+0x3c>
 800a1d2:	f100 0710 	add.w	r7, r0, #16
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	42b1      	cmp	r1, r6
 800a1da:	d334      	bcc.n	800a246 <rshift+0x96>
 800a1dc:	1a9b      	subs	r3, r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	1eea      	subs	r2, r5, #3
 800a1e2:	4296      	cmp	r6, r2
 800a1e4:	bf38      	it	cc
 800a1e6:	2300      	movcc	r3, #0
 800a1e8:	4423      	add	r3, r4
 800a1ea:	e015      	b.n	800a218 <rshift+0x68>
 800a1ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1f0:	f1c1 0820 	rsb	r8, r1, #32
 800a1f4:	40cf      	lsrs	r7, r1
 800a1f6:	f105 0e04 	add.w	lr, r5, #4
 800a1fa:	46a1      	mov	r9, r4
 800a1fc:	4576      	cmp	r6, lr
 800a1fe:	46f4      	mov	ip, lr
 800a200:	d815      	bhi.n	800a22e <rshift+0x7e>
 800a202:	1a9a      	subs	r2, r3, r2
 800a204:	0092      	lsls	r2, r2, #2
 800a206:	3a04      	subs	r2, #4
 800a208:	3501      	adds	r5, #1
 800a20a:	42ae      	cmp	r6, r5
 800a20c:	bf38      	it	cc
 800a20e:	2200      	movcc	r2, #0
 800a210:	18a3      	adds	r3, r4, r2
 800a212:	50a7      	str	r7, [r4, r2]
 800a214:	b107      	cbz	r7, 800a218 <rshift+0x68>
 800a216:	3304      	adds	r3, #4
 800a218:	1b1a      	subs	r2, r3, r4
 800a21a:	42a3      	cmp	r3, r4
 800a21c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a220:	bf08      	it	eq
 800a222:	2300      	moveq	r3, #0
 800a224:	6102      	str	r2, [r0, #16]
 800a226:	bf08      	it	eq
 800a228:	6143      	streq	r3, [r0, #20]
 800a22a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a22e:	f8dc c000 	ldr.w	ip, [ip]
 800a232:	fa0c fc08 	lsl.w	ip, ip, r8
 800a236:	ea4c 0707 	orr.w	r7, ip, r7
 800a23a:	f849 7b04 	str.w	r7, [r9], #4
 800a23e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a242:	40cf      	lsrs	r7, r1
 800a244:	e7da      	b.n	800a1fc <rshift+0x4c>
 800a246:	f851 cb04 	ldr.w	ip, [r1], #4
 800a24a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a24e:	e7c3      	b.n	800a1d8 <rshift+0x28>
 800a250:	4623      	mov	r3, r4
 800a252:	e7e1      	b.n	800a218 <rshift+0x68>

0800a254 <__hexdig_fun>:
 800a254:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a258:	2b09      	cmp	r3, #9
 800a25a:	d802      	bhi.n	800a262 <__hexdig_fun+0xe>
 800a25c:	3820      	subs	r0, #32
 800a25e:	b2c0      	uxtb	r0, r0
 800a260:	4770      	bx	lr
 800a262:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a266:	2b05      	cmp	r3, #5
 800a268:	d801      	bhi.n	800a26e <__hexdig_fun+0x1a>
 800a26a:	3847      	subs	r0, #71	; 0x47
 800a26c:	e7f7      	b.n	800a25e <__hexdig_fun+0xa>
 800a26e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a272:	2b05      	cmp	r3, #5
 800a274:	d801      	bhi.n	800a27a <__hexdig_fun+0x26>
 800a276:	3827      	subs	r0, #39	; 0x27
 800a278:	e7f1      	b.n	800a25e <__hexdig_fun+0xa>
 800a27a:	2000      	movs	r0, #0
 800a27c:	4770      	bx	lr
	...

0800a280 <__gethex>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	4617      	mov	r7, r2
 800a286:	680a      	ldr	r2, [r1, #0]
 800a288:	b085      	sub	sp, #20
 800a28a:	f102 0b02 	add.w	fp, r2, #2
 800a28e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a292:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a296:	4681      	mov	r9, r0
 800a298:	468a      	mov	sl, r1
 800a29a:	9302      	str	r3, [sp, #8]
 800a29c:	32fe      	adds	r2, #254	; 0xfe
 800a29e:	eb02 030b 	add.w	r3, r2, fp
 800a2a2:	46d8      	mov	r8, fp
 800a2a4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	2830      	cmp	r0, #48	; 0x30
 800a2ac:	d0f7      	beq.n	800a29e <__gethex+0x1e>
 800a2ae:	f7ff ffd1 	bl	800a254 <__hexdig_fun>
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d138      	bne.n	800a32a <__gethex+0xaa>
 800a2b8:	49a7      	ldr	r1, [pc, #668]	; (800a558 <__gethex+0x2d8>)
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	4640      	mov	r0, r8
 800a2be:	f7ff ff08 	bl	800a0d2 <strncmp>
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d169      	bne.n	800a39c <__gethex+0x11c>
 800a2c8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a2cc:	465d      	mov	r5, fp
 800a2ce:	f7ff ffc1 	bl	800a254 <__hexdig_fun>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d064      	beq.n	800a3a0 <__gethex+0x120>
 800a2d6:	465a      	mov	r2, fp
 800a2d8:	7810      	ldrb	r0, [r2, #0]
 800a2da:	2830      	cmp	r0, #48	; 0x30
 800a2dc:	4690      	mov	r8, r2
 800a2de:	f102 0201 	add.w	r2, r2, #1
 800a2e2:	d0f9      	beq.n	800a2d8 <__gethex+0x58>
 800a2e4:	f7ff ffb6 	bl	800a254 <__hexdig_fun>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	fab0 f480 	clz	r4, r0
 800a2ee:	0964      	lsrs	r4, r4, #5
 800a2f0:	465e      	mov	r6, fp
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	4642      	mov	r2, r8
 800a2f6:	4615      	mov	r5, r2
 800a2f8:	3201      	adds	r2, #1
 800a2fa:	7828      	ldrb	r0, [r5, #0]
 800a2fc:	f7ff ffaa 	bl	800a254 <__hexdig_fun>
 800a300:	2800      	cmp	r0, #0
 800a302:	d1f8      	bne.n	800a2f6 <__gethex+0x76>
 800a304:	4994      	ldr	r1, [pc, #592]	; (800a558 <__gethex+0x2d8>)
 800a306:	2201      	movs	r2, #1
 800a308:	4628      	mov	r0, r5
 800a30a:	f7ff fee2 	bl	800a0d2 <strncmp>
 800a30e:	b978      	cbnz	r0, 800a330 <__gethex+0xb0>
 800a310:	b946      	cbnz	r6, 800a324 <__gethex+0xa4>
 800a312:	1c6e      	adds	r6, r5, #1
 800a314:	4632      	mov	r2, r6
 800a316:	4615      	mov	r5, r2
 800a318:	3201      	adds	r2, #1
 800a31a:	7828      	ldrb	r0, [r5, #0]
 800a31c:	f7ff ff9a 	bl	800a254 <__hexdig_fun>
 800a320:	2800      	cmp	r0, #0
 800a322:	d1f8      	bne.n	800a316 <__gethex+0x96>
 800a324:	1b73      	subs	r3, r6, r5
 800a326:	009e      	lsls	r6, r3, #2
 800a328:	e004      	b.n	800a334 <__gethex+0xb4>
 800a32a:	2400      	movs	r4, #0
 800a32c:	4626      	mov	r6, r4
 800a32e:	e7e1      	b.n	800a2f4 <__gethex+0x74>
 800a330:	2e00      	cmp	r6, #0
 800a332:	d1f7      	bne.n	800a324 <__gethex+0xa4>
 800a334:	782b      	ldrb	r3, [r5, #0]
 800a336:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a33a:	2b50      	cmp	r3, #80	; 0x50
 800a33c:	d13d      	bne.n	800a3ba <__gethex+0x13a>
 800a33e:	786b      	ldrb	r3, [r5, #1]
 800a340:	2b2b      	cmp	r3, #43	; 0x2b
 800a342:	d02f      	beq.n	800a3a4 <__gethex+0x124>
 800a344:	2b2d      	cmp	r3, #45	; 0x2d
 800a346:	d031      	beq.n	800a3ac <__gethex+0x12c>
 800a348:	1c69      	adds	r1, r5, #1
 800a34a:	f04f 0b00 	mov.w	fp, #0
 800a34e:	7808      	ldrb	r0, [r1, #0]
 800a350:	f7ff ff80 	bl	800a254 <__hexdig_fun>
 800a354:	1e42      	subs	r2, r0, #1
 800a356:	b2d2      	uxtb	r2, r2
 800a358:	2a18      	cmp	r2, #24
 800a35a:	d82e      	bhi.n	800a3ba <__gethex+0x13a>
 800a35c:	f1a0 0210 	sub.w	r2, r0, #16
 800a360:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a364:	f7ff ff76 	bl	800a254 <__hexdig_fun>
 800a368:	f100 3cff 	add.w	ip, r0, #4294967295
 800a36c:	fa5f fc8c 	uxtb.w	ip, ip
 800a370:	f1bc 0f18 	cmp.w	ip, #24
 800a374:	d91d      	bls.n	800a3b2 <__gethex+0x132>
 800a376:	f1bb 0f00 	cmp.w	fp, #0
 800a37a:	d000      	beq.n	800a37e <__gethex+0xfe>
 800a37c:	4252      	negs	r2, r2
 800a37e:	4416      	add	r6, r2
 800a380:	f8ca 1000 	str.w	r1, [sl]
 800a384:	b1dc      	cbz	r4, 800a3be <__gethex+0x13e>
 800a386:	9b01      	ldr	r3, [sp, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	bf14      	ite	ne
 800a38c:	f04f 0800 	movne.w	r8, #0
 800a390:	f04f 0806 	moveq.w	r8, #6
 800a394:	4640      	mov	r0, r8
 800a396:	b005      	add	sp, #20
 800a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	4645      	mov	r5, r8
 800a39e:	4626      	mov	r6, r4
 800a3a0:	2401      	movs	r4, #1
 800a3a2:	e7c7      	b.n	800a334 <__gethex+0xb4>
 800a3a4:	f04f 0b00 	mov.w	fp, #0
 800a3a8:	1ca9      	adds	r1, r5, #2
 800a3aa:	e7d0      	b.n	800a34e <__gethex+0xce>
 800a3ac:	f04f 0b01 	mov.w	fp, #1
 800a3b0:	e7fa      	b.n	800a3a8 <__gethex+0x128>
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	fb03 0002 	mla	r0, r3, r2, r0
 800a3b8:	e7d0      	b.n	800a35c <__gethex+0xdc>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	e7e0      	b.n	800a380 <__gethex+0x100>
 800a3be:	eba5 0308 	sub.w	r3, r5, r8
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	2b07      	cmp	r3, #7
 800a3c8:	dc0a      	bgt.n	800a3e0 <__gethex+0x160>
 800a3ca:	4648      	mov	r0, r9
 800a3cc:	f7fd fd8a 	bl	8007ee4 <_Balloc>
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	b940      	cbnz	r0, 800a3e6 <__gethex+0x166>
 800a3d4:	4b61      	ldr	r3, [pc, #388]	; (800a55c <__gethex+0x2dc>)
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	21e4      	movs	r1, #228	; 0xe4
 800a3da:	4861      	ldr	r0, [pc, #388]	; (800a560 <__gethex+0x2e0>)
 800a3dc:	f7ff feb4 	bl	800a148 <__assert_func>
 800a3e0:	3101      	adds	r1, #1
 800a3e2:	105b      	asrs	r3, r3, #1
 800a3e4:	e7ef      	b.n	800a3c6 <__gethex+0x146>
 800a3e6:	f100 0a14 	add.w	sl, r0, #20
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	495a      	ldr	r1, [pc, #360]	; (800a558 <__gethex+0x2d8>)
 800a3ee:	f8cd a004 	str.w	sl, [sp, #4]
 800a3f2:	469b      	mov	fp, r3
 800a3f4:	45a8      	cmp	r8, r5
 800a3f6:	d342      	bcc.n	800a47e <__gethex+0x1fe>
 800a3f8:	9801      	ldr	r0, [sp, #4]
 800a3fa:	f840 bb04 	str.w	fp, [r0], #4
 800a3fe:	eba0 000a 	sub.w	r0, r0, sl
 800a402:	1080      	asrs	r0, r0, #2
 800a404:	6120      	str	r0, [r4, #16]
 800a406:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a40a:	4658      	mov	r0, fp
 800a40c:	f7fd fe5c 	bl	80080c8 <__hi0bits>
 800a410:	683d      	ldr	r5, [r7, #0]
 800a412:	eba8 0000 	sub.w	r0, r8, r0
 800a416:	42a8      	cmp	r0, r5
 800a418:	dd59      	ble.n	800a4ce <__gethex+0x24e>
 800a41a:	eba0 0805 	sub.w	r8, r0, r5
 800a41e:	4641      	mov	r1, r8
 800a420:	4620      	mov	r0, r4
 800a422:	f7fe f9eb 	bl	80087fc <__any_on>
 800a426:	4683      	mov	fp, r0
 800a428:	b1b8      	cbz	r0, 800a45a <__gethex+0x1da>
 800a42a:	f108 33ff 	add.w	r3, r8, #4294967295
 800a42e:	1159      	asrs	r1, r3, #5
 800a430:	f003 021f 	and.w	r2, r3, #31
 800a434:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a438:	f04f 0b01 	mov.w	fp, #1
 800a43c:	fa0b f202 	lsl.w	r2, fp, r2
 800a440:	420a      	tst	r2, r1
 800a442:	d00a      	beq.n	800a45a <__gethex+0x1da>
 800a444:	455b      	cmp	r3, fp
 800a446:	dd06      	ble.n	800a456 <__gethex+0x1d6>
 800a448:	f1a8 0102 	sub.w	r1, r8, #2
 800a44c:	4620      	mov	r0, r4
 800a44e:	f7fe f9d5 	bl	80087fc <__any_on>
 800a452:	2800      	cmp	r0, #0
 800a454:	d138      	bne.n	800a4c8 <__gethex+0x248>
 800a456:	f04f 0b02 	mov.w	fp, #2
 800a45a:	4641      	mov	r1, r8
 800a45c:	4620      	mov	r0, r4
 800a45e:	f7ff fea7 	bl	800a1b0 <rshift>
 800a462:	4446      	add	r6, r8
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	42b3      	cmp	r3, r6
 800a468:	da41      	bge.n	800a4ee <__gethex+0x26e>
 800a46a:	4621      	mov	r1, r4
 800a46c:	4648      	mov	r0, r9
 800a46e:	f7fd fd79 	bl	8007f64 <_Bfree>
 800a472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a474:	2300      	movs	r3, #0
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a47c:	e78a      	b.n	800a394 <__gethex+0x114>
 800a47e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a482:	2a2e      	cmp	r2, #46	; 0x2e
 800a484:	d014      	beq.n	800a4b0 <__gethex+0x230>
 800a486:	2b20      	cmp	r3, #32
 800a488:	d106      	bne.n	800a498 <__gethex+0x218>
 800a48a:	9b01      	ldr	r3, [sp, #4]
 800a48c:	f843 bb04 	str.w	fp, [r3], #4
 800a490:	f04f 0b00 	mov.w	fp, #0
 800a494:	9301      	str	r3, [sp, #4]
 800a496:	465b      	mov	r3, fp
 800a498:	7828      	ldrb	r0, [r5, #0]
 800a49a:	9303      	str	r3, [sp, #12]
 800a49c:	f7ff feda 	bl	800a254 <__hexdig_fun>
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	f000 000f 	and.w	r0, r0, #15
 800a4a6:	4098      	lsls	r0, r3
 800a4a8:	ea4b 0b00 	orr.w	fp, fp, r0
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	e7a1      	b.n	800a3f4 <__gethex+0x174>
 800a4b0:	45a8      	cmp	r8, r5
 800a4b2:	d8e8      	bhi.n	800a486 <__gethex+0x206>
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	9303      	str	r3, [sp, #12]
 800a4ba:	f7ff fe0a 	bl	800a0d2 <strncmp>
 800a4be:	4926      	ldr	r1, [pc, #152]	; (800a558 <__gethex+0x2d8>)
 800a4c0:	9b03      	ldr	r3, [sp, #12]
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d1df      	bne.n	800a486 <__gethex+0x206>
 800a4c6:	e795      	b.n	800a3f4 <__gethex+0x174>
 800a4c8:	f04f 0b03 	mov.w	fp, #3
 800a4cc:	e7c5      	b.n	800a45a <__gethex+0x1da>
 800a4ce:	da0b      	bge.n	800a4e8 <__gethex+0x268>
 800a4d0:	eba5 0800 	sub.w	r8, r5, r0
 800a4d4:	4621      	mov	r1, r4
 800a4d6:	4642      	mov	r2, r8
 800a4d8:	4648      	mov	r0, r9
 800a4da:	f7fd ff5d 	bl	8008398 <__lshift>
 800a4de:	eba6 0608 	sub.w	r6, r6, r8
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	f100 0a14 	add.w	sl, r0, #20
 800a4e8:	f04f 0b00 	mov.w	fp, #0
 800a4ec:	e7ba      	b.n	800a464 <__gethex+0x1e4>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	42b3      	cmp	r3, r6
 800a4f2:	dd73      	ble.n	800a5dc <__gethex+0x35c>
 800a4f4:	1b9e      	subs	r6, r3, r6
 800a4f6:	42b5      	cmp	r5, r6
 800a4f8:	dc34      	bgt.n	800a564 <__gethex+0x2e4>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d023      	beq.n	800a548 <__gethex+0x2c8>
 800a500:	2b03      	cmp	r3, #3
 800a502:	d025      	beq.n	800a550 <__gethex+0x2d0>
 800a504:	2b01      	cmp	r3, #1
 800a506:	d115      	bne.n	800a534 <__gethex+0x2b4>
 800a508:	42b5      	cmp	r5, r6
 800a50a:	d113      	bne.n	800a534 <__gethex+0x2b4>
 800a50c:	2d01      	cmp	r5, #1
 800a50e:	d10b      	bne.n	800a528 <__gethex+0x2a8>
 800a510:	9a02      	ldr	r2, [sp, #8]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6013      	str	r3, [r2, #0]
 800a516:	2301      	movs	r3, #1
 800a518:	6123      	str	r3, [r4, #16]
 800a51a:	f8ca 3000 	str.w	r3, [sl]
 800a51e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a520:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a524:	601c      	str	r4, [r3, #0]
 800a526:	e735      	b.n	800a394 <__gethex+0x114>
 800a528:	1e69      	subs	r1, r5, #1
 800a52a:	4620      	mov	r0, r4
 800a52c:	f7fe f966 	bl	80087fc <__any_on>
 800a530:	2800      	cmp	r0, #0
 800a532:	d1ed      	bne.n	800a510 <__gethex+0x290>
 800a534:	4621      	mov	r1, r4
 800a536:	4648      	mov	r0, r9
 800a538:	f7fd fd14 	bl	8007f64 <_Bfree>
 800a53c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a53e:	2300      	movs	r3, #0
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a546:	e725      	b.n	800a394 <__gethex+0x114>
 800a548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1f2      	bne.n	800a534 <__gethex+0x2b4>
 800a54e:	e7df      	b.n	800a510 <__gethex+0x290>
 800a550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1dc      	bne.n	800a510 <__gethex+0x290>
 800a556:	e7ed      	b.n	800a534 <__gethex+0x2b4>
 800a558:	0800c83c 	.word	0x0800c83c
 800a55c:	0800c6d3 	.word	0x0800c6d3
 800a560:	0800ca01 	.word	0x0800ca01
 800a564:	f106 38ff 	add.w	r8, r6, #4294967295
 800a568:	f1bb 0f00 	cmp.w	fp, #0
 800a56c:	d133      	bne.n	800a5d6 <__gethex+0x356>
 800a56e:	f1b8 0f00 	cmp.w	r8, #0
 800a572:	d004      	beq.n	800a57e <__gethex+0x2fe>
 800a574:	4641      	mov	r1, r8
 800a576:	4620      	mov	r0, r4
 800a578:	f7fe f940 	bl	80087fc <__any_on>
 800a57c:	4683      	mov	fp, r0
 800a57e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a582:	2301      	movs	r3, #1
 800a584:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a588:	f008 081f 	and.w	r8, r8, #31
 800a58c:	fa03 f308 	lsl.w	r3, r3, r8
 800a590:	4213      	tst	r3, r2
 800a592:	4631      	mov	r1, r6
 800a594:	4620      	mov	r0, r4
 800a596:	bf18      	it	ne
 800a598:	f04b 0b02 	orrne.w	fp, fp, #2
 800a59c:	1bad      	subs	r5, r5, r6
 800a59e:	f7ff fe07 	bl	800a1b0 <rshift>
 800a5a2:	687e      	ldr	r6, [r7, #4]
 800a5a4:	f04f 0802 	mov.w	r8, #2
 800a5a8:	f1bb 0f00 	cmp.w	fp, #0
 800a5ac:	d04a      	beq.n	800a644 <__gethex+0x3c4>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d016      	beq.n	800a5e2 <__gethex+0x362>
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	d018      	beq.n	800a5ea <__gethex+0x36a>
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d109      	bne.n	800a5d0 <__gethex+0x350>
 800a5bc:	f01b 0f02 	tst.w	fp, #2
 800a5c0:	d006      	beq.n	800a5d0 <__gethex+0x350>
 800a5c2:	f8da 3000 	ldr.w	r3, [sl]
 800a5c6:	ea4b 0b03 	orr.w	fp, fp, r3
 800a5ca:	f01b 0f01 	tst.w	fp, #1
 800a5ce:	d10f      	bne.n	800a5f0 <__gethex+0x370>
 800a5d0:	f048 0810 	orr.w	r8, r8, #16
 800a5d4:	e036      	b.n	800a644 <__gethex+0x3c4>
 800a5d6:	f04f 0b01 	mov.w	fp, #1
 800a5da:	e7d0      	b.n	800a57e <__gethex+0x2fe>
 800a5dc:	f04f 0801 	mov.w	r8, #1
 800a5e0:	e7e2      	b.n	800a5a8 <__gethex+0x328>
 800a5e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5e4:	f1c3 0301 	rsb	r3, r3, #1
 800a5e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0ef      	beq.n	800a5d0 <__gethex+0x350>
 800a5f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5f4:	f104 0214 	add.w	r2, r4, #20
 800a5f8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a602:	2300      	movs	r3, #0
 800a604:	4694      	mov	ip, r2
 800a606:	f852 1b04 	ldr.w	r1, [r2], #4
 800a60a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a60e:	d01e      	beq.n	800a64e <__gethex+0x3ce>
 800a610:	3101      	adds	r1, #1
 800a612:	f8cc 1000 	str.w	r1, [ip]
 800a616:	f1b8 0f02 	cmp.w	r8, #2
 800a61a:	f104 0214 	add.w	r2, r4, #20
 800a61e:	d13d      	bne.n	800a69c <__gethex+0x41c>
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	3b01      	subs	r3, #1
 800a624:	42ab      	cmp	r3, r5
 800a626:	d10b      	bne.n	800a640 <__gethex+0x3c0>
 800a628:	1169      	asrs	r1, r5, #5
 800a62a:	2301      	movs	r3, #1
 800a62c:	f005 051f 	and.w	r5, r5, #31
 800a630:	fa03 f505 	lsl.w	r5, r3, r5
 800a634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a638:	421d      	tst	r5, r3
 800a63a:	bf18      	it	ne
 800a63c:	f04f 0801 	movne.w	r8, #1
 800a640:	f048 0820 	orr.w	r8, r8, #32
 800a644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a646:	601c      	str	r4, [r3, #0]
 800a648:	9b02      	ldr	r3, [sp, #8]
 800a64a:	601e      	str	r6, [r3, #0]
 800a64c:	e6a2      	b.n	800a394 <__gethex+0x114>
 800a64e:	4290      	cmp	r0, r2
 800a650:	f842 3c04 	str.w	r3, [r2, #-4]
 800a654:	d8d6      	bhi.n	800a604 <__gethex+0x384>
 800a656:	68a2      	ldr	r2, [r4, #8]
 800a658:	4593      	cmp	fp, r2
 800a65a:	db17      	blt.n	800a68c <__gethex+0x40c>
 800a65c:	6861      	ldr	r1, [r4, #4]
 800a65e:	4648      	mov	r0, r9
 800a660:	3101      	adds	r1, #1
 800a662:	f7fd fc3f 	bl	8007ee4 <_Balloc>
 800a666:	4682      	mov	sl, r0
 800a668:	b918      	cbnz	r0, 800a672 <__gethex+0x3f2>
 800a66a:	4b1b      	ldr	r3, [pc, #108]	; (800a6d8 <__gethex+0x458>)
 800a66c:	4602      	mov	r2, r0
 800a66e:	2184      	movs	r1, #132	; 0x84
 800a670:	e6b3      	b.n	800a3da <__gethex+0x15a>
 800a672:	6922      	ldr	r2, [r4, #16]
 800a674:	3202      	adds	r2, #2
 800a676:	f104 010c 	add.w	r1, r4, #12
 800a67a:	0092      	lsls	r2, r2, #2
 800a67c:	300c      	adds	r0, #12
 800a67e:	f7ff fd4b 	bl	800a118 <memcpy>
 800a682:	4621      	mov	r1, r4
 800a684:	4648      	mov	r0, r9
 800a686:	f7fd fc6d 	bl	8007f64 <_Bfree>
 800a68a:	4654      	mov	r4, sl
 800a68c:	6922      	ldr	r2, [r4, #16]
 800a68e:	1c51      	adds	r1, r2, #1
 800a690:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a694:	6121      	str	r1, [r4, #16]
 800a696:	2101      	movs	r1, #1
 800a698:	6151      	str	r1, [r2, #20]
 800a69a:	e7bc      	b.n	800a616 <__gethex+0x396>
 800a69c:	6921      	ldr	r1, [r4, #16]
 800a69e:	4559      	cmp	r1, fp
 800a6a0:	dd0b      	ble.n	800a6ba <__gethex+0x43a>
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f7ff fd83 	bl	800a1b0 <rshift>
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	3601      	adds	r6, #1
 800a6ae:	42b3      	cmp	r3, r6
 800a6b0:	f6ff aedb 	blt.w	800a46a <__gethex+0x1ea>
 800a6b4:	f04f 0801 	mov.w	r8, #1
 800a6b8:	e7c2      	b.n	800a640 <__gethex+0x3c0>
 800a6ba:	f015 051f 	ands.w	r5, r5, #31
 800a6be:	d0f9      	beq.n	800a6b4 <__gethex+0x434>
 800a6c0:	9b01      	ldr	r3, [sp, #4]
 800a6c2:	441a      	add	r2, r3
 800a6c4:	f1c5 0520 	rsb	r5, r5, #32
 800a6c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a6cc:	f7fd fcfc 	bl	80080c8 <__hi0bits>
 800a6d0:	42a8      	cmp	r0, r5
 800a6d2:	dbe6      	blt.n	800a6a2 <__gethex+0x422>
 800a6d4:	e7ee      	b.n	800a6b4 <__gethex+0x434>
 800a6d6:	bf00      	nop
 800a6d8:	0800c6d3 	.word	0x0800c6d3

0800a6dc <L_shift>:
 800a6dc:	f1c2 0208 	rsb	r2, r2, #8
 800a6e0:	0092      	lsls	r2, r2, #2
 800a6e2:	b570      	push	{r4, r5, r6, lr}
 800a6e4:	f1c2 0620 	rsb	r6, r2, #32
 800a6e8:	6843      	ldr	r3, [r0, #4]
 800a6ea:	6804      	ldr	r4, [r0, #0]
 800a6ec:	fa03 f506 	lsl.w	r5, r3, r6
 800a6f0:	432c      	orrs	r4, r5
 800a6f2:	40d3      	lsrs	r3, r2
 800a6f4:	6004      	str	r4, [r0, #0]
 800a6f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6fa:	4288      	cmp	r0, r1
 800a6fc:	d3f4      	bcc.n	800a6e8 <L_shift+0xc>
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}

0800a700 <__match>:
 800a700:	b530      	push	{r4, r5, lr}
 800a702:	6803      	ldr	r3, [r0, #0]
 800a704:	3301      	adds	r3, #1
 800a706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a70a:	b914      	cbnz	r4, 800a712 <__match+0x12>
 800a70c:	6003      	str	r3, [r0, #0]
 800a70e:	2001      	movs	r0, #1
 800a710:	bd30      	pop	{r4, r5, pc}
 800a712:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a716:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a71a:	2d19      	cmp	r5, #25
 800a71c:	bf98      	it	ls
 800a71e:	3220      	addls	r2, #32
 800a720:	42a2      	cmp	r2, r4
 800a722:	d0f0      	beq.n	800a706 <__match+0x6>
 800a724:	2000      	movs	r0, #0
 800a726:	e7f3      	b.n	800a710 <__match+0x10>

0800a728 <__hexnan>:
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	680b      	ldr	r3, [r1, #0]
 800a72e:	6801      	ldr	r1, [r0, #0]
 800a730:	115e      	asrs	r6, r3, #5
 800a732:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a736:	f013 031f 	ands.w	r3, r3, #31
 800a73a:	b087      	sub	sp, #28
 800a73c:	bf18      	it	ne
 800a73e:	3604      	addne	r6, #4
 800a740:	2500      	movs	r5, #0
 800a742:	1f37      	subs	r7, r6, #4
 800a744:	4682      	mov	sl, r0
 800a746:	4690      	mov	r8, r2
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a74e:	46b9      	mov	r9, r7
 800a750:	463c      	mov	r4, r7
 800a752:	9502      	str	r5, [sp, #8]
 800a754:	46ab      	mov	fp, r5
 800a756:	784a      	ldrb	r2, [r1, #1]
 800a758:	1c4b      	adds	r3, r1, #1
 800a75a:	9303      	str	r3, [sp, #12]
 800a75c:	b342      	cbz	r2, 800a7b0 <__hexnan+0x88>
 800a75e:	4610      	mov	r0, r2
 800a760:	9105      	str	r1, [sp, #20]
 800a762:	9204      	str	r2, [sp, #16]
 800a764:	f7ff fd76 	bl	800a254 <__hexdig_fun>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d14f      	bne.n	800a80c <__hexnan+0xe4>
 800a76c:	9a04      	ldr	r2, [sp, #16]
 800a76e:	9905      	ldr	r1, [sp, #20]
 800a770:	2a20      	cmp	r2, #32
 800a772:	d818      	bhi.n	800a7a6 <__hexnan+0x7e>
 800a774:	9b02      	ldr	r3, [sp, #8]
 800a776:	459b      	cmp	fp, r3
 800a778:	dd13      	ble.n	800a7a2 <__hexnan+0x7a>
 800a77a:	454c      	cmp	r4, r9
 800a77c:	d206      	bcs.n	800a78c <__hexnan+0x64>
 800a77e:	2d07      	cmp	r5, #7
 800a780:	dc04      	bgt.n	800a78c <__hexnan+0x64>
 800a782:	462a      	mov	r2, r5
 800a784:	4649      	mov	r1, r9
 800a786:	4620      	mov	r0, r4
 800a788:	f7ff ffa8 	bl	800a6dc <L_shift>
 800a78c:	4544      	cmp	r4, r8
 800a78e:	d950      	bls.n	800a832 <__hexnan+0x10a>
 800a790:	2300      	movs	r3, #0
 800a792:	f1a4 0904 	sub.w	r9, r4, #4
 800a796:	f844 3c04 	str.w	r3, [r4, #-4]
 800a79a:	f8cd b008 	str.w	fp, [sp, #8]
 800a79e:	464c      	mov	r4, r9
 800a7a0:	461d      	mov	r5, r3
 800a7a2:	9903      	ldr	r1, [sp, #12]
 800a7a4:	e7d7      	b.n	800a756 <__hexnan+0x2e>
 800a7a6:	2a29      	cmp	r2, #41	; 0x29
 800a7a8:	d155      	bne.n	800a856 <__hexnan+0x12e>
 800a7aa:	3102      	adds	r1, #2
 800a7ac:	f8ca 1000 	str.w	r1, [sl]
 800a7b0:	f1bb 0f00 	cmp.w	fp, #0
 800a7b4:	d04f      	beq.n	800a856 <__hexnan+0x12e>
 800a7b6:	454c      	cmp	r4, r9
 800a7b8:	d206      	bcs.n	800a7c8 <__hexnan+0xa0>
 800a7ba:	2d07      	cmp	r5, #7
 800a7bc:	dc04      	bgt.n	800a7c8 <__hexnan+0xa0>
 800a7be:	462a      	mov	r2, r5
 800a7c0:	4649      	mov	r1, r9
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f7ff ff8a 	bl	800a6dc <L_shift>
 800a7c8:	4544      	cmp	r4, r8
 800a7ca:	d934      	bls.n	800a836 <__hexnan+0x10e>
 800a7cc:	f1a8 0204 	sub.w	r2, r8, #4
 800a7d0:	4623      	mov	r3, r4
 800a7d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a7d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7da:	429f      	cmp	r7, r3
 800a7dc:	d2f9      	bcs.n	800a7d2 <__hexnan+0xaa>
 800a7de:	1b3b      	subs	r3, r7, r4
 800a7e0:	f023 0303 	bic.w	r3, r3, #3
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	3e03      	subs	r6, #3
 800a7e8:	3401      	adds	r4, #1
 800a7ea:	42a6      	cmp	r6, r4
 800a7ec:	bf38      	it	cc
 800a7ee:	2304      	movcc	r3, #4
 800a7f0:	4443      	add	r3, r8
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f843 2b04 	str.w	r2, [r3], #4
 800a7f8:	429f      	cmp	r7, r3
 800a7fa:	d2fb      	bcs.n	800a7f4 <__hexnan+0xcc>
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	b91b      	cbnz	r3, 800a808 <__hexnan+0xe0>
 800a800:	4547      	cmp	r7, r8
 800a802:	d126      	bne.n	800a852 <__hexnan+0x12a>
 800a804:	2301      	movs	r3, #1
 800a806:	603b      	str	r3, [r7, #0]
 800a808:	2005      	movs	r0, #5
 800a80a:	e025      	b.n	800a858 <__hexnan+0x130>
 800a80c:	3501      	adds	r5, #1
 800a80e:	2d08      	cmp	r5, #8
 800a810:	f10b 0b01 	add.w	fp, fp, #1
 800a814:	dd06      	ble.n	800a824 <__hexnan+0xfc>
 800a816:	4544      	cmp	r4, r8
 800a818:	d9c3      	bls.n	800a7a2 <__hexnan+0x7a>
 800a81a:	2300      	movs	r3, #0
 800a81c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a820:	2501      	movs	r5, #1
 800a822:	3c04      	subs	r4, #4
 800a824:	6822      	ldr	r2, [r4, #0]
 800a826:	f000 000f 	and.w	r0, r0, #15
 800a82a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a82e:	6020      	str	r0, [r4, #0]
 800a830:	e7b7      	b.n	800a7a2 <__hexnan+0x7a>
 800a832:	2508      	movs	r5, #8
 800a834:	e7b5      	b.n	800a7a2 <__hexnan+0x7a>
 800a836:	9b01      	ldr	r3, [sp, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d0df      	beq.n	800a7fc <__hexnan+0xd4>
 800a83c:	f1c3 0320 	rsb	r3, r3, #32
 800a840:	f04f 32ff 	mov.w	r2, #4294967295
 800a844:	40da      	lsrs	r2, r3
 800a846:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a84a:	4013      	ands	r3, r2
 800a84c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a850:	e7d4      	b.n	800a7fc <__hexnan+0xd4>
 800a852:	3f04      	subs	r7, #4
 800a854:	e7d2      	b.n	800a7fc <__hexnan+0xd4>
 800a856:	2004      	movs	r0, #4
 800a858:	b007      	add	sp, #28
 800a85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a85e <__ascii_mbtowc>:
 800a85e:	b082      	sub	sp, #8
 800a860:	b901      	cbnz	r1, 800a864 <__ascii_mbtowc+0x6>
 800a862:	a901      	add	r1, sp, #4
 800a864:	b142      	cbz	r2, 800a878 <__ascii_mbtowc+0x1a>
 800a866:	b14b      	cbz	r3, 800a87c <__ascii_mbtowc+0x1e>
 800a868:	7813      	ldrb	r3, [r2, #0]
 800a86a:	600b      	str	r3, [r1, #0]
 800a86c:	7812      	ldrb	r2, [r2, #0]
 800a86e:	1e10      	subs	r0, r2, #0
 800a870:	bf18      	it	ne
 800a872:	2001      	movne	r0, #1
 800a874:	b002      	add	sp, #8
 800a876:	4770      	bx	lr
 800a878:	4610      	mov	r0, r2
 800a87a:	e7fb      	b.n	800a874 <__ascii_mbtowc+0x16>
 800a87c:	f06f 0001 	mvn.w	r0, #1
 800a880:	e7f8      	b.n	800a874 <__ascii_mbtowc+0x16>

0800a882 <_realloc_r>:
 800a882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a886:	4680      	mov	r8, r0
 800a888:	4614      	mov	r4, r2
 800a88a:	460e      	mov	r6, r1
 800a88c:	b921      	cbnz	r1, 800a898 <_realloc_r+0x16>
 800a88e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a892:	4611      	mov	r1, r2
 800a894:	f7fd ba9a 	b.w	8007dcc <_malloc_r>
 800a898:	b92a      	cbnz	r2, 800a8a6 <_realloc_r+0x24>
 800a89a:	f7fd fa23 	bl	8007ce4 <_free_r>
 800a89e:	4625      	mov	r5, r4
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a6:	f000 f8b6 	bl	800aa16 <_malloc_usable_size_r>
 800a8aa:	4284      	cmp	r4, r0
 800a8ac:	4607      	mov	r7, r0
 800a8ae:	d802      	bhi.n	800a8b6 <_realloc_r+0x34>
 800a8b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8b4:	d812      	bhi.n	800a8dc <_realloc_r+0x5a>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	f7fd fa87 	bl	8007dcc <_malloc_r>
 800a8be:	4605      	mov	r5, r0
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d0ed      	beq.n	800a8a0 <_realloc_r+0x1e>
 800a8c4:	42bc      	cmp	r4, r7
 800a8c6:	4622      	mov	r2, r4
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	bf28      	it	cs
 800a8cc:	463a      	movcs	r2, r7
 800a8ce:	f7ff fc23 	bl	800a118 <memcpy>
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	f7fd fa05 	bl	8007ce4 <_free_r>
 800a8da:	e7e1      	b.n	800a8a0 <_realloc_r+0x1e>
 800a8dc:	4635      	mov	r5, r6
 800a8de:	e7df      	b.n	800a8a0 <_realloc_r+0x1e>

0800a8e0 <_strtoul_l.constprop.0>:
 800a8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8e4:	4f36      	ldr	r7, [pc, #216]	; (800a9c0 <_strtoul_l.constprop.0+0xe0>)
 800a8e6:	4686      	mov	lr, r0
 800a8e8:	460d      	mov	r5, r1
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8f0:	5d3e      	ldrb	r6, [r7, r4]
 800a8f2:	f016 0608 	ands.w	r6, r6, #8
 800a8f6:	d1f8      	bne.n	800a8ea <_strtoul_l.constprop.0+0xa>
 800a8f8:	2c2d      	cmp	r4, #45	; 0x2d
 800a8fa:	d130      	bne.n	800a95e <_strtoul_l.constprop.0+0x7e>
 800a8fc:	782c      	ldrb	r4, [r5, #0]
 800a8fe:	2601      	movs	r6, #1
 800a900:	1c85      	adds	r5, r0, #2
 800a902:	2b00      	cmp	r3, #0
 800a904:	d057      	beq.n	800a9b6 <_strtoul_l.constprop.0+0xd6>
 800a906:	2b10      	cmp	r3, #16
 800a908:	d109      	bne.n	800a91e <_strtoul_l.constprop.0+0x3e>
 800a90a:	2c30      	cmp	r4, #48	; 0x30
 800a90c:	d107      	bne.n	800a91e <_strtoul_l.constprop.0+0x3e>
 800a90e:	7828      	ldrb	r0, [r5, #0]
 800a910:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a914:	2858      	cmp	r0, #88	; 0x58
 800a916:	d149      	bne.n	800a9ac <_strtoul_l.constprop.0+0xcc>
 800a918:	786c      	ldrb	r4, [r5, #1]
 800a91a:	2310      	movs	r3, #16
 800a91c:	3502      	adds	r5, #2
 800a91e:	f04f 38ff 	mov.w	r8, #4294967295
 800a922:	2700      	movs	r7, #0
 800a924:	fbb8 f8f3 	udiv	r8, r8, r3
 800a928:	fb03 f908 	mul.w	r9, r3, r8
 800a92c:	ea6f 0909 	mvn.w	r9, r9
 800a930:	4638      	mov	r0, r7
 800a932:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a936:	f1bc 0f09 	cmp.w	ip, #9
 800a93a:	d815      	bhi.n	800a968 <_strtoul_l.constprop.0+0x88>
 800a93c:	4664      	mov	r4, ip
 800a93e:	42a3      	cmp	r3, r4
 800a940:	dd23      	ble.n	800a98a <_strtoul_l.constprop.0+0xaa>
 800a942:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a946:	d007      	beq.n	800a958 <_strtoul_l.constprop.0+0x78>
 800a948:	4580      	cmp	r8, r0
 800a94a:	d31b      	bcc.n	800a984 <_strtoul_l.constprop.0+0xa4>
 800a94c:	d101      	bne.n	800a952 <_strtoul_l.constprop.0+0x72>
 800a94e:	45a1      	cmp	r9, r4
 800a950:	db18      	blt.n	800a984 <_strtoul_l.constprop.0+0xa4>
 800a952:	fb00 4003 	mla	r0, r0, r3, r4
 800a956:	2701      	movs	r7, #1
 800a958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a95c:	e7e9      	b.n	800a932 <_strtoul_l.constprop.0+0x52>
 800a95e:	2c2b      	cmp	r4, #43	; 0x2b
 800a960:	bf04      	itt	eq
 800a962:	782c      	ldrbeq	r4, [r5, #0]
 800a964:	1c85      	addeq	r5, r0, #2
 800a966:	e7cc      	b.n	800a902 <_strtoul_l.constprop.0+0x22>
 800a968:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a96c:	f1bc 0f19 	cmp.w	ip, #25
 800a970:	d801      	bhi.n	800a976 <_strtoul_l.constprop.0+0x96>
 800a972:	3c37      	subs	r4, #55	; 0x37
 800a974:	e7e3      	b.n	800a93e <_strtoul_l.constprop.0+0x5e>
 800a976:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a97a:	f1bc 0f19 	cmp.w	ip, #25
 800a97e:	d804      	bhi.n	800a98a <_strtoul_l.constprop.0+0xaa>
 800a980:	3c57      	subs	r4, #87	; 0x57
 800a982:	e7dc      	b.n	800a93e <_strtoul_l.constprop.0+0x5e>
 800a984:	f04f 37ff 	mov.w	r7, #4294967295
 800a988:	e7e6      	b.n	800a958 <_strtoul_l.constprop.0+0x78>
 800a98a:	1c7b      	adds	r3, r7, #1
 800a98c:	d106      	bne.n	800a99c <_strtoul_l.constprop.0+0xbc>
 800a98e:	2322      	movs	r3, #34	; 0x22
 800a990:	f8ce 3000 	str.w	r3, [lr]
 800a994:	4638      	mov	r0, r7
 800a996:	b932      	cbnz	r2, 800a9a6 <_strtoul_l.constprop.0+0xc6>
 800a998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a99c:	b106      	cbz	r6, 800a9a0 <_strtoul_l.constprop.0+0xc0>
 800a99e:	4240      	negs	r0, r0
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	d0f9      	beq.n	800a998 <_strtoul_l.constprop.0+0xb8>
 800a9a4:	b107      	cbz	r7, 800a9a8 <_strtoul_l.constprop.0+0xc8>
 800a9a6:	1e69      	subs	r1, r5, #1
 800a9a8:	6011      	str	r1, [r2, #0]
 800a9aa:	e7f5      	b.n	800a998 <_strtoul_l.constprop.0+0xb8>
 800a9ac:	2430      	movs	r4, #48	; 0x30
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1b5      	bne.n	800a91e <_strtoul_l.constprop.0+0x3e>
 800a9b2:	2308      	movs	r3, #8
 800a9b4:	e7b3      	b.n	800a91e <_strtoul_l.constprop.0+0x3e>
 800a9b6:	2c30      	cmp	r4, #48	; 0x30
 800a9b8:	d0a9      	beq.n	800a90e <_strtoul_l.constprop.0+0x2e>
 800a9ba:	230a      	movs	r3, #10
 800a9bc:	e7af      	b.n	800a91e <_strtoul_l.constprop.0+0x3e>
 800a9be:	bf00      	nop
 800a9c0:	0800c891 	.word	0x0800c891

0800a9c4 <_strtoul_r>:
 800a9c4:	f7ff bf8c 	b.w	800a8e0 <_strtoul_l.constprop.0>

0800a9c8 <__ascii_wctomb>:
 800a9c8:	b149      	cbz	r1, 800a9de <__ascii_wctomb+0x16>
 800a9ca:	2aff      	cmp	r2, #255	; 0xff
 800a9cc:	bf85      	ittet	hi
 800a9ce:	238a      	movhi	r3, #138	; 0x8a
 800a9d0:	6003      	strhi	r3, [r0, #0]
 800a9d2:	700a      	strbls	r2, [r1, #0]
 800a9d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9d8:	bf98      	it	ls
 800a9da:	2001      	movls	r0, #1
 800a9dc:	4770      	bx	lr
 800a9de:	4608      	mov	r0, r1
 800a9e0:	4770      	bx	lr
	...

0800a9e4 <fiprintf>:
 800a9e4:	b40e      	push	{r1, r2, r3}
 800a9e6:	b503      	push	{r0, r1, lr}
 800a9e8:	4601      	mov	r1, r0
 800a9ea:	ab03      	add	r3, sp, #12
 800a9ec:	4805      	ldr	r0, [pc, #20]	; (800aa04 <fiprintf+0x20>)
 800a9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9f2:	6800      	ldr	r0, [r0, #0]
 800a9f4:	9301      	str	r3, [sp, #4]
 800a9f6:	f000 f83f 	bl	800aa78 <_vfiprintf_r>
 800a9fa:	b002      	add	sp, #8
 800a9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa00:	b003      	add	sp, #12
 800aa02:	4770      	bx	lr
 800aa04:	20000068 	.word	0x20000068

0800aa08 <abort>:
 800aa08:	b508      	push	{r3, lr}
 800aa0a:	2006      	movs	r0, #6
 800aa0c:	f000 fa0c 	bl	800ae28 <raise>
 800aa10:	2001      	movs	r0, #1
 800aa12:	f7f7 fc13 	bl	800223c <_exit>

0800aa16 <_malloc_usable_size_r>:
 800aa16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa1a:	1f18      	subs	r0, r3, #4
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	bfbc      	itt	lt
 800aa20:	580b      	ldrlt	r3, [r1, r0]
 800aa22:	18c0      	addlt	r0, r0, r3
 800aa24:	4770      	bx	lr

0800aa26 <__sfputc_r>:
 800aa26:	6893      	ldr	r3, [r2, #8]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	b410      	push	{r4}
 800aa2e:	6093      	str	r3, [r2, #8]
 800aa30:	da08      	bge.n	800aa44 <__sfputc_r+0x1e>
 800aa32:	6994      	ldr	r4, [r2, #24]
 800aa34:	42a3      	cmp	r3, r4
 800aa36:	db01      	blt.n	800aa3c <__sfputc_r+0x16>
 800aa38:	290a      	cmp	r1, #10
 800aa3a:	d103      	bne.n	800aa44 <__sfputc_r+0x1e>
 800aa3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa40:	f000 b934 	b.w	800acac <__swbuf_r>
 800aa44:	6813      	ldr	r3, [r2, #0]
 800aa46:	1c58      	adds	r0, r3, #1
 800aa48:	6010      	str	r0, [r2, #0]
 800aa4a:	7019      	strb	r1, [r3, #0]
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <__sfputs_r>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	4606      	mov	r6, r0
 800aa58:	460f      	mov	r7, r1
 800aa5a:	4614      	mov	r4, r2
 800aa5c:	18d5      	adds	r5, r2, r3
 800aa5e:	42ac      	cmp	r4, r5
 800aa60:	d101      	bne.n	800aa66 <__sfputs_r+0x12>
 800aa62:	2000      	movs	r0, #0
 800aa64:	e007      	b.n	800aa76 <__sfputs_r+0x22>
 800aa66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa6a:	463a      	mov	r2, r7
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f7ff ffda 	bl	800aa26 <__sfputc_r>
 800aa72:	1c43      	adds	r3, r0, #1
 800aa74:	d1f3      	bne.n	800aa5e <__sfputs_r+0xa>
 800aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa78 <_vfiprintf_r>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	460d      	mov	r5, r1
 800aa7e:	b09d      	sub	sp, #116	; 0x74
 800aa80:	4614      	mov	r4, r2
 800aa82:	4698      	mov	r8, r3
 800aa84:	4606      	mov	r6, r0
 800aa86:	b118      	cbz	r0, 800aa90 <_vfiprintf_r+0x18>
 800aa88:	6a03      	ldr	r3, [r0, #32]
 800aa8a:	b90b      	cbnz	r3, 800aa90 <_vfiprintf_r+0x18>
 800aa8c:	f7fc f95a 	bl	8006d44 <__sinit>
 800aa90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa92:	07d9      	lsls	r1, r3, #31
 800aa94:	d405      	bmi.n	800aaa2 <_vfiprintf_r+0x2a>
 800aa96:	89ab      	ldrh	r3, [r5, #12]
 800aa98:	059a      	lsls	r2, r3, #22
 800aa9a:	d402      	bmi.n	800aaa2 <_vfiprintf_r+0x2a>
 800aa9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa9e:	f7fc fa96 	bl	8006fce <__retarget_lock_acquire_recursive>
 800aaa2:	89ab      	ldrh	r3, [r5, #12]
 800aaa4:	071b      	lsls	r3, r3, #28
 800aaa6:	d501      	bpl.n	800aaac <_vfiprintf_r+0x34>
 800aaa8:	692b      	ldr	r3, [r5, #16]
 800aaaa:	b99b      	cbnz	r3, 800aad4 <_vfiprintf_r+0x5c>
 800aaac:	4629      	mov	r1, r5
 800aaae:	4630      	mov	r0, r6
 800aab0:	f000 f93a 	bl	800ad28 <__swsetup_r>
 800aab4:	b170      	cbz	r0, 800aad4 <_vfiprintf_r+0x5c>
 800aab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aab8:	07dc      	lsls	r4, r3, #31
 800aaba:	d504      	bpl.n	800aac6 <_vfiprintf_r+0x4e>
 800aabc:	f04f 30ff 	mov.w	r0, #4294967295
 800aac0:	b01d      	add	sp, #116	; 0x74
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	89ab      	ldrh	r3, [r5, #12]
 800aac8:	0598      	lsls	r0, r3, #22
 800aaca:	d4f7      	bmi.n	800aabc <_vfiprintf_r+0x44>
 800aacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aace:	f7fc fa7f 	bl	8006fd0 <__retarget_lock_release_recursive>
 800aad2:	e7f3      	b.n	800aabc <_vfiprintf_r+0x44>
 800aad4:	2300      	movs	r3, #0
 800aad6:	9309      	str	r3, [sp, #36]	; 0x24
 800aad8:	2320      	movs	r3, #32
 800aada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aade:	f8cd 800c 	str.w	r8, [sp, #12]
 800aae2:	2330      	movs	r3, #48	; 0x30
 800aae4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ac98 <_vfiprintf_r+0x220>
 800aae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaec:	f04f 0901 	mov.w	r9, #1
 800aaf0:	4623      	mov	r3, r4
 800aaf2:	469a      	mov	sl, r3
 800aaf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaf8:	b10a      	cbz	r2, 800aafe <_vfiprintf_r+0x86>
 800aafa:	2a25      	cmp	r2, #37	; 0x25
 800aafc:	d1f9      	bne.n	800aaf2 <_vfiprintf_r+0x7a>
 800aafe:	ebba 0b04 	subs.w	fp, sl, r4
 800ab02:	d00b      	beq.n	800ab1c <_vfiprintf_r+0xa4>
 800ab04:	465b      	mov	r3, fp
 800ab06:	4622      	mov	r2, r4
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	f7ff ffa2 	bl	800aa54 <__sfputs_r>
 800ab10:	3001      	adds	r0, #1
 800ab12:	f000 80a9 	beq.w	800ac68 <_vfiprintf_r+0x1f0>
 800ab16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab18:	445a      	add	r2, fp
 800ab1a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 80a1 	beq.w	800ac68 <_vfiprintf_r+0x1f0>
 800ab26:	2300      	movs	r3, #0
 800ab28:	f04f 32ff 	mov.w	r2, #4294967295
 800ab2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab30:	f10a 0a01 	add.w	sl, sl, #1
 800ab34:	9304      	str	r3, [sp, #16]
 800ab36:	9307      	str	r3, [sp, #28]
 800ab38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab3c:	931a      	str	r3, [sp, #104]	; 0x68
 800ab3e:	4654      	mov	r4, sl
 800ab40:	2205      	movs	r2, #5
 800ab42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab46:	4854      	ldr	r0, [pc, #336]	; (800ac98 <_vfiprintf_r+0x220>)
 800ab48:	f7f5 fb5a 	bl	8000200 <memchr>
 800ab4c:	9a04      	ldr	r2, [sp, #16]
 800ab4e:	b9d8      	cbnz	r0, 800ab88 <_vfiprintf_r+0x110>
 800ab50:	06d1      	lsls	r1, r2, #27
 800ab52:	bf44      	itt	mi
 800ab54:	2320      	movmi	r3, #32
 800ab56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab5a:	0713      	lsls	r3, r2, #28
 800ab5c:	bf44      	itt	mi
 800ab5e:	232b      	movmi	r3, #43	; 0x2b
 800ab60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab64:	f89a 3000 	ldrb.w	r3, [sl]
 800ab68:	2b2a      	cmp	r3, #42	; 0x2a
 800ab6a:	d015      	beq.n	800ab98 <_vfiprintf_r+0x120>
 800ab6c:	9a07      	ldr	r2, [sp, #28]
 800ab6e:	4654      	mov	r4, sl
 800ab70:	2000      	movs	r0, #0
 800ab72:	f04f 0c0a 	mov.w	ip, #10
 800ab76:	4621      	mov	r1, r4
 800ab78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab7c:	3b30      	subs	r3, #48	; 0x30
 800ab7e:	2b09      	cmp	r3, #9
 800ab80:	d94d      	bls.n	800ac1e <_vfiprintf_r+0x1a6>
 800ab82:	b1b0      	cbz	r0, 800abb2 <_vfiprintf_r+0x13a>
 800ab84:	9207      	str	r2, [sp, #28]
 800ab86:	e014      	b.n	800abb2 <_vfiprintf_r+0x13a>
 800ab88:	eba0 0308 	sub.w	r3, r0, r8
 800ab8c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab90:	4313      	orrs	r3, r2
 800ab92:	9304      	str	r3, [sp, #16]
 800ab94:	46a2      	mov	sl, r4
 800ab96:	e7d2      	b.n	800ab3e <_vfiprintf_r+0xc6>
 800ab98:	9b03      	ldr	r3, [sp, #12]
 800ab9a:	1d19      	adds	r1, r3, #4
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	9103      	str	r1, [sp, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bfbb      	ittet	lt
 800aba4:	425b      	neglt	r3, r3
 800aba6:	f042 0202 	orrlt.w	r2, r2, #2
 800abaa:	9307      	strge	r3, [sp, #28]
 800abac:	9307      	strlt	r3, [sp, #28]
 800abae:	bfb8      	it	lt
 800abb0:	9204      	strlt	r2, [sp, #16]
 800abb2:	7823      	ldrb	r3, [r4, #0]
 800abb4:	2b2e      	cmp	r3, #46	; 0x2e
 800abb6:	d10c      	bne.n	800abd2 <_vfiprintf_r+0x15a>
 800abb8:	7863      	ldrb	r3, [r4, #1]
 800abba:	2b2a      	cmp	r3, #42	; 0x2a
 800abbc:	d134      	bne.n	800ac28 <_vfiprintf_r+0x1b0>
 800abbe:	9b03      	ldr	r3, [sp, #12]
 800abc0:	1d1a      	adds	r2, r3, #4
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	9203      	str	r2, [sp, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	bfb8      	it	lt
 800abca:	f04f 33ff 	movlt.w	r3, #4294967295
 800abce:	3402      	adds	r4, #2
 800abd0:	9305      	str	r3, [sp, #20]
 800abd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aca8 <_vfiprintf_r+0x230>
 800abd6:	7821      	ldrb	r1, [r4, #0]
 800abd8:	2203      	movs	r2, #3
 800abda:	4650      	mov	r0, sl
 800abdc:	f7f5 fb10 	bl	8000200 <memchr>
 800abe0:	b138      	cbz	r0, 800abf2 <_vfiprintf_r+0x17a>
 800abe2:	9b04      	ldr	r3, [sp, #16]
 800abe4:	eba0 000a 	sub.w	r0, r0, sl
 800abe8:	2240      	movs	r2, #64	; 0x40
 800abea:	4082      	lsls	r2, r0
 800abec:	4313      	orrs	r3, r2
 800abee:	3401      	adds	r4, #1
 800abf0:	9304      	str	r3, [sp, #16]
 800abf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf6:	4829      	ldr	r0, [pc, #164]	; (800ac9c <_vfiprintf_r+0x224>)
 800abf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abfc:	2206      	movs	r2, #6
 800abfe:	f7f5 faff 	bl	8000200 <memchr>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d03f      	beq.n	800ac86 <_vfiprintf_r+0x20e>
 800ac06:	4b26      	ldr	r3, [pc, #152]	; (800aca0 <_vfiprintf_r+0x228>)
 800ac08:	bb1b      	cbnz	r3, 800ac52 <_vfiprintf_r+0x1da>
 800ac0a:	9b03      	ldr	r3, [sp, #12]
 800ac0c:	3307      	adds	r3, #7
 800ac0e:	f023 0307 	bic.w	r3, r3, #7
 800ac12:	3308      	adds	r3, #8
 800ac14:	9303      	str	r3, [sp, #12]
 800ac16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac18:	443b      	add	r3, r7
 800ac1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1c:	e768      	b.n	800aaf0 <_vfiprintf_r+0x78>
 800ac1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac22:	460c      	mov	r4, r1
 800ac24:	2001      	movs	r0, #1
 800ac26:	e7a6      	b.n	800ab76 <_vfiprintf_r+0xfe>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	3401      	adds	r4, #1
 800ac2c:	9305      	str	r3, [sp, #20]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	f04f 0c0a 	mov.w	ip, #10
 800ac34:	4620      	mov	r0, r4
 800ac36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac3a:	3a30      	subs	r2, #48	; 0x30
 800ac3c:	2a09      	cmp	r2, #9
 800ac3e:	d903      	bls.n	800ac48 <_vfiprintf_r+0x1d0>
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d0c6      	beq.n	800abd2 <_vfiprintf_r+0x15a>
 800ac44:	9105      	str	r1, [sp, #20]
 800ac46:	e7c4      	b.n	800abd2 <_vfiprintf_r+0x15a>
 800ac48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e7f0      	b.n	800ac34 <_vfiprintf_r+0x1bc>
 800ac52:	ab03      	add	r3, sp, #12
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	462a      	mov	r2, r5
 800ac58:	4b12      	ldr	r3, [pc, #72]	; (800aca4 <_vfiprintf_r+0x22c>)
 800ac5a:	a904      	add	r1, sp, #16
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f7fb fa0f 	bl	8006080 <_printf_float>
 800ac62:	4607      	mov	r7, r0
 800ac64:	1c78      	adds	r0, r7, #1
 800ac66:	d1d6      	bne.n	800ac16 <_vfiprintf_r+0x19e>
 800ac68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac6a:	07d9      	lsls	r1, r3, #31
 800ac6c:	d405      	bmi.n	800ac7a <_vfiprintf_r+0x202>
 800ac6e:	89ab      	ldrh	r3, [r5, #12]
 800ac70:	059a      	lsls	r2, r3, #22
 800ac72:	d402      	bmi.n	800ac7a <_vfiprintf_r+0x202>
 800ac74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac76:	f7fc f9ab 	bl	8006fd0 <__retarget_lock_release_recursive>
 800ac7a:	89ab      	ldrh	r3, [r5, #12]
 800ac7c:	065b      	lsls	r3, r3, #25
 800ac7e:	f53f af1d 	bmi.w	800aabc <_vfiprintf_r+0x44>
 800ac82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac84:	e71c      	b.n	800aac0 <_vfiprintf_r+0x48>
 800ac86:	ab03      	add	r3, sp, #12
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	462a      	mov	r2, r5
 800ac8c:	4b05      	ldr	r3, [pc, #20]	; (800aca4 <_vfiprintf_r+0x22c>)
 800ac8e:	a904      	add	r1, sp, #16
 800ac90:	4630      	mov	r0, r6
 800ac92:	f7fb fc99 	bl	80065c8 <_printf_i>
 800ac96:	e7e4      	b.n	800ac62 <_vfiprintf_r+0x1ea>
 800ac98:	0800c991 	.word	0x0800c991
 800ac9c:	0800c99b 	.word	0x0800c99b
 800aca0:	08006081 	.word	0x08006081
 800aca4:	0800aa55 	.word	0x0800aa55
 800aca8:	0800c997 	.word	0x0800c997

0800acac <__swbuf_r>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	460e      	mov	r6, r1
 800acb0:	4614      	mov	r4, r2
 800acb2:	4605      	mov	r5, r0
 800acb4:	b118      	cbz	r0, 800acbe <__swbuf_r+0x12>
 800acb6:	6a03      	ldr	r3, [r0, #32]
 800acb8:	b90b      	cbnz	r3, 800acbe <__swbuf_r+0x12>
 800acba:	f7fc f843 	bl	8006d44 <__sinit>
 800acbe:	69a3      	ldr	r3, [r4, #24]
 800acc0:	60a3      	str	r3, [r4, #8]
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	071a      	lsls	r2, r3, #28
 800acc6:	d525      	bpl.n	800ad14 <__swbuf_r+0x68>
 800acc8:	6923      	ldr	r3, [r4, #16]
 800acca:	b31b      	cbz	r3, 800ad14 <__swbuf_r+0x68>
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	6922      	ldr	r2, [r4, #16]
 800acd0:	1a98      	subs	r0, r3, r2
 800acd2:	6963      	ldr	r3, [r4, #20]
 800acd4:	b2f6      	uxtb	r6, r6
 800acd6:	4283      	cmp	r3, r0
 800acd8:	4637      	mov	r7, r6
 800acda:	dc04      	bgt.n	800ace6 <__swbuf_r+0x3a>
 800acdc:	4621      	mov	r1, r4
 800acde:	4628      	mov	r0, r5
 800ace0:	f7ff f942 	bl	8009f68 <_fflush_r>
 800ace4:	b9e0      	cbnz	r0, 800ad20 <__swbuf_r+0x74>
 800ace6:	68a3      	ldr	r3, [r4, #8]
 800ace8:	3b01      	subs	r3, #1
 800acea:	60a3      	str	r3, [r4, #8]
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	6022      	str	r2, [r4, #0]
 800acf2:	701e      	strb	r6, [r3, #0]
 800acf4:	6962      	ldr	r2, [r4, #20]
 800acf6:	1c43      	adds	r3, r0, #1
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d004      	beq.n	800ad06 <__swbuf_r+0x5a>
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	07db      	lsls	r3, r3, #31
 800ad00:	d506      	bpl.n	800ad10 <__swbuf_r+0x64>
 800ad02:	2e0a      	cmp	r6, #10
 800ad04:	d104      	bne.n	800ad10 <__swbuf_r+0x64>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f7ff f92d 	bl	8009f68 <_fflush_r>
 800ad0e:	b938      	cbnz	r0, 800ad20 <__swbuf_r+0x74>
 800ad10:	4638      	mov	r0, r7
 800ad12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad14:	4621      	mov	r1, r4
 800ad16:	4628      	mov	r0, r5
 800ad18:	f000 f806 	bl	800ad28 <__swsetup_r>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d0d5      	beq.n	800accc <__swbuf_r+0x20>
 800ad20:	f04f 37ff 	mov.w	r7, #4294967295
 800ad24:	e7f4      	b.n	800ad10 <__swbuf_r+0x64>
	...

0800ad28 <__swsetup_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4b2a      	ldr	r3, [pc, #168]	; (800add4 <__swsetup_r+0xac>)
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	460c      	mov	r4, r1
 800ad32:	b118      	cbz	r0, 800ad3c <__swsetup_r+0x14>
 800ad34:	6a03      	ldr	r3, [r0, #32]
 800ad36:	b90b      	cbnz	r3, 800ad3c <__swsetup_r+0x14>
 800ad38:	f7fc f804 	bl	8006d44 <__sinit>
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad42:	0718      	lsls	r0, r3, #28
 800ad44:	d422      	bmi.n	800ad8c <__swsetup_r+0x64>
 800ad46:	06d9      	lsls	r1, r3, #27
 800ad48:	d407      	bmi.n	800ad5a <__swsetup_r+0x32>
 800ad4a:	2309      	movs	r3, #9
 800ad4c:	602b      	str	r3, [r5, #0]
 800ad4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad52:	81a3      	strh	r3, [r4, #12]
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	e034      	b.n	800adc4 <__swsetup_r+0x9c>
 800ad5a:	0758      	lsls	r0, r3, #29
 800ad5c:	d512      	bpl.n	800ad84 <__swsetup_r+0x5c>
 800ad5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad60:	b141      	cbz	r1, 800ad74 <__swsetup_r+0x4c>
 800ad62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad66:	4299      	cmp	r1, r3
 800ad68:	d002      	beq.n	800ad70 <__swsetup_r+0x48>
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f7fc ffba 	bl	8007ce4 <_free_r>
 800ad70:	2300      	movs	r3, #0
 800ad72:	6363      	str	r3, [r4, #52]	; 0x34
 800ad74:	89a3      	ldrh	r3, [r4, #12]
 800ad76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad7a:	81a3      	strh	r3, [r4, #12]
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	6063      	str	r3, [r4, #4]
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	6023      	str	r3, [r4, #0]
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	f043 0308 	orr.w	r3, r3, #8
 800ad8a:	81a3      	strh	r3, [r4, #12]
 800ad8c:	6923      	ldr	r3, [r4, #16]
 800ad8e:	b94b      	cbnz	r3, 800ada4 <__swsetup_r+0x7c>
 800ad90:	89a3      	ldrh	r3, [r4, #12]
 800ad92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad9a:	d003      	beq.n	800ada4 <__swsetup_r+0x7c>
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f000 f884 	bl	800aeac <__smakebuf_r>
 800ada4:	89a0      	ldrh	r0, [r4, #12]
 800ada6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adaa:	f010 0301 	ands.w	r3, r0, #1
 800adae:	d00a      	beq.n	800adc6 <__swsetup_r+0x9e>
 800adb0:	2300      	movs	r3, #0
 800adb2:	60a3      	str	r3, [r4, #8]
 800adb4:	6963      	ldr	r3, [r4, #20]
 800adb6:	425b      	negs	r3, r3
 800adb8:	61a3      	str	r3, [r4, #24]
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	b943      	cbnz	r3, 800add0 <__swsetup_r+0xa8>
 800adbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800adc2:	d1c4      	bne.n	800ad4e <__swsetup_r+0x26>
 800adc4:	bd38      	pop	{r3, r4, r5, pc}
 800adc6:	0781      	lsls	r1, r0, #30
 800adc8:	bf58      	it	pl
 800adca:	6963      	ldrpl	r3, [r4, #20]
 800adcc:	60a3      	str	r3, [r4, #8]
 800adce:	e7f4      	b.n	800adba <__swsetup_r+0x92>
 800add0:	2000      	movs	r0, #0
 800add2:	e7f7      	b.n	800adc4 <__swsetup_r+0x9c>
 800add4:	20000068 	.word	0x20000068

0800add8 <_raise_r>:
 800add8:	291f      	cmp	r1, #31
 800adda:	b538      	push	{r3, r4, r5, lr}
 800addc:	4604      	mov	r4, r0
 800adde:	460d      	mov	r5, r1
 800ade0:	d904      	bls.n	800adec <_raise_r+0x14>
 800ade2:	2316      	movs	r3, #22
 800ade4:	6003      	str	r3, [r0, #0]
 800ade6:	f04f 30ff 	mov.w	r0, #4294967295
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800adee:	b112      	cbz	r2, 800adf6 <_raise_r+0x1e>
 800adf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adf4:	b94b      	cbnz	r3, 800ae0a <_raise_r+0x32>
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 f830 	bl	800ae5c <_getpid_r>
 800adfc:	462a      	mov	r2, r5
 800adfe:	4601      	mov	r1, r0
 800ae00:	4620      	mov	r0, r4
 800ae02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae06:	f000 b817 	b.w	800ae38 <_kill_r>
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d00a      	beq.n	800ae24 <_raise_r+0x4c>
 800ae0e:	1c59      	adds	r1, r3, #1
 800ae10:	d103      	bne.n	800ae1a <_raise_r+0x42>
 800ae12:	2316      	movs	r3, #22
 800ae14:	6003      	str	r3, [r0, #0]
 800ae16:	2001      	movs	r0, #1
 800ae18:	e7e7      	b.n	800adea <_raise_r+0x12>
 800ae1a:	2400      	movs	r4, #0
 800ae1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae20:	4628      	mov	r0, r5
 800ae22:	4798      	blx	r3
 800ae24:	2000      	movs	r0, #0
 800ae26:	e7e0      	b.n	800adea <_raise_r+0x12>

0800ae28 <raise>:
 800ae28:	4b02      	ldr	r3, [pc, #8]	; (800ae34 <raise+0xc>)
 800ae2a:	4601      	mov	r1, r0
 800ae2c:	6818      	ldr	r0, [r3, #0]
 800ae2e:	f7ff bfd3 	b.w	800add8 <_raise_r>
 800ae32:	bf00      	nop
 800ae34:	20000068 	.word	0x20000068

0800ae38 <_kill_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d07      	ldr	r5, [pc, #28]	; (800ae58 <_kill_r+0x20>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	4611      	mov	r1, r2
 800ae44:	602b      	str	r3, [r5, #0]
 800ae46:	f7f7 f9e9 	bl	800221c <_kill>
 800ae4a:	1c43      	adds	r3, r0, #1
 800ae4c:	d102      	bne.n	800ae54 <_kill_r+0x1c>
 800ae4e:	682b      	ldr	r3, [r5, #0]
 800ae50:	b103      	cbz	r3, 800ae54 <_kill_r+0x1c>
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	bd38      	pop	{r3, r4, r5, pc}
 800ae56:	bf00      	nop
 800ae58:	20000638 	.word	0x20000638

0800ae5c <_getpid_r>:
 800ae5c:	f7f7 b9d6 	b.w	800220c <_getpid>

0800ae60 <__swhatbuf_r>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	460c      	mov	r4, r1
 800ae64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae68:	2900      	cmp	r1, #0
 800ae6a:	b096      	sub	sp, #88	; 0x58
 800ae6c:	4615      	mov	r5, r2
 800ae6e:	461e      	mov	r6, r3
 800ae70:	da0d      	bge.n	800ae8e <__swhatbuf_r+0x2e>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ae78:	f04f 0100 	mov.w	r1, #0
 800ae7c:	bf0c      	ite	eq
 800ae7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ae82:	2340      	movne	r3, #64	; 0x40
 800ae84:	2000      	movs	r0, #0
 800ae86:	6031      	str	r1, [r6, #0]
 800ae88:	602b      	str	r3, [r5, #0]
 800ae8a:	b016      	add	sp, #88	; 0x58
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}
 800ae8e:	466a      	mov	r2, sp
 800ae90:	f000 f848 	bl	800af24 <_fstat_r>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	dbec      	blt.n	800ae72 <__swhatbuf_r+0x12>
 800ae98:	9901      	ldr	r1, [sp, #4]
 800ae9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ae9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aea2:	4259      	negs	r1, r3
 800aea4:	4159      	adcs	r1, r3
 800aea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeaa:	e7eb      	b.n	800ae84 <__swhatbuf_r+0x24>

0800aeac <__smakebuf_r>:
 800aeac:	898b      	ldrh	r3, [r1, #12]
 800aeae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aeb0:	079d      	lsls	r5, r3, #30
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	460c      	mov	r4, r1
 800aeb6:	d507      	bpl.n	800aec8 <__smakebuf_r+0x1c>
 800aeb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	6123      	str	r3, [r4, #16]
 800aec0:	2301      	movs	r3, #1
 800aec2:	6163      	str	r3, [r4, #20]
 800aec4:	b002      	add	sp, #8
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	ab01      	add	r3, sp, #4
 800aeca:	466a      	mov	r2, sp
 800aecc:	f7ff ffc8 	bl	800ae60 <__swhatbuf_r>
 800aed0:	9900      	ldr	r1, [sp, #0]
 800aed2:	4605      	mov	r5, r0
 800aed4:	4630      	mov	r0, r6
 800aed6:	f7fc ff79 	bl	8007dcc <_malloc_r>
 800aeda:	b948      	cbnz	r0, 800aef0 <__smakebuf_r+0x44>
 800aedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aee0:	059a      	lsls	r2, r3, #22
 800aee2:	d4ef      	bmi.n	800aec4 <__smakebuf_r+0x18>
 800aee4:	f023 0303 	bic.w	r3, r3, #3
 800aee8:	f043 0302 	orr.w	r3, r3, #2
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	e7e3      	b.n	800aeb8 <__smakebuf_r+0xc>
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	6020      	str	r0, [r4, #0]
 800aef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef8:	81a3      	strh	r3, [r4, #12]
 800aefa:	9b00      	ldr	r3, [sp, #0]
 800aefc:	6163      	str	r3, [r4, #20]
 800aefe:	9b01      	ldr	r3, [sp, #4]
 800af00:	6120      	str	r0, [r4, #16]
 800af02:	b15b      	cbz	r3, 800af1c <__smakebuf_r+0x70>
 800af04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af08:	4630      	mov	r0, r6
 800af0a:	f000 f81d 	bl	800af48 <_isatty_r>
 800af0e:	b128      	cbz	r0, 800af1c <__smakebuf_r+0x70>
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	f023 0303 	bic.w	r3, r3, #3
 800af16:	f043 0301 	orr.w	r3, r3, #1
 800af1a:	81a3      	strh	r3, [r4, #12]
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	431d      	orrs	r5, r3
 800af20:	81a5      	strh	r5, [r4, #12]
 800af22:	e7cf      	b.n	800aec4 <__smakebuf_r+0x18>

0800af24 <_fstat_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d07      	ldr	r5, [pc, #28]	; (800af44 <_fstat_r+0x20>)
 800af28:	2300      	movs	r3, #0
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	4611      	mov	r1, r2
 800af30:	602b      	str	r3, [r5, #0]
 800af32:	f7f7 f9d2 	bl	80022da <_fstat>
 800af36:	1c43      	adds	r3, r0, #1
 800af38:	d102      	bne.n	800af40 <_fstat_r+0x1c>
 800af3a:	682b      	ldr	r3, [r5, #0]
 800af3c:	b103      	cbz	r3, 800af40 <_fstat_r+0x1c>
 800af3e:	6023      	str	r3, [r4, #0]
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	bf00      	nop
 800af44:	20000638 	.word	0x20000638

0800af48 <_isatty_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d06      	ldr	r5, [pc, #24]	; (800af64 <_isatty_r+0x1c>)
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	f7f7 f9d1 	bl	80022fa <_isatty>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_isatty_r+0x1a>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_isatty_r+0x1a>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20000638 	.word	0x20000638

0800af68 <atan2>:
 800af68:	f000 ba36 	b.w	800b3d8 <__ieee754_atan2>
 800af6c:	0000      	movs	r0, r0
	...

0800af70 <cos>:
 800af70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af72:	ec53 2b10 	vmov	r2, r3, d0
 800af76:	4826      	ldr	r0, [pc, #152]	; (800b010 <cos+0xa0>)
 800af78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800af7c:	4281      	cmp	r1, r0
 800af7e:	dc06      	bgt.n	800af8e <cos+0x1e>
 800af80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b008 <cos+0x98>
 800af84:	b005      	add	sp, #20
 800af86:	f85d eb04 	ldr.w	lr, [sp], #4
 800af8a:	f000 b89d 	b.w	800b0c8 <__kernel_cos>
 800af8e:	4821      	ldr	r0, [pc, #132]	; (800b014 <cos+0xa4>)
 800af90:	4281      	cmp	r1, r0
 800af92:	dd09      	ble.n	800afa8 <cos+0x38>
 800af94:	ee10 0a10 	vmov	r0, s0
 800af98:	4619      	mov	r1, r3
 800af9a:	f7f5 f98d 	bl	80002b8 <__aeabi_dsub>
 800af9e:	ec41 0b10 	vmov	d0, r0, r1
 800afa2:	b005      	add	sp, #20
 800afa4:	f85d fb04 	ldr.w	pc, [sp], #4
 800afa8:	4668      	mov	r0, sp
 800afaa:	f000 fadd 	bl	800b568 <__ieee754_rem_pio2>
 800afae:	f000 0003 	and.w	r0, r0, #3
 800afb2:	2801      	cmp	r0, #1
 800afb4:	d00b      	beq.n	800afce <cos+0x5e>
 800afb6:	2802      	cmp	r0, #2
 800afb8:	d016      	beq.n	800afe8 <cos+0x78>
 800afba:	b9e0      	cbnz	r0, 800aff6 <cos+0x86>
 800afbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afc0:	ed9d 0b00 	vldr	d0, [sp]
 800afc4:	f000 f880 	bl	800b0c8 <__kernel_cos>
 800afc8:	ec51 0b10 	vmov	r0, r1, d0
 800afcc:	e7e7      	b.n	800af9e <cos+0x2e>
 800afce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afd2:	ed9d 0b00 	vldr	d0, [sp]
 800afd6:	f000 f93f 	bl	800b258 <__kernel_sin>
 800afda:	ec53 2b10 	vmov	r2, r3, d0
 800afde:	ee10 0a10 	vmov	r0, s0
 800afe2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afe6:	e7da      	b.n	800af9e <cos+0x2e>
 800afe8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afec:	ed9d 0b00 	vldr	d0, [sp]
 800aff0:	f000 f86a 	bl	800b0c8 <__kernel_cos>
 800aff4:	e7f1      	b.n	800afda <cos+0x6a>
 800aff6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800affa:	ed9d 0b00 	vldr	d0, [sp]
 800affe:	2001      	movs	r0, #1
 800b000:	f000 f92a 	bl	800b258 <__kernel_sin>
 800b004:	e7e0      	b.n	800afc8 <cos+0x58>
 800b006:	bf00      	nop
	...
 800b010:	3fe921fb 	.word	0x3fe921fb
 800b014:	7fefffff 	.word	0x7fefffff

0800b018 <sin>:
 800b018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b01a:	ec53 2b10 	vmov	r2, r3, d0
 800b01e:	4828      	ldr	r0, [pc, #160]	; (800b0c0 <sin+0xa8>)
 800b020:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b024:	4281      	cmp	r1, r0
 800b026:	dc07      	bgt.n	800b038 <sin+0x20>
 800b028:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b0b8 <sin+0xa0>
 800b02c:	2000      	movs	r0, #0
 800b02e:	b005      	add	sp, #20
 800b030:	f85d eb04 	ldr.w	lr, [sp], #4
 800b034:	f000 b910 	b.w	800b258 <__kernel_sin>
 800b038:	4822      	ldr	r0, [pc, #136]	; (800b0c4 <sin+0xac>)
 800b03a:	4281      	cmp	r1, r0
 800b03c:	dd09      	ble.n	800b052 <sin+0x3a>
 800b03e:	ee10 0a10 	vmov	r0, s0
 800b042:	4619      	mov	r1, r3
 800b044:	f7f5 f938 	bl	80002b8 <__aeabi_dsub>
 800b048:	ec41 0b10 	vmov	d0, r0, r1
 800b04c:	b005      	add	sp, #20
 800b04e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b052:	4668      	mov	r0, sp
 800b054:	f000 fa88 	bl	800b568 <__ieee754_rem_pio2>
 800b058:	f000 0003 	and.w	r0, r0, #3
 800b05c:	2801      	cmp	r0, #1
 800b05e:	d00c      	beq.n	800b07a <sin+0x62>
 800b060:	2802      	cmp	r0, #2
 800b062:	d011      	beq.n	800b088 <sin+0x70>
 800b064:	b9f0      	cbnz	r0, 800b0a4 <sin+0x8c>
 800b066:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b06a:	ed9d 0b00 	vldr	d0, [sp]
 800b06e:	2001      	movs	r0, #1
 800b070:	f000 f8f2 	bl	800b258 <__kernel_sin>
 800b074:	ec51 0b10 	vmov	r0, r1, d0
 800b078:	e7e6      	b.n	800b048 <sin+0x30>
 800b07a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b07e:	ed9d 0b00 	vldr	d0, [sp]
 800b082:	f000 f821 	bl	800b0c8 <__kernel_cos>
 800b086:	e7f5      	b.n	800b074 <sin+0x5c>
 800b088:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b08c:	ed9d 0b00 	vldr	d0, [sp]
 800b090:	2001      	movs	r0, #1
 800b092:	f000 f8e1 	bl	800b258 <__kernel_sin>
 800b096:	ec53 2b10 	vmov	r2, r3, d0
 800b09a:	ee10 0a10 	vmov	r0, s0
 800b09e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0a2:	e7d1      	b.n	800b048 <sin+0x30>
 800b0a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0a8:	ed9d 0b00 	vldr	d0, [sp]
 800b0ac:	f000 f80c 	bl	800b0c8 <__kernel_cos>
 800b0b0:	e7f1      	b.n	800b096 <sin+0x7e>
 800b0b2:	bf00      	nop
 800b0b4:	f3af 8000 	nop.w
	...
 800b0c0:	3fe921fb 	.word	0x3fe921fb
 800b0c4:	7fefffff 	.word	0x7fefffff

0800b0c8 <__kernel_cos>:
 800b0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	ec57 6b10 	vmov	r6, r7, d0
 800b0d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b0d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b0d8:	ed8d 1b00 	vstr	d1, [sp]
 800b0dc:	da07      	bge.n	800b0ee <__kernel_cos+0x26>
 800b0de:	ee10 0a10 	vmov	r0, s0
 800b0e2:	4639      	mov	r1, r7
 800b0e4:	f7f5 fd50 	bl	8000b88 <__aeabi_d2iz>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f000 8088 	beq.w	800b1fe <__kernel_cos+0x136>
 800b0ee:	4632      	mov	r2, r6
 800b0f0:	463b      	mov	r3, r7
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	f7f5 fa97 	bl	8000628 <__aeabi_dmul>
 800b0fa:	4b51      	ldr	r3, [pc, #324]	; (800b240 <__kernel_cos+0x178>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	4604      	mov	r4, r0
 800b100:	460d      	mov	r5, r1
 800b102:	f7f5 fa91 	bl	8000628 <__aeabi_dmul>
 800b106:	a340      	add	r3, pc, #256	; (adr r3, 800b208 <__kernel_cos+0x140>)
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	4682      	mov	sl, r0
 800b10e:	468b      	mov	fp, r1
 800b110:	4620      	mov	r0, r4
 800b112:	4629      	mov	r1, r5
 800b114:	f7f5 fa88 	bl	8000628 <__aeabi_dmul>
 800b118:	a33d      	add	r3, pc, #244	; (adr r3, 800b210 <__kernel_cos+0x148>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	f7f5 f8cd 	bl	80002bc <__adddf3>
 800b122:	4622      	mov	r2, r4
 800b124:	462b      	mov	r3, r5
 800b126:	f7f5 fa7f 	bl	8000628 <__aeabi_dmul>
 800b12a:	a33b      	add	r3, pc, #236	; (adr r3, 800b218 <__kernel_cos+0x150>)
 800b12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b130:	f7f5 f8c2 	bl	80002b8 <__aeabi_dsub>
 800b134:	4622      	mov	r2, r4
 800b136:	462b      	mov	r3, r5
 800b138:	f7f5 fa76 	bl	8000628 <__aeabi_dmul>
 800b13c:	a338      	add	r3, pc, #224	; (adr r3, 800b220 <__kernel_cos+0x158>)
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	f7f5 f8bb 	bl	80002bc <__adddf3>
 800b146:	4622      	mov	r2, r4
 800b148:	462b      	mov	r3, r5
 800b14a:	f7f5 fa6d 	bl	8000628 <__aeabi_dmul>
 800b14e:	a336      	add	r3, pc, #216	; (adr r3, 800b228 <__kernel_cos+0x160>)
 800b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b154:	f7f5 f8b0 	bl	80002b8 <__aeabi_dsub>
 800b158:	4622      	mov	r2, r4
 800b15a:	462b      	mov	r3, r5
 800b15c:	f7f5 fa64 	bl	8000628 <__aeabi_dmul>
 800b160:	a333      	add	r3, pc, #204	; (adr r3, 800b230 <__kernel_cos+0x168>)
 800b162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b166:	f7f5 f8a9 	bl	80002bc <__adddf3>
 800b16a:	4622      	mov	r2, r4
 800b16c:	462b      	mov	r3, r5
 800b16e:	f7f5 fa5b 	bl	8000628 <__aeabi_dmul>
 800b172:	4622      	mov	r2, r4
 800b174:	462b      	mov	r3, r5
 800b176:	f7f5 fa57 	bl	8000628 <__aeabi_dmul>
 800b17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b17e:	4604      	mov	r4, r0
 800b180:	460d      	mov	r5, r1
 800b182:	4630      	mov	r0, r6
 800b184:	4639      	mov	r1, r7
 800b186:	f7f5 fa4f 	bl	8000628 <__aeabi_dmul>
 800b18a:	460b      	mov	r3, r1
 800b18c:	4602      	mov	r2, r0
 800b18e:	4629      	mov	r1, r5
 800b190:	4620      	mov	r0, r4
 800b192:	f7f5 f891 	bl	80002b8 <__aeabi_dsub>
 800b196:	4b2b      	ldr	r3, [pc, #172]	; (800b244 <__kernel_cos+0x17c>)
 800b198:	4598      	cmp	r8, r3
 800b19a:	4606      	mov	r6, r0
 800b19c:	460f      	mov	r7, r1
 800b19e:	dc10      	bgt.n	800b1c2 <__kernel_cos+0xfa>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4650      	mov	r0, sl
 800b1a6:	4659      	mov	r1, fp
 800b1a8:	f7f5 f886 	bl	80002b8 <__aeabi_dsub>
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4926      	ldr	r1, [pc, #152]	; (800b248 <__kernel_cos+0x180>)
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	2000      	movs	r0, #0
 800b1b4:	f7f5 f880 	bl	80002b8 <__aeabi_dsub>
 800b1b8:	ec41 0b10 	vmov	d0, r0, r1
 800b1bc:	b003      	add	sp, #12
 800b1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c2:	4b22      	ldr	r3, [pc, #136]	; (800b24c <__kernel_cos+0x184>)
 800b1c4:	4920      	ldr	r1, [pc, #128]	; (800b248 <__kernel_cos+0x180>)
 800b1c6:	4598      	cmp	r8, r3
 800b1c8:	bfcc      	ite	gt
 800b1ca:	4d21      	ldrgt	r5, [pc, #132]	; (800b250 <__kernel_cos+0x188>)
 800b1cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b1d0:	2400      	movs	r4, #0
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	462b      	mov	r3, r5
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	f7f5 f86e 	bl	80002b8 <__aeabi_dsub>
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4680      	mov	r8, r0
 800b1e0:	4689      	mov	r9, r1
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	4650      	mov	r0, sl
 800b1e6:	4659      	mov	r1, fp
 800b1e8:	f7f5 f866 	bl	80002b8 <__aeabi_dsub>
 800b1ec:	4632      	mov	r2, r6
 800b1ee:	463b      	mov	r3, r7
 800b1f0:	f7f5 f862 	bl	80002b8 <__aeabi_dsub>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	e7da      	b.n	800b1b4 <__kernel_cos+0xec>
 800b1fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b238 <__kernel_cos+0x170>
 800b202:	e7db      	b.n	800b1bc <__kernel_cos+0xf4>
 800b204:	f3af 8000 	nop.w
 800b208:	be8838d4 	.word	0xbe8838d4
 800b20c:	bda8fae9 	.word	0xbda8fae9
 800b210:	bdb4b1c4 	.word	0xbdb4b1c4
 800b214:	3e21ee9e 	.word	0x3e21ee9e
 800b218:	809c52ad 	.word	0x809c52ad
 800b21c:	3e927e4f 	.word	0x3e927e4f
 800b220:	19cb1590 	.word	0x19cb1590
 800b224:	3efa01a0 	.word	0x3efa01a0
 800b228:	16c15177 	.word	0x16c15177
 800b22c:	3f56c16c 	.word	0x3f56c16c
 800b230:	5555554c 	.word	0x5555554c
 800b234:	3fa55555 	.word	0x3fa55555
 800b238:	00000000 	.word	0x00000000
 800b23c:	3ff00000 	.word	0x3ff00000
 800b240:	3fe00000 	.word	0x3fe00000
 800b244:	3fd33332 	.word	0x3fd33332
 800b248:	3ff00000 	.word	0x3ff00000
 800b24c:	3fe90000 	.word	0x3fe90000
 800b250:	3fd20000 	.word	0x3fd20000
 800b254:	00000000 	.word	0x00000000

0800b258 <__kernel_sin>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	ed2d 8b04 	vpush	{d8-d9}
 800b260:	eeb0 8a41 	vmov.f32	s16, s2
 800b264:	eef0 8a61 	vmov.f32	s17, s3
 800b268:	ec55 4b10 	vmov	r4, r5, d0
 800b26c:	b083      	sub	sp, #12
 800b26e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b272:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b276:	9001      	str	r0, [sp, #4]
 800b278:	da06      	bge.n	800b288 <__kernel_sin+0x30>
 800b27a:	ee10 0a10 	vmov	r0, s0
 800b27e:	4629      	mov	r1, r5
 800b280:	f7f5 fc82 	bl	8000b88 <__aeabi_d2iz>
 800b284:	2800      	cmp	r0, #0
 800b286:	d051      	beq.n	800b32c <__kernel_sin+0xd4>
 800b288:	4622      	mov	r2, r4
 800b28a:	462b      	mov	r3, r5
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f5 f9ca 	bl	8000628 <__aeabi_dmul>
 800b294:	4682      	mov	sl, r0
 800b296:	468b      	mov	fp, r1
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4620      	mov	r0, r4
 800b29e:	4629      	mov	r1, r5
 800b2a0:	f7f5 f9c2 	bl	8000628 <__aeabi_dmul>
 800b2a4:	a341      	add	r3, pc, #260	; (adr r3, 800b3ac <__kernel_sin+0x154>)
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	4689      	mov	r9, r1
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	4659      	mov	r1, fp
 800b2b2:	f7f5 f9b9 	bl	8000628 <__aeabi_dmul>
 800b2b6:	a33f      	add	r3, pc, #252	; (adr r3, 800b3b4 <__kernel_sin+0x15c>)
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	f7f4 fffc 	bl	80002b8 <__aeabi_dsub>
 800b2c0:	4652      	mov	r2, sl
 800b2c2:	465b      	mov	r3, fp
 800b2c4:	f7f5 f9b0 	bl	8000628 <__aeabi_dmul>
 800b2c8:	a33c      	add	r3, pc, #240	; (adr r3, 800b3bc <__kernel_sin+0x164>)
 800b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ce:	f7f4 fff5 	bl	80002bc <__adddf3>
 800b2d2:	4652      	mov	r2, sl
 800b2d4:	465b      	mov	r3, fp
 800b2d6:	f7f5 f9a7 	bl	8000628 <__aeabi_dmul>
 800b2da:	a33a      	add	r3, pc, #232	; (adr r3, 800b3c4 <__kernel_sin+0x16c>)
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f7f4 ffea 	bl	80002b8 <__aeabi_dsub>
 800b2e4:	4652      	mov	r2, sl
 800b2e6:	465b      	mov	r3, fp
 800b2e8:	f7f5 f99e 	bl	8000628 <__aeabi_dmul>
 800b2ec:	a337      	add	r3, pc, #220	; (adr r3, 800b3cc <__kernel_sin+0x174>)
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	f7f4 ffe3 	bl	80002bc <__adddf3>
 800b2f6:	9b01      	ldr	r3, [sp, #4]
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	460f      	mov	r7, r1
 800b2fc:	b9eb      	cbnz	r3, 800b33a <__kernel_sin+0xe2>
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	4650      	mov	r0, sl
 800b304:	4659      	mov	r1, fp
 800b306:	f7f5 f98f 	bl	8000628 <__aeabi_dmul>
 800b30a:	a325      	add	r3, pc, #148	; (adr r3, 800b3a0 <__kernel_sin+0x148>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	f7f4 ffd2 	bl	80002b8 <__aeabi_dsub>
 800b314:	4642      	mov	r2, r8
 800b316:	464b      	mov	r3, r9
 800b318:	f7f5 f986 	bl	8000628 <__aeabi_dmul>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4620      	mov	r0, r4
 800b322:	4629      	mov	r1, r5
 800b324:	f7f4 ffca 	bl	80002bc <__adddf3>
 800b328:	4604      	mov	r4, r0
 800b32a:	460d      	mov	r5, r1
 800b32c:	ec45 4b10 	vmov	d0, r4, r5
 800b330:	b003      	add	sp, #12
 800b332:	ecbd 8b04 	vpop	{d8-d9}
 800b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33a:	4b1b      	ldr	r3, [pc, #108]	; (800b3a8 <__kernel_sin+0x150>)
 800b33c:	ec51 0b18 	vmov	r0, r1, d8
 800b340:	2200      	movs	r2, #0
 800b342:	f7f5 f971 	bl	8000628 <__aeabi_dmul>
 800b346:	4632      	mov	r2, r6
 800b348:	ec41 0b19 	vmov	d9, r0, r1
 800b34c:	463b      	mov	r3, r7
 800b34e:	4640      	mov	r0, r8
 800b350:	4649      	mov	r1, r9
 800b352:	f7f5 f969 	bl	8000628 <__aeabi_dmul>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	ec51 0b19 	vmov	r0, r1, d9
 800b35e:	f7f4 ffab 	bl	80002b8 <__aeabi_dsub>
 800b362:	4652      	mov	r2, sl
 800b364:	465b      	mov	r3, fp
 800b366:	f7f5 f95f 	bl	8000628 <__aeabi_dmul>
 800b36a:	ec53 2b18 	vmov	r2, r3, d8
 800b36e:	f7f4 ffa3 	bl	80002b8 <__aeabi_dsub>
 800b372:	a30b      	add	r3, pc, #44	; (adr r3, 800b3a0 <__kernel_sin+0x148>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	4606      	mov	r6, r0
 800b37a:	460f      	mov	r7, r1
 800b37c:	4640      	mov	r0, r8
 800b37e:	4649      	mov	r1, r9
 800b380:	f7f5 f952 	bl	8000628 <__aeabi_dmul>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4630      	mov	r0, r6
 800b38a:	4639      	mov	r1, r7
 800b38c:	f7f4 ff96 	bl	80002bc <__adddf3>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	4620      	mov	r0, r4
 800b396:	4629      	mov	r1, r5
 800b398:	f7f4 ff8e 	bl	80002b8 <__aeabi_dsub>
 800b39c:	e7c4      	b.n	800b328 <__kernel_sin+0xd0>
 800b39e:	bf00      	nop
 800b3a0:	55555549 	.word	0x55555549
 800b3a4:	3fc55555 	.word	0x3fc55555
 800b3a8:	3fe00000 	.word	0x3fe00000
 800b3ac:	5acfd57c 	.word	0x5acfd57c
 800b3b0:	3de5d93a 	.word	0x3de5d93a
 800b3b4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b3b8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b3bc:	57b1fe7d 	.word	0x57b1fe7d
 800b3c0:	3ec71de3 	.word	0x3ec71de3
 800b3c4:	19c161d5 	.word	0x19c161d5
 800b3c8:	3f2a01a0 	.word	0x3f2a01a0
 800b3cc:	1110f8a6 	.word	0x1110f8a6
 800b3d0:	3f811111 	.word	0x3f811111
 800b3d4:	00000000 	.word	0x00000000

0800b3d8 <__ieee754_atan2>:
 800b3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	ec57 6b11 	vmov	r6, r7, d1
 800b3e0:	4273      	negs	r3, r6
 800b3e2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b560 <__ieee754_atan2+0x188>
 800b3e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b3ea:	4333      	orrs	r3, r6
 800b3ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b3f0:	4543      	cmp	r3, r8
 800b3f2:	ec51 0b10 	vmov	r0, r1, d0
 800b3f6:	ee11 5a10 	vmov	r5, s2
 800b3fa:	d80a      	bhi.n	800b412 <__ieee754_atan2+0x3a>
 800b3fc:	4244      	negs	r4, r0
 800b3fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b402:	4304      	orrs	r4, r0
 800b404:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b408:	4544      	cmp	r4, r8
 800b40a:	ee10 9a10 	vmov	r9, s0
 800b40e:	468e      	mov	lr, r1
 800b410:	d907      	bls.n	800b422 <__ieee754_atan2+0x4a>
 800b412:	4632      	mov	r2, r6
 800b414:	463b      	mov	r3, r7
 800b416:	f7f4 ff51 	bl	80002bc <__adddf3>
 800b41a:	ec41 0b10 	vmov	d0, r0, r1
 800b41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b422:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b426:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b42a:	4334      	orrs	r4, r6
 800b42c:	d103      	bne.n	800b436 <__ieee754_atan2+0x5e>
 800b42e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b432:	f000 baa1 	b.w	800b978 <atan>
 800b436:	17bc      	asrs	r4, r7, #30
 800b438:	f004 0402 	and.w	r4, r4, #2
 800b43c:	ea53 0909 	orrs.w	r9, r3, r9
 800b440:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b444:	d107      	bne.n	800b456 <__ieee754_atan2+0x7e>
 800b446:	2c02      	cmp	r4, #2
 800b448:	d05f      	beq.n	800b50a <__ieee754_atan2+0x132>
 800b44a:	2c03      	cmp	r4, #3
 800b44c:	d1e5      	bne.n	800b41a <__ieee754_atan2+0x42>
 800b44e:	a140      	add	r1, pc, #256	; (adr r1, 800b550 <__ieee754_atan2+0x178>)
 800b450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b454:	e7e1      	b.n	800b41a <__ieee754_atan2+0x42>
 800b456:	4315      	orrs	r5, r2
 800b458:	d106      	bne.n	800b468 <__ieee754_atan2+0x90>
 800b45a:	f1be 0f00 	cmp.w	lr, #0
 800b45e:	da5f      	bge.n	800b520 <__ieee754_atan2+0x148>
 800b460:	a13d      	add	r1, pc, #244	; (adr r1, 800b558 <__ieee754_atan2+0x180>)
 800b462:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b466:	e7d8      	b.n	800b41a <__ieee754_atan2+0x42>
 800b468:	4542      	cmp	r2, r8
 800b46a:	d10f      	bne.n	800b48c <__ieee754_atan2+0xb4>
 800b46c:	4293      	cmp	r3, r2
 800b46e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b472:	d107      	bne.n	800b484 <__ieee754_atan2+0xac>
 800b474:	2c02      	cmp	r4, #2
 800b476:	d84c      	bhi.n	800b512 <__ieee754_atan2+0x13a>
 800b478:	4b33      	ldr	r3, [pc, #204]	; (800b548 <__ieee754_atan2+0x170>)
 800b47a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b47e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b482:	e7ca      	b.n	800b41a <__ieee754_atan2+0x42>
 800b484:	2c02      	cmp	r4, #2
 800b486:	d848      	bhi.n	800b51a <__ieee754_atan2+0x142>
 800b488:	4b30      	ldr	r3, [pc, #192]	; (800b54c <__ieee754_atan2+0x174>)
 800b48a:	e7f6      	b.n	800b47a <__ieee754_atan2+0xa2>
 800b48c:	4543      	cmp	r3, r8
 800b48e:	d0e4      	beq.n	800b45a <__ieee754_atan2+0x82>
 800b490:	1a9b      	subs	r3, r3, r2
 800b492:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b496:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b49a:	da1e      	bge.n	800b4da <__ieee754_atan2+0x102>
 800b49c:	2f00      	cmp	r7, #0
 800b49e:	da01      	bge.n	800b4a4 <__ieee754_atan2+0xcc>
 800b4a0:	323c      	adds	r2, #60	; 0x3c
 800b4a2:	db1e      	blt.n	800b4e2 <__ieee754_atan2+0x10a>
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	f7f5 f9e8 	bl	800087c <__aeabi_ddiv>
 800b4ac:	ec41 0b10 	vmov	d0, r0, r1
 800b4b0:	f000 fc02 	bl	800bcb8 <fabs>
 800b4b4:	f000 fa60 	bl	800b978 <atan>
 800b4b8:	ec51 0b10 	vmov	r0, r1, d0
 800b4bc:	2c01      	cmp	r4, #1
 800b4be:	d013      	beq.n	800b4e8 <__ieee754_atan2+0x110>
 800b4c0:	2c02      	cmp	r4, #2
 800b4c2:	d015      	beq.n	800b4f0 <__ieee754_atan2+0x118>
 800b4c4:	2c00      	cmp	r4, #0
 800b4c6:	d0a8      	beq.n	800b41a <__ieee754_atan2+0x42>
 800b4c8:	a317      	add	r3, pc, #92	; (adr r3, 800b528 <__ieee754_atan2+0x150>)
 800b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ce:	f7f4 fef3 	bl	80002b8 <__aeabi_dsub>
 800b4d2:	a317      	add	r3, pc, #92	; (adr r3, 800b530 <__ieee754_atan2+0x158>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	e014      	b.n	800b504 <__ieee754_atan2+0x12c>
 800b4da:	a117      	add	r1, pc, #92	; (adr r1, 800b538 <__ieee754_atan2+0x160>)
 800b4dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4e0:	e7ec      	b.n	800b4bc <__ieee754_atan2+0xe4>
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	e7e9      	b.n	800b4bc <__ieee754_atan2+0xe4>
 800b4e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	e794      	b.n	800b41a <__ieee754_atan2+0x42>
 800b4f0:	a30d      	add	r3, pc, #52	; (adr r3, 800b528 <__ieee754_atan2+0x150>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f7f4 fedf 	bl	80002b8 <__aeabi_dsub>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	a10c      	add	r1, pc, #48	; (adr r1, 800b530 <__ieee754_atan2+0x158>)
 800b500:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b504:	f7f4 fed8 	bl	80002b8 <__aeabi_dsub>
 800b508:	e787      	b.n	800b41a <__ieee754_atan2+0x42>
 800b50a:	a109      	add	r1, pc, #36	; (adr r1, 800b530 <__ieee754_atan2+0x158>)
 800b50c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b510:	e783      	b.n	800b41a <__ieee754_atan2+0x42>
 800b512:	a10b      	add	r1, pc, #44	; (adr r1, 800b540 <__ieee754_atan2+0x168>)
 800b514:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b518:	e77f      	b.n	800b41a <__ieee754_atan2+0x42>
 800b51a:	2000      	movs	r0, #0
 800b51c:	2100      	movs	r1, #0
 800b51e:	e77c      	b.n	800b41a <__ieee754_atan2+0x42>
 800b520:	a105      	add	r1, pc, #20	; (adr r1, 800b538 <__ieee754_atan2+0x160>)
 800b522:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b526:	e778      	b.n	800b41a <__ieee754_atan2+0x42>
 800b528:	33145c07 	.word	0x33145c07
 800b52c:	3ca1a626 	.word	0x3ca1a626
 800b530:	54442d18 	.word	0x54442d18
 800b534:	400921fb 	.word	0x400921fb
 800b538:	54442d18 	.word	0x54442d18
 800b53c:	3ff921fb 	.word	0x3ff921fb
 800b540:	54442d18 	.word	0x54442d18
 800b544:	3fe921fb 	.word	0x3fe921fb
 800b548:	0800ca68 	.word	0x0800ca68
 800b54c:	0800ca80 	.word	0x0800ca80
 800b550:	54442d18 	.word	0x54442d18
 800b554:	c00921fb 	.word	0xc00921fb
 800b558:	54442d18 	.word	0x54442d18
 800b55c:	bff921fb 	.word	0xbff921fb
 800b560:	7ff00000 	.word	0x7ff00000
 800b564:	00000000 	.word	0x00000000

0800b568 <__ieee754_rem_pio2>:
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	ed2d 8b02 	vpush	{d8}
 800b570:	ec55 4b10 	vmov	r4, r5, d0
 800b574:	4bca      	ldr	r3, [pc, #808]	; (800b8a0 <__ieee754_rem_pio2+0x338>)
 800b576:	b08b      	sub	sp, #44	; 0x2c
 800b578:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b57c:	4598      	cmp	r8, r3
 800b57e:	4682      	mov	sl, r0
 800b580:	9502      	str	r5, [sp, #8]
 800b582:	dc08      	bgt.n	800b596 <__ieee754_rem_pio2+0x2e>
 800b584:	2200      	movs	r2, #0
 800b586:	2300      	movs	r3, #0
 800b588:	ed80 0b00 	vstr	d0, [r0]
 800b58c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b590:	f04f 0b00 	mov.w	fp, #0
 800b594:	e028      	b.n	800b5e8 <__ieee754_rem_pio2+0x80>
 800b596:	4bc3      	ldr	r3, [pc, #780]	; (800b8a4 <__ieee754_rem_pio2+0x33c>)
 800b598:	4598      	cmp	r8, r3
 800b59a:	dc78      	bgt.n	800b68e <__ieee754_rem_pio2+0x126>
 800b59c:	9b02      	ldr	r3, [sp, #8]
 800b59e:	4ec2      	ldr	r6, [pc, #776]	; (800b8a8 <__ieee754_rem_pio2+0x340>)
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	ee10 0a10 	vmov	r0, s0
 800b5a6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b868 <__ieee754_rem_pio2+0x300>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	dd39      	ble.n	800b624 <__ieee754_rem_pio2+0xbc>
 800b5b0:	f7f4 fe82 	bl	80002b8 <__aeabi_dsub>
 800b5b4:	45b0      	cmp	r8, r6
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	460d      	mov	r5, r1
 800b5ba:	d01b      	beq.n	800b5f4 <__ieee754_rem_pio2+0x8c>
 800b5bc:	a3ac      	add	r3, pc, #688	; (adr r3, 800b870 <__ieee754_rem_pio2+0x308>)
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f7f4 fe79 	bl	80002b8 <__aeabi_dsub>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	e9ca 2300 	strd	r2, r3, [sl]
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f7f4 fe71 	bl	80002b8 <__aeabi_dsub>
 800b5d6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b870 <__ieee754_rem_pio2+0x308>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f7f4 fe6c 	bl	80002b8 <__aeabi_dsub>
 800b5e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b5e4:	f04f 0b01 	mov.w	fp, #1
 800b5e8:	4658      	mov	r0, fp
 800b5ea:	b00b      	add	sp, #44	; 0x2c
 800b5ec:	ecbd 8b02 	vpop	{d8}
 800b5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b878 <__ieee754_rem_pio2+0x310>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	f7f4 fe5d 	bl	80002b8 <__aeabi_dsub>
 800b5fe:	a3a0      	add	r3, pc, #640	; (adr r3, 800b880 <__ieee754_rem_pio2+0x318>)
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	4604      	mov	r4, r0
 800b606:	460d      	mov	r5, r1
 800b608:	f7f4 fe56 	bl	80002b8 <__aeabi_dsub>
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	e9ca 2300 	strd	r2, r3, [sl]
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f4 fe4e 	bl	80002b8 <__aeabi_dsub>
 800b61c:	a398      	add	r3, pc, #608	; (adr r3, 800b880 <__ieee754_rem_pio2+0x318>)
 800b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b622:	e7db      	b.n	800b5dc <__ieee754_rem_pio2+0x74>
 800b624:	f7f4 fe4a 	bl	80002bc <__adddf3>
 800b628:	45b0      	cmp	r8, r6
 800b62a:	4604      	mov	r4, r0
 800b62c:	460d      	mov	r5, r1
 800b62e:	d016      	beq.n	800b65e <__ieee754_rem_pio2+0xf6>
 800b630:	a38f      	add	r3, pc, #572	; (adr r3, 800b870 <__ieee754_rem_pio2+0x308>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f7f4 fe41 	bl	80002bc <__adddf3>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	e9ca 2300 	strd	r2, r3, [sl]
 800b642:	4620      	mov	r0, r4
 800b644:	4629      	mov	r1, r5
 800b646:	f7f4 fe37 	bl	80002b8 <__aeabi_dsub>
 800b64a:	a389      	add	r3, pc, #548	; (adr r3, 800b870 <__ieee754_rem_pio2+0x308>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fe34 	bl	80002bc <__adddf3>
 800b654:	f04f 3bff 	mov.w	fp, #4294967295
 800b658:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b65c:	e7c4      	b.n	800b5e8 <__ieee754_rem_pio2+0x80>
 800b65e:	a386      	add	r3, pc, #536	; (adr r3, 800b878 <__ieee754_rem_pio2+0x310>)
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	f7f4 fe2a 	bl	80002bc <__adddf3>
 800b668:	a385      	add	r3, pc, #532	; (adr r3, 800b880 <__ieee754_rem_pio2+0x318>)
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	4604      	mov	r4, r0
 800b670:	460d      	mov	r5, r1
 800b672:	f7f4 fe23 	bl	80002bc <__adddf3>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	e9ca 2300 	strd	r2, r3, [sl]
 800b67e:	4620      	mov	r0, r4
 800b680:	4629      	mov	r1, r5
 800b682:	f7f4 fe19 	bl	80002b8 <__aeabi_dsub>
 800b686:	a37e      	add	r3, pc, #504	; (adr r3, 800b880 <__ieee754_rem_pio2+0x318>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	e7e0      	b.n	800b650 <__ieee754_rem_pio2+0xe8>
 800b68e:	4b87      	ldr	r3, [pc, #540]	; (800b8ac <__ieee754_rem_pio2+0x344>)
 800b690:	4598      	cmp	r8, r3
 800b692:	f300 80d8 	bgt.w	800b846 <__ieee754_rem_pio2+0x2de>
 800b696:	f000 fb0f 	bl	800bcb8 <fabs>
 800b69a:	ec55 4b10 	vmov	r4, r5, d0
 800b69e:	ee10 0a10 	vmov	r0, s0
 800b6a2:	a379      	add	r3, pc, #484	; (adr r3, 800b888 <__ieee754_rem_pio2+0x320>)
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	f7f4 ffbd 	bl	8000628 <__aeabi_dmul>
 800b6ae:	4b80      	ldr	r3, [pc, #512]	; (800b8b0 <__ieee754_rem_pio2+0x348>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f7f4 fe03 	bl	80002bc <__adddf3>
 800b6b6:	f7f5 fa67 	bl	8000b88 <__aeabi_d2iz>
 800b6ba:	4683      	mov	fp, r0
 800b6bc:	f7f4 ff4a 	bl	8000554 <__aeabi_i2d>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	ec43 2b18 	vmov	d8, r2, r3
 800b6c8:	a367      	add	r3, pc, #412	; (adr r3, 800b868 <__ieee754_rem_pio2+0x300>)
 800b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ce:	f7f4 ffab 	bl	8000628 <__aeabi_dmul>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	4629      	mov	r1, r5
 800b6da:	f7f4 fded 	bl	80002b8 <__aeabi_dsub>
 800b6de:	a364      	add	r3, pc, #400	; (adr r3, 800b870 <__ieee754_rem_pio2+0x308>)
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	4606      	mov	r6, r0
 800b6e6:	460f      	mov	r7, r1
 800b6e8:	ec51 0b18 	vmov	r0, r1, d8
 800b6ec:	f7f4 ff9c 	bl	8000628 <__aeabi_dmul>
 800b6f0:	f1bb 0f1f 	cmp.w	fp, #31
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	460d      	mov	r5, r1
 800b6f8:	dc0d      	bgt.n	800b716 <__ieee754_rem_pio2+0x1ae>
 800b6fa:	4b6e      	ldr	r3, [pc, #440]	; (800b8b4 <__ieee754_rem_pio2+0x34c>)
 800b6fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b704:	4543      	cmp	r3, r8
 800b706:	d006      	beq.n	800b716 <__ieee754_rem_pio2+0x1ae>
 800b708:	4622      	mov	r2, r4
 800b70a:	462b      	mov	r3, r5
 800b70c:	4630      	mov	r0, r6
 800b70e:	4639      	mov	r1, r7
 800b710:	f7f4 fdd2 	bl	80002b8 <__aeabi_dsub>
 800b714:	e00e      	b.n	800b734 <__ieee754_rem_pio2+0x1cc>
 800b716:	462b      	mov	r3, r5
 800b718:	4622      	mov	r2, r4
 800b71a:	4630      	mov	r0, r6
 800b71c:	4639      	mov	r1, r7
 800b71e:	f7f4 fdcb 	bl	80002b8 <__aeabi_dsub>
 800b722:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b726:	9303      	str	r3, [sp, #12]
 800b728:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b72c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b730:	2b10      	cmp	r3, #16
 800b732:	dc02      	bgt.n	800b73a <__ieee754_rem_pio2+0x1d2>
 800b734:	e9ca 0100 	strd	r0, r1, [sl]
 800b738:	e039      	b.n	800b7ae <__ieee754_rem_pio2+0x246>
 800b73a:	a34f      	add	r3, pc, #316	; (adr r3, 800b878 <__ieee754_rem_pio2+0x310>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	ec51 0b18 	vmov	r0, r1, d8
 800b744:	f7f4 ff70 	bl	8000628 <__aeabi_dmul>
 800b748:	4604      	mov	r4, r0
 800b74a:	460d      	mov	r5, r1
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	4630      	mov	r0, r6
 800b752:	4639      	mov	r1, r7
 800b754:	f7f4 fdb0 	bl	80002b8 <__aeabi_dsub>
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	4680      	mov	r8, r0
 800b75e:	4689      	mov	r9, r1
 800b760:	4630      	mov	r0, r6
 800b762:	4639      	mov	r1, r7
 800b764:	f7f4 fda8 	bl	80002b8 <__aeabi_dsub>
 800b768:	4622      	mov	r2, r4
 800b76a:	462b      	mov	r3, r5
 800b76c:	f7f4 fda4 	bl	80002b8 <__aeabi_dsub>
 800b770:	a343      	add	r3, pc, #268	; (adr r3, 800b880 <__ieee754_rem_pio2+0x318>)
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	4604      	mov	r4, r0
 800b778:	460d      	mov	r5, r1
 800b77a:	ec51 0b18 	vmov	r0, r1, d8
 800b77e:	f7f4 ff53 	bl	8000628 <__aeabi_dmul>
 800b782:	4622      	mov	r2, r4
 800b784:	462b      	mov	r3, r5
 800b786:	f7f4 fd97 	bl	80002b8 <__aeabi_dsub>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4604      	mov	r4, r0
 800b790:	460d      	mov	r5, r1
 800b792:	4640      	mov	r0, r8
 800b794:	4649      	mov	r1, r9
 800b796:	f7f4 fd8f 	bl	80002b8 <__aeabi_dsub>
 800b79a:	9a03      	ldr	r2, [sp, #12]
 800b79c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	2b31      	cmp	r3, #49	; 0x31
 800b7a4:	dc24      	bgt.n	800b7f0 <__ieee754_rem_pio2+0x288>
 800b7a6:	e9ca 0100 	strd	r0, r1, [sl]
 800b7aa:	4646      	mov	r6, r8
 800b7ac:	464f      	mov	r7, r9
 800b7ae:	e9da 8900 	ldrd	r8, r9, [sl]
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	4642      	mov	r2, r8
 800b7b6:	464b      	mov	r3, r9
 800b7b8:	4639      	mov	r1, r7
 800b7ba:	f7f4 fd7d 	bl	80002b8 <__aeabi_dsub>
 800b7be:	462b      	mov	r3, r5
 800b7c0:	4622      	mov	r2, r4
 800b7c2:	f7f4 fd79 	bl	80002b8 <__aeabi_dsub>
 800b7c6:	9b02      	ldr	r3, [sp, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7ce:	f6bf af0b 	bge.w	800b5e8 <__ieee754_rem_pio2+0x80>
 800b7d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b7d6:	f8ca 3004 	str.w	r3, [sl, #4]
 800b7da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7de:	f8ca 8000 	str.w	r8, [sl]
 800b7e2:	f8ca 0008 	str.w	r0, [sl, #8]
 800b7e6:	f8ca 300c 	str.w	r3, [sl, #12]
 800b7ea:	f1cb 0b00 	rsb	fp, fp, #0
 800b7ee:	e6fb      	b.n	800b5e8 <__ieee754_rem_pio2+0x80>
 800b7f0:	a327      	add	r3, pc, #156	; (adr r3, 800b890 <__ieee754_rem_pio2+0x328>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	ec51 0b18 	vmov	r0, r1, d8
 800b7fa:	f7f4 ff15 	bl	8000628 <__aeabi_dmul>
 800b7fe:	4604      	mov	r4, r0
 800b800:	460d      	mov	r5, r1
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	4640      	mov	r0, r8
 800b808:	4649      	mov	r1, r9
 800b80a:	f7f4 fd55 	bl	80002b8 <__aeabi_dsub>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4606      	mov	r6, r0
 800b814:	460f      	mov	r7, r1
 800b816:	4640      	mov	r0, r8
 800b818:	4649      	mov	r1, r9
 800b81a:	f7f4 fd4d 	bl	80002b8 <__aeabi_dsub>
 800b81e:	4622      	mov	r2, r4
 800b820:	462b      	mov	r3, r5
 800b822:	f7f4 fd49 	bl	80002b8 <__aeabi_dsub>
 800b826:	a31c      	add	r3, pc, #112	; (adr r3, 800b898 <__ieee754_rem_pio2+0x330>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	4604      	mov	r4, r0
 800b82e:	460d      	mov	r5, r1
 800b830:	ec51 0b18 	vmov	r0, r1, d8
 800b834:	f7f4 fef8 	bl	8000628 <__aeabi_dmul>
 800b838:	4622      	mov	r2, r4
 800b83a:	462b      	mov	r3, r5
 800b83c:	f7f4 fd3c 	bl	80002b8 <__aeabi_dsub>
 800b840:	4604      	mov	r4, r0
 800b842:	460d      	mov	r5, r1
 800b844:	e760      	b.n	800b708 <__ieee754_rem_pio2+0x1a0>
 800b846:	4b1c      	ldr	r3, [pc, #112]	; (800b8b8 <__ieee754_rem_pio2+0x350>)
 800b848:	4598      	cmp	r8, r3
 800b84a:	dd37      	ble.n	800b8bc <__ieee754_rem_pio2+0x354>
 800b84c:	ee10 2a10 	vmov	r2, s0
 800b850:	462b      	mov	r3, r5
 800b852:	4620      	mov	r0, r4
 800b854:	4629      	mov	r1, r5
 800b856:	f7f4 fd2f 	bl	80002b8 <__aeabi_dsub>
 800b85a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b85e:	e9ca 0100 	strd	r0, r1, [sl]
 800b862:	e695      	b.n	800b590 <__ieee754_rem_pio2+0x28>
 800b864:	f3af 8000 	nop.w
 800b868:	54400000 	.word	0x54400000
 800b86c:	3ff921fb 	.word	0x3ff921fb
 800b870:	1a626331 	.word	0x1a626331
 800b874:	3dd0b461 	.word	0x3dd0b461
 800b878:	1a600000 	.word	0x1a600000
 800b87c:	3dd0b461 	.word	0x3dd0b461
 800b880:	2e037073 	.word	0x2e037073
 800b884:	3ba3198a 	.word	0x3ba3198a
 800b888:	6dc9c883 	.word	0x6dc9c883
 800b88c:	3fe45f30 	.word	0x3fe45f30
 800b890:	2e000000 	.word	0x2e000000
 800b894:	3ba3198a 	.word	0x3ba3198a
 800b898:	252049c1 	.word	0x252049c1
 800b89c:	397b839a 	.word	0x397b839a
 800b8a0:	3fe921fb 	.word	0x3fe921fb
 800b8a4:	4002d97b 	.word	0x4002d97b
 800b8a8:	3ff921fb 	.word	0x3ff921fb
 800b8ac:	413921fb 	.word	0x413921fb
 800b8b0:	3fe00000 	.word	0x3fe00000
 800b8b4:	0800ca98 	.word	0x0800ca98
 800b8b8:	7fefffff 	.word	0x7fefffff
 800b8bc:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b8c0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b8c4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	460d      	mov	r5, r1
 800b8cc:	f7f5 f95c 	bl	8000b88 <__aeabi_d2iz>
 800b8d0:	f7f4 fe40 	bl	8000554 <__aeabi_i2d>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4620      	mov	r0, r4
 800b8da:	4629      	mov	r1, r5
 800b8dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b8e0:	f7f4 fcea 	bl	80002b8 <__aeabi_dsub>
 800b8e4:	4b21      	ldr	r3, [pc, #132]	; (800b96c <__ieee754_rem_pio2+0x404>)
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f7f4 fe9e 	bl	8000628 <__aeabi_dmul>
 800b8ec:	460d      	mov	r5, r1
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	f7f5 f94a 	bl	8000b88 <__aeabi_d2iz>
 800b8f4:	f7f4 fe2e 	bl	8000554 <__aeabi_i2d>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	4629      	mov	r1, r5
 800b900:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b904:	f7f4 fcd8 	bl	80002b8 <__aeabi_dsub>
 800b908:	4b18      	ldr	r3, [pc, #96]	; (800b96c <__ieee754_rem_pio2+0x404>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	f7f4 fe8c 	bl	8000628 <__aeabi_dmul>
 800b910:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b914:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b918:	2703      	movs	r7, #3
 800b91a:	2400      	movs	r4, #0
 800b91c:	2500      	movs	r5, #0
 800b91e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800b922:	4622      	mov	r2, r4
 800b924:	462b      	mov	r3, r5
 800b926:	46b9      	mov	r9, r7
 800b928:	3f01      	subs	r7, #1
 800b92a:	f7f5 f8e5 	bl	8000af8 <__aeabi_dcmpeq>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d1f5      	bne.n	800b91e <__ieee754_rem_pio2+0x3b6>
 800b932:	4b0f      	ldr	r3, [pc, #60]	; (800b970 <__ieee754_rem_pio2+0x408>)
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	2302      	movs	r3, #2
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	4632      	mov	r2, r6
 800b93c:	464b      	mov	r3, r9
 800b93e:	4651      	mov	r1, sl
 800b940:	a804      	add	r0, sp, #16
 800b942:	f000 f9c5 	bl	800bcd0 <__kernel_rem_pio2>
 800b946:	9b02      	ldr	r3, [sp, #8]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	4683      	mov	fp, r0
 800b94c:	f6bf ae4c 	bge.w	800b5e8 <__ieee754_rem_pio2+0x80>
 800b950:	e9da 2100 	ldrd	r2, r1, [sl]
 800b954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b958:	e9ca 2300 	strd	r2, r3, [sl]
 800b95c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b960:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b964:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b968:	e73f      	b.n	800b7ea <__ieee754_rem_pio2+0x282>
 800b96a:	bf00      	nop
 800b96c:	41700000 	.word	0x41700000
 800b970:	0800cb18 	.word	0x0800cb18
 800b974:	00000000 	.word	0x00000000

0800b978 <atan>:
 800b978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	ec55 4b10 	vmov	r4, r5, d0
 800b980:	4bc3      	ldr	r3, [pc, #780]	; (800bc90 <atan+0x318>)
 800b982:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b986:	429e      	cmp	r6, r3
 800b988:	46ab      	mov	fp, r5
 800b98a:	dd18      	ble.n	800b9be <atan+0x46>
 800b98c:	4bc1      	ldr	r3, [pc, #772]	; (800bc94 <atan+0x31c>)
 800b98e:	429e      	cmp	r6, r3
 800b990:	dc01      	bgt.n	800b996 <atan+0x1e>
 800b992:	d109      	bne.n	800b9a8 <atan+0x30>
 800b994:	b144      	cbz	r4, 800b9a8 <atan+0x30>
 800b996:	4622      	mov	r2, r4
 800b998:	462b      	mov	r3, r5
 800b99a:	4620      	mov	r0, r4
 800b99c:	4629      	mov	r1, r5
 800b99e:	f7f4 fc8d 	bl	80002bc <__adddf3>
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	460d      	mov	r5, r1
 800b9a6:	e006      	b.n	800b9b6 <atan+0x3e>
 800b9a8:	f1bb 0f00 	cmp.w	fp, #0
 800b9ac:	f300 8131 	bgt.w	800bc12 <atan+0x29a>
 800b9b0:	a59b      	add	r5, pc, #620	; (adr r5, 800bc20 <atan+0x2a8>)
 800b9b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b9b6:	ec45 4b10 	vmov	d0, r4, r5
 800b9ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9be:	4bb6      	ldr	r3, [pc, #728]	; (800bc98 <atan+0x320>)
 800b9c0:	429e      	cmp	r6, r3
 800b9c2:	dc14      	bgt.n	800b9ee <atan+0x76>
 800b9c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b9c8:	429e      	cmp	r6, r3
 800b9ca:	dc0d      	bgt.n	800b9e8 <atan+0x70>
 800b9cc:	a396      	add	r3, pc, #600	; (adr r3, 800bc28 <atan+0x2b0>)
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	ee10 0a10 	vmov	r0, s0
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	f7f4 fc70 	bl	80002bc <__adddf3>
 800b9dc:	4baf      	ldr	r3, [pc, #700]	; (800bc9c <atan+0x324>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f7f5 f8b2 	bl	8000b48 <__aeabi_dcmpgt>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d1e6      	bne.n	800b9b6 <atan+0x3e>
 800b9e8:	f04f 3aff 	mov.w	sl, #4294967295
 800b9ec:	e02b      	b.n	800ba46 <atan+0xce>
 800b9ee:	f000 f963 	bl	800bcb8 <fabs>
 800b9f2:	4bab      	ldr	r3, [pc, #684]	; (800bca0 <atan+0x328>)
 800b9f4:	429e      	cmp	r6, r3
 800b9f6:	ec55 4b10 	vmov	r4, r5, d0
 800b9fa:	f300 80bf 	bgt.w	800bb7c <atan+0x204>
 800b9fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ba02:	429e      	cmp	r6, r3
 800ba04:	f300 80a0 	bgt.w	800bb48 <atan+0x1d0>
 800ba08:	ee10 2a10 	vmov	r2, s0
 800ba0c:	ee10 0a10 	vmov	r0, s0
 800ba10:	462b      	mov	r3, r5
 800ba12:	4629      	mov	r1, r5
 800ba14:	f7f4 fc52 	bl	80002bc <__adddf3>
 800ba18:	4ba0      	ldr	r3, [pc, #640]	; (800bc9c <atan+0x324>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f7f4 fc4c 	bl	80002b8 <__aeabi_dsub>
 800ba20:	2200      	movs	r2, #0
 800ba22:	4606      	mov	r6, r0
 800ba24:	460f      	mov	r7, r1
 800ba26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	f7f4 fc45 	bl	80002bc <__adddf3>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4630      	mov	r0, r6
 800ba38:	4639      	mov	r1, r7
 800ba3a:	f7f4 ff1f 	bl	800087c <__aeabi_ddiv>
 800ba3e:	f04f 0a00 	mov.w	sl, #0
 800ba42:	4604      	mov	r4, r0
 800ba44:	460d      	mov	r5, r1
 800ba46:	4622      	mov	r2, r4
 800ba48:	462b      	mov	r3, r5
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	f7f4 fdeb 	bl	8000628 <__aeabi_dmul>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4680      	mov	r8, r0
 800ba58:	4689      	mov	r9, r1
 800ba5a:	f7f4 fde5 	bl	8000628 <__aeabi_dmul>
 800ba5e:	a374      	add	r3, pc, #464	; (adr r3, 800bc30 <atan+0x2b8>)
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	f7f4 fdde 	bl	8000628 <__aeabi_dmul>
 800ba6c:	a372      	add	r3, pc, #456	; (adr r3, 800bc38 <atan+0x2c0>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	f7f4 fc23 	bl	80002bc <__adddf3>
 800ba76:	4632      	mov	r2, r6
 800ba78:	463b      	mov	r3, r7
 800ba7a:	f7f4 fdd5 	bl	8000628 <__aeabi_dmul>
 800ba7e:	a370      	add	r3, pc, #448	; (adr r3, 800bc40 <atan+0x2c8>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f7f4 fc1a 	bl	80002bc <__adddf3>
 800ba88:	4632      	mov	r2, r6
 800ba8a:	463b      	mov	r3, r7
 800ba8c:	f7f4 fdcc 	bl	8000628 <__aeabi_dmul>
 800ba90:	a36d      	add	r3, pc, #436	; (adr r3, 800bc48 <atan+0x2d0>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f4 fc11 	bl	80002bc <__adddf3>
 800ba9a:	4632      	mov	r2, r6
 800ba9c:	463b      	mov	r3, r7
 800ba9e:	f7f4 fdc3 	bl	8000628 <__aeabi_dmul>
 800baa2:	a36b      	add	r3, pc, #428	; (adr r3, 800bc50 <atan+0x2d8>)
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	f7f4 fc08 	bl	80002bc <__adddf3>
 800baac:	4632      	mov	r2, r6
 800baae:	463b      	mov	r3, r7
 800bab0:	f7f4 fdba 	bl	8000628 <__aeabi_dmul>
 800bab4:	a368      	add	r3, pc, #416	; (adr r3, 800bc58 <atan+0x2e0>)
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	f7f4 fbff 	bl	80002bc <__adddf3>
 800babe:	4642      	mov	r2, r8
 800bac0:	464b      	mov	r3, r9
 800bac2:	f7f4 fdb1 	bl	8000628 <__aeabi_dmul>
 800bac6:	a366      	add	r3, pc, #408	; (adr r3, 800bc60 <atan+0x2e8>)
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	4680      	mov	r8, r0
 800bace:	4689      	mov	r9, r1
 800bad0:	4630      	mov	r0, r6
 800bad2:	4639      	mov	r1, r7
 800bad4:	f7f4 fda8 	bl	8000628 <__aeabi_dmul>
 800bad8:	a363      	add	r3, pc, #396	; (adr r3, 800bc68 <atan+0x2f0>)
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f7f4 fbeb 	bl	80002b8 <__aeabi_dsub>
 800bae2:	4632      	mov	r2, r6
 800bae4:	463b      	mov	r3, r7
 800bae6:	f7f4 fd9f 	bl	8000628 <__aeabi_dmul>
 800baea:	a361      	add	r3, pc, #388	; (adr r3, 800bc70 <atan+0x2f8>)
 800baec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf0:	f7f4 fbe2 	bl	80002b8 <__aeabi_dsub>
 800baf4:	4632      	mov	r2, r6
 800baf6:	463b      	mov	r3, r7
 800baf8:	f7f4 fd96 	bl	8000628 <__aeabi_dmul>
 800bafc:	a35e      	add	r3, pc, #376	; (adr r3, 800bc78 <atan+0x300>)
 800bafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb02:	f7f4 fbd9 	bl	80002b8 <__aeabi_dsub>
 800bb06:	4632      	mov	r2, r6
 800bb08:	463b      	mov	r3, r7
 800bb0a:	f7f4 fd8d 	bl	8000628 <__aeabi_dmul>
 800bb0e:	a35c      	add	r3, pc, #368	; (adr r3, 800bc80 <atan+0x308>)
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	f7f4 fbd0 	bl	80002b8 <__aeabi_dsub>
 800bb18:	4632      	mov	r2, r6
 800bb1a:	463b      	mov	r3, r7
 800bb1c:	f7f4 fd84 	bl	8000628 <__aeabi_dmul>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4640      	mov	r0, r8
 800bb26:	4649      	mov	r1, r9
 800bb28:	f7f4 fbc8 	bl	80002bc <__adddf3>
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	462b      	mov	r3, r5
 800bb30:	f7f4 fd7a 	bl	8000628 <__aeabi_dmul>
 800bb34:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	d14b      	bne.n	800bbd6 <atan+0x25e>
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 fbb9 	bl	80002b8 <__aeabi_dsub>
 800bb46:	e72c      	b.n	800b9a2 <atan+0x2a>
 800bb48:	ee10 0a10 	vmov	r0, s0
 800bb4c:	4b53      	ldr	r3, [pc, #332]	; (800bc9c <atan+0x324>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	4629      	mov	r1, r5
 800bb52:	f7f4 fbb1 	bl	80002b8 <__aeabi_dsub>
 800bb56:	4b51      	ldr	r3, [pc, #324]	; (800bc9c <atan+0x324>)
 800bb58:	4606      	mov	r6, r0
 800bb5a:	460f      	mov	r7, r1
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	4620      	mov	r0, r4
 800bb60:	4629      	mov	r1, r5
 800bb62:	f7f4 fbab 	bl	80002bc <__adddf3>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	4639      	mov	r1, r7
 800bb6e:	f7f4 fe85 	bl	800087c <__aeabi_ddiv>
 800bb72:	f04f 0a01 	mov.w	sl, #1
 800bb76:	4604      	mov	r4, r0
 800bb78:	460d      	mov	r5, r1
 800bb7a:	e764      	b.n	800ba46 <atan+0xce>
 800bb7c:	4b49      	ldr	r3, [pc, #292]	; (800bca4 <atan+0x32c>)
 800bb7e:	429e      	cmp	r6, r3
 800bb80:	da1d      	bge.n	800bbbe <atan+0x246>
 800bb82:	ee10 0a10 	vmov	r0, s0
 800bb86:	4b48      	ldr	r3, [pc, #288]	; (800bca8 <atan+0x330>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 fb94 	bl	80002b8 <__aeabi_dsub>
 800bb90:	4b45      	ldr	r3, [pc, #276]	; (800bca8 <atan+0x330>)
 800bb92:	4606      	mov	r6, r0
 800bb94:	460f      	mov	r7, r1
 800bb96:	2200      	movs	r2, #0
 800bb98:	4620      	mov	r0, r4
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	f7f4 fd44 	bl	8000628 <__aeabi_dmul>
 800bba0:	4b3e      	ldr	r3, [pc, #248]	; (800bc9c <atan+0x324>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	f7f4 fb8a 	bl	80002bc <__adddf3>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4630      	mov	r0, r6
 800bbae:	4639      	mov	r1, r7
 800bbb0:	f7f4 fe64 	bl	800087c <__aeabi_ddiv>
 800bbb4:	f04f 0a02 	mov.w	sl, #2
 800bbb8:	4604      	mov	r4, r0
 800bbba:	460d      	mov	r5, r1
 800bbbc:	e743      	b.n	800ba46 <atan+0xce>
 800bbbe:	462b      	mov	r3, r5
 800bbc0:	ee10 2a10 	vmov	r2, s0
 800bbc4:	4939      	ldr	r1, [pc, #228]	; (800bcac <atan+0x334>)
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	f7f4 fe58 	bl	800087c <__aeabi_ddiv>
 800bbcc:	f04f 0a03 	mov.w	sl, #3
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	460d      	mov	r5, r1
 800bbd4:	e737      	b.n	800ba46 <atan+0xce>
 800bbd6:	4b36      	ldr	r3, [pc, #216]	; (800bcb0 <atan+0x338>)
 800bbd8:	4e36      	ldr	r6, [pc, #216]	; (800bcb4 <atan+0x33c>)
 800bbda:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe2:	f7f4 fb69 	bl	80002b8 <__aeabi_dsub>
 800bbe6:	4622      	mov	r2, r4
 800bbe8:	462b      	mov	r3, r5
 800bbea:	f7f4 fb65 	bl	80002b8 <__aeabi_dsub>
 800bbee:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bbfa:	f7f4 fb5d 	bl	80002b8 <__aeabi_dsub>
 800bbfe:	f1bb 0f00 	cmp.w	fp, #0
 800bc02:	4604      	mov	r4, r0
 800bc04:	460d      	mov	r5, r1
 800bc06:	f6bf aed6 	bge.w	800b9b6 <atan+0x3e>
 800bc0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc0e:	461d      	mov	r5, r3
 800bc10:	e6d1      	b.n	800b9b6 <atan+0x3e>
 800bc12:	a51d      	add	r5, pc, #116	; (adr r5, 800bc88 <atan+0x310>)
 800bc14:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc18:	e6cd      	b.n	800b9b6 <atan+0x3e>
 800bc1a:	bf00      	nop
 800bc1c:	f3af 8000 	nop.w
 800bc20:	54442d18 	.word	0x54442d18
 800bc24:	bff921fb 	.word	0xbff921fb
 800bc28:	8800759c 	.word	0x8800759c
 800bc2c:	7e37e43c 	.word	0x7e37e43c
 800bc30:	e322da11 	.word	0xe322da11
 800bc34:	3f90ad3a 	.word	0x3f90ad3a
 800bc38:	24760deb 	.word	0x24760deb
 800bc3c:	3fa97b4b 	.word	0x3fa97b4b
 800bc40:	a0d03d51 	.word	0xa0d03d51
 800bc44:	3fb10d66 	.word	0x3fb10d66
 800bc48:	c54c206e 	.word	0xc54c206e
 800bc4c:	3fb745cd 	.word	0x3fb745cd
 800bc50:	920083ff 	.word	0x920083ff
 800bc54:	3fc24924 	.word	0x3fc24924
 800bc58:	5555550d 	.word	0x5555550d
 800bc5c:	3fd55555 	.word	0x3fd55555
 800bc60:	2c6a6c2f 	.word	0x2c6a6c2f
 800bc64:	bfa2b444 	.word	0xbfa2b444
 800bc68:	52defd9a 	.word	0x52defd9a
 800bc6c:	3fadde2d 	.word	0x3fadde2d
 800bc70:	af749a6d 	.word	0xaf749a6d
 800bc74:	3fb3b0f2 	.word	0x3fb3b0f2
 800bc78:	fe231671 	.word	0xfe231671
 800bc7c:	3fbc71c6 	.word	0x3fbc71c6
 800bc80:	9998ebc4 	.word	0x9998ebc4
 800bc84:	3fc99999 	.word	0x3fc99999
 800bc88:	54442d18 	.word	0x54442d18
 800bc8c:	3ff921fb 	.word	0x3ff921fb
 800bc90:	440fffff 	.word	0x440fffff
 800bc94:	7ff00000 	.word	0x7ff00000
 800bc98:	3fdbffff 	.word	0x3fdbffff
 800bc9c:	3ff00000 	.word	0x3ff00000
 800bca0:	3ff2ffff 	.word	0x3ff2ffff
 800bca4:	40038000 	.word	0x40038000
 800bca8:	3ff80000 	.word	0x3ff80000
 800bcac:	bff00000 	.word	0xbff00000
 800bcb0:	0800cc40 	.word	0x0800cc40
 800bcb4:	0800cc20 	.word	0x0800cc20

0800bcb8 <fabs>:
 800bcb8:	ec51 0b10 	vmov	r0, r1, d0
 800bcbc:	ee10 2a10 	vmov	r2, s0
 800bcc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcc4:	ec43 2b10 	vmov	d0, r2, r3
 800bcc8:	4770      	bx	lr
 800bcca:	0000      	movs	r0, r0
 800bccc:	0000      	movs	r0, r0
	...

0800bcd0 <__kernel_rem_pio2>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	ed2d 8b02 	vpush	{d8}
 800bcd8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bcdc:	f112 0f14 	cmn.w	r2, #20
 800bce0:	9306      	str	r3, [sp, #24]
 800bce2:	9104      	str	r1, [sp, #16]
 800bce4:	4bc2      	ldr	r3, [pc, #776]	; (800bff0 <__kernel_rem_pio2+0x320>)
 800bce6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800bce8:	9009      	str	r0, [sp, #36]	; 0x24
 800bcea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	9b06      	ldr	r3, [sp, #24]
 800bcf2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bcf6:	bfa8      	it	ge
 800bcf8:	1ed4      	subge	r4, r2, #3
 800bcfa:	9305      	str	r3, [sp, #20]
 800bcfc:	bfb2      	itee	lt
 800bcfe:	2400      	movlt	r4, #0
 800bd00:	2318      	movge	r3, #24
 800bd02:	fb94 f4f3 	sdivge	r4, r4, r3
 800bd06:	f06f 0317 	mvn.w	r3, #23
 800bd0a:	fb04 3303 	mla	r3, r4, r3, r3
 800bd0e:	eb03 0a02 	add.w	sl, r3, r2
 800bd12:	9b00      	ldr	r3, [sp, #0]
 800bd14:	9a05      	ldr	r2, [sp, #20]
 800bd16:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800bfe0 <__kernel_rem_pio2+0x310>
 800bd1a:	eb03 0802 	add.w	r8, r3, r2
 800bd1e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bd20:	1aa7      	subs	r7, r4, r2
 800bd22:	ae20      	add	r6, sp, #128	; 0x80
 800bd24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bd28:	2500      	movs	r5, #0
 800bd2a:	4545      	cmp	r5, r8
 800bd2c:	dd13      	ble.n	800bd56 <__kernel_rem_pio2+0x86>
 800bd2e:	9b06      	ldr	r3, [sp, #24]
 800bd30:	aa20      	add	r2, sp, #128	; 0x80
 800bd32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bd36:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800bd3a:	f04f 0800 	mov.w	r8, #0
 800bd3e:	9b00      	ldr	r3, [sp, #0]
 800bd40:	4598      	cmp	r8, r3
 800bd42:	dc31      	bgt.n	800bda8 <__kernel_rem_pio2+0xd8>
 800bd44:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800bfe0 <__kernel_rem_pio2+0x310>
 800bd48:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bd4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd50:	462f      	mov	r7, r5
 800bd52:	2600      	movs	r6, #0
 800bd54:	e01b      	b.n	800bd8e <__kernel_rem_pio2+0xbe>
 800bd56:	42ef      	cmn	r7, r5
 800bd58:	d407      	bmi.n	800bd6a <__kernel_rem_pio2+0x9a>
 800bd5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bd5e:	f7f4 fbf9 	bl	8000554 <__aeabi_i2d>
 800bd62:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bd66:	3501      	adds	r5, #1
 800bd68:	e7df      	b.n	800bd2a <__kernel_rem_pio2+0x5a>
 800bd6a:	ec51 0b18 	vmov	r0, r1, d8
 800bd6e:	e7f8      	b.n	800bd62 <__kernel_rem_pio2+0x92>
 800bd70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bd78:	f7f4 fc56 	bl	8000628 <__aeabi_dmul>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd84:	f7f4 fa9a 	bl	80002bc <__adddf3>
 800bd88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd8c:	3601      	adds	r6, #1
 800bd8e:	9b05      	ldr	r3, [sp, #20]
 800bd90:	429e      	cmp	r6, r3
 800bd92:	f1a7 0708 	sub.w	r7, r7, #8
 800bd96:	ddeb      	ble.n	800bd70 <__kernel_rem_pio2+0xa0>
 800bd98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd9c:	f108 0801 	add.w	r8, r8, #1
 800bda0:	ecab 7b02 	vstmia	fp!, {d7}
 800bda4:	3508      	adds	r5, #8
 800bda6:	e7ca      	b.n	800bd3e <__kernel_rem_pio2+0x6e>
 800bda8:	9b00      	ldr	r3, [sp, #0]
 800bdaa:	aa0c      	add	r2, sp, #48	; 0x30
 800bdac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdb2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bdb4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bdb8:	9c00      	ldr	r4, [sp, #0]
 800bdba:	930a      	str	r3, [sp, #40]	; 0x28
 800bdbc:	00e3      	lsls	r3, r4, #3
 800bdbe:	9308      	str	r3, [sp, #32]
 800bdc0:	ab98      	add	r3, sp, #608	; 0x260
 800bdc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdc6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bdca:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800bdce:	ab70      	add	r3, sp, #448	; 0x1c0
 800bdd0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bdd4:	46c3      	mov	fp, r8
 800bdd6:	46a1      	mov	r9, r4
 800bdd8:	f1b9 0f00 	cmp.w	r9, #0
 800bddc:	f1a5 0508 	sub.w	r5, r5, #8
 800bde0:	dc77      	bgt.n	800bed2 <__kernel_rem_pio2+0x202>
 800bde2:	ec47 6b10 	vmov	d0, r6, r7
 800bde6:	4650      	mov	r0, sl
 800bde8:	f000 fac2 	bl	800c370 <scalbn>
 800bdec:	ec57 6b10 	vmov	r6, r7, d0
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bdf6:	ee10 0a10 	vmov	r0, s0
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	f7f4 fc14 	bl	8000628 <__aeabi_dmul>
 800be00:	ec41 0b10 	vmov	d0, r0, r1
 800be04:	f000 fb34 	bl	800c470 <floor>
 800be08:	4b7a      	ldr	r3, [pc, #488]	; (800bff4 <__kernel_rem_pio2+0x324>)
 800be0a:	ec51 0b10 	vmov	r0, r1, d0
 800be0e:	2200      	movs	r2, #0
 800be10:	f7f4 fc0a 	bl	8000628 <__aeabi_dmul>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	4630      	mov	r0, r6
 800be1a:	4639      	mov	r1, r7
 800be1c:	f7f4 fa4c 	bl	80002b8 <__aeabi_dsub>
 800be20:	460f      	mov	r7, r1
 800be22:	4606      	mov	r6, r0
 800be24:	f7f4 feb0 	bl	8000b88 <__aeabi_d2iz>
 800be28:	9002      	str	r0, [sp, #8]
 800be2a:	f7f4 fb93 	bl	8000554 <__aeabi_i2d>
 800be2e:	4602      	mov	r2, r0
 800be30:	460b      	mov	r3, r1
 800be32:	4630      	mov	r0, r6
 800be34:	4639      	mov	r1, r7
 800be36:	f7f4 fa3f 	bl	80002b8 <__aeabi_dsub>
 800be3a:	f1ba 0f00 	cmp.w	sl, #0
 800be3e:	4606      	mov	r6, r0
 800be40:	460f      	mov	r7, r1
 800be42:	dd6d      	ble.n	800bf20 <__kernel_rem_pio2+0x250>
 800be44:	1e61      	subs	r1, r4, #1
 800be46:	ab0c      	add	r3, sp, #48	; 0x30
 800be48:	9d02      	ldr	r5, [sp, #8]
 800be4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be4e:	f1ca 0018 	rsb	r0, sl, #24
 800be52:	fa43 f200 	asr.w	r2, r3, r0
 800be56:	4415      	add	r5, r2
 800be58:	4082      	lsls	r2, r0
 800be5a:	1a9b      	subs	r3, r3, r2
 800be5c:	aa0c      	add	r2, sp, #48	; 0x30
 800be5e:	9502      	str	r5, [sp, #8]
 800be60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800be64:	f1ca 0217 	rsb	r2, sl, #23
 800be68:	fa43 fb02 	asr.w	fp, r3, r2
 800be6c:	f1bb 0f00 	cmp.w	fp, #0
 800be70:	dd65      	ble.n	800bf3e <__kernel_rem_pio2+0x26e>
 800be72:	9b02      	ldr	r3, [sp, #8]
 800be74:	2200      	movs	r2, #0
 800be76:	3301      	adds	r3, #1
 800be78:	9302      	str	r3, [sp, #8]
 800be7a:	4615      	mov	r5, r2
 800be7c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800be80:	4294      	cmp	r4, r2
 800be82:	f300 809f 	bgt.w	800bfc4 <__kernel_rem_pio2+0x2f4>
 800be86:	f1ba 0f00 	cmp.w	sl, #0
 800be8a:	dd07      	ble.n	800be9c <__kernel_rem_pio2+0x1cc>
 800be8c:	f1ba 0f01 	cmp.w	sl, #1
 800be90:	f000 80c1 	beq.w	800c016 <__kernel_rem_pio2+0x346>
 800be94:	f1ba 0f02 	cmp.w	sl, #2
 800be98:	f000 80c7 	beq.w	800c02a <__kernel_rem_pio2+0x35a>
 800be9c:	f1bb 0f02 	cmp.w	fp, #2
 800bea0:	d14d      	bne.n	800bf3e <__kernel_rem_pio2+0x26e>
 800bea2:	4632      	mov	r2, r6
 800bea4:	463b      	mov	r3, r7
 800bea6:	4954      	ldr	r1, [pc, #336]	; (800bff8 <__kernel_rem_pio2+0x328>)
 800bea8:	2000      	movs	r0, #0
 800beaa:	f7f4 fa05 	bl	80002b8 <__aeabi_dsub>
 800beae:	4606      	mov	r6, r0
 800beb0:	460f      	mov	r7, r1
 800beb2:	2d00      	cmp	r5, #0
 800beb4:	d043      	beq.n	800bf3e <__kernel_rem_pio2+0x26e>
 800beb6:	4650      	mov	r0, sl
 800beb8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800bfe8 <__kernel_rem_pio2+0x318>
 800bebc:	f000 fa58 	bl	800c370 <scalbn>
 800bec0:	4630      	mov	r0, r6
 800bec2:	4639      	mov	r1, r7
 800bec4:	ec53 2b10 	vmov	r2, r3, d0
 800bec8:	f7f4 f9f6 	bl	80002b8 <__aeabi_dsub>
 800becc:	4606      	mov	r6, r0
 800bece:	460f      	mov	r7, r1
 800bed0:	e035      	b.n	800bf3e <__kernel_rem_pio2+0x26e>
 800bed2:	4b4a      	ldr	r3, [pc, #296]	; (800bffc <__kernel_rem_pio2+0x32c>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	4630      	mov	r0, r6
 800bed8:	4639      	mov	r1, r7
 800beda:	f7f4 fba5 	bl	8000628 <__aeabi_dmul>
 800bede:	f7f4 fe53 	bl	8000b88 <__aeabi_d2iz>
 800bee2:	f7f4 fb37 	bl	8000554 <__aeabi_i2d>
 800bee6:	4602      	mov	r2, r0
 800bee8:	460b      	mov	r3, r1
 800beea:	ec43 2b18 	vmov	d8, r2, r3
 800beee:	4b44      	ldr	r3, [pc, #272]	; (800c000 <__kernel_rem_pio2+0x330>)
 800bef0:	2200      	movs	r2, #0
 800bef2:	f7f4 fb99 	bl	8000628 <__aeabi_dmul>
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 f9db 	bl	80002b8 <__aeabi_dsub>
 800bf02:	f7f4 fe41 	bl	8000b88 <__aeabi_d2iz>
 800bf06:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf0a:	f84b 0b04 	str.w	r0, [fp], #4
 800bf0e:	ec51 0b18 	vmov	r0, r1, d8
 800bf12:	f7f4 f9d3 	bl	80002bc <__adddf3>
 800bf16:	f109 39ff 	add.w	r9, r9, #4294967295
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
 800bf1e:	e75b      	b.n	800bdd8 <__kernel_rem_pio2+0x108>
 800bf20:	d106      	bne.n	800bf30 <__kernel_rem_pio2+0x260>
 800bf22:	1e63      	subs	r3, r4, #1
 800bf24:	aa0c      	add	r2, sp, #48	; 0x30
 800bf26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf2a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800bf2e:	e79d      	b.n	800be6c <__kernel_rem_pio2+0x19c>
 800bf30:	4b34      	ldr	r3, [pc, #208]	; (800c004 <__kernel_rem_pio2+0x334>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	f7f4 fdfe 	bl	8000b34 <__aeabi_dcmpge>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d140      	bne.n	800bfbe <__kernel_rem_pio2+0x2ee>
 800bf3c:	4683      	mov	fp, r0
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2300      	movs	r3, #0
 800bf42:	4630      	mov	r0, r6
 800bf44:	4639      	mov	r1, r7
 800bf46:	f7f4 fdd7 	bl	8000af8 <__aeabi_dcmpeq>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f000 80c1 	beq.w	800c0d2 <__kernel_rem_pio2+0x402>
 800bf50:	1e65      	subs	r5, r4, #1
 800bf52:	462b      	mov	r3, r5
 800bf54:	2200      	movs	r2, #0
 800bf56:	9900      	ldr	r1, [sp, #0]
 800bf58:	428b      	cmp	r3, r1
 800bf5a:	da6d      	bge.n	800c038 <__kernel_rem_pio2+0x368>
 800bf5c:	2a00      	cmp	r2, #0
 800bf5e:	f000 808a 	beq.w	800c076 <__kernel_rem_pio2+0x3a6>
 800bf62:	ab0c      	add	r3, sp, #48	; 0x30
 800bf64:	f1aa 0a18 	sub.w	sl, sl, #24
 800bf68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f000 80ae 	beq.w	800c0ce <__kernel_rem_pio2+0x3fe>
 800bf72:	4650      	mov	r0, sl
 800bf74:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800bfe8 <__kernel_rem_pio2+0x318>
 800bf78:	f000 f9fa 	bl	800c370 <scalbn>
 800bf7c:	1c6b      	adds	r3, r5, #1
 800bf7e:	00da      	lsls	r2, r3, #3
 800bf80:	9205      	str	r2, [sp, #20]
 800bf82:	ec57 6b10 	vmov	r6, r7, d0
 800bf86:	aa70      	add	r2, sp, #448	; 0x1c0
 800bf88:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800bffc <__kernel_rem_pio2+0x32c>
 800bf8c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800bf90:	462c      	mov	r4, r5
 800bf92:	f04f 0800 	mov.w	r8, #0
 800bf96:	2c00      	cmp	r4, #0
 800bf98:	f280 80d4 	bge.w	800c144 <__kernel_rem_pio2+0x474>
 800bf9c:	462c      	mov	r4, r5
 800bf9e:	2c00      	cmp	r4, #0
 800bfa0:	f2c0 8102 	blt.w	800c1a8 <__kernel_rem_pio2+0x4d8>
 800bfa4:	4b18      	ldr	r3, [pc, #96]	; (800c008 <__kernel_rem_pio2+0x338>)
 800bfa6:	461e      	mov	r6, r3
 800bfa8:	ab70      	add	r3, sp, #448	; 0x1c0
 800bfaa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800bfae:	1b2b      	subs	r3, r5, r4
 800bfb0:	f04f 0900 	mov.w	r9, #0
 800bfb4:	f04f 0a00 	mov.w	sl, #0
 800bfb8:	2700      	movs	r7, #0
 800bfba:	9306      	str	r3, [sp, #24]
 800bfbc:	e0e6      	b.n	800c18c <__kernel_rem_pio2+0x4bc>
 800bfbe:	f04f 0b02 	mov.w	fp, #2
 800bfc2:	e756      	b.n	800be72 <__kernel_rem_pio2+0x1a2>
 800bfc4:	f8d8 3000 	ldr.w	r3, [r8]
 800bfc8:	bb05      	cbnz	r5, 800c00c <__kernel_rem_pio2+0x33c>
 800bfca:	b123      	cbz	r3, 800bfd6 <__kernel_rem_pio2+0x306>
 800bfcc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bfd0:	f8c8 3000 	str.w	r3, [r8]
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	3201      	adds	r2, #1
 800bfd8:	f108 0804 	add.w	r8, r8, #4
 800bfdc:	461d      	mov	r5, r3
 800bfde:	e74f      	b.n	800be80 <__kernel_rem_pio2+0x1b0>
	...
 800bfec:	3ff00000 	.word	0x3ff00000
 800bff0:	0800cca0 	.word	0x0800cca0
 800bff4:	40200000 	.word	0x40200000
 800bff8:	3ff00000 	.word	0x3ff00000
 800bffc:	3e700000 	.word	0x3e700000
 800c000:	41700000 	.word	0x41700000
 800c004:	3fe00000 	.word	0x3fe00000
 800c008:	0800cc60 	.word	0x0800cc60
 800c00c:	1acb      	subs	r3, r1, r3
 800c00e:	f8c8 3000 	str.w	r3, [r8]
 800c012:	462b      	mov	r3, r5
 800c014:	e7df      	b.n	800bfd6 <__kernel_rem_pio2+0x306>
 800c016:	1e62      	subs	r2, r4, #1
 800c018:	ab0c      	add	r3, sp, #48	; 0x30
 800c01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c022:	a90c      	add	r1, sp, #48	; 0x30
 800c024:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c028:	e738      	b.n	800be9c <__kernel_rem_pio2+0x1cc>
 800c02a:	1e62      	subs	r2, r4, #1
 800c02c:	ab0c      	add	r3, sp, #48	; 0x30
 800c02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c032:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c036:	e7f4      	b.n	800c022 <__kernel_rem_pio2+0x352>
 800c038:	a90c      	add	r1, sp, #48	; 0x30
 800c03a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c03e:	3b01      	subs	r3, #1
 800c040:	430a      	orrs	r2, r1
 800c042:	e788      	b.n	800bf56 <__kernel_rem_pio2+0x286>
 800c044:	3301      	adds	r3, #1
 800c046:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c04a:	2900      	cmp	r1, #0
 800c04c:	d0fa      	beq.n	800c044 <__kernel_rem_pio2+0x374>
 800c04e:	9a08      	ldr	r2, [sp, #32]
 800c050:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800c054:	446a      	add	r2, sp
 800c056:	3a98      	subs	r2, #152	; 0x98
 800c058:	9208      	str	r2, [sp, #32]
 800c05a:	9a06      	ldr	r2, [sp, #24]
 800c05c:	a920      	add	r1, sp, #128	; 0x80
 800c05e:	18a2      	adds	r2, r4, r2
 800c060:	18e3      	adds	r3, r4, r3
 800c062:	f104 0801 	add.w	r8, r4, #1
 800c066:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c06a:	9302      	str	r3, [sp, #8]
 800c06c:	9b02      	ldr	r3, [sp, #8]
 800c06e:	4543      	cmp	r3, r8
 800c070:	da04      	bge.n	800c07c <__kernel_rem_pio2+0x3ac>
 800c072:	461c      	mov	r4, r3
 800c074:	e6a2      	b.n	800bdbc <__kernel_rem_pio2+0xec>
 800c076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c078:	2301      	movs	r3, #1
 800c07a:	e7e4      	b.n	800c046 <__kernel_rem_pio2+0x376>
 800c07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c07e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c082:	f7f4 fa67 	bl	8000554 <__aeabi_i2d>
 800c086:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c08c:	46ab      	mov	fp, r5
 800c08e:	461c      	mov	r4, r3
 800c090:	f04f 0900 	mov.w	r9, #0
 800c094:	2600      	movs	r6, #0
 800c096:	2700      	movs	r7, #0
 800c098:	9b05      	ldr	r3, [sp, #20]
 800c09a:	4599      	cmp	r9, r3
 800c09c:	dd06      	ble.n	800c0ac <__kernel_rem_pio2+0x3dc>
 800c09e:	9b08      	ldr	r3, [sp, #32]
 800c0a0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c0a4:	f108 0801 	add.w	r8, r8, #1
 800c0a8:	9308      	str	r3, [sp, #32]
 800c0aa:	e7df      	b.n	800c06c <__kernel_rem_pio2+0x39c>
 800c0ac:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c0b0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c0b4:	f7f4 fab8 	bl	8000628 <__aeabi_dmul>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4630      	mov	r0, r6
 800c0be:	4639      	mov	r1, r7
 800c0c0:	f7f4 f8fc 	bl	80002bc <__adddf3>
 800c0c4:	f109 0901 	add.w	r9, r9, #1
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	460f      	mov	r7, r1
 800c0cc:	e7e4      	b.n	800c098 <__kernel_rem_pio2+0x3c8>
 800c0ce:	3d01      	subs	r5, #1
 800c0d0:	e747      	b.n	800bf62 <__kernel_rem_pio2+0x292>
 800c0d2:	ec47 6b10 	vmov	d0, r6, r7
 800c0d6:	f1ca 0000 	rsb	r0, sl, #0
 800c0da:	f000 f949 	bl	800c370 <scalbn>
 800c0de:	ec57 6b10 	vmov	r6, r7, d0
 800c0e2:	4ba0      	ldr	r3, [pc, #640]	; (800c364 <__kernel_rem_pio2+0x694>)
 800c0e4:	ee10 0a10 	vmov	r0, s0
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	4639      	mov	r1, r7
 800c0ec:	f7f4 fd22 	bl	8000b34 <__aeabi_dcmpge>
 800c0f0:	b1f8      	cbz	r0, 800c132 <__kernel_rem_pio2+0x462>
 800c0f2:	4b9d      	ldr	r3, [pc, #628]	; (800c368 <__kernel_rem_pio2+0x698>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	f7f4 fa95 	bl	8000628 <__aeabi_dmul>
 800c0fe:	f7f4 fd43 	bl	8000b88 <__aeabi_d2iz>
 800c102:	4680      	mov	r8, r0
 800c104:	f7f4 fa26 	bl	8000554 <__aeabi_i2d>
 800c108:	4b96      	ldr	r3, [pc, #600]	; (800c364 <__kernel_rem_pio2+0x694>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	f7f4 fa8c 	bl	8000628 <__aeabi_dmul>
 800c110:	460b      	mov	r3, r1
 800c112:	4602      	mov	r2, r0
 800c114:	4639      	mov	r1, r7
 800c116:	4630      	mov	r0, r6
 800c118:	f7f4 f8ce 	bl	80002b8 <__aeabi_dsub>
 800c11c:	f7f4 fd34 	bl	8000b88 <__aeabi_d2iz>
 800c120:	1c65      	adds	r5, r4, #1
 800c122:	ab0c      	add	r3, sp, #48	; 0x30
 800c124:	f10a 0a18 	add.w	sl, sl, #24
 800c128:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c12c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c130:	e71f      	b.n	800bf72 <__kernel_rem_pio2+0x2a2>
 800c132:	4630      	mov	r0, r6
 800c134:	4639      	mov	r1, r7
 800c136:	f7f4 fd27 	bl	8000b88 <__aeabi_d2iz>
 800c13a:	ab0c      	add	r3, sp, #48	; 0x30
 800c13c:	4625      	mov	r5, r4
 800c13e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c142:	e716      	b.n	800bf72 <__kernel_rem_pio2+0x2a2>
 800c144:	ab0c      	add	r3, sp, #48	; 0x30
 800c146:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c14a:	f7f4 fa03 	bl	8000554 <__aeabi_i2d>
 800c14e:	4632      	mov	r2, r6
 800c150:	463b      	mov	r3, r7
 800c152:	f7f4 fa69 	bl	8000628 <__aeabi_dmul>
 800c156:	4642      	mov	r2, r8
 800c158:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c15c:	464b      	mov	r3, r9
 800c15e:	4630      	mov	r0, r6
 800c160:	4639      	mov	r1, r7
 800c162:	f7f4 fa61 	bl	8000628 <__aeabi_dmul>
 800c166:	3c01      	subs	r4, #1
 800c168:	4606      	mov	r6, r0
 800c16a:	460f      	mov	r7, r1
 800c16c:	e713      	b.n	800bf96 <__kernel_rem_pio2+0x2c6>
 800c16e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c172:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800c176:	f7f4 fa57 	bl	8000628 <__aeabi_dmul>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	4648      	mov	r0, r9
 800c180:	4651      	mov	r1, sl
 800c182:	f7f4 f89b 	bl	80002bc <__adddf3>
 800c186:	3701      	adds	r7, #1
 800c188:	4681      	mov	r9, r0
 800c18a:	468a      	mov	sl, r1
 800c18c:	9b00      	ldr	r3, [sp, #0]
 800c18e:	429f      	cmp	r7, r3
 800c190:	dc02      	bgt.n	800c198 <__kernel_rem_pio2+0x4c8>
 800c192:	9b06      	ldr	r3, [sp, #24]
 800c194:	429f      	cmp	r7, r3
 800c196:	ddea      	ble.n	800c16e <__kernel_rem_pio2+0x49e>
 800c198:	9a06      	ldr	r2, [sp, #24]
 800c19a:	ab48      	add	r3, sp, #288	; 0x120
 800c19c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800c1a0:	e9c6 9a00 	strd	r9, sl, [r6]
 800c1a4:	3c01      	subs	r4, #1
 800c1a6:	e6fa      	b.n	800bf9e <__kernel_rem_pio2+0x2ce>
 800c1a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	dc0b      	bgt.n	800c1c6 <__kernel_rem_pio2+0x4f6>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	dc39      	bgt.n	800c226 <__kernel_rem_pio2+0x556>
 800c1b2:	d05d      	beq.n	800c270 <__kernel_rem_pio2+0x5a0>
 800c1b4:	9b02      	ldr	r3, [sp, #8]
 800c1b6:	f003 0007 	and.w	r0, r3, #7
 800c1ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c1be:	ecbd 8b02 	vpop	{d8}
 800c1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c1c8:	2b03      	cmp	r3, #3
 800c1ca:	d1f3      	bne.n	800c1b4 <__kernel_rem_pio2+0x4e4>
 800c1cc:	9b05      	ldr	r3, [sp, #20]
 800c1ce:	9500      	str	r5, [sp, #0]
 800c1d0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c1d4:	eb0d 0403 	add.w	r4, sp, r3
 800c1d8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800c1dc:	46a2      	mov	sl, r4
 800c1de:	9b00      	ldr	r3, [sp, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f1aa 0a08 	sub.w	sl, sl, #8
 800c1e6:	dc69      	bgt.n	800c2bc <__kernel_rem_pio2+0x5ec>
 800c1e8:	46aa      	mov	sl, r5
 800c1ea:	f1ba 0f01 	cmp.w	sl, #1
 800c1ee:	f1a4 0408 	sub.w	r4, r4, #8
 800c1f2:	f300 8083 	bgt.w	800c2fc <__kernel_rem_pio2+0x62c>
 800c1f6:	9c05      	ldr	r4, [sp, #20]
 800c1f8:	ab48      	add	r3, sp, #288	; 0x120
 800c1fa:	441c      	add	r4, r3
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	2100      	movs	r1, #0
 800c200:	2d01      	cmp	r5, #1
 800c202:	f300 809a 	bgt.w	800c33a <__kernel_rem_pio2+0x66a>
 800c206:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800c20a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c20e:	f1bb 0f00 	cmp.w	fp, #0
 800c212:	f040 8098 	bne.w	800c346 <__kernel_rem_pio2+0x676>
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	e9c3 7800 	strd	r7, r8, [r3]
 800c21c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c220:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c224:	e7c6      	b.n	800c1b4 <__kernel_rem_pio2+0x4e4>
 800c226:	9e05      	ldr	r6, [sp, #20]
 800c228:	ab48      	add	r3, sp, #288	; 0x120
 800c22a:	441e      	add	r6, r3
 800c22c:	462c      	mov	r4, r5
 800c22e:	2000      	movs	r0, #0
 800c230:	2100      	movs	r1, #0
 800c232:	2c00      	cmp	r4, #0
 800c234:	da33      	bge.n	800c29e <__kernel_rem_pio2+0x5ce>
 800c236:	f1bb 0f00 	cmp.w	fp, #0
 800c23a:	d036      	beq.n	800c2aa <__kernel_rem_pio2+0x5da>
 800c23c:	4602      	mov	r2, r0
 800c23e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c242:	9c04      	ldr	r4, [sp, #16]
 800c244:	e9c4 2300 	strd	r2, r3, [r4]
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c250:	f7f4 f832 	bl	80002b8 <__aeabi_dsub>
 800c254:	ae4a      	add	r6, sp, #296	; 0x128
 800c256:	2401      	movs	r4, #1
 800c258:	42a5      	cmp	r5, r4
 800c25a:	da29      	bge.n	800c2b0 <__kernel_rem_pio2+0x5e0>
 800c25c:	f1bb 0f00 	cmp.w	fp, #0
 800c260:	d002      	beq.n	800c268 <__kernel_rem_pio2+0x598>
 800c262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c266:	4619      	mov	r1, r3
 800c268:	9b04      	ldr	r3, [sp, #16]
 800c26a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c26e:	e7a1      	b.n	800c1b4 <__kernel_rem_pio2+0x4e4>
 800c270:	9c05      	ldr	r4, [sp, #20]
 800c272:	ab48      	add	r3, sp, #288	; 0x120
 800c274:	441c      	add	r4, r3
 800c276:	2000      	movs	r0, #0
 800c278:	2100      	movs	r1, #0
 800c27a:	2d00      	cmp	r5, #0
 800c27c:	da09      	bge.n	800c292 <__kernel_rem_pio2+0x5c2>
 800c27e:	f1bb 0f00 	cmp.w	fp, #0
 800c282:	d002      	beq.n	800c28a <__kernel_rem_pio2+0x5ba>
 800c284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c288:	4619      	mov	r1, r3
 800c28a:	9b04      	ldr	r3, [sp, #16]
 800c28c:	e9c3 0100 	strd	r0, r1, [r3]
 800c290:	e790      	b.n	800c1b4 <__kernel_rem_pio2+0x4e4>
 800c292:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c296:	f7f4 f811 	bl	80002bc <__adddf3>
 800c29a:	3d01      	subs	r5, #1
 800c29c:	e7ed      	b.n	800c27a <__kernel_rem_pio2+0x5aa>
 800c29e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c2a2:	f7f4 f80b 	bl	80002bc <__adddf3>
 800c2a6:	3c01      	subs	r4, #1
 800c2a8:	e7c3      	b.n	800c232 <__kernel_rem_pio2+0x562>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	e7c8      	b.n	800c242 <__kernel_rem_pio2+0x572>
 800c2b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c2b4:	f7f4 f802 	bl	80002bc <__adddf3>
 800c2b8:	3401      	adds	r4, #1
 800c2ba:	e7cd      	b.n	800c258 <__kernel_rem_pio2+0x588>
 800c2bc:	e9da 8900 	ldrd	r8, r9, [sl]
 800c2c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c2c4:	9b00      	ldr	r3, [sp, #0]
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	4632      	mov	r2, r6
 800c2cc:	463b      	mov	r3, r7
 800c2ce:	4640      	mov	r0, r8
 800c2d0:	4649      	mov	r1, r9
 800c2d2:	f7f3 fff3 	bl	80002bc <__adddf3>
 800c2d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	4640      	mov	r0, r8
 800c2e0:	4649      	mov	r1, r9
 800c2e2:	f7f3 ffe9 	bl	80002b8 <__aeabi_dsub>
 800c2e6:	4632      	mov	r2, r6
 800c2e8:	463b      	mov	r3, r7
 800c2ea:	f7f3 ffe7 	bl	80002bc <__adddf3>
 800c2ee:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c2f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c2f6:	ed8a 7b00 	vstr	d7, [sl]
 800c2fa:	e770      	b.n	800c1de <__kernel_rem_pio2+0x50e>
 800c2fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c300:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c304:	4640      	mov	r0, r8
 800c306:	4632      	mov	r2, r6
 800c308:	463b      	mov	r3, r7
 800c30a:	4649      	mov	r1, r9
 800c30c:	f7f3 ffd6 	bl	80002bc <__adddf3>
 800c310:	e9cd 0100 	strd	r0, r1, [sp]
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	4640      	mov	r0, r8
 800c31a:	4649      	mov	r1, r9
 800c31c:	f7f3 ffcc 	bl	80002b8 <__aeabi_dsub>
 800c320:	4632      	mov	r2, r6
 800c322:	463b      	mov	r3, r7
 800c324:	f7f3 ffca 	bl	80002bc <__adddf3>
 800c328:	ed9d 7b00 	vldr	d7, [sp]
 800c32c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c330:	ed84 7b00 	vstr	d7, [r4]
 800c334:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c338:	e757      	b.n	800c1ea <__kernel_rem_pio2+0x51a>
 800c33a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c33e:	f7f3 ffbd 	bl	80002bc <__adddf3>
 800c342:	3d01      	subs	r5, #1
 800c344:	e75c      	b.n	800c200 <__kernel_rem_pio2+0x530>
 800c346:	9b04      	ldr	r3, [sp, #16]
 800c348:	9a04      	ldr	r2, [sp, #16]
 800c34a:	601f      	str	r7, [r3, #0]
 800c34c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c350:	605c      	str	r4, [r3, #4]
 800c352:	609d      	str	r5, [r3, #8]
 800c354:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c358:	60d3      	str	r3, [r2, #12]
 800c35a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c35e:	6110      	str	r0, [r2, #16]
 800c360:	6153      	str	r3, [r2, #20]
 800c362:	e727      	b.n	800c1b4 <__kernel_rem_pio2+0x4e4>
 800c364:	41700000 	.word	0x41700000
 800c368:	3e700000 	.word	0x3e700000
 800c36c:	00000000 	.word	0x00000000

0800c370 <scalbn>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	ec55 4b10 	vmov	r4, r5, d0
 800c376:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c37a:	4606      	mov	r6, r0
 800c37c:	462b      	mov	r3, r5
 800c37e:	b999      	cbnz	r1, 800c3a8 <scalbn+0x38>
 800c380:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c384:	4323      	orrs	r3, r4
 800c386:	d03f      	beq.n	800c408 <scalbn+0x98>
 800c388:	4b35      	ldr	r3, [pc, #212]	; (800c460 <scalbn+0xf0>)
 800c38a:	4629      	mov	r1, r5
 800c38c:	ee10 0a10 	vmov	r0, s0
 800c390:	2200      	movs	r2, #0
 800c392:	f7f4 f949 	bl	8000628 <__aeabi_dmul>
 800c396:	4b33      	ldr	r3, [pc, #204]	; (800c464 <scalbn+0xf4>)
 800c398:	429e      	cmp	r6, r3
 800c39a:	4604      	mov	r4, r0
 800c39c:	460d      	mov	r5, r1
 800c39e:	da10      	bge.n	800c3c2 <scalbn+0x52>
 800c3a0:	a327      	add	r3, pc, #156	; (adr r3, 800c440 <scalbn+0xd0>)
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	e01f      	b.n	800c3e8 <scalbn+0x78>
 800c3a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c3ac:	4291      	cmp	r1, r2
 800c3ae:	d10c      	bne.n	800c3ca <scalbn+0x5a>
 800c3b0:	ee10 2a10 	vmov	r2, s0
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	f7f3 ff80 	bl	80002bc <__adddf3>
 800c3bc:	4604      	mov	r4, r0
 800c3be:	460d      	mov	r5, r1
 800c3c0:	e022      	b.n	800c408 <scalbn+0x98>
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c3c8:	3936      	subs	r1, #54	; 0x36
 800c3ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c3ce:	4296      	cmp	r6, r2
 800c3d0:	dd0d      	ble.n	800c3ee <scalbn+0x7e>
 800c3d2:	2d00      	cmp	r5, #0
 800c3d4:	a11c      	add	r1, pc, #112	; (adr r1, 800c448 <scalbn+0xd8>)
 800c3d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3da:	da02      	bge.n	800c3e2 <scalbn+0x72>
 800c3dc:	a11c      	add	r1, pc, #112	; (adr r1, 800c450 <scalbn+0xe0>)
 800c3de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3e2:	a319      	add	r3, pc, #100	; (adr r3, 800c448 <scalbn+0xd8>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	f7f4 f91e 	bl	8000628 <__aeabi_dmul>
 800c3ec:	e7e6      	b.n	800c3bc <scalbn+0x4c>
 800c3ee:	1872      	adds	r2, r6, r1
 800c3f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c3f4:	428a      	cmp	r2, r1
 800c3f6:	dcec      	bgt.n	800c3d2 <scalbn+0x62>
 800c3f8:	2a00      	cmp	r2, #0
 800c3fa:	dd08      	ble.n	800c40e <scalbn+0x9e>
 800c3fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c404:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c408:	ec45 4b10 	vmov	d0, r4, r5
 800c40c:	bd70      	pop	{r4, r5, r6, pc}
 800c40e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c412:	da08      	bge.n	800c426 <scalbn+0xb6>
 800c414:	2d00      	cmp	r5, #0
 800c416:	a10a      	add	r1, pc, #40	; (adr r1, 800c440 <scalbn+0xd0>)
 800c418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c41c:	dac0      	bge.n	800c3a0 <scalbn+0x30>
 800c41e:	a10e      	add	r1, pc, #56	; (adr r1, 800c458 <scalbn+0xe8>)
 800c420:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c424:	e7bc      	b.n	800c3a0 <scalbn+0x30>
 800c426:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c42a:	3236      	adds	r2, #54	; 0x36
 800c42c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c430:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c434:	4620      	mov	r0, r4
 800c436:	4b0c      	ldr	r3, [pc, #48]	; (800c468 <scalbn+0xf8>)
 800c438:	2200      	movs	r2, #0
 800c43a:	e7d5      	b.n	800c3e8 <scalbn+0x78>
 800c43c:	f3af 8000 	nop.w
 800c440:	c2f8f359 	.word	0xc2f8f359
 800c444:	01a56e1f 	.word	0x01a56e1f
 800c448:	8800759c 	.word	0x8800759c
 800c44c:	7e37e43c 	.word	0x7e37e43c
 800c450:	8800759c 	.word	0x8800759c
 800c454:	fe37e43c 	.word	0xfe37e43c
 800c458:	c2f8f359 	.word	0xc2f8f359
 800c45c:	81a56e1f 	.word	0x81a56e1f
 800c460:	43500000 	.word	0x43500000
 800c464:	ffff3cb0 	.word	0xffff3cb0
 800c468:	3c900000 	.word	0x3c900000
 800c46c:	00000000 	.word	0x00000000

0800c470 <floor>:
 800c470:	ec51 0b10 	vmov	r0, r1, d0
 800c474:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c480:	2e13      	cmp	r6, #19
 800c482:	ee10 5a10 	vmov	r5, s0
 800c486:	ee10 8a10 	vmov	r8, s0
 800c48a:	460c      	mov	r4, r1
 800c48c:	dc31      	bgt.n	800c4f2 <floor+0x82>
 800c48e:	2e00      	cmp	r6, #0
 800c490:	da14      	bge.n	800c4bc <floor+0x4c>
 800c492:	a333      	add	r3, pc, #204	; (adr r3, 800c560 <floor+0xf0>)
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f7f3 ff10 	bl	80002bc <__adddf3>
 800c49c:	2200      	movs	r2, #0
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f7f4 fb52 	bl	8000b48 <__aeabi_dcmpgt>
 800c4a4:	b138      	cbz	r0, 800c4b6 <floor+0x46>
 800c4a6:	2c00      	cmp	r4, #0
 800c4a8:	da53      	bge.n	800c552 <floor+0xe2>
 800c4aa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c4ae:	4325      	orrs	r5, r4
 800c4b0:	d052      	beq.n	800c558 <floor+0xe8>
 800c4b2:	4c2d      	ldr	r4, [pc, #180]	; (800c568 <floor+0xf8>)
 800c4b4:	2500      	movs	r5, #0
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	e024      	b.n	800c506 <floor+0x96>
 800c4bc:	4f2b      	ldr	r7, [pc, #172]	; (800c56c <floor+0xfc>)
 800c4be:	4137      	asrs	r7, r6
 800c4c0:	ea01 0307 	and.w	r3, r1, r7
 800c4c4:	4303      	orrs	r3, r0
 800c4c6:	d01e      	beq.n	800c506 <floor+0x96>
 800c4c8:	a325      	add	r3, pc, #148	; (adr r3, 800c560 <floor+0xf0>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f3 fef5 	bl	80002bc <__adddf3>
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f7f4 fb37 	bl	8000b48 <__aeabi_dcmpgt>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d0eb      	beq.n	800c4b6 <floor+0x46>
 800c4de:	2c00      	cmp	r4, #0
 800c4e0:	bfbe      	ittt	lt
 800c4e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c4e6:	4133      	asrlt	r3, r6
 800c4e8:	18e4      	addlt	r4, r4, r3
 800c4ea:	ea24 0407 	bic.w	r4, r4, r7
 800c4ee:	2500      	movs	r5, #0
 800c4f0:	e7e1      	b.n	800c4b6 <floor+0x46>
 800c4f2:	2e33      	cmp	r6, #51	; 0x33
 800c4f4:	dd0b      	ble.n	800c50e <floor+0x9e>
 800c4f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c4fa:	d104      	bne.n	800c506 <floor+0x96>
 800c4fc:	ee10 2a10 	vmov	r2, s0
 800c500:	460b      	mov	r3, r1
 800c502:	f7f3 fedb 	bl	80002bc <__adddf3>
 800c506:	ec41 0b10 	vmov	d0, r0, r1
 800c50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c50e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800c512:	f04f 37ff 	mov.w	r7, #4294967295
 800c516:	40df      	lsrs	r7, r3
 800c518:	4238      	tst	r0, r7
 800c51a:	d0f4      	beq.n	800c506 <floor+0x96>
 800c51c:	a310      	add	r3, pc, #64	; (adr r3, 800c560 <floor+0xf0>)
 800c51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c522:	f7f3 fecb 	bl	80002bc <__adddf3>
 800c526:	2200      	movs	r2, #0
 800c528:	2300      	movs	r3, #0
 800c52a:	f7f4 fb0d 	bl	8000b48 <__aeabi_dcmpgt>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d0c1      	beq.n	800c4b6 <floor+0x46>
 800c532:	2c00      	cmp	r4, #0
 800c534:	da0a      	bge.n	800c54c <floor+0xdc>
 800c536:	2e14      	cmp	r6, #20
 800c538:	d101      	bne.n	800c53e <floor+0xce>
 800c53a:	3401      	adds	r4, #1
 800c53c:	e006      	b.n	800c54c <floor+0xdc>
 800c53e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c542:	2301      	movs	r3, #1
 800c544:	40b3      	lsls	r3, r6
 800c546:	441d      	add	r5, r3
 800c548:	45a8      	cmp	r8, r5
 800c54a:	d8f6      	bhi.n	800c53a <floor+0xca>
 800c54c:	ea25 0507 	bic.w	r5, r5, r7
 800c550:	e7b1      	b.n	800c4b6 <floor+0x46>
 800c552:	2500      	movs	r5, #0
 800c554:	462c      	mov	r4, r5
 800c556:	e7ae      	b.n	800c4b6 <floor+0x46>
 800c558:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c55c:	e7ab      	b.n	800c4b6 <floor+0x46>
 800c55e:	bf00      	nop
 800c560:	8800759c 	.word	0x8800759c
 800c564:	7e37e43c 	.word	0x7e37e43c
 800c568:	bff00000 	.word	0xbff00000
 800c56c:	000fffff 	.word	0x000fffff

0800c570 <_init>:
 800c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c572:	bf00      	nop
 800c574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c576:	bc08      	pop	{r3}
 800c578:	469e      	mov	lr, r3
 800c57a:	4770      	bx	lr

0800c57c <_fini>:
 800c57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57e:	bf00      	nop
 800c580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c582:	bc08      	pop	{r3}
 800c584:	469e      	mov	lr, r3
 800c586:	4770      	bx	lr
