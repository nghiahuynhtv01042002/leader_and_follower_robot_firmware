
leader_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c970  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  0800cb10  0800cb10  0001cb10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d220  0800d220  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d220  0800d220  0001d220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d228  0800d228  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d228  0800d228  0001d228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d22c  0800d22c  0001d22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d230  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200001e8  0800d418  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800d418  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7bb  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002265  00000000  00000000  0002ea16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00030c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af2  00000000  00000000  00031a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c0b  00000000  00000000  0003258a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ffe2  00000000  00000000  0004a195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090b3a  00000000  00000000  0005a177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055dc  00000000  00000000  000eacb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000f0290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800caf8 	.word	0x0800caf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800caf8 	.word	0x0800caf8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <init_Robot>:



/// initial robot parameter

void init_Robot(Robot* robot){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    robot->x = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
    robot->y = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
    robot->theta = 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
    robot->omega = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
//    robot->v = 0.05;//60rpm = 0.2041 50 = 0.17
    robot->v = 0.1;//60rpm = 0.2041 50 = 0.17
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <init_Robot+0x7c>)
 800104c:	60da      	str	r2, [r3, #12]
//    robot->v = 0.0;//60rpm = 0.2041 50 = 0.17


    robot->v_r = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
    robot->v_l = 0;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
    robot->v_r_rpm = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
    robot->v_l_rpm = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
    robot->v_r_PWM = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
    robot->v_l_PWM = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
    robot->S_distance = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
    strcpy(robot->cmd,"STP");
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	331c      	adds	r3, #28
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <init_Robot+0x80>)
 800108c:	6810      	ldr	r0, [r2, #0]
 800108e:	6018      	str	r0, [r3, #0]

}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	3dcccccd 	.word	0x3dcccccd
 80010a0:	0800cb10 	.word	0x0800cb10
 80010a4:	00000000 	.word	0x00000000

080010a8 <update_Position>:
/// @brief calculat new posstion of Robot from encoder value
/// @param robot
/// @param encoder_Right_Value
/// @param encoder_Left_Value
void update_Position(Robot* robot, int encoder_difference_left, int encoder_difference_right,float delta_t){
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	ed2d 8b02 	vpush	{d8}
 80010b0:	b088      	sub	sp, #32
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	ed87 0a00 	vstr	s0, [r7]
		float D_r  = (float) pi*d*(encoder_difference_right)/N;
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fa48 	bl	8000554 <__aeabi_i2d>
 80010c4:	a378      	add	r3, pc, #480	; (adr r3, 80012a8 <update_Position+0x200>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff faad 	bl	8000628 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	a376      	add	r3, pc, #472	; (adr r3, 80012b0 <update_Position+0x208>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fbce 	bl	800087c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fd96 	bl	8000c18 <__aeabi_d2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	61fb      	str	r3, [r7, #28]
		float D_l = (float) pi*d*(encoder_difference_left)/N;
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	f7ff fa2f 	bl	8000554 <__aeabi_i2d>
 80010f6:	a36c      	add	r3, pc, #432	; (adr r3, 80012a8 <update_Position+0x200>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff fa94 	bl	8000628 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	a369      	add	r3, pc, #420	; (adr r3, 80012b0 <update_Position+0x208>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fbb5 	bl	800087c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd7d 	bl	8000c18 <__aeabi_d2f>
 800111e:	4603      	mov	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]
		float D_c = (D_r + D_l)/2;
 8001122:	ed97 7a07 	vldr	s14, [r7, #28]
 8001126:	edd7 7a06 	vldr	s15, [r7, #24]
 800112a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800112e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001136:	edc7 7a05 	vstr	s15, [r7, #20]

      robot->x += D_c*cos(robot->theta);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa1a 	bl	8000578 <__aeabi_f2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	4680      	mov	r8, r0
 8001150:	4689      	mov	r9, r1
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fa0e 	bl	8000578 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	ec43 2b10 	vmov	d0, r2, r3
 8001164:	f00a f8ec 	bl	800b340 <cos>
 8001168:	ec53 2b10 	vmov	r2, r3, d0
 800116c:	4640      	mov	r0, r8
 800116e:	4649      	mov	r1, r9
 8001170:	f7ff fa5a 	bl	8000628 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff f89e 	bl	80002bc <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fd46 	bl	8000c18 <__aeabi_d2f>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]
      robot->y += D_c*sin(robot->theta);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9ee 	bl	8000578 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	6978      	ldr	r0, [r7, #20]
 80011a2:	f7ff f9e9 	bl	8000578 <__aeabi_f2d>
 80011a6:	4680      	mov	r8, r0
 80011a8:	4689      	mov	r9, r1
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9e2 	bl	8000578 <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	ec43 2b10 	vmov	d0, r2, r3
 80011bc:	f00a f914 	bl	800b3e8 <sin>
 80011c0:	ec53 2b10 	vmov	r2, r3, d0
 80011c4:	4640      	mov	r0, r8
 80011c6:	4649      	mov	r1, r9
 80011c8:	f7ff fa2e 	bl	8000628 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4620      	mov	r0, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	f7ff f872 	bl	80002bc <__adddf3>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fd1a 	bl	8000c18 <__aeabi_d2f>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	605a      	str	r2, [r3, #4]
      robot->theta += (D_r -D_l)/(L);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9c2 	bl	8000578 <__aeabi_f2d>
 80011f4:	4604      	mov	r4, r0
 80011f6:	460d      	mov	r5, r1
 80011f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ee17 0a90 	vmov	r0, s15
 8001208:	f7ff f9b6 	bl	8000578 <__aeabi_f2d>
 800120c:	a32a      	add	r3, pc, #168	; (adr r3, 80012b8 <update_Position+0x210>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff fb33 	bl	800087c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7ff f84d 	bl	80002bc <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fcf5 	bl	8000c18 <__aeabi_d2f>
 800122e:	4602      	mov	r2, r0
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	609a      	str	r2, [r3, #8]
//      robot->v = 0.1*robot->omega;
//      robot->theta = robot->omega* delta_t;
      robot->theta = atan2(sin(robot->theta),cos(robot->theta)) ;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f99d 	bl	8000578 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	ec43 2b10 	vmov	d0, r2, r3
 8001246:	f00a f8cf 	bl	800b3e8 <sin>
 800124a:	eeb0 8a40 	vmov.f32	s16, s0
 800124e:	eef0 8a60 	vmov.f32	s17, s1
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f98e 	bl	8000578 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	ec43 2b10 	vmov	d0, r2, r3
 8001264:	f00a f86c 	bl	800b340 <cos>
 8001268:	eeb0 7a40 	vmov.f32	s14, s0
 800126c:	eef0 7a60 	vmov.f32	s15, s1
 8001270:	eeb0 1a47 	vmov.f32	s2, s14
 8001274:	eef0 1a67 	vmov.f32	s3, s15
 8001278:	eeb0 0a48 	vmov.f32	s0, s16
 800127c:	eef0 0a68 	vmov.f32	s1, s17
 8001280:	f00a f82e 	bl	800b2e0 <atan2>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fcc4 	bl	8000c18 <__aeabi_d2f>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	609a      	str	r2, [r3, #8]
//      if (robot->phi > 2 * pi) robot->phi -= 2 * pi;
//      else if (robot->phi < 0) robot->phi += 2 * pi;
}
 8001296:	bf00      	nop
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	ecbd 8b02 	vpop	{d8}
 80012a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012a4:	f3af 8000 	nop.w
 80012a8:	c7ae147b 	.word	0xc7ae147b
 80012ac:	3fca2324 	.word	0x3fca2324
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40901800 	.word	0x40901800
 80012b8:	70a3d70a 	.word	0x70a3d70a
 80012bc:	3fc70a3d 	.word	0x3fc70a3d

080012c0 <desired_point_init>:
 *  Created on: Mar 31, 2024
 *      Author: Nghia
 */
#include "decoding_frame.h"
#include "string.h"
void desired_point_init(desired_point* my_desired_point){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	my_desired_point->x_d = 0;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
	my_desired_point->y_d = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
	my_desired_point->phi_d = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
	strcpy(my_desired_point->cmd_d, "stp");
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <desired_point_init+0x34>)
 80012e4:	6810      	ldr	r0, [r2, #0]
 80012e6:	6018      	str	r0, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	0800cb14 	.word	0x0800cb14

080012f8 <split_frame>:
void split_frame(char *frame, desired_point* my_desired_point) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
    // Sử dụng sscanf để trích xuất giá trị từ chuỗi
    sscanf(frame, "!cmd:%[^#]#x:%f#y:%f#phi:%f#\n", my_desired_point->cmd_d, &my_desired_point->x_d, &my_desired_point->y_d, &my_desired_point->phi_d);
 8001302:	6839      	ldr	r1, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	1d18      	adds	r0, r3, #4
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	3308      	adds	r3, #8
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	320c      	adds	r2, #12
 8001310:	9201      	str	r2, [sp, #4]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4603      	mov	r3, r0
 8001316:	460a      	mov	r2, r1
 8001318:	4903      	ldr	r1, [pc, #12]	; (8001328 <split_frame+0x30>)
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f005 ff22 	bl	8007164 <siscanf>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0800cb18 	.word	0x0800cb18

0800132c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart2.Instance){
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_UART_RxCpltCallback+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d122      	bne.n	8001386 <HAL_UART_RxCpltCallback+0x5a>
//		receive_data(Rx);
		if(Rx == '\n'){
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_UART_RxCpltCallback+0x68>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b0a      	cmp	r3, #10
 8001346:	d10e      	bne.n	8001366 <HAL_UART_RxCpltCallback+0x3a>
			uart_flag =1;
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_UART_RxCpltCallback+0x6c>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]
			uart_buff[uart_len++] = Rx;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_UART_RxCpltCallback+0x70>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	b2d1      	uxtb	r1, r2
 8001356:	4a11      	ldr	r2, [pc, #68]	; (800139c <HAL_UART_RxCpltCallback+0x70>)
 8001358:	7011      	strb	r1, [r2, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_UART_RxCpltCallback+0x68>)
 800135e:	7819      	ldrb	r1, [r3, #0]
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_UART_RxCpltCallback+0x74>)
 8001362:	5499      	strb	r1, [r3, r2]
 8001364:	e00a      	b.n	800137c <HAL_UART_RxCpltCallback+0x50>
		}

		else{
			uart_buff[uart_len++]= Rx;
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_UART_RxCpltCallback+0x70>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	b2d1      	uxtb	r1, r2
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <HAL_UART_RxCpltCallback+0x70>)
 8001370:	7011      	strb	r1, [r2, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_UART_RxCpltCallback+0x68>)
 8001376:	7819      	ldrb	r1, [r3, #0]
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_UART_RxCpltCallback+0x74>)
 800137a:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&huart2, &Rx, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	4905      	ldr	r1, [pc, #20]	; (8001394 <HAL_UART_RxCpltCallback+0x68>)
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <HAL_UART_RxCpltCallback+0x64>)
 8001382:	f003 ff2d 	bl	80051e0 <HAL_UART_Receive_IT>
	}
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200003f4 	.word	0x200003f4
 8001394:	20000204 	.word	0x20000204
 8001398:	2000023c 	.word	0x2000023c
 800139c:	20000240 	.word	0x20000240
 80013a0:	20000208 	.word	0x20000208
 80013a4:	00000000 	.word	0x00000000

080013a8 <HAL_TIM_PeriodElapsedCallback>:
// todo timer interuppt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013ac:	b088      	sub	sp, #32
 80013ae:	af06      	add	r7, sp, #24
 80013b0:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a68      	ldr	r2, [pc, #416]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	f040 80c1 	bne.w	8001540 <HAL_TIM_PeriodElapsedCallback+0x198>
		//doc encoder
		if(count >= 1 ){
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f340 80b7 	ble.w	8001536 <HAL_TIM_PeriodElapsedCallback+0x18e>

			encoder_value_left = -1*__HAL_TIM_GET_COUNTER(&htim2);
 80013c8:	4b65      	ldr	r3, [pc, #404]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	425b      	negs	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b64      	ldr	r3, [pc, #400]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80013d4:	601a      	str	r2, [r3, #0]
			encoder_value_right =__HAL_TIM_GET_COUNTER(&htim5);
 80013d6:	4b64      	ldr	r3, [pc, #400]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	461a      	mov	r2, r3
 80013de:	4b63      	ldr	r3, [pc, #396]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80013e0:	601a      	str	r2, [r3, #0]
			encoder_difference_left = encoder_value_left - pre_encoder_value_left;
 80013e2:	4b60      	ldr	r3, [pc, #384]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b62      	ldr	r3, [pc, #392]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4a61      	ldr	r2, [pc, #388]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80013ee:	6013      	str	r3, [r2, #0]
			encoder_difference_right = encoder_value_right - pre_encoder_value_right;
 80013f0:	4b5e      	ldr	r3, [pc, #376]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	4a60      	ldr	r2, [pc, #384]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80013fc:	6013      	str	r3, [r2, #0]
			pre_encoder_value_right = encoder_value_right ;
 80013fe:	4b5b      	ldr	r3, [pc, #364]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a5d      	ldr	r2, [pc, #372]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001404:	6013      	str	r3, [r2, #0]
			pre_encoder_value_left = encoder_value_left ;
 8001406:	4b57      	ldr	r3, [pc, #348]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a59      	ldr	r2, [pc, #356]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800140c:	6013      	str	r3, [r2, #0]
//
			update_Position(&myRobot, encoder_difference_left, encoder_difference_right,0.1);
 800140e:	4b59      	ldr	r3, [pc, #356]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a5a      	ldr	r2, [pc, #360]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8001580 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 800141a:	4619      	mov	r1, r3
 800141c:	4859      	ldr	r0, [pc, #356]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800141e:	f7ff fe43 	bl	80010a8 <update_Position>
//			update_Position_base_velocity(&myRobot, encoder_difference_left, encoder_difference_right,0.1);//delta time is 0.1
			//ennable PID calculation
			en_PID =1;
 8001422:	4b59      	ldr	r3, [pc, #356]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

			//end condition
			distance_to_goals =sqrt((myRobot.x-my_desired_point.x_d)*(myRobot.x - my_desired_point.x_d)+(myRobot.y - my_desired_point.y_d)*(myRobot.y-my_desired_point.y_d));
 8001428:	4b56      	ldr	r3, [pc, #344]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800142a:	ed93 7a00 	vldr	s14, [r3]
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001430:	edd3 7a01 	vldr	s15, [r3, #4]
 8001434:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001438:	4b52      	ldr	r3, [pc, #328]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800143a:	edd3 6a00 	vldr	s13, [r3]
 800143e:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001440:	edd3 7a01 	vldr	s15, [r3, #4]
 8001444:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800144c:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800144e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001452:	4b4e      	ldr	r3, [pc, #312]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001454:	edd3 7a02 	vldr	s15, [r3, #8]
 8001458:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800145c:	4b49      	ldr	r3, [pc, #292]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800145e:	ed93 6a01 	vldr	s12, [r3, #4]
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001464:	edd3 7a02 	vldr	s15, [r3, #8]
 8001468:	ee76 7a67 	vsub.f32	s15, s12, s15
 800146c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	ee17 0a90 	vmov	r0, s15
 8001478:	f7ff f87e 	bl	8000578 <__aeabi_f2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	ec43 2b10 	vmov	d0, r2, r3
 8001484:	f009 ff2e 	bl	800b2e4 <sqrt>
 8001488:	ec53 2b10 	vmov	r2, r3, d0
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fbc2 	bl	8000c18 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001498:	6013      	str	r3, [r2, #0]
			//sprintf(data,"!distance:%.2f#\n",distance_to_goals);
			//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));()abs(myRobot.x - my_desired_point.x_d) < 0.01) &(abs(myRobot.y - my_desired_point.y_d) <0.01
			if((distance_to_goals < 0.03) ){
 800149a:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f86a 	bl	8000578 <__aeabi_f2d>
 80014a4:	a32a      	add	r3, pc, #168	; (adr r3, 8001550 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff fb2f 	bl	8000b0c <__aeabi_dcmplt>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0x11e>
				HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port,PE10_EN_DRIVER_Pin,RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ba:	4836      	ldr	r0, [pc, #216]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80014bc:	f002 f890 	bl	80035e0 <HAL_GPIO_WritePin>
				en_run = 0;
 80014c0:	4b35      	ldr	r3, [pc, #212]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
//			sprintf(data,"!W_L_PWM:%.2f#W_R_PWM:%.2f#\n",myRobot.v_l_PWM,myRobot.v_r_PWM);
//			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));

			//todo
			// only send data when status is running
			if(strcmp(myRobot.cmd,"RUN")== 0 ){
 80014c6:	4935      	ldr	r1, [pc, #212]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80014c8:	4835      	ldr	r0, [pc, #212]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80014ca:	f7fe fe89 	bl	80001e0 <strcmp>
//				HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
			}
//			sprintf(data,"!omega:%.2f#phi:%.2f#\n",myRobot.omega,rad_to_degree(myRobot.theta));
//			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
//			return x y phi; !cmd:RUN#x:0.00#y:0.00#phi:0.00#
			sprintf(data,"!cmd:%s#x:%.2f#y:%.2f#phi:%.2f#\n",myRobot.cmd,myRobot.x,myRobot.y,rad_to_degree(myRobot.theta));
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f850 	bl	8000578 <__aeabi_f2d>
 80014d8:	4604      	mov	r4, r0
 80014da:	460d      	mov	r5, r1
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f849 	bl	8000578 <__aeabi_f2d>
 80014e6:	4680      	mov	r8, r0
 80014e8:	4689      	mov	r9, r1
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80014ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	f000 fd10 	bl	8001f18 <rad_to_degree>
 80014f8:	ee10 3a10 	vmov	r3, s0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f83b 	bl	8000578 <__aeabi_f2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800150a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800150e:	e9cd 4500 	strd	r4, r5, [sp]
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001514:	4923      	ldr	r1, [pc, #140]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001516:	4824      	ldr	r0, [pc, #144]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001518:	f005 fe04 	bl	8007124 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
 800151c:	4822      	ldr	r0, [pc, #136]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800151e:	f7fe febf 	bl	80002a0 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	b29b      	uxth	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	491f      	ldr	r1, [pc, #124]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800152a:	4820      	ldr	r0, [pc, #128]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x204>)
 800152c:	f003 fe7e 	bl	800522c <HAL_UART_Transmit_DMA>

			//reset count
			count=0;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
		}
		count++;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800153e:	6013      	str	r3, [r2, #0]
	}
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w
 8001550:	eb851eb8 	.word	0xeb851eb8
 8001554:	3f9eb851 	.word	0x3f9eb851
 8001558:	40000400 	.word	0x40000400
 800155c:	200002c8 	.word	0x200002c8
 8001560:	2000031c 	.word	0x2000031c
 8001564:	20000244 	.word	0x20000244
 8001568:	200003ac 	.word	0x200003ac
 800156c:	20000248 	.word	0x20000248
 8001570:	2000024c 	.word	0x2000024c
 8001574:	20000254 	.word	0x20000254
 8001578:	20000250 	.word	0x20000250
 800157c:	20000258 	.word	0x20000258
 8001580:	3dcccccd 	.word	0x3dcccccd
 8001584:	2000049c 	.word	0x2000049c
 8001588:	200002c4 	.word	0x200002c4
 800158c:	200004f8 	.word	0x200004f8
 8001590:	200002d0 	.word	0x200002d0
 8001594:	40021000 	.word	0x40021000
 8001598:	200002c0 	.word	0x200002c0
 800159c:	0800cb38 	.word	0x0800cb38
 80015a0:	200004b8 	.word	0x200004b8
 80015a4:	0800cb3c 	.word	0x0800cb3c
 80015a8:	2000025c 	.word	0x2000025c
 80015ac:	200003f4 	.word	0x200003f4

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b4:	f001 f8e6 	bl	8002784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b8:	f000 f9f2 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015bc:	f000 fc52 	bl	8001e64 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c0:	f000 fc30 	bl	8001e24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015c4:	f000 fc04 	bl	8001dd0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80015c8:	f000 fa48 	bl	8001a5c <MX_TIM1_Init>
  MX_TIM2_Init();
 80015cc:	f000 fb0a 	bl	8001be4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015d0:	f000 fb5c 	bl	8001c8c <MX_TIM3_Init>
  MX_TIM5_Init();
 80015d4:	f000 fba8 	bl	8001d28 <MX_TIM5_Init>


  /* USER CODE BEGIN 2 */
  //start  uart2 interupt
  // todo
  init_Robot(&myRobot);
 80015d8:	48af      	ldr	r0, [pc, #700]	; (8001898 <main+0x2e8>)
 80015da:	f7ff fd21 	bl	8001020 <init_Robot>
  desired_point_init(&my_desired_point);
 80015de:	48af      	ldr	r0, [pc, #700]	; (800189c <main+0x2ec>)
 80015e0:	f7ff fe6e 	bl	80012c0 <desired_point_init>
  HAL_UART_Receive_IT(&huart2, &Rx, 1);
 80015e4:	2201      	movs	r2, #1
 80015e6:	49ae      	ldr	r1, [pc, #696]	; (80018a0 <main+0x2f0>)
 80015e8:	48ae      	ldr	r0, [pc, #696]	; (80018a4 <main+0x2f4>)
 80015ea:	f003 fdf9 	bl	80051e0 <HAL_UART_Receive_IT>
  //ref KP KI KD
//  pid_set_Kp_Ki_Kd(&hpid,1.55, 0.055, 0.025,0.1);
//  pid_set_Kp_Ki_Kd(&hpid, 5, 0.13, 0.025,0.1);
  pid_set_Kp_Ki_Kd(&hpid, 10, 1.5, 0.025,0.1);
 80015ee:	eddf 1aae 	vldr	s3, [pc, #696]	; 80018a8 <main+0x2f8>
 80015f2:	ed9f 1aae 	vldr	s2, [pc, #696]	; 80018ac <main+0x2fc>
 80015f6:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 80015fa:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80015fe:	48ac      	ldr	r0, [pc, #688]	; (80018b0 <main+0x300>)
 8001600:	f000 fcda 	bl	8001fb8 <pid_set_Kp_Ki_Kd>
  //start PWM TIM1; chanel 1,2 for left motor ; chanel 3,4 for right  motor
  //chanel 1 PE9 ;chanel 2 PE11; chanel 3 PE23 ; chanel 4 PE14;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001604:	2100      	movs	r1, #0
 8001606:	48ab      	ldr	r0, [pc, #684]	; (80018b4 <main+0x304>)
 8001608:	f002 fd68 	bl	80040dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800160c:	2104      	movs	r1, #4
 800160e:	48a9      	ldr	r0, [pc, #676]	; (80018b4 <main+0x304>)
 8001610:	f002 fd64 	bl	80040dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001614:	2108      	movs	r1, #8
 8001616:	48a7      	ldr	r0, [pc, #668]	; (80018b4 <main+0x304>)
 8001618:	f002 fd60 	bl	80040dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800161c:	210c      	movs	r1, #12
 800161e:	48a5      	ldr	r0, [pc, #660]	; (80018b4 <main+0x304>)
 8001620:	f002 fd5c 	bl	80040dc <HAL_TIM_PWM_Start>
  //start encoder Mode
  // TIM2 For encoder of left motor , TIM5 for encoder of Right motor
  // TIM2:PA5,PB3 ; TIM5 PA0,PA1
//  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
//  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1|TIM_CHANNEL_2);
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8001624:	2104      	movs	r1, #4
 8001626:	48a4      	ldr	r0, [pc, #656]	; (80018b8 <main+0x308>)
 8001628:	f002 feae 	bl	8004388 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 800162c:	2100      	movs	r1, #0
 800162e:	48a3      	ldr	r0, [pc, #652]	; (80018bc <main+0x30c>)
 8001630:	f002 feaa 	bl	8004388 <HAL_TIM_Encoder_Start>
  //start interrupt timer 3
  HAL_TIM_Base_Start_IT(&htim3);
 8001634:	48a2      	ldr	r0, [pc, #648]	; (80018c0 <main+0x310>)
 8001636:	f002 fc95 	bl	8003f64 <HAL_TIM_Base_Start_IT>
//	  HAL_UART_Transmit(&huart2, tx_buff, sizeof(tx_buff),100);
//	  HAL_Delay(100);
// todo pid

	  // transmit data when stm32 recieved data form PC
	  if(uart_flag == 1){
 800163a:	4ba2      	ldr	r3, [pc, #648]	; (80018c4 <main+0x314>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d12a      	bne.n	8001698 <main+0xe8>
		  //decoding frame data;
		  split_frame((char*)uart_buff, &my_desired_point);
 8001642:	4996      	ldr	r1, [pc, #600]	; (800189c <main+0x2ec>)
 8001644:	48a0      	ldr	r0, [pc, #640]	; (80018c8 <main+0x318>)
 8001646:	f7ff fe57 	bl	80012f8 <split_frame>

		  if(strcmp(my_desired_point.cmd_d, "RUN") == 0){
 800164a:	49a0      	ldr	r1, [pc, #640]	; (80018cc <main+0x31c>)
 800164c:	4893      	ldr	r0, [pc, #588]	; (800189c <main+0x2ec>)
 800164e:	f7fe fdc7 	bl	80001e0 <strcmp>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10d      	bne.n	8001674 <main+0xc4>
			  strcpy(myRobot.cmd,my_desired_point.cmd_d);
 8001658:	4990      	ldr	r1, [pc, #576]	; (800189c <main+0x2ec>)
 800165a:	489d      	ldr	r0, [pc, #628]	; (80018d0 <main+0x320>)
 800165c:	f005 fe73 	bl	8007346 <strcpy>
			  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port,PE10_EN_DRIVER_Pin,SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001666:	489b      	ldr	r0, [pc, #620]	; (80018d4 <main+0x324>)
 8001668:	f001 ffba 	bl	80035e0 <HAL_GPIO_WritePin>
			  en_run = 1;
 800166c:	4b9a      	ldr	r3, [pc, #616]	; (80018d8 <main+0x328>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e008      	b.n	8001686 <main+0xd6>
		  }
		  else{
			  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port,PE10_EN_DRIVER_Pin,RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167a:	4896      	ldr	r0, [pc, #600]	; (80018d4 <main+0x324>)
 800167c:	f001 ffb0 	bl	80035e0 <HAL_GPIO_WritePin>
			  en_run = 0;
 8001680:	4b95      	ldr	r3, [pc, #596]	; (80018d8 <main+0x328>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]


		  //send data to check desire point: !cmd:RUN#x:0.00#y:0.00#phi:0.00#
//		  sprintf(data,"!cmd_d:%s#x_d:%.2f#y_d:%.2f#phi_d:%.2f#\n",my_desired_point.cmd_d,my_desired_point.x_d,my_desired_point.y_d,my_desired_point.phi_d);
//		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)data,strlen(data));
		  HAL_Delay(100);
 8001686:	2064      	movs	r0, #100	; 0x64
 8001688:	f001 f8ee 	bl	8002868 <HAL_Delay>
		  uart_len = 0;
 800168c:	4b93      	ldr	r3, [pc, #588]	; (80018dc <main+0x32c>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
		  uart_flag =0;
 8001692:	4b8c      	ldr	r3, [pc, #560]	; (80018c4 <main+0x314>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
	  }
		 // PID and control motor
	  	  if(en_PID ==1){
 8001698:	4b91      	ldr	r3, [pc, #580]	; (80018e0 <main+0x330>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	f040 80d5 	bne.w	800184c <main+0x29c>
		  	  // cal phi desired (rad/s)
			  phid_pid = atan2((my_desired_point.y_d - myRobot.y),(my_desired_point.x_d - myRobot.x));
 80016a2:	4b7e      	ldr	r3, [pc, #504]	; (800189c <main+0x2ec>)
 80016a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80016a8:	4b7b      	ldr	r3, [pc, #492]	; (8001898 <main+0x2e8>)
 80016aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b2:	ee17 0a90 	vmov	r0, s15
 80016b6:	f7fe ff5f 	bl	8000578 <__aeabi_f2d>
 80016ba:	4604      	mov	r4, r0
 80016bc:	460d      	mov	r5, r1
 80016be:	4b77      	ldr	r3, [pc, #476]	; (800189c <main+0x2ec>)
 80016c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80016c4:	4b74      	ldr	r3, [pc, #464]	; (8001898 <main+0x2e8>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ce:	ee17 0a90 	vmov	r0, s15
 80016d2:	f7fe ff51 	bl	8000578 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	ec43 2b11 	vmov	d1, r2, r3
 80016de:	ec45 4b10 	vmov	d0, r4, r5
 80016e2:	f009 fdfd 	bl	800b2e0 <atan2>
 80016e6:	ec53 2b10 	vmov	r2, r3, d0
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff fa93 	bl	8000c18 <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a7b      	ldr	r2, [pc, #492]	; (80018e4 <main+0x334>)
 80016f6:	6013      	str	r3, [r2, #0]
			  hpid.setpoint = phid_pid;
 80016f8:	4b7a      	ldr	r3, [pc, #488]	; (80018e4 <main+0x334>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a6c      	ldr	r2, [pc, #432]	; (80018b0 <main+0x300>)
 80016fe:	6113      	str	r3, [r2, #16]
			  hpid.current = myRobot.theta;
 8001700:	4b65      	ldr	r3, [pc, #404]	; (8001898 <main+0x2e8>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a6a      	ldr	r2, [pc, #424]	; (80018b0 <main+0x300>)
 8001706:	6153      	str	r3, [r2, #20]
		  	  //calculate output PID
		  	  myRobot.omega = calculate_pid_output(&hpid);//rad/s
 8001708:	4869      	ldr	r0, [pc, #420]	; (80018b0 <main+0x300>)
 800170a:	f000 fc73 	bl	8001ff4 <calculate_pid_output>
 800170e:	eef0 7a40 	vmov.f32	s15, s0
 8001712:	4b61      	ldr	r3, [pc, #388]	; (8001898 <main+0x2e8>)
 8001714:	edc3 7a06 	vstr	s15, [r3, #24]
//		  	  myRobot.v = 12*(phid_pid-myRobot.theta);
		  	  //calspeed : write a function in pid_module to call angular vel of 2 motor anf convert it to PWM signal
		  	  myRobot.v_r = cal_speed_right_motor(myRobot.omega, myRobot.v);// m/s
 8001718:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <main+0x2e8>)
 800171a:	edd3 7a06 	vldr	s15, [r3, #24]
 800171e:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <main+0x2e8>)
 8001720:	ed93 7a03 	vldr	s14, [r3, #12]
 8001724:	eef0 0a47 	vmov.f32	s1, s14
 8001728:	eeb0 0a67 	vmov.f32	s0, s15
 800172c:	f000 fcec 	bl	8002108 <cal_speed_right_motor>
 8001730:	eef0 7a40 	vmov.f32	s15, s0
 8001734:	4b58      	ldr	r3, [pc, #352]	; (8001898 <main+0x2e8>)
 8001736:	edc3 7a05 	vstr	s15, [r3, #20]
		  	  myRobot.v_l = cal_speed_left_motor(myRobot.omega, myRobot.v);//m/s
 800173a:	4b57      	ldr	r3, [pc, #348]	; (8001898 <main+0x2e8>)
 800173c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001740:	4b55      	ldr	r3, [pc, #340]	; (8001898 <main+0x2e8>)
 8001742:	ed93 7a03 	vldr	s14, [r3, #12]
 8001746:	eef0 0a47 	vmov.f32	s1, s14
 800174a:	eeb0 0a67 	vmov.f32	s0, s15
 800174e:	f000 fca3 	bl	8002098 <cal_speed_left_motor>
 8001752:	eef0 7a40 	vmov.f32	s15, s0
 8001756:	4b50      	ldr	r3, [pc, #320]	; (8001898 <main+0x2e8>)
 8001758:	edc3 7a04 	vstr	s15, [r3, #16]
//		  			  myRobot.v_l  =(float) v_min;
//		  		  else
//		  			  myRobot.v_l = (float)-v_min ;
//		  	  }
		  	  //set limit ưay2
	  		  if(myRobot.v_r >= 0){
 800175c:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <main+0x2e8>)
 800175e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	db21      	blt.n	80017b0 <main+0x200>
	  			  if(myRobot.v_r > v_max){
 800176c:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <main+0x2e8>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ff01 	bl	8000578 <__aeabi_f2d>
 8001776:	a344      	add	r3, pc, #272	; (adr r3, 8001888 <main+0x2d8>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7ff f9e4 	bl	8000b48 <__aeabi_dcmpgt>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <main+0x1de>
	  				  myRobot.v_r = v_max;
 8001786:	4b44      	ldr	r3, [pc, #272]	; (8001898 <main+0x2e8>)
 8001788:	4a57      	ldr	r2, [pc, #348]	; (80018e8 <main+0x338>)
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	e043      	b.n	8001816 <main+0x266>
	  			  }
	  			  else if(myRobot.v_r < v_min ){
 800178e:	4b42      	ldr	r3, [pc, #264]	; (8001898 <main+0x2e8>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fef0 	bl	8000578 <__aeabi_f2d>
 8001798:	a33d      	add	r3, pc, #244	; (adr r3, 8001890 <main+0x2e0>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7ff f9b5 	bl	8000b0c <__aeabi_dcmplt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d036      	beq.n	8001816 <main+0x266>
	  				myRobot.v_r  = v_min;
 80017a8:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <main+0x2e8>)
 80017aa:	4a50      	ldr	r2, [pc, #320]	; (80018ec <main+0x33c>)
 80017ac:	615a      	str	r2, [r3, #20]
 80017ae:	e032      	b.n	8001816 <main+0x266>
	  			  }
	  		  }
	  		  else if(myRobot.v_r < 0){
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <main+0x2e8>)
 80017b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80017b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d52a      	bpl.n	8001816 <main+0x266>
	  			  if(-myRobot.v_r > v_max){
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <main+0x2e8>)
 80017c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80017c6:	eef1 7a67 	vneg.f32	s15, s15
 80017ca:	ee17 3a90 	vmov	r3, s15
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fed2 	bl	8000578 <__aeabi_f2d>
 80017d4:	a32c      	add	r3, pc, #176	; (adr r3, 8001888 <main+0x2d8>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7ff f9b5 	bl	8000b48 <__aeabi_dcmpgt>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <main+0x23c>
	  				  myRobot.v_r = -v_max;
 80017e4:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <main+0x2e8>)
 80017e6:	4a42      	ldr	r2, [pc, #264]	; (80018f0 <main+0x340>)
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	e014      	b.n	8001816 <main+0x266>
	  			  }
	  			  else if(-myRobot.v_r < v_min ){
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <main+0x2e8>)
 80017ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80017f2:	eef1 7a67 	vneg.f32	s15, s15
 80017f6:	ee17 3a90 	vmov	r3, s15
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe febc 	bl	8000578 <__aeabi_f2d>
 8001800:	a323      	add	r3, pc, #140	; (adr r3, 8001890 <main+0x2e0>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7ff f981 	bl	8000b0c <__aeabi_dcmplt>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <main+0x266>
	  				myRobot.v_r  = -v_min;
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <main+0x2e8>)
 8001812:	4a38      	ldr	r2, [pc, #224]	; (80018f4 <main+0x344>)
 8001814:	615a      	str	r2, [r3, #20]
	  			  }
	  		  }

		  	  // limit max min PWM for motor
		  	  myRobot.v_l_PWM = mps_to_PWM(myRobot.v_l);
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <main+0x2e8>)
 8001818:	edd3 7a04 	vldr	s15, [r3, #16]
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	f000 fb9e 	bl	8001f60 <mps_to_PWM>
 8001824:	eef0 7a40 	vmov.f32	s15, s0
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <main+0x2e8>)
 800182a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		  	  myRobot.v_r_PWM = mps_to_PWM(myRobot.v_r );
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <main+0x2e8>)
 8001830:	edd3 7a05 	vldr	s15, [r3, #20]
 8001834:	eeb0 0a67 	vmov.f32	s0, s15
 8001838:	f000 fb92 	bl	8001f60 <mps_to_PWM>
 800183c:	eef0 7a40 	vmov.f32	s15, s0
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <main+0x2e8>)
 8001842:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	  		  en_PID =0;
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <main+0x330>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
	  	  }


		  // PWM cho 2 motor
		  if(en_run == 1){
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <main+0x328>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	f040 8089 	bne.w	8001968 <main+0x3b8>
			  //left motor
			  // clockwise
			  if(myRobot.v_l_PWM > 0){
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <main+0x2e8>)
 8001858:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800185c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	dd48      	ble.n	80018f8 <main+0x348>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,(int)myRobot.v_l_PWM);//
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <main+0x2e8>)
 8001868:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800186c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <main+0x304>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	ee17 2a90 	vmov	r2, s15
 8001878:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <main+0x304>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
 8001882:	e049      	b.n	8001918 <main+0x368>
 8001884:	f3af 8000 	nop.w
 8001888:	9999999a 	.word	0x9999999a
 800188c:	3fc99999 	.word	0x3fc99999
 8001890:	33333333 	.word	0x33333333
 8001894:	3fc33333 	.word	0x3fc33333
 8001898:	2000049c 	.word	0x2000049c
 800189c:	200004f8 	.word	0x200004f8
 80018a0:	20000204 	.word	0x20000204
 80018a4:	200003f4 	.word	0x200003f4
 80018a8:	3dcccccd 	.word	0x3dcccccd
 80018ac:	3ccccccd 	.word	0x3ccccccd
 80018b0:	200004d0 	.word	0x200004d0
 80018b4:	200002d4 	.word	0x200002d4
 80018b8:	2000031c 	.word	0x2000031c
 80018bc:	200003ac 	.word	0x200003ac
 80018c0:	20000364 	.word	0x20000364
 80018c4:	2000023c 	.word	0x2000023c
 80018c8:	20000208 	.word	0x20000208
 80018cc:	0800cb38 	.word	0x0800cb38
 80018d0:	200004b8 	.word	0x200004b8
 80018d4:	40021000 	.word	0x40021000
 80018d8:	200002c0 	.word	0x200002c0
 80018dc:	20000240 	.word	0x20000240
 80018e0:	200002c4 	.word	0x200002c4
 80018e4:	200002cc 	.word	0x200002cc
 80018e8:	3e4ccccd 	.word	0x3e4ccccd
 80018ec:	3e19999a 	.word	0x3e19999a
 80018f0:	be4ccccd 	.word	0xbe4ccccd
 80018f4:	be19999a 	.word	0xbe19999a
			  }
			  //counter Clockwise
			  else{
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);//
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <main+0x3e0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,(int)-myRobot.v_l_PWM);
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <main+0x3e4>)
 8001902:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001906:	eef1 7a67 	vneg.f32	s15, s15
 800190a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <main+0x3e0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	ee17 2a90 	vmov	r2, s15
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
			  }
			  //right motor
			  // clockwise
			  if(myRobot.v_r_PWM > 0){
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <main+0x3e4>)
 800191a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800191e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	dd0e      	ble.n	8001946 <main+0x396>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,(int)myRobot.v_r_PWM);//
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <main+0x3e4>)
 800192a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800192e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <main+0x3e0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	ee17 2a90 	vmov	r2, s15
 800193a:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <main+0x3e0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2200      	movs	r2, #0
 8001942:	641a      	str	r2, [r3, #64]	; 0x40
 8001944:	e679      	b.n	800163a <main+0x8a>
			  }
			  //counter Clokwise
			  else{
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);//
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <main+0x3e0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,(int)-1*myRobot.v_r_PWM);
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <main+0x3e4>)
 8001950:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001954:	eef1 7a67 	vneg.f32	s15, s15
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <main+0x3e0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001960:	ee17 2a90 	vmov	r2, s15
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
 8001966:	e668      	b.n	800163a <main+0x8a>
//			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, abs(myRobot.v_r_PWM));//
//			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);

		  }
		  else{
			  strcpy(myRobot.cmd,"STP");
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <main+0x3e8>)
 800196a:	4a0c      	ldr	r2, [pc, #48]	; (800199c <main+0x3ec>)
 800196c:	601a      	str	r2, [r3, #0]
//			  myRobot.theta = 0.0;
//			  init_Robot(&myRobot);
			  //left motor
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);//
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <main+0x3e0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <main+0x3e0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
			  //right motor
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);//
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <main+0x3e0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8001986:	4b02      	ldr	r3, [pc, #8]	; (8001990 <main+0x3e0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	641a      	str	r2, [r3, #64]	; 0x40
	  if(uart_flag == 1){
 800198e:	e654      	b.n	800163a <main+0x8a>
 8001990:	200002d4 	.word	0x200002d4
 8001994:	2000049c 	.word	0x2000049c
 8001998:	200004b8 	.word	0x200004b8
 800199c:	00505453 	.word	0x00505453

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	; 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	2230      	movs	r2, #48	; 0x30
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f005 fc49 	bl	8007246 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <SystemClock_Config+0xb4>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <SystemClock_Config+0xb4>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <SystemClock_Config+0xb4>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <SystemClock_Config+0xb8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <SystemClock_Config+0xb8>)
 80019ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <SystemClock_Config+0xb8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fc:	2302      	movs	r3, #2
 80019fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a04:	2310      	movs	r3, #16
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fdff 	bl	8003614 <HAL_RCC_OscConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a1c:	f000 fa74 	bl	8001f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a20:	230f      	movs	r3, #15
 8001a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 f862 	bl	8003b04 <HAL_RCC_ClockConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001a46:	f000 fa5f 	bl	8001f08 <Error_Handler>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3750      	adds	r7, #80	; 0x50
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000

08001a5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b096      	sub	sp, #88	; 0x58
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2220      	movs	r2, #32
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f005 fbd6 	bl	8007246 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a9a:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001a9c:	4a50      	ldr	r2, [pc, #320]	; (8001be0 <MX_TIM1_Init+0x184>)
 8001a9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001aa0:	4b4e      	ldr	r3, [pc, #312]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001aac:	4b4b      	ldr	r3, [pc, #300]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab4:	4b49      	ldr	r3, [pc, #292]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aba:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac0:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ac6:	4845      	ldr	r0, [pc, #276]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001ac8:	f002 f9fc 	bl	8003ec4 <HAL_TIM_Base_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ad2:	f000 fa19 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001adc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	483e      	ldr	r0, [pc, #248]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001ae4:	f002 fe90 	bl	8004808 <HAL_TIM_ConfigClockSource>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001aee:	f000 fa0b 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001af2:	483a      	ldr	r0, [pc, #232]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001af4:	f002 fa98 	bl	8004028 <HAL_TIM_PWM_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001afe:	f000 fa03 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4832      	ldr	r0, [pc, #200]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001b12:	f003 fa41 	bl	8004f98 <HAL_TIMEx_MasterConfigSynchronization>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b1c:	f000 f9f4 	bl	8001f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b20:	2360      	movs	r3, #96	; 0x60
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	2200      	movs	r2, #0
 8001b42:	4619      	mov	r1, r3
 8001b44:	4825      	ldr	r0, [pc, #148]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001b46:	f002 fd9d 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b50:	f000 f9da 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	2204      	movs	r2, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	481f      	ldr	r0, [pc, #124]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001b5e:	f002 fd91 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001b68:	f000 f9ce 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	2208      	movs	r2, #8
 8001b72:	4619      	mov	r1, r3
 8001b74:	4819      	ldr	r0, [pc, #100]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001b76:	f002 fd85 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001b80:	f000 f9c2 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	220c      	movs	r2, #12
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4813      	ldr	r0, [pc, #76]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001b8e:	f002 fd79 	bl	8004684 <HAL_TIM_PWM_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001b98:	f000 f9b6 	bl	8001f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001bc0:	f003 fa58 	bl	8005074 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001bca:	f000 f99d 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <MX_TIM1_Init+0x180>)
 8001bd0:	f000 fbd2 	bl	8002378 <HAL_TIM_MspPostInit>

}
 8001bd4:	bf00      	nop
 8001bd6:	3758      	adds	r7, #88	; 0x58
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200002d4 	.word	0x200002d4
 8001be0:	40010000 	.word	0x40010000

08001be4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	2224      	movs	r2, #36	; 0x24
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 fb27 	bl	8007246 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <MX_TIM2_Init+0xa4>)
 8001c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <MX_TIM2_Init+0xa4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <MX_TIM2_Init+0xa4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <MX_TIM2_Init+0xa4>)
 8001c16:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <MX_TIM2_Init+0xa4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <MX_TIM2_Init+0xa4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c30:	2301      	movs	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c40:	2301      	movs	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4619      	mov	r1, r3
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <MX_TIM2_Init+0xa4>)
 8001c54:	f002 faf2 	bl	800423c <HAL_TIM_Encoder_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c5e:	f000 f953 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <MX_TIM2_Init+0xa4>)
 8001c70:	f003 f992 	bl	8004f98 <HAL_TIMEx_MasterConfigSynchronization>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c7a:	f000 f945 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	3730      	adds	r7, #48	; 0x30
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000031c 	.word	0x2000031c

08001c8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <MX_TIM3_Init+0x94>)
 8001caa:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <MX_TIM3_Init+0x98>)
 8001cac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <MX_TIM3_Init+0x94>)
 8001cb0:	229f      	movs	r2, #159	; 0x9f
 8001cb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MX_TIM3_Init+0x94>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <MX_TIM3_Init+0x94>)
 8001cbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <MX_TIM3_Init+0x94>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_TIM3_Init+0x94>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cce:	4814      	ldr	r0, [pc, #80]	; (8001d20 <MX_TIM3_Init+0x94>)
 8001cd0:	f002 f8f8 	bl	8003ec4 <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001cda:	f000 f915 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <MX_TIM3_Init+0x94>)
 8001cec:	f002 fd8c 	bl	8004808 <HAL_TIM_ConfigClockSource>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001cf6:	f000 f907 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d02:	463b      	mov	r3, r7
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <MX_TIM3_Init+0x94>)
 8001d08:	f003 f946 	bl	8004f98 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d12:	f000 f8f9 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000364 	.word	0x20000364
 8001d24:	40000400 	.word	0x40000400

08001d28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	2224      	movs	r2, #36	; 0x24
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f005 fa85 	bl	8007246 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <MX_TIM5_Init+0xa0>)
 8001d46:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <MX_TIM5_Init+0xa4>)
 8001d48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <MX_TIM5_Init+0xa0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MX_TIM5_Init+0xa0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <MX_TIM5_Init+0xa0>)
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_TIM5_Init+0xa0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_TIM5_Init+0xa0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d72:	2301      	movs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d82:	2301      	movs	r3, #1
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	4619      	mov	r1, r3
 8001d94:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <MX_TIM5_Init+0xa0>)
 8001d96:	f002 fa51 	bl	800423c <HAL_TIM_Encoder_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001da0:	f000 f8b2 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_TIM5_Init+0xa0>)
 8001db2:	f003 f8f1 	bl	8004f98 <HAL_TIMEx_MasterConfigSynchronization>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001dbc:	f000 f8a4 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	3730      	adds	r7, #48	; 0x30
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200003ac 	.word	0x200003ac
 8001dcc:	40000c00 	.word	0x40000c00

08001dd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <MX_USART2_UART_Init+0x50>)
 8001dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001df6:	220c      	movs	r2, #12
 8001df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_USART2_UART_Init+0x4c>)
 8001e08:	f003 f99a 	bl	8005140 <HAL_UART_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e12:	f000 f879 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200003f4 	.word	0x200003f4
 8001e20:	40004400 	.word	0x40004400

08001e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_DMA_Init+0x3c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <MX_DMA_Init+0x3c>)
 8001e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_DMA_Init+0x3c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2011      	movs	r0, #17
 8001e4c:	f000 fe0b 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001e50:	2011      	movs	r0, #17
 8001e52:	f000 fe24 	bl	8002a9e <HAL_NVIC_EnableIRQ>

}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <MX_GPIO_Init+0x9c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <MX_GPIO_Init+0x9c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <MX_GPIO_Init+0x9c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <MX_GPIO_Init+0x9c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <MX_GPIO_Init+0x9c>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <MX_GPIO_Init+0x9c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_GPIO_Init+0x9c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <MX_GPIO_Init+0x9c>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_GPIO_Init+0x9c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE10_EN_DRIVER_GPIO_Port, PE10_EN_DRIVER_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed4:	480b      	ldr	r0, [pc, #44]	; (8001f04 <MX_GPIO_Init+0xa0>)
 8001ed6:	f001 fb83 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10_EN_DRIVER_Pin */
  GPIO_InitStruct.Pin = PE10_EN_DRIVER_Pin;
 8001eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PE10_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4804      	ldr	r0, [pc, #16]	; (8001f04 <MX_GPIO_Init+0xa0>)
 8001ef4:	f001 f9f0 	bl	80032d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ef8:	bf00      	nop
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40021000 	.word	0x40021000

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <Error_Handler+0x8>
 8001f12:	0000      	movs	r0, r0
 8001f14:	0000      	movs	r0, r0
	...

08001f18 <rad_to_degree>:
 *  Created on: Apr 1, 2024
 *      Author: Nghia
 */
#include "pid_module.h"
//convert unit
float rad_to_degree(float rad){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	ed87 0a01 	vstr	s0, [r7, #4]
	float degree = rad *(180/  3.14);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fb28 	bl	8000578 <__aeabi_f2d>
 8001f28:	a30b      	add	r3, pc, #44	; (adr r3, 8001f58 <rad_to_degree+0x40>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fb7b 	bl	8000628 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fe6d 	bl	8000c18 <__aeabi_d2f>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	60fb      	str	r3, [r7, #12]
	return degree;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	ee07 3a90 	vmov	s15, r3
}
 8001f48:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	f3af 8000 	nop.w
 8001f58:	61d59ae7 	.word	0x61d59ae7
 8001f5c:	404ca994 	.word	0x404ca994

08001f60 <mps_to_PWM>:
	return (float)rpm*pi*d/60;
}
float rpm_to_pwm(float rpm){
	return (float)rpm*1000/80.167;
}
float mps_to_PWM(float mps){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	ed87 0a01 	vstr	s0, [r7, #4]
	return (float) mps*(60/(3.14*d))*(1000/80.167);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fb04 	bl	8000578 <__aeabi_f2d>
 8001f70:	a30d      	add	r3, pc, #52	; (adr r3, 8001fa8 <mps_to_PWM+0x48>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb57 	bl	8000628 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	a30b      	add	r3, pc, #44	; (adr r3, 8001fb0 <mps_to_PWM+0x50>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fb4e 	bl	8000628 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fe40 	bl	8000c18 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	ee07 3a90 	vmov	s15, r3
}
 8001f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	a12d0766 	.word	0xa12d0766
 8001fac:	40725f93 	.word	0x40725f93
 8001fb0:	f6f74f9a 	.word	0xf6f74f9a
 8001fb4:	4028f2aa 	.word	0x4028f2aa

08001fb8 <pid_set_Kp_Ki_Kd>:

// initial pid
void pid_set_Kp_Ki_Kd(PID_handleTypedef* hpid,float Kp,float Ki,float Kd, float delta_t){
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6178      	str	r0, [r7, #20]
 8001fc0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001fc4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001fc8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001fcc:	edc7 1a01 	vstr	s3, [r7, #4]
    hpid->Kp = Kp;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	601a      	str	r2, [r3, #0]
    hpid->Ki = Ki;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
    hpid->Kd = Kd;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	609a      	str	r2, [r3, #8]
    hpid->delta_t = delta_t;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <calculate_pid_output>:

float calculate_pid_output(PID_handleTypedef* hpid){
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    hpid->error = (hpid->setpoint -hpid->current);//rad
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	ed93 7a04 	vldr	s14, [r3, #16]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	edd3 7a05 	vldr	s15, [r3, #20]
 8002008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	edc3 7a06 	vstr	s15, [r3, #24]
    hpid->integral += hpid->error;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	ed93 7a08 	vldr	s14, [r3, #32]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	edd3 7a06 	vldr	s15, [r3, #24]
 800201e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	edc3 7a08 	vstr	s15, [r3, #32]
    hpid->derivative = hpid->error - hpid->pre_error;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	ed93 7a06 	vldr	s14, [r3, #24]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	edd3 7a07 	vldr	s15, [r3, #28]
 8002034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    float output_pid = (hpid->Kp*hpid->error) + (hpid->Ki*hpid->integral)+ (hpid->Kd*hpid->derivative);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	ed93 7a00 	vldr	s14, [r3]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	edd3 7a06 	vldr	s15, [r3, #24]
 800204a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	edd3 6a01 	vldr	s13, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	edd3 7a08 	vldr	s15, [r3, #32]
 800205a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	edd3 6a02 	vldr	s13, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800206e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002076:	edc7 7a03 	vstr	s15, [r7, #12]
    hpid->pre_error = hpid->error;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	61da      	str	r2, [r3, #28]
//    return degree_to_rad(ouput_pid);//rad/s
    return output_pid;//0.8
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	ee07 3a90 	vmov	s15, r3
}
 8002088:	eeb0 0a67 	vmov.f32	s0, s15
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <cal_speed_left_motor>:

float cal_speed_left_motor(float pid_output,float v_speed){
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	ed87 0a01 	vstr	s0, [r7, #4]
 80020a2:	edc7 0a00 	vstr	s1, [r7]
	return (float)(2*v_speed - pid_output*L)/(2) ;
 80020a6:	edd7 7a00 	vldr	s15, [r7]
 80020aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ae:	ee17 0a90 	vmov	r0, s15
 80020b2:	f7fe fa61 	bl	8000578 <__aeabi_f2d>
 80020b6:	4604      	mov	r4, r0
 80020b8:	460d      	mov	r5, r1
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fa5c 	bl	8000578 <__aeabi_f2d>
 80020c0:	a30f      	add	r3, pc, #60	; (adr r3, 8002100 <cal_speed_left_motor+0x68>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe faaf 	bl	8000628 <__aeabi_dmul>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4620      	mov	r0, r4
 80020d0:	4629      	mov	r1, r5
 80020d2:	f7fe f8f1 	bl	80002b8 <__aeabi_dsub>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fd9b 	bl	8000c18 <__aeabi_d2f>
 80020e2:	ee06 0a90 	vmov	s13, r0
 80020e6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80020ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ee:	eef0 7a47 	vmov.f32	s15, s14
}
 80020f2:	eeb0 0a67 	vmov.f32	s0, s15
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bdb0      	pop	{r4, r5, r7, pc}
 80020fc:	f3af 8000 	nop.w
 8002100:	70a3d70a 	.word	0x70a3d70a
 8002104:	3fc70a3d 	.word	0x3fc70a3d

08002108 <cal_speed_right_motor>:
float cal_speed_right_motor(float pid_output,float v_speed){
 8002108:	b5b0      	push	{r4, r5, r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002112:	edc7 0a00 	vstr	s1, [r7]
	return (float)(2*v_speed + pid_output*L)/(2) ;
 8002116:	edd7 7a00 	vldr	s15, [r7]
 800211a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800211e:	ee17 0a90 	vmov	r0, s15
 8002122:	f7fe fa29 	bl	8000578 <__aeabi_f2d>
 8002126:	4604      	mov	r4, r0
 8002128:	460d      	mov	r5, r1
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fa24 	bl	8000578 <__aeabi_f2d>
 8002130:	a30f      	add	r3, pc, #60	; (adr r3, 8002170 <cal_speed_right_motor+0x68>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe fa77 	bl	8000628 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4620      	mov	r0, r4
 8002140:	4629      	mov	r1, r5
 8002142:	f7fe f8bb 	bl	80002bc <__adddf3>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fd63 	bl	8000c18 <__aeabi_d2f>
 8002152:	ee06 0a90 	vmov	s13, r0
 8002156:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800215a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800215e:	eef0 7a47 	vmov.f32	s15, s14
}
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bdb0      	pop	{r4, r5, r7, pc}
 800216c:	f3af 8000 	nop.w
 8002170:	70a3d70a 	.word	0x70a3d70a
 8002174:	3fc70a3d 	.word	0x3fc70a3d

08002178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_MspInit+0x4c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <HAL_MspInit+0x4c>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218c:	6453      	str	r3, [r2, #68]	; 0x44
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_MspInit+0x4c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_MspInit+0x4c>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_MspInit+0x4c>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_MspInit+0x4c>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a18      	ldr	r2, [pc, #96]	; (8002238 <HAL_TIM_Base_MspInit+0x70>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_TIM_Base_MspInit+0x74>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a16      	ldr	r2, [pc, #88]	; (800223c <HAL_TIM_Base_MspInit+0x74>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_TIM_Base_MspInit+0x74>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021f6:	e01a      	b.n	800222e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a10      	ldr	r2, [pc, #64]	; (8002240 <HAL_TIM_Base_MspInit+0x78>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d115      	bne.n	800222e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_TIM_Base_MspInit+0x74>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <HAL_TIM_Base_MspInit+0x74>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_TIM_Base_MspInit+0x74>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2101      	movs	r1, #1
 8002222:	201d      	movs	r0, #29
 8002224:	f000 fc1f 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002228:	201d      	movs	r0, #29
 800222a:	f000 fc38 	bl	8002a9e <HAL_NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40010000 	.word	0x40010000
 800223c:	40023800 	.word	0x40023800
 8002240:	40000400 	.word	0x40000400

08002244 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08c      	sub	sp, #48	; 0x30
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002264:	d14a      	bne.n	80022fc <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a3e      	ldr	r2, [pc, #248]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	4b38      	ldr	r3, [pc, #224]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a37      	ldr	r2, [pc, #220]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a30      	ldr	r2, [pc, #192]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022ba:	2320      	movs	r3, #32
 80022bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022ca:	2301      	movs	r3, #1
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ce:	f107 031c 	add.w	r3, r7, #28
 80022d2:	4619      	mov	r1, r3
 80022d4:	4825      	ldr	r0, [pc, #148]	; (800236c <HAL_TIM_Encoder_MspInit+0x128>)
 80022d6:	f000 ffff 	bl	80032d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022da:	2308      	movs	r3, #8
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022ea:	2301      	movs	r3, #1
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ee:	f107 031c 	add.w	r3, r7, #28
 80022f2:	4619      	mov	r1, r3
 80022f4:	481e      	ldr	r0, [pc, #120]	; (8002370 <HAL_TIM_Encoder_MspInit+0x12c>)
 80022f6:	f000 ffef 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022fa:	e030      	b.n	800235e <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM5)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1c      	ldr	r2, [pc, #112]	; (8002374 <HAL_TIM_Encoder_MspInit+0x130>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d12b      	bne.n	800235e <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 8002310:	f043 0308 	orr.w	r3, r3, #8
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_TIM_Encoder_MspInit+0x124>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800233e:	2303      	movs	r3, #3
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800234e:	2302      	movs	r3, #2
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <HAL_TIM_Encoder_MspInit+0x128>)
 800235a:	f000 ffbd 	bl	80032d8 <HAL_GPIO_Init>
}
 800235e:	bf00      	nop
 8002360:	3730      	adds	r7, #48	; 0x30
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40020000 	.word	0x40020000
 8002370:	40020400 	.word	0x40020400
 8002374:	40000c00 	.word	0x40000c00

08002378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <HAL_TIM_MspPostInit+0x68>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d11e      	bne.n	80023d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_TIM_MspPostInit+0x6c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_TIM_MspPostInit+0x6c>)
 80023a4:	f043 0310 	orr.w	r3, r3, #16
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_TIM_MspPostInit+0x6c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80023b6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80023ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	4619      	mov	r1, r3
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <HAL_TIM_MspPostInit+0x70>)
 80023d4:	f000 ff80 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40010000 	.word	0x40010000
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40021000 	.word	0x40021000

080023ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a34      	ldr	r2, [pc, #208]	; (80024dc <HAL_UART_MspInit+0xf0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d161      	bne.n	80024d2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_UART_MspInit+0xf4>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <HAL_UART_MspInit+0xf4>)
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_UART_MspInit+0xf4>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <HAL_UART_MspInit+0xf4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <HAL_UART_MspInit+0xf4>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <HAL_UART_MspInit+0xf4>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002446:	230c      	movs	r3, #12
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002456:	2307      	movs	r3, #7
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	4820      	ldr	r0, [pc, #128]	; (80024e4 <HAL_UART_MspInit+0xf8>)
 8002462:	f000 ff39 	bl	80032d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 8002468:	4a20      	ldr	r2, [pc, #128]	; (80024ec <HAL_UART_MspInit+0x100>)
 800246a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 800246e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002472:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 8002482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002486:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002488:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024a6:	4810      	ldr	r0, [pc, #64]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 80024a8:	f000 fb14 	bl	8002ad4 <HAL_DMA_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80024b2:	f7ff fd29 	bl	8001f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_UART_MspInit+0xfc>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	2026      	movs	r0, #38	; 0x26
 80024c8:	f000 facd 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024cc:	2026      	movs	r0, #38	; 0x26
 80024ce:	f000 fae6 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024d2:	bf00      	nop
 80024d4:	3728      	adds	r7, #40	; 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40004400 	.word	0x40004400
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	2000043c 	.word	0x2000043c
 80024ec:	400260a0 	.word	0x400260a0

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024f4:	e7fe      	b.n	80024f4 <NMI_Handler+0x4>

080024f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fa:	e7fe      	b.n	80024fa <HardFault_Handler+0x4>

080024fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <MemManage_Handler+0x4>

08002502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <BusFault_Handler+0x4>

08002508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <UsageFault_Handler+0x4>

0800250e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253c:	f000 f974 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <DMA1_Stream6_IRQHandler+0x10>)
 800254a:	f000 fc5b 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000043c 	.word	0x2000043c

08002558 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <TIM3_IRQHandler+0x10>)
 800255e:	f001 ffa1 	bl	80044a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000364 	.word	0x20000364

0800256c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <USART2_IRQHandler+0x10>)
 8002572:	f002 fecb 	bl	800530c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200003f4 	.word	0x200003f4

08002580 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return 1;
 8002584:	2301      	movs	r3, #1
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_kill>:

int _kill(int pid, int sig)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800259a:	f004 fea7 	bl	80072ec <__errno>
 800259e:	4603      	mov	r3, r0
 80025a0:	2216      	movs	r2, #22
 80025a2:	601a      	str	r2, [r3, #0]
  return -1;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_exit>:

void _exit (int status)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffe7 	bl	8002590 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025c2:	e7fe      	b.n	80025c2 <_exit+0x12>

080025c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e00a      	b.n	80025ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025d6:	f3af 8000 	nop.w
 80025da:	4601      	mov	r1, r0
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	60ba      	str	r2, [r7, #8]
 80025e2:	b2ca      	uxtb	r2, r1
 80025e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbf0      	blt.n	80025d6 <_read+0x12>
  }

  return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e009      	b.n	8002624 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	60ba      	str	r2, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	dbf1      	blt.n	8002610 <_write+0x12>
  }
  return len;
 800262c:	687b      	ldr	r3, [r7, #4]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_close>:

int _close(int file)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800265e:	605a      	str	r2, [r3, #4]
  return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_isatty>:

int _isatty(int file)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <_sbrk+0x5c>)
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <_sbrk+0x60>)
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <_sbrk+0x64>)
 80026be:	4a12      	ldr	r2, [pc, #72]	; (8002708 <_sbrk+0x68>)
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d207      	bcs.n	80026e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d0:	f004 fe0c 	bl	80072ec <__errno>
 80026d4:	4603      	mov	r3, r0
 80026d6:	220c      	movs	r2, #12
 80026d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e009      	b.n	80026f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <_sbrk+0x64>)
 80026f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20020000 	.word	0x20020000
 8002700:	00000400 	.word	0x00000400
 8002704:	20000508 	.word	0x20000508
 8002708:	20000660 	.word	0x20000660

0800270c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <SystemInit+0x20>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <SystemInit+0x20>)
 8002718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800271c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002768 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002734:	f7ff ffea 	bl	800270c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002738:	480c      	ldr	r0, [pc, #48]	; (800276c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800273a:	490d      	ldr	r1, [pc, #52]	; (8002770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002740:	e002      	b.n	8002748 <LoopCopyDataInit>

08002742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002746:	3304      	adds	r3, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800274c:	d3f9      	bcc.n	8002742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002750:	4c0a      	ldr	r4, [pc, #40]	; (800277c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002754:	e001      	b.n	800275a <LoopFillZerobss>

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002758:	3204      	adds	r2, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275e:	f004 fdcb 	bl	80072f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002762:	f7fe ff25 	bl	80015b0 <main>
  bx  lr    
 8002766:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002768:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800276c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002770:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002774:	0800d230 	.word	0x0800d230
  ldr r2, =_sbss
 8002778:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800277c:	2000065c 	.word	0x2000065c

08002780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC_IRQHandler>
	...

08002784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <HAL_Init+0x40>)
 800278e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_Init+0x40>)
 800279a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_Init+0x40>)
 80027a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f000 f94f 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b2:	200f      	movs	r0, #15
 80027b4:	f000 f808 	bl	80027c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b8:	f7ff fcde 	bl	8002178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00

080027c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_InitTick+0x54>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_InitTick+0x58>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f967 	bl	8002aba <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00e      	b.n	8002814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0f      	cmp	r3, #15
 80027fa:	d80a      	bhi.n	8002812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fc:	2200      	movs	r2, #0
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f000 f92f 	bl	8002a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_InitTick+0x5c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000000 	.word	0x20000000
 8002820:	20000008 	.word	0x20000008
 8002824:	20000004 	.word	0x20000004

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000008 	.word	0x20000008
 800284c:	2000050c 	.word	0x2000050c

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	2000050c 	.word	0x2000050c

08002868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff ffee 	bl	8002850 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d005      	beq.n	800288e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_Delay+0x44>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800288e:	bf00      	nop
 8002890:	f7ff ffde 	bl	8002850 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d8f7      	bhi.n	8002890 <HAL_Delay+0x28>
  {
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000008 	.word	0x20000008

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60d3      	str	r3, [r2, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	; (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d301      	bcc.n	8002a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <SysTick_Config+0x40>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f7ff ff8e 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <SysTick_Config+0x40>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SysTick_Config+0x40>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff29 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff3e 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff8e 	bl	80029a4 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff5d 	bl	8002950 <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff31 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffa2 	bl	8002a0c <SysTick_Config>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff feb6 	bl	8002850 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e099      	b.n	8002c24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b10:	e00f      	b.n	8002b32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b12:	f7ff fe9d 	bl	8002850 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b05      	cmp	r3, #5
 8002b1e:	d908      	bls.n	8002b32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2203      	movs	r2, #3
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e078      	b.n	8002c24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e8      	bne.n	8002b12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4b38      	ldr	r3, [pc, #224]	; (8002c2c <HAL_DMA_Init+0x158>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d107      	bne.n	8002b9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4313      	orrs	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f023 0307 	bic.w	r3, r3, #7
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d117      	bne.n	8002bf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fb01 	bl	80031e0 <DMA_CheckFifoParam>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e016      	b.n	8002c24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fab8 	bl	8003174 <DMA_CalcBaseAndBitshift>
 8002c04:	4603      	mov	r3, r0
 8002c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0c:	223f      	movs	r2, #63	; 0x3f
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	f010803f 	.word	0xf010803f

08002c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_DMA_Start_IT+0x26>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e040      	b.n	8002cd8 <HAL_DMA_Start_IT+0xa8>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d12f      	bne.n	8002cca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fa4a 	bl	8003118 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	223f      	movs	r2, #63	; 0x3f
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0216 	orr.w	r2, r2, #22
 8002c9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0208 	orr.w	r2, r2, #8
 8002cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e005      	b.n	8002cd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cee:	f7ff fdaf 	bl	8002850 <HAL_GetTick>
 8002cf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d008      	beq.n	8002d12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2280      	movs	r2, #128	; 0x80
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e052      	b.n	8002db8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0216 	bic.w	r2, r2, #22
 8002d20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <HAL_DMA_Abort+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0208 	bic.w	r2, r2, #8
 8002d50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d62:	e013      	b.n	8002d8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d64:	f7ff fd74 	bl	8002850 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d90c      	bls.n	8002d8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e015      	b.n	8002db8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e4      	bne.n	8002d64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	223f      	movs	r2, #63	; 0x3f
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d004      	beq.n	8002dde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00c      	b.n	8002df8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2205      	movs	r2, #5
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e10:	4b8e      	ldr	r3, [pc, #568]	; (800304c <HAL_DMA_IRQHandler+0x248>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a8e      	ldr	r2, [pc, #568]	; (8003050 <HAL_DMA_IRQHandler+0x24c>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	2208      	movs	r2, #8
 8002e30:	409a      	lsls	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01a      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	2201      	movs	r2, #1
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d012      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	2201      	movs	r2, #1
 8002e94:	409a      	lsls	r2, r3
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f043 0202 	orr.w	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	2204      	movs	r2, #4
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d012      	beq.n	8002edc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	2204      	movs	r2, #4
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	f043 0204 	orr.w	r2, r3, #4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d043      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d03c      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	2210      	movs	r2, #16
 8002f00:	409a      	lsls	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d018      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d108      	bne.n	8002f34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d024      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
 8002f32:	e01f      	b.n	8002f74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01b      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
 8002f44:	e016      	b.n	8002f74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0208 	bic.w	r2, r2, #8
 8002f62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	2220      	movs	r2, #32
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 808f 	beq.w	80030a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8087 	beq.w	80030a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d136      	bne.n	800301c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0216 	bic.w	r2, r2, #22
 8002fbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <HAL_DMA_IRQHandler+0x1da>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0208 	bic.w	r2, r2, #8
 8002fec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	223f      	movs	r2, #63	; 0x3f
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300e:	2b00      	cmp	r3, #0
 8003010:	d07e      	beq.n	8003110 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
        }
        return;
 800301a:	e079      	b.n	8003110 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01d      	beq.n	8003066 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	2b00      	cmp	r3, #0
 800303e:	d031      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
 8003048:	e02c      	b.n	80030a4 <HAL_DMA_IRQHandler+0x2a0>
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000
 8003050:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d023      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
 8003064:	e01e      	b.n	80030a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10f      	bne.n	8003094 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0210 	bic.w	r2, r2, #16
 8003082:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d032      	beq.n	8003112 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d022      	beq.n	80030fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2205      	movs	r2, #5
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3301      	adds	r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d307      	bcc.n	80030ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f2      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x2cc>
 80030ea:	e000      	b.n	80030ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
 800310e:	e000      	b.n	8003112 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003110:	bf00      	nop
    }
  }
}
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003134:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d108      	bne.n	8003158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003156:	e007      	b.n	8003168 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	3b10      	subs	r3, #16
 8003184:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800318e:	4a13      	ldr	r2, [pc, #76]	; (80031dc <DMA_CalcBaseAndBitshift+0x68>)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d909      	bls.n	80031b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031aa:	f023 0303 	bic.w	r3, r3, #3
 80031ae:	1d1a      	adds	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	659a      	str	r2, [r3, #88]	; 0x58
 80031b4:	e007      	b.n	80031c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	aaaaaaab 	.word	0xaaaaaaab
 80031dc:	0800cb84 	.word	0x0800cb84

080031e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11f      	bne.n	800323a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d856      	bhi.n	80032ae <DMA_CheckFifoParam+0xce>
 8003200:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <DMA_CheckFifoParam+0x28>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	08003219 	.word	0x08003219
 800320c:	0800322b 	.word	0x0800322b
 8003210:	08003219 	.word	0x08003219
 8003214:	080032af 	.word	0x080032af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d046      	beq.n	80032b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003228:	e043      	b.n	80032b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003232:	d140      	bne.n	80032b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003238:	e03d      	b.n	80032b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003242:	d121      	bne.n	8003288 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d837      	bhi.n	80032ba <DMA_CheckFifoParam+0xda>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <DMA_CheckFifoParam+0x70>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	08003261 	.word	0x08003261
 8003254:	08003267 	.word	0x08003267
 8003258:	08003261 	.word	0x08003261
 800325c:	08003279 	.word	0x08003279
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      break;
 8003264:	e030      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d025      	beq.n	80032be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003276:	e022      	b.n	80032be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003280:	d11f      	bne.n	80032c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003286:	e01c      	b.n	80032c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d903      	bls.n	8003296 <DMA_CheckFifoParam+0xb6>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d003      	beq.n	800329c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003294:	e018      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
      break;
 800329a:	e015      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      break;
 80032ac:	e00b      	b.n	80032c6 <DMA_CheckFifoParam+0xe6>
      break;
 80032ae:	bf00      	nop
 80032b0:	e00a      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032b2:	bf00      	nop
 80032b4:	e008      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032b6:	bf00      	nop
 80032b8:	e006      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ba:	bf00      	nop
 80032bc:	e004      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032c6:	bf00      	nop
    }
  } 
  
  return status; 
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	e159      	b.n	80035a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f4:	2201      	movs	r2, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	f040 8148 	bne.w	80035a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d005      	beq.n	800332a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003326:	2b02      	cmp	r3, #2
 8003328:	d130      	bne.n	800338c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003360:	2201      	movs	r2, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 0201 	and.w	r2, r3, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b03      	cmp	r3, #3
 8003396:	d017      	beq.n	80033c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d123      	bne.n	800341c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	69b9      	ldr	r1, [r7, #24]
 8003418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a2 	beq.w	80035a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <HAL_GPIO_Init+0x2e8>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	4a56      	ldr	r2, [pc, #344]	; (80035c0 <HAL_GPIO_Init+0x2e8>)
 8003468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800346c:	6453      	str	r3, [r2, #68]	; 0x44
 800346e:	4b54      	ldr	r3, [pc, #336]	; (80035c0 <HAL_GPIO_Init+0x2e8>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800347a:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_GPIO_Init+0x2ec>)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3302      	adds	r3, #2
 8003482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	220f      	movs	r2, #15
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a49      	ldr	r2, [pc, #292]	; (80035c8 <HAL_GPIO_Init+0x2f0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d019      	beq.n	80034da <HAL_GPIO_Init+0x202>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a48      	ldr	r2, [pc, #288]	; (80035cc <HAL_GPIO_Init+0x2f4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_GPIO_Init+0x1fe>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a47      	ldr	r2, [pc, #284]	; (80035d0 <HAL_GPIO_Init+0x2f8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00d      	beq.n	80034d2 <HAL_GPIO_Init+0x1fa>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a46      	ldr	r2, [pc, #280]	; (80035d4 <HAL_GPIO_Init+0x2fc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d007      	beq.n	80034ce <HAL_GPIO_Init+0x1f6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a45      	ldr	r2, [pc, #276]	; (80035d8 <HAL_GPIO_Init+0x300>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_GPIO_Init+0x1f2>
 80034c6:	2304      	movs	r3, #4
 80034c8:	e008      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034ca:	2307      	movs	r3, #7
 80034cc:	e006      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034ce:	2303      	movs	r3, #3
 80034d0:	e004      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e002      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034da:	2300      	movs	r3, #0
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	f002 0203 	and.w	r2, r2, #3
 80034e2:	0092      	lsls	r2, r2, #2
 80034e4:	4093      	lsls	r3, r2
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034ec:	4935      	ldr	r1, [pc, #212]	; (80035c4 <HAL_GPIO_Init+0x2ec>)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_GPIO_Init+0x304>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800351e:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003524:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003548:	4a24      	ldr	r2, [pc, #144]	; (80035dc <HAL_GPIO_Init+0x304>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800354e:	4b23      	ldr	r3, [pc, #140]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003572:	4a1a      	ldr	r2, [pc, #104]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_GPIO_Init+0x304>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800359c:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <HAL_GPIO_Init+0x304>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3301      	adds	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b0f      	cmp	r3, #15
 80035ac:	f67f aea2 	bls.w	80032f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	3724      	adds	r7, #36	; 0x24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40013800 	.word	0x40013800
 80035c8:	40020000 	.word	0x40020000
 80035cc:	40020400 	.word	0x40020400
 80035d0:	40020800 	.word	0x40020800
 80035d4:	40020c00 	.word	0x40020c00
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40013c00 	.word	0x40013c00

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035fc:	e003      	b.n	8003606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	041a      	lsls	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	619a      	str	r2, [r3, #24]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e267      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d075      	beq.n	800371e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003632:	4b88      	ldr	r3, [pc, #544]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b04      	cmp	r3, #4
 800363c:	d00c      	beq.n	8003658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363e:	4b85      	ldr	r3, [pc, #532]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003646:	2b08      	cmp	r3, #8
 8003648:	d112      	bne.n	8003670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364a:	4b82      	ldr	r3, [pc, #520]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003656:	d10b      	bne.n	8003670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	4b7e      	ldr	r3, [pc, #504]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d05b      	beq.n	800371c <HAL_RCC_OscConfig+0x108>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d157      	bne.n	800371c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e242      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d106      	bne.n	8003688 <HAL_RCC_OscConfig+0x74>
 800367a:	4b76      	ldr	r3, [pc, #472]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a75      	ldr	r2, [pc, #468]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e01d      	b.n	80036c4 <HAL_RCC_OscConfig+0xb0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x98>
 8003692:	4b70      	ldr	r3, [pc, #448]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a6f      	ldr	r2, [pc, #444]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b6d      	ldr	r3, [pc, #436]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6c      	ldr	r2, [pc, #432]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0xb0>
 80036ac:	4b69      	ldr	r3, [pc, #420]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a68      	ldr	r2, [pc, #416]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b66      	ldr	r3, [pc, #408]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a65      	ldr	r2, [pc, #404]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80036be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7ff f8c0 	bl	8002850 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d4:	f7ff f8bc 	bl	8002850 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e207      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b5b      	ldr	r3, [pc, #364]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0xc0>
 80036f2:	e014      	b.n	800371e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7ff f8ac 	bl	8002850 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fc:	f7ff f8a8 	bl	8002850 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e1f3      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	4b51      	ldr	r3, [pc, #324]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0xe8>
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d063      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800372a:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800373e:	2b08      	cmp	r3, #8
 8003740:	d11c      	bne.n	800377c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003742:	4b44      	ldr	r3, [pc, #272]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d116      	bne.n	800377c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	4b41      	ldr	r3, [pc, #260]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x152>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e1c7      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4937      	ldr	r1, [pc, #220]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377a:	e03a      	b.n	80037f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003784:	4b34      	ldr	r3, [pc, #208]	; (8003858 <HAL_RCC_OscConfig+0x244>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7ff f861 	bl	8002850 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003792:	f7ff f85d 	bl	8002850 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e1a8      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b0:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4925      	ldr	r1, [pc, #148]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
 80037c4:	e015      	b.n	80037f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c6:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HAL_RCC_OscConfig+0x244>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7ff f840 	bl	8002850 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d4:	f7ff f83c 	bl	8002850 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e187      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d036      	beq.n	800386c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <HAL_RCC_OscConfig+0x248>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7ff f820 	bl	8002850 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003814:	f7ff f81c 	bl	8002850 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e167      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_OscConfig+0x240>)
 8003828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x200>
 8003832:	e01b      	b.n	800386c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCC_OscConfig+0x248>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383a:	f7ff f809 	bl	8002850 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003840:	e00e      	b.n	8003860 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003842:	f7ff f805 	bl	8002850 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d907      	bls.n	8003860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e150      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
 8003854:	40023800 	.word	0x40023800
 8003858:	42470000 	.word	0x42470000
 800385c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003860:	4b88      	ldr	r3, [pc, #544]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ea      	bne.n	8003842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8097 	beq.w	80039a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387e:	4b81      	ldr	r3, [pc, #516]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10f      	bne.n	80038aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	4b7d      	ldr	r3, [pc, #500]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4a7c      	ldr	r2, [pc, #496]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003898:	6413      	str	r3, [r2, #64]	; 0x40
 800389a:	4b7a      	ldr	r3, [pc, #488]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a6:	2301      	movs	r3, #1
 80038a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038aa:	4b77      	ldr	r3, [pc, #476]	; (8003a88 <HAL_RCC_OscConfig+0x474>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d118      	bne.n	80038e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b6:	4b74      	ldr	r3, [pc, #464]	; (8003a88 <HAL_RCC_OscConfig+0x474>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a73      	ldr	r2, [pc, #460]	; (8003a88 <HAL_RCC_OscConfig+0x474>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c2:	f7fe ffc5 	bl	8002850 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ca:	f7fe ffc1 	bl	8002850 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e10c      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	4b6a      	ldr	r3, [pc, #424]	; (8003a88 <HAL_RCC_OscConfig+0x474>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_OscConfig+0x2ea>
 80038f0:	4b64      	ldr	r3, [pc, #400]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a63      	ldr	r2, [pc, #396]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
 80038fc:	e01c      	b.n	8003938 <HAL_RCC_OscConfig+0x324>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b05      	cmp	r3, #5
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0x30c>
 8003906:	4b5f      	ldr	r3, [pc, #380]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	4a5e      	ldr	r2, [pc, #376]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	6713      	str	r3, [r2, #112]	; 0x70
 8003912:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a5b      	ldr	r2, [pc, #364]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0x324>
 8003920:	4b58      	ldr	r3, [pc, #352]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	4a57      	ldr	r2, [pc, #348]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	; 0x70
 800392c:	4b55      	ldr	r3, [pc, #340]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	4a54      	ldr	r2, [pc, #336]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003932:	f023 0304 	bic.w	r3, r3, #4
 8003936:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d015      	beq.n	800396c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fe ff86 	bl	8002850 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003946:	e00a      	b.n	800395e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003948:	f7fe ff82 	bl	8002850 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0cb      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395e:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0ee      	beq.n	8003948 <HAL_RCC_OscConfig+0x334>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396c:	f7fe ff70 	bl	8002850 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003972:	e00a      	b.n	800398a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fe ff6c 	bl	8002850 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e0b5      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398a:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1ee      	bne.n	8003974 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d105      	bne.n	80039a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399c:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 80039a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80a1 	beq.w	8003af4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039b2:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d05c      	beq.n	8003a78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d141      	bne.n	8003a4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c6:	4b31      	ldr	r3, [pc, #196]	; (8003a8c <HAL_RCC_OscConfig+0x478>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fe ff40 	bl	8002850 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fe ff3c 	bl	8002850 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e087      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	4b27      	ldr	r3, [pc, #156]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	041b      	lsls	r3, r3, #16
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	061b      	lsls	r3, r3, #24
 8003a16:	491b      	ldr	r1, [pc, #108]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <HAL_RCC_OscConfig+0x478>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fe ff15 	bl	8002850 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2a:	f7fe ff11 	bl	8002850 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e05c      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x416>
 8003a48:	e054      	b.n	8003af4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4a:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <HAL_RCC_OscConfig+0x478>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fe fefe 	bl	8002850 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a58:	f7fe fefa 	bl	8002850 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e045      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x444>
 8003a76:	e03d      	b.n	8003af4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e038      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a90:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_RCC_OscConfig+0x4ec>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d028      	beq.n	8003af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d121      	bne.n	8003af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d11a      	bne.n	8003af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d111      	bne.n	8003af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800

08003b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0cc      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b68      	ldr	r3, [pc, #416]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d90c      	bls.n	8003b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b65      	ldr	r3, [pc, #404]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2e:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0b8      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d020      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b58:	4b59      	ldr	r3, [pc, #356]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	4a58      	ldr	r2, [pc, #352]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b70:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4a52      	ldr	r2, [pc, #328]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b7c:	4b50      	ldr	r3, [pc, #320]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	494d      	ldr	r1, [pc, #308]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d044      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d107      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d119      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e07f      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	4b3f      	ldr	r3, [pc, #252]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e06f      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd2:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e067      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4934      	ldr	r1, [pc, #208]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf4:	f7fe fe2c 	bl	8002850 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fe fe28 	bl	8002850 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e04f      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c24:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d20c      	bcs.n	8003c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e032      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c58:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4916      	ldr	r1, [pc, #88]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	490e      	ldr	r1, [pc, #56]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c8a:	f000 f821 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	490a      	ldr	r1, [pc, #40]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c9c:	5ccb      	ldrb	r3, [r1, r3]
 8003c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fd8c 	bl	80027c8 <HAL_InitTick>

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023c00 	.word	0x40023c00
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	0800cb6c 	.word	0x0800cb6c
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	20000004 	.word	0x20000004

08003cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd4:	b090      	sub	sp, #64	; 0x40
 8003cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
 8003cdc:	2300      	movs	r3, #0
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce8:	4b59      	ldr	r3, [pc, #356]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d00d      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x40>
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	f200 80a1 	bhi.w	8003e3c <HAL_RCC_GetSysClockFreq+0x16c>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x34>
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d003      	beq.n	8003d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d02:	e09b      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d08:	e09b      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d0a:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d0e:	e098      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d10:	4b4f      	ldr	r3, [pc, #316]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d1a:	4b4d      	ldr	r3, [pc, #308]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d028      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d26:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	099b      	lsrs	r3, r3, #6
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	623b      	str	r3, [r7, #32]
 8003d30:	627a      	str	r2, [r7, #36]	; 0x24
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d3c:	fb03 f201 	mul.w	r2, r3, r1
 8003d40:	2300      	movs	r3, #0
 8003d42:	fb00 f303 	mul.w	r3, r0, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	4a43      	ldr	r2, [pc, #268]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d4a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d50:	460a      	mov	r2, r1
 8003d52:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d56:	4413      	add	r3, r2
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	61fa      	str	r2, [r7, #28]
 8003d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d6a:	f7fc ffa5 	bl	8000cb8 <__aeabi_uldivmod>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4613      	mov	r3, r2
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d76:	e053      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d78:	4b35      	ldr	r3, [pc, #212]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	099b      	lsrs	r3, r3, #6
 8003d7e:	2200      	movs	r2, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	617a      	str	r2, [r7, #20]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d8a:	f04f 0b00 	mov.w	fp, #0
 8003d8e:	4652      	mov	r2, sl
 8003d90:	465b      	mov	r3, fp
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	0159      	lsls	r1, r3, #5
 8003d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da0:	0150      	lsls	r0, r2, #5
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	ebb2 080a 	subs.w	r8, r2, sl
 8003daa:	eb63 090b 	sbc.w	r9, r3, fp
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dc2:	ebb2 0408 	subs.w	r4, r2, r8
 8003dc6:	eb63 0509 	sbc.w	r5, r3, r9
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	00eb      	lsls	r3, r5, #3
 8003dd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd8:	00e2      	lsls	r2, r4, #3
 8003dda:	4614      	mov	r4, r2
 8003ddc:	461d      	mov	r5, r3
 8003dde:	eb14 030a 	adds.w	r3, r4, sl
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	eb45 030b 	adc.w	r3, r5, fp
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003df6:	4629      	mov	r1, r5
 8003df8:	028b      	lsls	r3, r1, #10
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e00:	4621      	mov	r1, r4
 8003e02:	028a      	lsls	r2, r1, #10
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	60fa      	str	r2, [r7, #12]
 8003e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e14:	f7fc ff50 	bl	8000cb8 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e3a:	e002      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3740      	adds	r7, #64	; 0x40
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	00f42400 	.word	0x00f42400
 8003e58:	017d7840 	.word	0x017d7840

08003e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000000 	.word	0x20000000

08003e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e78:	f7ff fff0 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0a9b      	lsrs	r3, r3, #10
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4903      	ldr	r1, [pc, #12]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	0800cb7c 	.word	0x0800cb7c

08003e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ea0:	f7ff ffdc 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0b5b      	lsrs	r3, r3, #13
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	0800cb7c 	.word	0x0800cb7c

08003ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e041      	b.n	8003f5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fe f96c 	bl	80021c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f000 fd70 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d001      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e044      	b.n	8004006 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d013      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1a      	ldr	r2, [pc, #104]	; (8004018 <HAL_TIM_Base_Start_IT+0xb4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a19      	ldr	r2, [pc, #100]	; (800401c <HAL_TIM_Base_Start_IT+0xb8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a17      	ldr	r2, [pc, #92]	; (8004020 <HAL_TIM_Base_Start_IT+0xbc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a16      	ldr	r2, [pc, #88]	; (8004024 <HAL_TIM_Base_Start_IT+0xc0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d111      	bne.n	8003ff4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d010      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff2:	e007      	b.n	8004004 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40010000 	.word	0x40010000
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800
 8004020:	40000c00 	.word	0x40000c00
 8004024:	40014000 	.word	0x40014000

08004028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e041      	b.n	80040be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f839 	bl	80040c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f000 fcbe 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <HAL_TIM_PWM_Start+0x24>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	bf14      	ite	ne
 80040f8:	2301      	movne	r3, #1
 80040fa:	2300      	moveq	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e022      	b.n	8004146 <HAL_TIM_PWM_Start+0x6a>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b04      	cmp	r3, #4
 8004104:	d109      	bne.n	800411a <HAL_TIM_PWM_Start+0x3e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b01      	cmp	r3, #1
 8004110:	bf14      	ite	ne
 8004112:	2301      	movne	r3, #1
 8004114:	2300      	moveq	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	e015      	b.n	8004146 <HAL_TIM_PWM_Start+0x6a>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b08      	cmp	r3, #8
 800411e:	d109      	bne.n	8004134 <HAL_TIM_PWM_Start+0x58>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e008      	b.n	8004146 <HAL_TIM_PWM_Start+0x6a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e068      	b.n	8004220 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d104      	bne.n	800415e <HAL_TIM_PWM_Start+0x82>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800415c:	e013      	b.n	8004186 <HAL_TIM_PWM_Start+0xaa>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b04      	cmp	r3, #4
 8004162:	d104      	bne.n	800416e <HAL_TIM_PWM_Start+0x92>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800416c:	e00b      	b.n	8004186 <HAL_TIM_PWM_Start+0xaa>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d104      	bne.n	800417e <HAL_TIM_PWM_Start+0xa2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800417c:	e003      	b.n	8004186 <HAL_TIM_PWM_Start+0xaa>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2202      	movs	r2, #2
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2201      	movs	r2, #1
 800418c:	6839      	ldr	r1, [r7, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fedc 	bl	8004f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a23      	ldr	r2, [pc, #140]	; (8004228 <HAL_TIM_PWM_Start+0x14c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d107      	bne.n	80041ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <HAL_TIM_PWM_Start+0x14c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d018      	beq.n	80041ea <HAL_TIM_PWM_Start+0x10e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d013      	beq.n	80041ea <HAL_TIM_PWM_Start+0x10e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a19      	ldr	r2, [pc, #100]	; (800422c <HAL_TIM_PWM_Start+0x150>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <HAL_TIM_PWM_Start+0x10e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a17      	ldr	r2, [pc, #92]	; (8004230 <HAL_TIM_PWM_Start+0x154>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <HAL_TIM_PWM_Start+0x10e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a16      	ldr	r2, [pc, #88]	; (8004234 <HAL_TIM_PWM_Start+0x158>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_TIM_PWM_Start+0x10e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a14      	ldr	r2, [pc, #80]	; (8004238 <HAL_TIM_PWM_Start+0x15c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d111      	bne.n	800420e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b06      	cmp	r3, #6
 80041fa:	d010      	beq.n	800421e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	e007      	b.n	800421e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40010000 	.word	0x40010000
 800422c:	40000400 	.word	0x40000400
 8004230:	40000800 	.word	0x40000800
 8004234:	40000c00 	.word	0x40000c00
 8004238:	40014000 	.word	0x40014000

0800423c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e097      	b.n	8004380 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d106      	bne.n	800426a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fd ffed 	bl	8002244 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004280:	f023 0307 	bic.w	r3, r3, #7
 8004284:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f000 fba9 	bl	80049e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042be:	f023 0303 	bic.w	r3, r3, #3
 80042c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	4313      	orrs	r3, r2
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042dc:	f023 030c 	bic.w	r3, r3, #12
 80042e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	4313      	orrs	r3, r2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	011a      	lsls	r2, r3, #4
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	031b      	lsls	r3, r3, #12
 800430c:	4313      	orrs	r3, r2
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	4313      	orrs	r3, r2
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004398:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d110      	bne.n	80043da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d102      	bne.n	80043c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043be:	7b7b      	ldrb	r3, [r7, #13]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d001      	beq.n	80043c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e069      	b.n	800449c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043d8:	e031      	b.n	800443e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d110      	bne.n	8004402 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043e0:	7bbb      	ldrb	r3, [r7, #14]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d102      	bne.n	80043ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043e6:	7b3b      	ldrb	r3, [r7, #12]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d001      	beq.n	80043f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e055      	b.n	800449c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004400:	e01d      	b.n	800443e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d108      	bne.n	800441a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004408:	7bbb      	ldrb	r3, [r7, #14]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d105      	bne.n	800441a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800440e:	7b7b      	ldrb	r3, [r7, #13]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d102      	bne.n	800441a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004414:	7b3b      	ldrb	r3, [r7, #12]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d001      	beq.n	800441e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e03e      	b.n	800449c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_TIM_Encoder_Start+0xc4>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b04      	cmp	r3, #4
 8004448:	d008      	beq.n	800445c <HAL_TIM_Encoder_Start+0xd4>
 800444a:	e00f      	b.n	800446c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2201      	movs	r2, #1
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fd79 	bl	8004f4c <TIM_CCxChannelCmd>
      break;
 800445a:	e016      	b.n	800448a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	2104      	movs	r1, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fd71 	bl	8004f4c <TIM_CCxChannelCmd>
      break;
 800446a:	e00e      	b.n	800448a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fd69 	bl	8004f4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	2104      	movs	r1, #4
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fd62 	bl	8004f4c <TIM_CCxChannelCmd>
      break;
 8004488:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0201 	orr.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d020      	beq.n	8004508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01b      	beq.n	8004508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0202 	mvn.w	r2, #2
 80044d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa5b 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa4d 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fa5e 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d020      	beq.n	8004554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01b      	beq.n	8004554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0204 	mvn.w	r2, #4
 8004524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2202      	movs	r2, #2
 800452a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fa35 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fa27 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fa38 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d020      	beq.n	80045a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01b      	beq.n	80045a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0208 	mvn.w	r2, #8
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2204      	movs	r2, #4
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa0f 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fa01 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fa12 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d020      	beq.n	80045ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0210 	mvn.w	r2, #16
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2208      	movs	r2, #8
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9e9 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f9db 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f9ec 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0201 	mvn.w	r2, #1
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fecc 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fd7c 	bl	800512c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f9bd 	bl	80049d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0220 	mvn.w	r2, #32
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fd4e 	bl	8005118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800469e:	2302      	movs	r3, #2
 80046a0:	e0ae      	b.n	8004800 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b0c      	cmp	r3, #12
 80046ae:	f200 809f 	bhi.w	80047f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046b2:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	080047f1 	.word	0x080047f1
 80046c0:	080047f1 	.word	0x080047f1
 80046c4:	080047f1 	.word	0x080047f1
 80046c8:	0800472d 	.word	0x0800472d
 80046cc:	080047f1 	.word	0x080047f1
 80046d0:	080047f1 	.word	0x080047f1
 80046d4:	080047f1 	.word	0x080047f1
 80046d8:	0800476f 	.word	0x0800476f
 80046dc:	080047f1 	.word	0x080047f1
 80046e0:	080047f1 	.word	0x080047f1
 80046e4:	080047f1 	.word	0x080047f1
 80046e8:	080047af 	.word	0x080047af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fa04 	bl	8004b00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0208 	orr.w	r2, r2, #8
 8004706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0204 	bic.w	r2, r2, #4
 8004716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6999      	ldr	r1, [r3, #24]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	619a      	str	r2, [r3, #24]
      break;
 800472a:	e064      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fa4a 	bl	8004bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6999      	ldr	r1, [r3, #24]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	021a      	lsls	r2, r3, #8
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	619a      	str	r2, [r3, #24]
      break;
 800476c:	e043      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fa95 	bl	8004ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0208 	orr.w	r2, r2, #8
 8004788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0204 	bic.w	r2, r2, #4
 8004798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69d9      	ldr	r1, [r3, #28]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	61da      	str	r2, [r3, #28]
      break;
 80047ac:	e023      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fadf 	bl	8004d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69d9      	ldr	r1, [r3, #28]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	021a      	lsls	r2, r3, #8
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	61da      	str	r2, [r3, #28]
      break;
 80047ee:	e002      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
      break;
 80047f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_TIM_ConfigClockSource+0x1c>
 8004820:	2302      	movs	r3, #2
 8004822:	e0b4      	b.n	800498e <HAL_TIM_ConfigClockSource+0x186>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800484a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485c:	d03e      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0xd4>
 800485e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004862:	f200 8087 	bhi.w	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486a:	f000 8086 	beq.w	800497a <HAL_TIM_ConfigClockSource+0x172>
 800486e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004872:	d87f      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b70      	cmp	r3, #112	; 0x70
 8004876:	d01a      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0xa6>
 8004878:	2b70      	cmp	r3, #112	; 0x70
 800487a:	d87b      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b60      	cmp	r3, #96	; 0x60
 800487e:	d050      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x11a>
 8004880:	2b60      	cmp	r3, #96	; 0x60
 8004882:	d877      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b50      	cmp	r3, #80	; 0x50
 8004886:	d03c      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0xfa>
 8004888:	2b50      	cmp	r3, #80	; 0x50
 800488a:	d873      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d058      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x13a>
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d86f      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b30      	cmp	r3, #48	; 0x30
 8004896:	d064      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 8004898:	2b30      	cmp	r3, #48	; 0x30
 800489a:	d86b      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b20      	cmp	r3, #32
 800489e:	d060      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d867      	bhi.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d05c      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d05a      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x15a>
 80048ac:	e062      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048be:	f000 fb25 	bl	8004f0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	609a      	str	r2, [r3, #8]
      break;
 80048da:	e04f      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ec:	f000 fb0e 	bl	8004f0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048fe:	609a      	str	r2, [r3, #8]
      break;
 8004900:	e03c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	461a      	mov	r2, r3
 8004910:	f000 fa82 	bl	8004e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2150      	movs	r1, #80	; 0x50
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fadb 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004920:	e02c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800492e:	461a      	mov	r2, r3
 8004930:	f000 faa1 	bl	8004e76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2160      	movs	r1, #96	; 0x60
 800493a:	4618      	mov	r0, r3
 800493c:	f000 facb 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004940:	e01c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800494e:	461a      	mov	r2, r3
 8004950:	f000 fa62 	bl	8004e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fabb 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004960:	e00c      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f000 fab2 	bl	8004ed6 <TIM_ITRx_SetConfig>
      break;
 8004972:	e003      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      break;
 8004978:	e000      	b.n	800497c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800497a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a3a      	ldr	r2, [pc, #232]	; (8004ae4 <TIM_Base_SetConfig+0xfc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00f      	beq.n	8004a20 <TIM_Base_SetConfig+0x38>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a06:	d00b      	beq.n	8004a20 <TIM_Base_SetConfig+0x38>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a37      	ldr	r2, [pc, #220]	; (8004ae8 <TIM_Base_SetConfig+0x100>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d007      	beq.n	8004a20 <TIM_Base_SetConfig+0x38>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a36      	ldr	r2, [pc, #216]	; (8004aec <TIM_Base_SetConfig+0x104>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_Base_SetConfig+0x38>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a35      	ldr	r2, [pc, #212]	; (8004af0 <TIM_Base_SetConfig+0x108>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d108      	bne.n	8004a32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a2b      	ldr	r2, [pc, #172]	; (8004ae4 <TIM_Base_SetConfig+0xfc>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01b      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a40:	d017      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a28      	ldr	r2, [pc, #160]	; (8004ae8 <TIM_Base_SetConfig+0x100>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a27      	ldr	r2, [pc, #156]	; (8004aec <TIM_Base_SetConfig+0x104>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00f      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a26      	ldr	r2, [pc, #152]	; (8004af0 <TIM_Base_SetConfig+0x108>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a25      	ldr	r2, [pc, #148]	; (8004af4 <TIM_Base_SetConfig+0x10c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a24      	ldr	r2, [pc, #144]	; (8004af8 <TIM_Base_SetConfig+0x110>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a23      	ldr	r2, [pc, #140]	; (8004afc <TIM_Base_SetConfig+0x114>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d108      	bne.n	8004a84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <TIM_Base_SetConfig+0xfc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d103      	bne.n	8004ab8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d105      	bne.n	8004ad6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f023 0201 	bic.w	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	611a      	str	r2, [r3, #16]
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40000400 	.word	0x40000400
 8004aec:	40000800 	.word	0x40000800
 8004af0:	40000c00 	.word	0x40000c00
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800

08004b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f023 0201 	bic.w	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f023 0302 	bic.w	r3, r3, #2
 8004b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <TIM_OC1_SetConfig+0xc8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10c      	bne.n	8004b76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0308 	bic.w	r3, r3, #8
 8004b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f023 0304 	bic.w	r3, r3, #4
 8004b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <TIM_OC1_SetConfig+0xc8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d111      	bne.n	8004ba2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	621a      	str	r2, [r3, #32]
}
 8004bbc:	bf00      	nop
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40010000 	.word	0x40010000

08004bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f023 0210 	bic.w	r2, r3, #16
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0320 	bic.w	r3, r3, #32
 8004c16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a1e      	ldr	r2, [pc, #120]	; (8004ca0 <TIM_OC2_SetConfig+0xd4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d10d      	bne.n	8004c48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <TIM_OC2_SetConfig+0xd4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d113      	bne.n	8004c78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000

08004ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <TIM_OC3_SetConfig+0xd0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10d      	bne.n	8004d1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a14      	ldr	r2, [pc, #80]	; (8004d74 <TIM_OC3_SetConfig+0xd0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d113      	bne.n	8004d4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	621a      	str	r2, [r3, #32]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40010000 	.word	0x40010000

08004d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	031b      	lsls	r3, r3, #12
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a10      	ldr	r2, [pc, #64]	; (8004e14 <TIM_OC4_SetConfig+0x9c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d109      	bne.n	8004dec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000

08004e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f023 0201 	bic.w	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f023 030a 	bic.w	r3, r3, #10
 8004e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b087      	sub	sp, #28
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f023 0210 	bic.w	r2, r3, #16
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	031b      	lsls	r3, r3, #12
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f043 0307 	orr.w	r3, r3, #7
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	021a      	lsls	r2, r3, #8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	609a      	str	r2, [r3, #8]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	2201      	movs	r2, #1
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1a      	ldr	r2, [r3, #32]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	401a      	ands	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1a      	ldr	r2, [r3, #32]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f003 031f 	and.w	r3, r3, #31
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	fa01 f303 	lsl.w	r3, r1, r3
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e050      	b.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d018      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffc:	d013      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a18      	ldr	r2, [pc, #96]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00e      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a16      	ldr	r2, [pc, #88]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d009      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a15      	ldr	r2, [pc, #84]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d004      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a13      	ldr	r2, [pc, #76]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10c      	bne.n	8005040 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800502c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	4313      	orrs	r3, r2
 8005036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010000 	.word	0x40010000
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40000c00 	.word	0x40000c00
 8005070:	40014000 	.word	0x40014000

08005074 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800508c:	2302      	movs	r3, #2
 800508e:	e03d      	b.n	800510c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e042      	b.n	80051d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fd f940 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2224      	movs	r2, #36	; 0x24
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fe21 	bl	8005dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695a      	ldr	r2, [r3, #20]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	4613      	mov	r3, r2
 80051ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d112      	bne.n	8005220 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_UART_Receive_IT+0x26>
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e00b      	b.n	8005222 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	461a      	mov	r2, r3
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fbd9 	bl	80059ce <UART_Start_Receive_IT>
 800521c:	4603      	mov	r3, r0
 800521e:	e000      	b.n	8005222 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005220:	2302      	movs	r3, #2
  }
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08c      	sub	sp, #48	; 0x30
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b20      	cmp	r3, #32
 8005244:	d156      	bne.n	80052f4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_UART_Transmit_DMA+0x26>
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e04f      	b.n	80052f6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2221      	movs	r2, #33	; 0x21
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	4a21      	ldr	r2, [pc, #132]	; (8005300 <HAL_UART_Transmit_DMA+0xd4>)
 800527c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	4a20      	ldr	r2, [pc, #128]	; (8005304 <HAL_UART_Transmit_DMA+0xd8>)
 8005284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	4a1f      	ldr	r2, [pc, #124]	; (8005308 <HAL_UART_Transmit_DMA+0xdc>)
 800528c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	2200      	movs	r2, #0
 8005294:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005296:	f107 0308 	add.w	r3, r7, #8
 800529a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3304      	adds	r3, #4
 80052aa:	461a      	mov	r2, r3
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	f7fd fcbf 	bl	8002c30 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3314      	adds	r3, #20
 80052c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	617b      	str	r3, [r7, #20]
   return(result);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3314      	adds	r3, #20
 80052da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052dc:	627a      	str	r2, [r7, #36]	; 0x24
 80052de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6a39      	ldr	r1, [r7, #32]
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e5      	bne.n	80052bc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3730      	adds	r7, #48	; 0x30
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	08005885 	.word	0x08005885
 8005304:	0800591f 	.word	0x0800591f
 8005308:	0800593b 	.word	0x0800593b

0800530c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b0ba      	sub	sp, #232	; 0xe8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005332:	2300      	movs	r3, #0
 8005334:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005338:	2300      	movs	r3, #0
 800533a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800534a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10f      	bne.n	8005372 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <HAL_UART_IRQHandler+0x66>
 800535e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fc70 	bl	8005c50 <UART_Receive_IT>
      return;
 8005370:	e25b      	b.n	800582a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 80de 	beq.w	8005538 <HAL_UART_IRQHandler+0x22c>
 800537c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800538c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80d1 	beq.w	8005538 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <HAL_UART_IRQHandler+0xae>
 80053a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	f043 0201 	orr.w	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <HAL_UART_IRQHandler+0xd2>
 80053c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	f043 0202 	orr.w	r2, r3, #2
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <HAL_UART_IRQHandler+0xf6>
 80053ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fa:	f043 0204 	orr.w	r2, r3, #4
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d011      	beq.n	8005432 <HAL_UART_IRQHandler+0x126>
 800540e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800541a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	f043 0208 	orr.w	r2, r3, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 81f2 	beq.w	8005820 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_UART_IRQHandler+0x14e>
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fbfb 	bl	8005c50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <HAL_UART_IRQHandler+0x17a>
 800547e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d04f      	beq.n	8005526 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fb03 	bl	8005a92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d141      	bne.n	800551e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3314      	adds	r3, #20
 80054a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3314      	adds	r3, #20
 80054c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1d9      	bne.n	800549a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d013      	beq.n	8005516 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	4a7e      	ldr	r2, [pc, #504]	; (80056ec <HAL_UART_IRQHandler+0x3e0>)
 80054f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fd fc60 	bl	8002dc0 <HAL_DMA_Abort_IT>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d016      	beq.n	8005534 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005510:	4610      	mov	r0, r2
 8005512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005514:	e00e      	b.n	8005534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f99e 	bl	8005858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	e00a      	b.n	8005534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f99a 	bl	8005858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	e006      	b.n	8005534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f996 	bl	8005858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005532:	e175      	b.n	8005820 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	bf00      	nop
    return;
 8005536:	e173      	b.n	8005820 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	2b01      	cmp	r3, #1
 800553e:	f040 814f 	bne.w	80057e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8148 	beq.w	80057e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8141 	beq.w	80057e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	f040 80b6 	bne.w	80056f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005590:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8145 	beq.w	8005824 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800559e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055a2:	429a      	cmp	r2, r3
 80055a4:	f080 813e 	bcs.w	8005824 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ba:	f000 8088 	beq.w	80056ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	330c      	adds	r3, #12
 80055c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1d9      	bne.n	80055be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3314      	adds	r3, #20
 8005610:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800561a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800561c:	f023 0301 	bic.w	r3, r3, #1
 8005620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3314      	adds	r3, #20
 800562a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800562e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005632:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005636:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e1      	bne.n	800560a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3314      	adds	r3, #20
 800564c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800565c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3314      	adds	r3, #20
 8005666:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800566a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800566c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005670:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e3      	bne.n	8005646 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330c      	adds	r3, #12
 8005692:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800569c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569e:	f023 0310 	bic.w	r3, r3, #16
 80056a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80056b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e3      	bne.n	800568c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fd fb09 	bl	8002ce0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056dc:	b29b      	uxth	r3, r3
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f8c1 	bl	800586c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056ea:	e09b      	b.n	8005824 <HAL_UART_IRQHandler+0x518>
 80056ec:	08005b59 	.word	0x08005b59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 808e 	beq.w	8005828 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800570c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8089 	beq.w	8005828 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800572c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800573a:	647a      	str	r2, [r7, #68]	; 0x44
 800573c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e3      	bne.n	8005716 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3314      	adds	r3, #20
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	623b      	str	r3, [r7, #32]
   return(result);
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3314      	adds	r3, #20
 800576e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005772:	633a      	str	r2, [r7, #48]	; 0x30
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e3      	bne.n	800574e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0310 	bic.w	r3, r3, #16
 80057aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	330c      	adds	r3, #12
 80057b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057b8:	61fa      	str	r2, [r7, #28]
 80057ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	69b9      	ldr	r1, [r7, #24]
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	617b      	str	r3, [r7, #20]
   return(result);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e3      	bne.n	8005794 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f847 	bl	800586c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057de:	e023      	b.n	8005828 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d009      	beq.n	8005800 <HAL_UART_IRQHandler+0x4f4>
 80057ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f9c1 	bl	8005b80 <UART_Transmit_IT>
    return;
 80057fe:	e014      	b.n	800582a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00e      	beq.n	800582a <HAL_UART_IRQHandler+0x51e>
 800580c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fa01 	bl	8005c20 <UART_EndTransmit_IT>
    return;
 800581e:	e004      	b.n	800582a <HAL_UART_IRQHandler+0x51e>
    return;
 8005820:	bf00      	nop
 8005822:	e002      	b.n	800582a <HAL_UART_IRQHandler+0x51e>
      return;
 8005824:	bf00      	nop
 8005826:	e000      	b.n	800582a <HAL_UART_IRQHandler+0x51e>
      return;
 8005828:	bf00      	nop
  }
}
 800582a:	37e8      	adds	r7, #232	; 0xe8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b090      	sub	sp, #64	; 0x40
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d137      	bne.n	8005910 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80058a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a2:	2200      	movs	r2, #0
 80058a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3314      	adds	r3, #20
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	623b      	str	r3, [r7, #32]
   return(result);
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058c6:	633a      	str	r2, [r7, #48]	; 0x30
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e5      	bne.n	80058a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058fa:	61fa      	str	r2, [r7, #28]
 80058fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	69b9      	ldr	r1, [r7, #24]
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	617b      	str	r3, [r7, #20]
   return(result);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e5      	bne.n	80058da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800590e:	e002      	b.n	8005916 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005910:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005912:	f7ff ff8d 	bl	8005830 <HAL_UART_TxCpltCallback>
}
 8005916:	bf00      	nop
 8005918:	3740      	adds	r7, #64	; 0x40
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f7ff ff89 	bl	8005844 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	bf0c      	ite	eq
 800595a:	2301      	moveq	r3, #1
 800595c:	2300      	movne	r3, #0
 800595e:	b2db      	uxtb	r3, r3
 8005960:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b21      	cmp	r3, #33	; 0x21
 800596c:	d108      	bne.n	8005980 <UART_DMAError+0x46>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2200      	movs	r2, #0
 8005978:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800597a:	68b8      	ldr	r0, [r7, #8]
 800597c:	f000 f861 	bl	8005a42 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	bf0c      	ite	eq
 800598e:	2301      	moveq	r3, #1
 8005990:	2300      	movne	r3, #0
 8005992:	b2db      	uxtb	r3, r3
 8005994:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b22      	cmp	r3, #34	; 0x22
 80059a0:	d108      	bne.n	80059b4 <UART_DMAError+0x7a>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2200      	movs	r2, #0
 80059ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80059ae:	68b8      	ldr	r0, [r7, #8]
 80059b0:	f000 f86f 	bl	8005a92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b8:	f043 0210 	orr.w	r2, r3, #16
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059c0:	68b8      	ldr	r0, [r7, #8]
 80059c2:	f7ff ff49 	bl	8005858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b085      	sub	sp, #20
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	4613      	mov	r3, r2
 80059da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	88fa      	ldrh	r2, [r7, #6]
 80059e6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2222      	movs	r2, #34	; 0x22
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a12:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0220 	orr.w	r2, r2, #32
 8005a32:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b089      	sub	sp, #36	; 0x24
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	330c      	adds	r3, #12
 8005a50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	61ba      	str	r2, [r7, #24]
 8005a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6979      	ldr	r1, [r7, #20]
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	613b      	str	r3, [r7, #16]
   return(result);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e5      	bne.n	8005a4a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005a86:	bf00      	nop
 8005a88:	3724      	adds	r7, #36	; 0x24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b095      	sub	sp, #84	; 0x54
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aba:	643a      	str	r2, [r7, #64]	; 0x40
 8005abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e5      	bne.n	8005a9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3314      	adds	r3, #20
 8005ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3314      	adds	r3, #20
 8005aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d119      	bne.n	8005b3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	330c      	adds	r3, #12
 8005b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f023 0310 	bic.w	r3, r3, #16
 8005b20:	647b      	str	r3, [r7, #68]	; 0x44
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	330c      	adds	r3, #12
 8005b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b2a:	61ba      	str	r2, [r7, #24]
 8005b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6979      	ldr	r1, [r7, #20]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	613b      	str	r3, [r7, #16]
   return(result);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e5      	bne.n	8005b0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b4c:	bf00      	nop
 8005b4e:	3754      	adds	r7, #84	; 0x54
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7ff fe70 	bl	8005858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b21      	cmp	r3, #33	; 0x21
 8005b92:	d13e      	bne.n	8005c12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9c:	d114      	bne.n	8005bc8 <UART_Transmit_IT+0x48>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d110      	bne.n	8005bc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	1c9a      	adds	r2, r3, #2
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	621a      	str	r2, [r3, #32]
 8005bc6:	e008      	b.n	8005bda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6211      	str	r1, [r2, #32]
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4619      	mov	r1, r3
 8005be8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e000      	b.n	8005c14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
  }
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff fdf5 	bl	8005830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	; 0x30
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b22      	cmp	r3, #34	; 0x22
 8005c62:	f040 80ae 	bne.w	8005dc2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6e:	d117      	bne.n	8005ca0 <UART_Receive_IT+0x50>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d113      	bne.n	8005ca0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	1c9a      	adds	r2, r3, #2
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	629a      	str	r2, [r3, #40]	; 0x28
 8005c9e:	e026      	b.n	8005cee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb2:	d007      	beq.n	8005cc4 <UART_Receive_IT+0x74>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <UART_Receive_IT+0x82>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	e008      	b.n	8005ce4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d15d      	bne.n	8005dbe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0220 	bic.w	r2, r2, #32
 8005d10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0201 	bic.w	r2, r2, #1
 8005d30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d135      	bne.n	8005db4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	330c      	adds	r3, #12
 8005d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f023 0310 	bic.w	r3, r3, #16
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	623a      	str	r2, [r7, #32]
 8005d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	69f9      	ldr	r1, [r7, #28]
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e5      	bne.n	8005d4e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d10a      	bne.n	8005da6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff fd5d 	bl	800586c <HAL_UARTEx_RxEventCallback>
 8005db2:	e002      	b.n	8005dba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7fb fab9 	bl	800132c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e002      	b.n	8005dc4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e000      	b.n	8005dc4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005dc2:	2302      	movs	r3, #2
  }
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3730      	adds	r7, #48	; 0x30
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dd0:	b0c0      	sub	sp, #256	; 0x100
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de8:	68d9      	ldr	r1, [r3, #12]
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	ea40 0301 	orr.w	r3, r0, r1
 8005df4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e24:	f021 010c 	bic.w	r1, r1, #12
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e32:	430b      	orrs	r3, r1
 8005e34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e46:	6999      	ldr	r1, [r3, #24]
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	ea40 0301 	orr.w	r3, r0, r1
 8005e52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b8f      	ldr	r3, [pc, #572]	; (8006098 <UART_SetConfig+0x2cc>)
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d005      	beq.n	8005e6c <UART_SetConfig+0xa0>
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b8d      	ldr	r3, [pc, #564]	; (800609c <UART_SetConfig+0x2d0>)
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d104      	bne.n	8005e76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e6c:	f7fe f816 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 8005e70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e74:	e003      	b.n	8005e7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e76:	f7fd fffd 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8005e7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e88:	f040 810c 	bne.w	80060a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e90:	2200      	movs	r2, #0
 8005e92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	1891      	adds	r1, r2, r2
 8005ea4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ea6:	415b      	adcs	r3, r3
 8005ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005eae:	4621      	mov	r1, r4
 8005eb0:	eb12 0801 	adds.w	r8, r2, r1
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	eb43 0901 	adc.w	r9, r3, r1
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ece:	4690      	mov	r8, r2
 8005ed0:	4699      	mov	r9, r3
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	eb18 0303 	adds.w	r3, r8, r3
 8005ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005edc:	462b      	mov	r3, r5
 8005ede:	eb49 0303 	adc.w	r3, r9, r3
 8005ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ef2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ef6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005efa:	460b      	mov	r3, r1
 8005efc:	18db      	adds	r3, r3, r3
 8005efe:	653b      	str	r3, [r7, #80]	; 0x50
 8005f00:	4613      	mov	r3, r2
 8005f02:	eb42 0303 	adc.w	r3, r2, r3
 8005f06:	657b      	str	r3, [r7, #84]	; 0x54
 8005f08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f10:	f7fa fed2 	bl	8000cb8 <__aeabi_uldivmod>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4b61      	ldr	r3, [pc, #388]	; (80060a0 <UART_SetConfig+0x2d4>)
 8005f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	011c      	lsls	r4, r3, #4
 8005f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f34:	4642      	mov	r2, r8
 8005f36:	464b      	mov	r3, r9
 8005f38:	1891      	adds	r1, r2, r2
 8005f3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f3c:	415b      	adcs	r3, r3
 8005f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f44:	4641      	mov	r1, r8
 8005f46:	eb12 0a01 	adds.w	sl, r2, r1
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f64:	4692      	mov	sl, r2
 8005f66:	469b      	mov	fp, r3
 8005f68:	4643      	mov	r3, r8
 8005f6a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f72:	464b      	mov	r3, r9
 8005f74:	eb4b 0303 	adc.w	r3, fp, r3
 8005f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f90:	460b      	mov	r3, r1
 8005f92:	18db      	adds	r3, r3, r3
 8005f94:	643b      	str	r3, [r7, #64]	; 0x40
 8005f96:	4613      	mov	r3, r2
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fa6:	f7fa fe87 	bl	8000cb8 <__aeabi_uldivmod>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4b3b      	ldr	r3, [pc, #236]	; (80060a0 <UART_SetConfig+0x2d4>)
 8005fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	2264      	movs	r2, #100	; 0x64
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	1acb      	subs	r3, r1, r3
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fc6:	4b36      	ldr	r3, [pc, #216]	; (80060a0 <UART_SetConfig+0x2d4>)
 8005fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fd4:	441c      	add	r4, r3
 8005fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fe0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	1891      	adds	r1, r2, r2
 8005fee:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ff0:	415b      	adcs	r3, r3
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	1851      	adds	r1, r2, r1
 8005ffc:	6339      	str	r1, [r7, #48]	; 0x30
 8005ffe:	4649      	mov	r1, r9
 8006000:	414b      	adcs	r3, r1
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006010:	4659      	mov	r1, fp
 8006012:	00cb      	lsls	r3, r1, #3
 8006014:	4651      	mov	r1, sl
 8006016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800601a:	4651      	mov	r1, sl
 800601c:	00ca      	lsls	r2, r1, #3
 800601e:	4610      	mov	r0, r2
 8006020:	4619      	mov	r1, r3
 8006022:	4603      	mov	r3, r0
 8006024:	4642      	mov	r2, r8
 8006026:	189b      	adds	r3, r3, r2
 8006028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800602c:	464b      	mov	r3, r9
 800602e:	460a      	mov	r2, r1
 8006030:	eb42 0303 	adc.w	r3, r2, r3
 8006034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006044:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006048:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800604c:	460b      	mov	r3, r1
 800604e:	18db      	adds	r3, r3, r3
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
 8006052:	4613      	mov	r3, r2
 8006054:	eb42 0303 	adc.w	r3, r2, r3
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800605e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006062:	f7fa fe29 	bl	8000cb8 <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <UART_SetConfig+0x2d4>)
 800606c:	fba3 1302 	umull	r1, r3, r3, r2
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	2164      	movs	r1, #100	; 0x64
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	3332      	adds	r3, #50	; 0x32
 800607e:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <UART_SetConfig+0x2d4>)
 8006080:	fba2 2303 	umull	r2, r3, r2, r3
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	f003 0207 	and.w	r2, r3, #7
 800608a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4422      	add	r2, r4
 8006092:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006094:	e106      	b.n	80062a4 <UART_SetConfig+0x4d8>
 8006096:	bf00      	nop
 8006098:	40011000 	.word	0x40011000
 800609c:	40011400 	.word	0x40011400
 80060a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060b6:	4642      	mov	r2, r8
 80060b8:	464b      	mov	r3, r9
 80060ba:	1891      	adds	r1, r2, r2
 80060bc:	6239      	str	r1, [r7, #32]
 80060be:	415b      	adcs	r3, r3
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
 80060c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060c6:	4641      	mov	r1, r8
 80060c8:	1854      	adds	r4, r2, r1
 80060ca:	4649      	mov	r1, r9
 80060cc:	eb43 0501 	adc.w	r5, r3, r1
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	00eb      	lsls	r3, r5, #3
 80060da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060de:	00e2      	lsls	r2, r4, #3
 80060e0:	4614      	mov	r4, r2
 80060e2:	461d      	mov	r5, r3
 80060e4:	4643      	mov	r3, r8
 80060e6:	18e3      	adds	r3, r4, r3
 80060e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060ec:	464b      	mov	r3, r9
 80060ee:	eb45 0303 	adc.w	r3, r5, r3
 80060f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006112:	4629      	mov	r1, r5
 8006114:	008b      	lsls	r3, r1, #2
 8006116:	4621      	mov	r1, r4
 8006118:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800611c:	4621      	mov	r1, r4
 800611e:	008a      	lsls	r2, r1, #2
 8006120:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006124:	f7fa fdc8 	bl	8000cb8 <__aeabi_uldivmod>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4b60      	ldr	r3, [pc, #384]	; (80062b0 <UART_SetConfig+0x4e4>)
 800612e:	fba3 2302 	umull	r2, r3, r3, r2
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	011c      	lsls	r4, r3, #4
 8006136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800613a:	2200      	movs	r2, #0
 800613c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006140:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006144:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006148:	4642      	mov	r2, r8
 800614a:	464b      	mov	r3, r9
 800614c:	1891      	adds	r1, r2, r2
 800614e:	61b9      	str	r1, [r7, #24]
 8006150:	415b      	adcs	r3, r3
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006158:	4641      	mov	r1, r8
 800615a:	1851      	adds	r1, r2, r1
 800615c:	6139      	str	r1, [r7, #16]
 800615e:	4649      	mov	r1, r9
 8006160:	414b      	adcs	r3, r1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006170:	4659      	mov	r1, fp
 8006172:	00cb      	lsls	r3, r1, #3
 8006174:	4651      	mov	r1, sl
 8006176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800617a:	4651      	mov	r1, sl
 800617c:	00ca      	lsls	r2, r1, #3
 800617e:	4610      	mov	r0, r2
 8006180:	4619      	mov	r1, r3
 8006182:	4603      	mov	r3, r0
 8006184:	4642      	mov	r2, r8
 8006186:	189b      	adds	r3, r3, r2
 8006188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800618c:	464b      	mov	r3, r9
 800618e:	460a      	mov	r2, r1
 8006190:	eb42 0303 	adc.w	r3, r2, r3
 8006194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80061a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061b0:	4649      	mov	r1, r9
 80061b2:	008b      	lsls	r3, r1, #2
 80061b4:	4641      	mov	r1, r8
 80061b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ba:	4641      	mov	r1, r8
 80061bc:	008a      	lsls	r2, r1, #2
 80061be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061c2:	f7fa fd79 	bl	8000cb8 <__aeabi_uldivmod>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	4b38      	ldr	r3, [pc, #224]	; (80062b0 <UART_SetConfig+0x4e4>)
 80061ce:	fba3 2301 	umull	r2, r3, r3, r1
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	2264      	movs	r2, #100	; 0x64
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	1acb      	subs	r3, r1, r3
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	3332      	adds	r3, #50	; 0x32
 80061e0:	4a33      	ldr	r2, [pc, #204]	; (80062b0 <UART_SetConfig+0x4e4>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ec:	441c      	add	r4, r3
 80061ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061f2:	2200      	movs	r2, #0
 80061f4:	673b      	str	r3, [r7, #112]	; 0x70
 80061f6:	677a      	str	r2, [r7, #116]	; 0x74
 80061f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061fc:	4642      	mov	r2, r8
 80061fe:	464b      	mov	r3, r9
 8006200:	1891      	adds	r1, r2, r2
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	415b      	adcs	r3, r3
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800620c:	4641      	mov	r1, r8
 800620e:	1851      	adds	r1, r2, r1
 8006210:	6039      	str	r1, [r7, #0]
 8006212:	4649      	mov	r1, r9
 8006214:	414b      	adcs	r3, r1
 8006216:	607b      	str	r3, [r7, #4]
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006224:	4659      	mov	r1, fp
 8006226:	00cb      	lsls	r3, r1, #3
 8006228:	4651      	mov	r1, sl
 800622a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800622e:	4651      	mov	r1, sl
 8006230:	00ca      	lsls	r2, r1, #3
 8006232:	4610      	mov	r0, r2
 8006234:	4619      	mov	r1, r3
 8006236:	4603      	mov	r3, r0
 8006238:	4642      	mov	r2, r8
 800623a:	189b      	adds	r3, r3, r2
 800623c:	66bb      	str	r3, [r7, #104]	; 0x68
 800623e:	464b      	mov	r3, r9
 8006240:	460a      	mov	r2, r1
 8006242:	eb42 0303 	adc.w	r3, r2, r3
 8006246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	663b      	str	r3, [r7, #96]	; 0x60
 8006252:	667a      	str	r2, [r7, #100]	; 0x64
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006260:	4649      	mov	r1, r9
 8006262:	008b      	lsls	r3, r1, #2
 8006264:	4641      	mov	r1, r8
 8006266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800626a:	4641      	mov	r1, r8
 800626c:	008a      	lsls	r2, r1, #2
 800626e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006272:	f7fa fd21 	bl	8000cb8 <__aeabi_uldivmod>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <UART_SetConfig+0x4e4>)
 800627c:	fba3 1302 	umull	r1, r3, r3, r2
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	2164      	movs	r1, #100	; 0x64
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	3332      	adds	r3, #50	; 0x32
 800628e:	4a08      	ldr	r2, [pc, #32]	; (80062b0 <UART_SetConfig+0x4e4>)
 8006290:	fba2 2303 	umull	r2, r3, r2, r3
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	f003 020f 	and.w	r2, r3, #15
 800629a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4422      	add	r2, r4
 80062a2:	609a      	str	r2, [r3, #8]
}
 80062a4:	bf00      	nop
 80062a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062aa:	46bd      	mov	sp, r7
 80062ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062b0:	51eb851f 	.word	0x51eb851f

080062b4 <__cvt>:
 80062b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b8:	ec55 4b10 	vmov	r4, r5, d0
 80062bc:	2d00      	cmp	r5, #0
 80062be:	460e      	mov	r6, r1
 80062c0:	4619      	mov	r1, r3
 80062c2:	462b      	mov	r3, r5
 80062c4:	bfbb      	ittet	lt
 80062c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062ca:	461d      	movlt	r5, r3
 80062cc:	2300      	movge	r3, #0
 80062ce:	232d      	movlt	r3, #45	; 0x2d
 80062d0:	700b      	strb	r3, [r1, #0]
 80062d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062d8:	4691      	mov	r9, r2
 80062da:	f023 0820 	bic.w	r8, r3, #32
 80062de:	bfbc      	itt	lt
 80062e0:	4622      	movlt	r2, r4
 80062e2:	4614      	movlt	r4, r2
 80062e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062e8:	d005      	beq.n	80062f6 <__cvt+0x42>
 80062ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062ee:	d100      	bne.n	80062f2 <__cvt+0x3e>
 80062f0:	3601      	adds	r6, #1
 80062f2:	2102      	movs	r1, #2
 80062f4:	e000      	b.n	80062f8 <__cvt+0x44>
 80062f6:	2103      	movs	r1, #3
 80062f8:	ab03      	add	r3, sp, #12
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	ab02      	add	r3, sp, #8
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	ec45 4b10 	vmov	d0, r4, r5
 8006304:	4653      	mov	r3, sl
 8006306:	4632      	mov	r2, r6
 8006308:	f001 f8b6 	bl	8007478 <_dtoa_r>
 800630c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006310:	4607      	mov	r7, r0
 8006312:	d102      	bne.n	800631a <__cvt+0x66>
 8006314:	f019 0f01 	tst.w	r9, #1
 8006318:	d022      	beq.n	8006360 <__cvt+0xac>
 800631a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800631e:	eb07 0906 	add.w	r9, r7, r6
 8006322:	d110      	bne.n	8006346 <__cvt+0x92>
 8006324:	783b      	ldrb	r3, [r7, #0]
 8006326:	2b30      	cmp	r3, #48	; 0x30
 8006328:	d10a      	bne.n	8006340 <__cvt+0x8c>
 800632a:	2200      	movs	r2, #0
 800632c:	2300      	movs	r3, #0
 800632e:	4620      	mov	r0, r4
 8006330:	4629      	mov	r1, r5
 8006332:	f7fa fbe1 	bl	8000af8 <__aeabi_dcmpeq>
 8006336:	b918      	cbnz	r0, 8006340 <__cvt+0x8c>
 8006338:	f1c6 0601 	rsb	r6, r6, #1
 800633c:	f8ca 6000 	str.w	r6, [sl]
 8006340:	f8da 3000 	ldr.w	r3, [sl]
 8006344:	4499      	add	r9, r3
 8006346:	2200      	movs	r2, #0
 8006348:	2300      	movs	r3, #0
 800634a:	4620      	mov	r0, r4
 800634c:	4629      	mov	r1, r5
 800634e:	f7fa fbd3 	bl	8000af8 <__aeabi_dcmpeq>
 8006352:	b108      	cbz	r0, 8006358 <__cvt+0xa4>
 8006354:	f8cd 900c 	str.w	r9, [sp, #12]
 8006358:	2230      	movs	r2, #48	; 0x30
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	454b      	cmp	r3, r9
 800635e:	d307      	bcc.n	8006370 <__cvt+0xbc>
 8006360:	9b03      	ldr	r3, [sp, #12]
 8006362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006364:	1bdb      	subs	r3, r3, r7
 8006366:	4638      	mov	r0, r7
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	b004      	add	sp, #16
 800636c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006370:	1c59      	adds	r1, r3, #1
 8006372:	9103      	str	r1, [sp, #12]
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	e7f0      	b.n	800635a <__cvt+0xa6>

08006378 <__exponent>:
 8006378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800637a:	4603      	mov	r3, r0
 800637c:	2900      	cmp	r1, #0
 800637e:	bfb8      	it	lt
 8006380:	4249      	neglt	r1, r1
 8006382:	f803 2b02 	strb.w	r2, [r3], #2
 8006386:	bfb4      	ite	lt
 8006388:	222d      	movlt	r2, #45	; 0x2d
 800638a:	222b      	movge	r2, #43	; 0x2b
 800638c:	2909      	cmp	r1, #9
 800638e:	7042      	strb	r2, [r0, #1]
 8006390:	dd2a      	ble.n	80063e8 <__exponent+0x70>
 8006392:	f10d 0207 	add.w	r2, sp, #7
 8006396:	4617      	mov	r7, r2
 8006398:	260a      	movs	r6, #10
 800639a:	4694      	mov	ip, r2
 800639c:	fb91 f5f6 	sdiv	r5, r1, r6
 80063a0:	fb06 1415 	mls	r4, r6, r5, r1
 80063a4:	3430      	adds	r4, #48	; 0x30
 80063a6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80063aa:	460c      	mov	r4, r1
 80063ac:	2c63      	cmp	r4, #99	; 0x63
 80063ae:	f102 32ff 	add.w	r2, r2, #4294967295
 80063b2:	4629      	mov	r1, r5
 80063b4:	dcf1      	bgt.n	800639a <__exponent+0x22>
 80063b6:	3130      	adds	r1, #48	; 0x30
 80063b8:	f1ac 0402 	sub.w	r4, ip, #2
 80063bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80063c0:	1c41      	adds	r1, r0, #1
 80063c2:	4622      	mov	r2, r4
 80063c4:	42ba      	cmp	r2, r7
 80063c6:	d30a      	bcc.n	80063de <__exponent+0x66>
 80063c8:	f10d 0209 	add.w	r2, sp, #9
 80063cc:	eba2 020c 	sub.w	r2, r2, ip
 80063d0:	42bc      	cmp	r4, r7
 80063d2:	bf88      	it	hi
 80063d4:	2200      	movhi	r2, #0
 80063d6:	4413      	add	r3, r2
 80063d8:	1a18      	subs	r0, r3, r0
 80063da:	b003      	add	sp, #12
 80063dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063de:	f812 5b01 	ldrb.w	r5, [r2], #1
 80063e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80063e6:	e7ed      	b.n	80063c4 <__exponent+0x4c>
 80063e8:	2330      	movs	r3, #48	; 0x30
 80063ea:	3130      	adds	r1, #48	; 0x30
 80063ec:	7083      	strb	r3, [r0, #2]
 80063ee:	70c1      	strb	r1, [r0, #3]
 80063f0:	1d03      	adds	r3, r0, #4
 80063f2:	e7f1      	b.n	80063d8 <__exponent+0x60>

080063f4 <_printf_float>:
 80063f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f8:	ed2d 8b02 	vpush	{d8}
 80063fc:	b08d      	sub	sp, #52	; 0x34
 80063fe:	460c      	mov	r4, r1
 8006400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006404:	4616      	mov	r6, r2
 8006406:	461f      	mov	r7, r3
 8006408:	4605      	mov	r5, r0
 800640a:	f000 ff25 	bl	8007258 <_localeconv_r>
 800640e:	f8d0 a000 	ldr.w	sl, [r0]
 8006412:	4650      	mov	r0, sl
 8006414:	f7f9 ff44 	bl	80002a0 <strlen>
 8006418:	2300      	movs	r3, #0
 800641a:	930a      	str	r3, [sp, #40]	; 0x28
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	9305      	str	r3, [sp, #20]
 8006420:	f8d8 3000 	ldr.w	r3, [r8]
 8006424:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006428:	3307      	adds	r3, #7
 800642a:	f023 0307 	bic.w	r3, r3, #7
 800642e:	f103 0208 	add.w	r2, r3, #8
 8006432:	f8c8 2000 	str.w	r2, [r8]
 8006436:	e9d3 8900 	ldrd	r8, r9, [r3]
 800643a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800643e:	9307      	str	r3, [sp, #28]
 8006440:	f8cd 8018 	str.w	r8, [sp, #24]
 8006444:	ee08 0a10 	vmov	s16, r0
 8006448:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800644c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006450:	4b9e      	ldr	r3, [pc, #632]	; (80066cc <_printf_float+0x2d8>)
 8006452:	f04f 32ff 	mov.w	r2, #4294967295
 8006456:	f7fa fb81 	bl	8000b5c <__aeabi_dcmpun>
 800645a:	bb88      	cbnz	r0, 80064c0 <_printf_float+0xcc>
 800645c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006460:	4b9a      	ldr	r3, [pc, #616]	; (80066cc <_printf_float+0x2d8>)
 8006462:	f04f 32ff 	mov.w	r2, #4294967295
 8006466:	f7fa fb5b 	bl	8000b20 <__aeabi_dcmple>
 800646a:	bb48      	cbnz	r0, 80064c0 <_printf_float+0xcc>
 800646c:	2200      	movs	r2, #0
 800646e:	2300      	movs	r3, #0
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7fa fb4a 	bl	8000b0c <__aeabi_dcmplt>
 8006478:	b110      	cbz	r0, 8006480 <_printf_float+0x8c>
 800647a:	232d      	movs	r3, #45	; 0x2d
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006480:	4a93      	ldr	r2, [pc, #588]	; (80066d0 <_printf_float+0x2dc>)
 8006482:	4b94      	ldr	r3, [pc, #592]	; (80066d4 <_printf_float+0x2e0>)
 8006484:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006488:	bf94      	ite	ls
 800648a:	4690      	movls	r8, r2
 800648c:	4698      	movhi	r8, r3
 800648e:	2303      	movs	r3, #3
 8006490:	6123      	str	r3, [r4, #16]
 8006492:	9b05      	ldr	r3, [sp, #20]
 8006494:	f023 0304 	bic.w	r3, r3, #4
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	f04f 0900 	mov.w	r9, #0
 800649e:	9700      	str	r7, [sp, #0]
 80064a0:	4633      	mov	r3, r6
 80064a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80064a4:	4621      	mov	r1, r4
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 f9da 	bl	8006860 <_printf_common>
 80064ac:	3001      	adds	r0, #1
 80064ae:	f040 8090 	bne.w	80065d2 <_printf_float+0x1de>
 80064b2:	f04f 30ff 	mov.w	r0, #4294967295
 80064b6:	b00d      	add	sp, #52	; 0x34
 80064b8:	ecbd 8b02 	vpop	{d8}
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	4642      	mov	r2, r8
 80064c2:	464b      	mov	r3, r9
 80064c4:	4640      	mov	r0, r8
 80064c6:	4649      	mov	r1, r9
 80064c8:	f7fa fb48 	bl	8000b5c <__aeabi_dcmpun>
 80064cc:	b140      	cbz	r0, 80064e0 <_printf_float+0xec>
 80064ce:	464b      	mov	r3, r9
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bfbc      	itt	lt
 80064d4:	232d      	movlt	r3, #45	; 0x2d
 80064d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064da:	4a7f      	ldr	r2, [pc, #508]	; (80066d8 <_printf_float+0x2e4>)
 80064dc:	4b7f      	ldr	r3, [pc, #508]	; (80066dc <_printf_float+0x2e8>)
 80064de:	e7d1      	b.n	8006484 <_printf_float+0x90>
 80064e0:	6863      	ldr	r3, [r4, #4]
 80064e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064e6:	9206      	str	r2, [sp, #24]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	d13f      	bne.n	800656c <_printf_float+0x178>
 80064ec:	2306      	movs	r3, #6
 80064ee:	6063      	str	r3, [r4, #4]
 80064f0:	9b05      	ldr	r3, [sp, #20]
 80064f2:	6861      	ldr	r1, [r4, #4]
 80064f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064f8:	2300      	movs	r3, #0
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	ab0a      	add	r3, sp, #40	; 0x28
 80064fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006502:	ab09      	add	r3, sp, #36	; 0x24
 8006504:	ec49 8b10 	vmov	d0, r8, r9
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	6022      	str	r2, [r4, #0]
 800650c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006510:	4628      	mov	r0, r5
 8006512:	f7ff fecf 	bl	80062b4 <__cvt>
 8006516:	9b06      	ldr	r3, [sp, #24]
 8006518:	9909      	ldr	r1, [sp, #36]	; 0x24
 800651a:	2b47      	cmp	r3, #71	; 0x47
 800651c:	4680      	mov	r8, r0
 800651e:	d108      	bne.n	8006532 <_printf_float+0x13e>
 8006520:	1cc8      	adds	r0, r1, #3
 8006522:	db02      	blt.n	800652a <_printf_float+0x136>
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	4299      	cmp	r1, r3
 8006528:	dd41      	ble.n	80065ae <_printf_float+0x1ba>
 800652a:	f1ab 0302 	sub.w	r3, fp, #2
 800652e:	fa5f fb83 	uxtb.w	fp, r3
 8006532:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006536:	d820      	bhi.n	800657a <_printf_float+0x186>
 8006538:	3901      	subs	r1, #1
 800653a:	465a      	mov	r2, fp
 800653c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006540:	9109      	str	r1, [sp, #36]	; 0x24
 8006542:	f7ff ff19 	bl	8006378 <__exponent>
 8006546:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006548:	1813      	adds	r3, r2, r0
 800654a:	2a01      	cmp	r2, #1
 800654c:	4681      	mov	r9, r0
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	dc02      	bgt.n	8006558 <_printf_float+0x164>
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	07d2      	lsls	r2, r2, #31
 8006556:	d501      	bpl.n	800655c <_printf_float+0x168>
 8006558:	3301      	adds	r3, #1
 800655a:	6123      	str	r3, [r4, #16]
 800655c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006560:	2b00      	cmp	r3, #0
 8006562:	d09c      	beq.n	800649e <_printf_float+0xaa>
 8006564:	232d      	movs	r3, #45	; 0x2d
 8006566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800656a:	e798      	b.n	800649e <_printf_float+0xaa>
 800656c:	9a06      	ldr	r2, [sp, #24]
 800656e:	2a47      	cmp	r2, #71	; 0x47
 8006570:	d1be      	bne.n	80064f0 <_printf_float+0xfc>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1bc      	bne.n	80064f0 <_printf_float+0xfc>
 8006576:	2301      	movs	r3, #1
 8006578:	e7b9      	b.n	80064ee <_printf_float+0xfa>
 800657a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800657e:	d118      	bne.n	80065b2 <_printf_float+0x1be>
 8006580:	2900      	cmp	r1, #0
 8006582:	6863      	ldr	r3, [r4, #4]
 8006584:	dd0b      	ble.n	800659e <_printf_float+0x1aa>
 8006586:	6121      	str	r1, [r4, #16]
 8006588:	b913      	cbnz	r3, 8006590 <_printf_float+0x19c>
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	07d0      	lsls	r0, r2, #31
 800658e:	d502      	bpl.n	8006596 <_printf_float+0x1a2>
 8006590:	3301      	adds	r3, #1
 8006592:	440b      	add	r3, r1
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	65a1      	str	r1, [r4, #88]	; 0x58
 8006598:	f04f 0900 	mov.w	r9, #0
 800659c:	e7de      	b.n	800655c <_printf_float+0x168>
 800659e:	b913      	cbnz	r3, 80065a6 <_printf_float+0x1b2>
 80065a0:	6822      	ldr	r2, [r4, #0]
 80065a2:	07d2      	lsls	r2, r2, #31
 80065a4:	d501      	bpl.n	80065aa <_printf_float+0x1b6>
 80065a6:	3302      	adds	r3, #2
 80065a8:	e7f4      	b.n	8006594 <_printf_float+0x1a0>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e7f2      	b.n	8006594 <_printf_float+0x1a0>
 80065ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b4:	4299      	cmp	r1, r3
 80065b6:	db05      	blt.n	80065c4 <_printf_float+0x1d0>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	6121      	str	r1, [r4, #16]
 80065bc:	07d8      	lsls	r0, r3, #31
 80065be:	d5ea      	bpl.n	8006596 <_printf_float+0x1a2>
 80065c0:	1c4b      	adds	r3, r1, #1
 80065c2:	e7e7      	b.n	8006594 <_printf_float+0x1a0>
 80065c4:	2900      	cmp	r1, #0
 80065c6:	bfd4      	ite	le
 80065c8:	f1c1 0202 	rsble	r2, r1, #2
 80065cc:	2201      	movgt	r2, #1
 80065ce:	4413      	add	r3, r2
 80065d0:	e7e0      	b.n	8006594 <_printf_float+0x1a0>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	055a      	lsls	r2, r3, #21
 80065d6:	d407      	bmi.n	80065e8 <_printf_float+0x1f4>
 80065d8:	6923      	ldr	r3, [r4, #16]
 80065da:	4642      	mov	r2, r8
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
 80065e0:	47b8      	blx	r7
 80065e2:	3001      	adds	r0, #1
 80065e4:	d12c      	bne.n	8006640 <_printf_float+0x24c>
 80065e6:	e764      	b.n	80064b2 <_printf_float+0xbe>
 80065e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065ec:	f240 80e0 	bls.w	80067b0 <_printf_float+0x3bc>
 80065f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065f4:	2200      	movs	r2, #0
 80065f6:	2300      	movs	r3, #0
 80065f8:	f7fa fa7e 	bl	8000af8 <__aeabi_dcmpeq>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d034      	beq.n	800666a <_printf_float+0x276>
 8006600:	4a37      	ldr	r2, [pc, #220]	; (80066e0 <_printf_float+0x2ec>)
 8006602:	2301      	movs	r3, #1
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f af51 	beq.w	80064b2 <_printf_float+0xbe>
 8006610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006614:	429a      	cmp	r2, r3
 8006616:	db02      	blt.n	800661e <_printf_float+0x22a>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	07d8      	lsls	r0, r3, #31
 800661c:	d510      	bpl.n	8006640 <_printf_float+0x24c>
 800661e:	ee18 3a10 	vmov	r3, s16
 8006622:	4652      	mov	r2, sl
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	f43f af41 	beq.w	80064b2 <_printf_float+0xbe>
 8006630:	f04f 0800 	mov.w	r8, #0
 8006634:	f104 091a 	add.w	r9, r4, #26
 8006638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800663a:	3b01      	subs	r3, #1
 800663c:	4543      	cmp	r3, r8
 800663e:	dc09      	bgt.n	8006654 <_printf_float+0x260>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	079b      	lsls	r3, r3, #30
 8006644:	f100 8107 	bmi.w	8006856 <_printf_float+0x462>
 8006648:	68e0      	ldr	r0, [r4, #12]
 800664a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800664c:	4298      	cmp	r0, r3
 800664e:	bfb8      	it	lt
 8006650:	4618      	movlt	r0, r3
 8006652:	e730      	b.n	80064b6 <_printf_float+0xc2>
 8006654:	2301      	movs	r3, #1
 8006656:	464a      	mov	r2, r9
 8006658:	4631      	mov	r1, r6
 800665a:	4628      	mov	r0, r5
 800665c:	47b8      	blx	r7
 800665e:	3001      	adds	r0, #1
 8006660:	f43f af27 	beq.w	80064b2 <_printf_float+0xbe>
 8006664:	f108 0801 	add.w	r8, r8, #1
 8006668:	e7e6      	b.n	8006638 <_printf_float+0x244>
 800666a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	dc39      	bgt.n	80066e4 <_printf_float+0x2f0>
 8006670:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <_printf_float+0x2ec>)
 8006672:	2301      	movs	r3, #1
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	f43f af19 	beq.w	80064b2 <_printf_float+0xbe>
 8006680:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006684:	4313      	orrs	r3, r2
 8006686:	d102      	bne.n	800668e <_printf_float+0x29a>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	07d9      	lsls	r1, r3, #31
 800668c:	d5d8      	bpl.n	8006640 <_printf_float+0x24c>
 800668e:	ee18 3a10 	vmov	r3, s16
 8006692:	4652      	mov	r2, sl
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	f43f af09 	beq.w	80064b2 <_printf_float+0xbe>
 80066a0:	f04f 0900 	mov.w	r9, #0
 80066a4:	f104 0a1a 	add.w	sl, r4, #26
 80066a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066aa:	425b      	negs	r3, r3
 80066ac:	454b      	cmp	r3, r9
 80066ae:	dc01      	bgt.n	80066b4 <_printf_float+0x2c0>
 80066b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b2:	e792      	b.n	80065da <_printf_float+0x1e6>
 80066b4:	2301      	movs	r3, #1
 80066b6:	4652      	mov	r2, sl
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	f43f aef7 	beq.w	80064b2 <_printf_float+0xbe>
 80066c4:	f109 0901 	add.w	r9, r9, #1
 80066c8:	e7ee      	b.n	80066a8 <_printf_float+0x2b4>
 80066ca:	bf00      	nop
 80066cc:	7fefffff 	.word	0x7fefffff
 80066d0:	0800cb8c 	.word	0x0800cb8c
 80066d4:	0800cb90 	.word	0x0800cb90
 80066d8:	0800cb94 	.word	0x0800cb94
 80066dc:	0800cb98 	.word	0x0800cb98
 80066e0:	0800cf28 	.word	0x0800cf28
 80066e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066e8:	429a      	cmp	r2, r3
 80066ea:	bfa8      	it	ge
 80066ec:	461a      	movge	r2, r3
 80066ee:	2a00      	cmp	r2, #0
 80066f0:	4691      	mov	r9, r2
 80066f2:	dc37      	bgt.n	8006764 <_printf_float+0x370>
 80066f4:	f04f 0b00 	mov.w	fp, #0
 80066f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066fc:	f104 021a 	add.w	r2, r4, #26
 8006700:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006702:	9305      	str	r3, [sp, #20]
 8006704:	eba3 0309 	sub.w	r3, r3, r9
 8006708:	455b      	cmp	r3, fp
 800670a:	dc33      	bgt.n	8006774 <_printf_float+0x380>
 800670c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006710:	429a      	cmp	r2, r3
 8006712:	db3b      	blt.n	800678c <_printf_float+0x398>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	07da      	lsls	r2, r3, #31
 8006718:	d438      	bmi.n	800678c <_printf_float+0x398>
 800671a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800671e:	eba2 0903 	sub.w	r9, r2, r3
 8006722:	9b05      	ldr	r3, [sp, #20]
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	4591      	cmp	r9, r2
 8006728:	bfa8      	it	ge
 800672a:	4691      	movge	r9, r2
 800672c:	f1b9 0f00 	cmp.w	r9, #0
 8006730:	dc35      	bgt.n	800679e <_printf_float+0x3aa>
 8006732:	f04f 0800 	mov.w	r8, #0
 8006736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800673a:	f104 0a1a 	add.w	sl, r4, #26
 800673e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	eba3 0309 	sub.w	r3, r3, r9
 8006748:	4543      	cmp	r3, r8
 800674a:	f77f af79 	ble.w	8006640 <_printf_float+0x24c>
 800674e:	2301      	movs	r3, #1
 8006750:	4652      	mov	r2, sl
 8006752:	4631      	mov	r1, r6
 8006754:	4628      	mov	r0, r5
 8006756:	47b8      	blx	r7
 8006758:	3001      	adds	r0, #1
 800675a:	f43f aeaa 	beq.w	80064b2 <_printf_float+0xbe>
 800675e:	f108 0801 	add.w	r8, r8, #1
 8006762:	e7ec      	b.n	800673e <_printf_float+0x34a>
 8006764:	4613      	mov	r3, r2
 8006766:	4631      	mov	r1, r6
 8006768:	4642      	mov	r2, r8
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	d1c0      	bne.n	80066f4 <_printf_float+0x300>
 8006772:	e69e      	b.n	80064b2 <_printf_float+0xbe>
 8006774:	2301      	movs	r3, #1
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	9205      	str	r2, [sp, #20]
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f ae97 	beq.w	80064b2 <_printf_float+0xbe>
 8006784:	9a05      	ldr	r2, [sp, #20]
 8006786:	f10b 0b01 	add.w	fp, fp, #1
 800678a:	e7b9      	b.n	8006700 <_printf_float+0x30c>
 800678c:	ee18 3a10 	vmov	r3, s16
 8006790:	4652      	mov	r2, sl
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	d1be      	bne.n	800671a <_printf_float+0x326>
 800679c:	e689      	b.n	80064b2 <_printf_float+0xbe>
 800679e:	9a05      	ldr	r2, [sp, #20]
 80067a0:	464b      	mov	r3, r9
 80067a2:	4442      	add	r2, r8
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	d1c1      	bne.n	8006732 <_printf_float+0x33e>
 80067ae:	e680      	b.n	80064b2 <_printf_float+0xbe>
 80067b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067b2:	2a01      	cmp	r2, #1
 80067b4:	dc01      	bgt.n	80067ba <_printf_float+0x3c6>
 80067b6:	07db      	lsls	r3, r3, #31
 80067b8:	d53a      	bpl.n	8006830 <_printf_float+0x43c>
 80067ba:	2301      	movs	r3, #1
 80067bc:	4642      	mov	r2, r8
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f ae74 	beq.w	80064b2 <_printf_float+0xbe>
 80067ca:	ee18 3a10 	vmov	r3, s16
 80067ce:	4652      	mov	r2, sl
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	f43f ae6b 	beq.w	80064b2 <_printf_float+0xbe>
 80067dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80067e8:	f7fa f986 	bl	8000af8 <__aeabi_dcmpeq>
 80067ec:	b9d8      	cbnz	r0, 8006826 <_printf_float+0x432>
 80067ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80067f2:	f108 0201 	add.w	r2, r8, #1
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b8      	blx	r7
 80067fc:	3001      	adds	r0, #1
 80067fe:	d10e      	bne.n	800681e <_printf_float+0x42a>
 8006800:	e657      	b.n	80064b2 <_printf_float+0xbe>
 8006802:	2301      	movs	r3, #1
 8006804:	4652      	mov	r2, sl
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f ae50 	beq.w	80064b2 <_printf_float+0xbe>
 8006812:	f108 0801 	add.w	r8, r8, #1
 8006816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006818:	3b01      	subs	r3, #1
 800681a:	4543      	cmp	r3, r8
 800681c:	dcf1      	bgt.n	8006802 <_printf_float+0x40e>
 800681e:	464b      	mov	r3, r9
 8006820:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006824:	e6da      	b.n	80065dc <_printf_float+0x1e8>
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	f104 0a1a 	add.w	sl, r4, #26
 800682e:	e7f2      	b.n	8006816 <_printf_float+0x422>
 8006830:	2301      	movs	r3, #1
 8006832:	4642      	mov	r2, r8
 8006834:	e7df      	b.n	80067f6 <_printf_float+0x402>
 8006836:	2301      	movs	r3, #1
 8006838:	464a      	mov	r2, r9
 800683a:	4631      	mov	r1, r6
 800683c:	4628      	mov	r0, r5
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	f43f ae36 	beq.w	80064b2 <_printf_float+0xbe>
 8006846:	f108 0801 	add.w	r8, r8, #1
 800684a:	68e3      	ldr	r3, [r4, #12]
 800684c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800684e:	1a5b      	subs	r3, r3, r1
 8006850:	4543      	cmp	r3, r8
 8006852:	dcf0      	bgt.n	8006836 <_printf_float+0x442>
 8006854:	e6f8      	b.n	8006648 <_printf_float+0x254>
 8006856:	f04f 0800 	mov.w	r8, #0
 800685a:	f104 0919 	add.w	r9, r4, #25
 800685e:	e7f4      	b.n	800684a <_printf_float+0x456>

08006860 <_printf_common>:
 8006860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006864:	4616      	mov	r6, r2
 8006866:	4699      	mov	r9, r3
 8006868:	688a      	ldr	r2, [r1, #8]
 800686a:	690b      	ldr	r3, [r1, #16]
 800686c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006870:	4293      	cmp	r3, r2
 8006872:	bfb8      	it	lt
 8006874:	4613      	movlt	r3, r2
 8006876:	6033      	str	r3, [r6, #0]
 8006878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800687c:	4607      	mov	r7, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b10a      	cbz	r2, 8006886 <_printf_common+0x26>
 8006882:	3301      	adds	r3, #1
 8006884:	6033      	str	r3, [r6, #0]
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	0699      	lsls	r1, r3, #26
 800688a:	bf42      	ittt	mi
 800688c:	6833      	ldrmi	r3, [r6, #0]
 800688e:	3302      	addmi	r3, #2
 8006890:	6033      	strmi	r3, [r6, #0]
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	f015 0506 	ands.w	r5, r5, #6
 8006898:	d106      	bne.n	80068a8 <_printf_common+0x48>
 800689a:	f104 0a19 	add.w	sl, r4, #25
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	6832      	ldr	r2, [r6, #0]
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dc26      	bgt.n	80068f6 <_printf_common+0x96>
 80068a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068ac:	1e13      	subs	r3, r2, #0
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	bf18      	it	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	0692      	lsls	r2, r2, #26
 80068b6:	d42b      	bmi.n	8006910 <_printf_common+0xb0>
 80068b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068bc:	4649      	mov	r1, r9
 80068be:	4638      	mov	r0, r7
 80068c0:	47c0      	blx	r8
 80068c2:	3001      	adds	r0, #1
 80068c4:	d01e      	beq.n	8006904 <_printf_common+0xa4>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	6922      	ldr	r2, [r4, #16]
 80068ca:	f003 0306 	and.w	r3, r3, #6
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	bf02      	ittt	eq
 80068d2:	68e5      	ldreq	r5, [r4, #12]
 80068d4:	6833      	ldreq	r3, [r6, #0]
 80068d6:	1aed      	subeq	r5, r5, r3
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	bf0c      	ite	eq
 80068dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e0:	2500      	movne	r5, #0
 80068e2:	4293      	cmp	r3, r2
 80068e4:	bfc4      	itt	gt
 80068e6:	1a9b      	subgt	r3, r3, r2
 80068e8:	18ed      	addgt	r5, r5, r3
 80068ea:	2600      	movs	r6, #0
 80068ec:	341a      	adds	r4, #26
 80068ee:	42b5      	cmp	r5, r6
 80068f0:	d11a      	bne.n	8006928 <_printf_common+0xc8>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e008      	b.n	8006908 <_printf_common+0xa8>
 80068f6:	2301      	movs	r3, #1
 80068f8:	4652      	mov	r2, sl
 80068fa:	4649      	mov	r1, r9
 80068fc:	4638      	mov	r0, r7
 80068fe:	47c0      	blx	r8
 8006900:	3001      	adds	r0, #1
 8006902:	d103      	bne.n	800690c <_printf_common+0xac>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690c:	3501      	adds	r5, #1
 800690e:	e7c6      	b.n	800689e <_printf_common+0x3e>
 8006910:	18e1      	adds	r1, r4, r3
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	2030      	movs	r0, #48	; 0x30
 8006916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800691a:	4422      	add	r2, r4
 800691c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006924:	3302      	adds	r3, #2
 8006926:	e7c7      	b.n	80068b8 <_printf_common+0x58>
 8006928:	2301      	movs	r3, #1
 800692a:	4622      	mov	r2, r4
 800692c:	4649      	mov	r1, r9
 800692e:	4638      	mov	r0, r7
 8006930:	47c0      	blx	r8
 8006932:	3001      	adds	r0, #1
 8006934:	d0e6      	beq.n	8006904 <_printf_common+0xa4>
 8006936:	3601      	adds	r6, #1
 8006938:	e7d9      	b.n	80068ee <_printf_common+0x8e>
	...

0800693c <_printf_i>:
 800693c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	7e0f      	ldrb	r7, [r1, #24]
 8006942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006944:	2f78      	cmp	r7, #120	; 0x78
 8006946:	4691      	mov	r9, r2
 8006948:	4680      	mov	r8, r0
 800694a:	460c      	mov	r4, r1
 800694c:	469a      	mov	sl, r3
 800694e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006952:	d807      	bhi.n	8006964 <_printf_i+0x28>
 8006954:	2f62      	cmp	r7, #98	; 0x62
 8006956:	d80a      	bhi.n	800696e <_printf_i+0x32>
 8006958:	2f00      	cmp	r7, #0
 800695a:	f000 80d4 	beq.w	8006b06 <_printf_i+0x1ca>
 800695e:	2f58      	cmp	r7, #88	; 0x58
 8006960:	f000 80c0 	beq.w	8006ae4 <_printf_i+0x1a8>
 8006964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800696c:	e03a      	b.n	80069e4 <_printf_i+0xa8>
 800696e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006972:	2b15      	cmp	r3, #21
 8006974:	d8f6      	bhi.n	8006964 <_printf_i+0x28>
 8006976:	a101      	add	r1, pc, #4	; (adr r1, 800697c <_printf_i+0x40>)
 8006978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069e9 	.word	0x080069e9
 8006984:	08006965 	.word	0x08006965
 8006988:	08006965 	.word	0x08006965
 800698c:	08006965 	.word	0x08006965
 8006990:	08006965 	.word	0x08006965
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006965 	.word	0x08006965
 800699c:	08006965 	.word	0x08006965
 80069a0:	08006965 	.word	0x08006965
 80069a4:	08006965 	.word	0x08006965
 80069a8:	08006aed 	.word	0x08006aed
 80069ac:	08006a15 	.word	0x08006a15
 80069b0:	08006aa7 	.word	0x08006aa7
 80069b4:	08006965 	.word	0x08006965
 80069b8:	08006965 	.word	0x08006965
 80069bc:	08006b0f 	.word	0x08006b0f
 80069c0:	08006965 	.word	0x08006965
 80069c4:	08006a15 	.word	0x08006a15
 80069c8:	08006965 	.word	0x08006965
 80069cc:	08006965 	.word	0x08006965
 80069d0:	08006aaf 	.word	0x08006aaf
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	602a      	str	r2, [r5, #0]
 80069dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069e4:	2301      	movs	r3, #1
 80069e6:	e09f      	b.n	8006b28 <_printf_i+0x1ec>
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	0607      	lsls	r7, r0, #24
 80069ee:	f103 0104 	add.w	r1, r3, #4
 80069f2:	6029      	str	r1, [r5, #0]
 80069f4:	d501      	bpl.n	80069fa <_printf_i+0xbe>
 80069f6:	681e      	ldr	r6, [r3, #0]
 80069f8:	e003      	b.n	8006a02 <_printf_i+0xc6>
 80069fa:	0646      	lsls	r6, r0, #25
 80069fc:	d5fb      	bpl.n	80069f6 <_printf_i+0xba>
 80069fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a02:	2e00      	cmp	r6, #0
 8006a04:	da03      	bge.n	8006a0e <_printf_i+0xd2>
 8006a06:	232d      	movs	r3, #45	; 0x2d
 8006a08:	4276      	negs	r6, r6
 8006a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0e:	485a      	ldr	r0, [pc, #360]	; (8006b78 <_printf_i+0x23c>)
 8006a10:	230a      	movs	r3, #10
 8006a12:	e012      	b.n	8006a3a <_printf_i+0xfe>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	6820      	ldr	r0, [r4, #0]
 8006a18:	1d19      	adds	r1, r3, #4
 8006a1a:	6029      	str	r1, [r5, #0]
 8006a1c:	0605      	lsls	r5, r0, #24
 8006a1e:	d501      	bpl.n	8006a24 <_printf_i+0xe8>
 8006a20:	681e      	ldr	r6, [r3, #0]
 8006a22:	e002      	b.n	8006a2a <_printf_i+0xee>
 8006a24:	0641      	lsls	r1, r0, #25
 8006a26:	d5fb      	bpl.n	8006a20 <_printf_i+0xe4>
 8006a28:	881e      	ldrh	r6, [r3, #0]
 8006a2a:	4853      	ldr	r0, [pc, #332]	; (8006b78 <_printf_i+0x23c>)
 8006a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a2e:	bf0c      	ite	eq
 8006a30:	2308      	moveq	r3, #8
 8006a32:	230a      	movne	r3, #10
 8006a34:	2100      	movs	r1, #0
 8006a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a3a:	6865      	ldr	r5, [r4, #4]
 8006a3c:	60a5      	str	r5, [r4, #8]
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	bfa2      	ittt	ge
 8006a42:	6821      	ldrge	r1, [r4, #0]
 8006a44:	f021 0104 	bicge.w	r1, r1, #4
 8006a48:	6021      	strge	r1, [r4, #0]
 8006a4a:	b90e      	cbnz	r6, 8006a50 <_printf_i+0x114>
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	d04b      	beq.n	8006ae8 <_printf_i+0x1ac>
 8006a50:	4615      	mov	r5, r2
 8006a52:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a56:	fb03 6711 	mls	r7, r3, r1, r6
 8006a5a:	5dc7      	ldrb	r7, [r0, r7]
 8006a5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a60:	4637      	mov	r7, r6
 8006a62:	42bb      	cmp	r3, r7
 8006a64:	460e      	mov	r6, r1
 8006a66:	d9f4      	bls.n	8006a52 <_printf_i+0x116>
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d10b      	bne.n	8006a84 <_printf_i+0x148>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	07de      	lsls	r6, r3, #31
 8006a70:	d508      	bpl.n	8006a84 <_printf_i+0x148>
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	6861      	ldr	r1, [r4, #4]
 8006a76:	4299      	cmp	r1, r3
 8006a78:	bfde      	ittt	le
 8006a7a:	2330      	movle	r3, #48	; 0x30
 8006a7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a84:	1b52      	subs	r2, r2, r5
 8006a86:	6122      	str	r2, [r4, #16]
 8006a88:	f8cd a000 	str.w	sl, [sp]
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	aa03      	add	r2, sp, #12
 8006a90:	4621      	mov	r1, r4
 8006a92:	4640      	mov	r0, r8
 8006a94:	f7ff fee4 	bl	8006860 <_printf_common>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d14a      	bne.n	8006b32 <_printf_i+0x1f6>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	b004      	add	sp, #16
 8006aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	f043 0320 	orr.w	r3, r3, #32
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	4833      	ldr	r0, [pc, #204]	; (8006b7c <_printf_i+0x240>)
 8006ab0:	2778      	movs	r7, #120	; 0x78
 8006ab2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	6829      	ldr	r1, [r5, #0]
 8006aba:	061f      	lsls	r7, r3, #24
 8006abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ac0:	d402      	bmi.n	8006ac8 <_printf_i+0x18c>
 8006ac2:	065f      	lsls	r7, r3, #25
 8006ac4:	bf48      	it	mi
 8006ac6:	b2b6      	uxthmi	r6, r6
 8006ac8:	07df      	lsls	r7, r3, #31
 8006aca:	bf48      	it	mi
 8006acc:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad0:	6029      	str	r1, [r5, #0]
 8006ad2:	bf48      	it	mi
 8006ad4:	6023      	strmi	r3, [r4, #0]
 8006ad6:	b91e      	cbnz	r6, 8006ae0 <_printf_i+0x1a4>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	f023 0320 	bic.w	r3, r3, #32
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	e7a7      	b.n	8006a34 <_printf_i+0xf8>
 8006ae4:	4824      	ldr	r0, [pc, #144]	; (8006b78 <_printf_i+0x23c>)
 8006ae6:	e7e4      	b.n	8006ab2 <_printf_i+0x176>
 8006ae8:	4615      	mov	r5, r2
 8006aea:	e7bd      	b.n	8006a68 <_printf_i+0x12c>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	6826      	ldr	r6, [r4, #0]
 8006af0:	6961      	ldr	r1, [r4, #20]
 8006af2:	1d18      	adds	r0, r3, #4
 8006af4:	6028      	str	r0, [r5, #0]
 8006af6:	0635      	lsls	r5, r6, #24
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	d501      	bpl.n	8006b00 <_printf_i+0x1c4>
 8006afc:	6019      	str	r1, [r3, #0]
 8006afe:	e002      	b.n	8006b06 <_printf_i+0x1ca>
 8006b00:	0670      	lsls	r0, r6, #25
 8006b02:	d5fb      	bpl.n	8006afc <_printf_i+0x1c0>
 8006b04:	8019      	strh	r1, [r3, #0]
 8006b06:	2300      	movs	r3, #0
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	4615      	mov	r5, r2
 8006b0c:	e7bc      	b.n	8006a88 <_printf_i+0x14c>
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	1d1a      	adds	r2, r3, #4
 8006b12:	602a      	str	r2, [r5, #0]
 8006b14:	681d      	ldr	r5, [r3, #0]
 8006b16:	6862      	ldr	r2, [r4, #4]
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f7f9 fb70 	bl	8000200 <memchr>
 8006b20:	b108      	cbz	r0, 8006b26 <_printf_i+0x1ea>
 8006b22:	1b40      	subs	r0, r0, r5
 8006b24:	6060      	str	r0, [r4, #4]
 8006b26:	6863      	ldr	r3, [r4, #4]
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b30:	e7aa      	b.n	8006a88 <_printf_i+0x14c>
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	462a      	mov	r2, r5
 8006b36:	4649      	mov	r1, r9
 8006b38:	4640      	mov	r0, r8
 8006b3a:	47d0      	blx	sl
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d0ad      	beq.n	8006a9c <_printf_i+0x160>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	079b      	lsls	r3, r3, #30
 8006b44:	d413      	bmi.n	8006b6e <_printf_i+0x232>
 8006b46:	68e0      	ldr	r0, [r4, #12]
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	4298      	cmp	r0, r3
 8006b4c:	bfb8      	it	lt
 8006b4e:	4618      	movlt	r0, r3
 8006b50:	e7a6      	b.n	8006aa0 <_printf_i+0x164>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4632      	mov	r2, r6
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d09d      	beq.n	8006a9c <_printf_i+0x160>
 8006b60:	3501      	adds	r5, #1
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	9903      	ldr	r1, [sp, #12]
 8006b66:	1a5b      	subs	r3, r3, r1
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dcf2      	bgt.n	8006b52 <_printf_i+0x216>
 8006b6c:	e7eb      	b.n	8006b46 <_printf_i+0x20a>
 8006b6e:	2500      	movs	r5, #0
 8006b70:	f104 0619 	add.w	r6, r4, #25
 8006b74:	e7f5      	b.n	8006b62 <_printf_i+0x226>
 8006b76:	bf00      	nop
 8006b78:	0800cb9c 	.word	0x0800cb9c
 8006b7c:	0800cbad 	.word	0x0800cbad

08006b80 <_scanf_float>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	b087      	sub	sp, #28
 8006b86:	4617      	mov	r7, r2
 8006b88:	9303      	str	r3, [sp, #12]
 8006b8a:	688b      	ldr	r3, [r1, #8]
 8006b8c:	1e5a      	subs	r2, r3, #1
 8006b8e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b92:	bf83      	ittte	hi
 8006b94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006b98:	195b      	addhi	r3, r3, r5
 8006b9a:	9302      	strhi	r3, [sp, #8]
 8006b9c:	2300      	movls	r3, #0
 8006b9e:	bf86      	itte	hi
 8006ba0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ba4:	608b      	strhi	r3, [r1, #8]
 8006ba6:	9302      	strls	r3, [sp, #8]
 8006ba8:	680b      	ldr	r3, [r1, #0]
 8006baa:	468b      	mov	fp, r1
 8006bac:	2500      	movs	r5, #0
 8006bae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006bb2:	f84b 3b1c 	str.w	r3, [fp], #28
 8006bb6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006bba:	4680      	mov	r8, r0
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	465e      	mov	r6, fp
 8006bc0:	46aa      	mov	sl, r5
 8006bc2:	46a9      	mov	r9, r5
 8006bc4:	9501      	str	r5, [sp, #4]
 8006bc6:	68a2      	ldr	r2, [r4, #8]
 8006bc8:	b152      	cbz	r2, 8006be0 <_scanf_float+0x60>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b4e      	cmp	r3, #78	; 0x4e
 8006bd0:	d864      	bhi.n	8006c9c <_scanf_float+0x11c>
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d83c      	bhi.n	8006c50 <_scanf_float+0xd0>
 8006bd6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006bda:	b2c8      	uxtb	r0, r1
 8006bdc:	280e      	cmp	r0, #14
 8006bde:	d93a      	bls.n	8006c56 <_scanf_float+0xd6>
 8006be0:	f1b9 0f00 	cmp.w	r9, #0
 8006be4:	d003      	beq.n	8006bee <_scanf_float+0x6e>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bf2:	f1ba 0f01 	cmp.w	sl, #1
 8006bf6:	f200 8113 	bhi.w	8006e20 <_scanf_float+0x2a0>
 8006bfa:	455e      	cmp	r6, fp
 8006bfc:	f200 8105 	bhi.w	8006e0a <_scanf_float+0x28a>
 8006c00:	2501      	movs	r5, #1
 8006c02:	4628      	mov	r0, r5
 8006c04:	b007      	add	sp, #28
 8006c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006c0e:	2a0d      	cmp	r2, #13
 8006c10:	d8e6      	bhi.n	8006be0 <_scanf_float+0x60>
 8006c12:	a101      	add	r1, pc, #4	; (adr r1, 8006c18 <_scanf_float+0x98>)
 8006c14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c18:	08006d57 	.word	0x08006d57
 8006c1c:	08006be1 	.word	0x08006be1
 8006c20:	08006be1 	.word	0x08006be1
 8006c24:	08006be1 	.word	0x08006be1
 8006c28:	08006db7 	.word	0x08006db7
 8006c2c:	08006d8f 	.word	0x08006d8f
 8006c30:	08006be1 	.word	0x08006be1
 8006c34:	08006be1 	.word	0x08006be1
 8006c38:	08006d65 	.word	0x08006d65
 8006c3c:	08006be1 	.word	0x08006be1
 8006c40:	08006be1 	.word	0x08006be1
 8006c44:	08006be1 	.word	0x08006be1
 8006c48:	08006be1 	.word	0x08006be1
 8006c4c:	08006d1d 	.word	0x08006d1d
 8006c50:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006c54:	e7db      	b.n	8006c0e <_scanf_float+0x8e>
 8006c56:	290e      	cmp	r1, #14
 8006c58:	d8c2      	bhi.n	8006be0 <_scanf_float+0x60>
 8006c5a:	a001      	add	r0, pc, #4	; (adr r0, 8006c60 <_scanf_float+0xe0>)
 8006c5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c60:	08006d0f 	.word	0x08006d0f
 8006c64:	08006be1 	.word	0x08006be1
 8006c68:	08006d0f 	.word	0x08006d0f
 8006c6c:	08006da3 	.word	0x08006da3
 8006c70:	08006be1 	.word	0x08006be1
 8006c74:	08006cbd 	.word	0x08006cbd
 8006c78:	08006cf9 	.word	0x08006cf9
 8006c7c:	08006cf9 	.word	0x08006cf9
 8006c80:	08006cf9 	.word	0x08006cf9
 8006c84:	08006cf9 	.word	0x08006cf9
 8006c88:	08006cf9 	.word	0x08006cf9
 8006c8c:	08006cf9 	.word	0x08006cf9
 8006c90:	08006cf9 	.word	0x08006cf9
 8006c94:	08006cf9 	.word	0x08006cf9
 8006c98:	08006cf9 	.word	0x08006cf9
 8006c9c:	2b6e      	cmp	r3, #110	; 0x6e
 8006c9e:	d809      	bhi.n	8006cb4 <_scanf_float+0x134>
 8006ca0:	2b60      	cmp	r3, #96	; 0x60
 8006ca2:	d8b2      	bhi.n	8006c0a <_scanf_float+0x8a>
 8006ca4:	2b54      	cmp	r3, #84	; 0x54
 8006ca6:	d077      	beq.n	8006d98 <_scanf_float+0x218>
 8006ca8:	2b59      	cmp	r3, #89	; 0x59
 8006caa:	d199      	bne.n	8006be0 <_scanf_float+0x60>
 8006cac:	2d07      	cmp	r5, #7
 8006cae:	d197      	bne.n	8006be0 <_scanf_float+0x60>
 8006cb0:	2508      	movs	r5, #8
 8006cb2:	e029      	b.n	8006d08 <_scanf_float+0x188>
 8006cb4:	2b74      	cmp	r3, #116	; 0x74
 8006cb6:	d06f      	beq.n	8006d98 <_scanf_float+0x218>
 8006cb8:	2b79      	cmp	r3, #121	; 0x79
 8006cba:	e7f6      	b.n	8006caa <_scanf_float+0x12a>
 8006cbc:	6821      	ldr	r1, [r4, #0]
 8006cbe:	05c8      	lsls	r0, r1, #23
 8006cc0:	d51a      	bpl.n	8006cf8 <_scanf_float+0x178>
 8006cc2:	9b02      	ldr	r3, [sp, #8]
 8006cc4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006cc8:	6021      	str	r1, [r4, #0]
 8006cca:	f109 0901 	add.w	r9, r9, #1
 8006cce:	b11b      	cbz	r3, 8006cd8 <_scanf_float+0x158>
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	3201      	adds	r2, #1
 8006cd4:	9302      	str	r3, [sp, #8]
 8006cd6:	60a2      	str	r2, [r4, #8]
 8006cd8:	68a3      	ldr	r3, [r4, #8]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	60a3      	str	r3, [r4, #8]
 8006cde:	6923      	ldr	r3, [r4, #16]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	6123      	str	r3, [r4, #16]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	607b      	str	r3, [r7, #4]
 8006cec:	f340 8084 	ble.w	8006df8 <_scanf_float+0x278>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	603b      	str	r3, [r7, #0]
 8006cf6:	e766      	b.n	8006bc6 <_scanf_float+0x46>
 8006cf8:	eb1a 0f05 	cmn.w	sl, r5
 8006cfc:	f47f af70 	bne.w	8006be0 <_scanf_float+0x60>
 8006d00:	6822      	ldr	r2, [r4, #0]
 8006d02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006d06:	6022      	str	r2, [r4, #0]
 8006d08:	f806 3b01 	strb.w	r3, [r6], #1
 8006d0c:	e7e4      	b.n	8006cd8 <_scanf_float+0x158>
 8006d0e:	6822      	ldr	r2, [r4, #0]
 8006d10:	0610      	lsls	r0, r2, #24
 8006d12:	f57f af65 	bpl.w	8006be0 <_scanf_float+0x60>
 8006d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d1a:	e7f4      	b.n	8006d06 <_scanf_float+0x186>
 8006d1c:	f1ba 0f00 	cmp.w	sl, #0
 8006d20:	d10e      	bne.n	8006d40 <_scanf_float+0x1c0>
 8006d22:	f1b9 0f00 	cmp.w	r9, #0
 8006d26:	d10e      	bne.n	8006d46 <_scanf_float+0x1c6>
 8006d28:	6822      	ldr	r2, [r4, #0]
 8006d2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d32:	d108      	bne.n	8006d46 <_scanf_float+0x1c6>
 8006d34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d38:	6022      	str	r2, [r4, #0]
 8006d3a:	f04f 0a01 	mov.w	sl, #1
 8006d3e:	e7e3      	b.n	8006d08 <_scanf_float+0x188>
 8006d40:	f1ba 0f02 	cmp.w	sl, #2
 8006d44:	d055      	beq.n	8006df2 <_scanf_float+0x272>
 8006d46:	2d01      	cmp	r5, #1
 8006d48:	d002      	beq.n	8006d50 <_scanf_float+0x1d0>
 8006d4a:	2d04      	cmp	r5, #4
 8006d4c:	f47f af48 	bne.w	8006be0 <_scanf_float+0x60>
 8006d50:	3501      	adds	r5, #1
 8006d52:	b2ed      	uxtb	r5, r5
 8006d54:	e7d8      	b.n	8006d08 <_scanf_float+0x188>
 8006d56:	f1ba 0f01 	cmp.w	sl, #1
 8006d5a:	f47f af41 	bne.w	8006be0 <_scanf_float+0x60>
 8006d5e:	f04f 0a02 	mov.w	sl, #2
 8006d62:	e7d1      	b.n	8006d08 <_scanf_float+0x188>
 8006d64:	b97d      	cbnz	r5, 8006d86 <_scanf_float+0x206>
 8006d66:	f1b9 0f00 	cmp.w	r9, #0
 8006d6a:	f47f af3c 	bne.w	8006be6 <_scanf_float+0x66>
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d78:	f47f af39 	bne.w	8006bee <_scanf_float+0x6e>
 8006d7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d80:	6022      	str	r2, [r4, #0]
 8006d82:	2501      	movs	r5, #1
 8006d84:	e7c0      	b.n	8006d08 <_scanf_float+0x188>
 8006d86:	2d03      	cmp	r5, #3
 8006d88:	d0e2      	beq.n	8006d50 <_scanf_float+0x1d0>
 8006d8a:	2d05      	cmp	r5, #5
 8006d8c:	e7de      	b.n	8006d4c <_scanf_float+0x1cc>
 8006d8e:	2d02      	cmp	r5, #2
 8006d90:	f47f af26 	bne.w	8006be0 <_scanf_float+0x60>
 8006d94:	2503      	movs	r5, #3
 8006d96:	e7b7      	b.n	8006d08 <_scanf_float+0x188>
 8006d98:	2d06      	cmp	r5, #6
 8006d9a:	f47f af21 	bne.w	8006be0 <_scanf_float+0x60>
 8006d9e:	2507      	movs	r5, #7
 8006da0:	e7b2      	b.n	8006d08 <_scanf_float+0x188>
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	0591      	lsls	r1, r2, #22
 8006da6:	f57f af1b 	bpl.w	8006be0 <_scanf_float+0x60>
 8006daa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006dae:	6022      	str	r2, [r4, #0]
 8006db0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006db4:	e7a8      	b.n	8006d08 <_scanf_float+0x188>
 8006db6:	6822      	ldr	r2, [r4, #0]
 8006db8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006dbc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006dc0:	d006      	beq.n	8006dd0 <_scanf_float+0x250>
 8006dc2:	0550      	lsls	r0, r2, #21
 8006dc4:	f57f af0c 	bpl.w	8006be0 <_scanf_float+0x60>
 8006dc8:	f1b9 0f00 	cmp.w	r9, #0
 8006dcc:	f43f af0f 	beq.w	8006bee <_scanf_float+0x6e>
 8006dd0:	0591      	lsls	r1, r2, #22
 8006dd2:	bf58      	it	pl
 8006dd4:	9901      	ldrpl	r1, [sp, #4]
 8006dd6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006dda:	bf58      	it	pl
 8006ddc:	eba9 0101 	subpl.w	r1, r9, r1
 8006de0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006de4:	bf58      	it	pl
 8006de6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006dea:	6022      	str	r2, [r4, #0]
 8006dec:	f04f 0900 	mov.w	r9, #0
 8006df0:	e78a      	b.n	8006d08 <_scanf_float+0x188>
 8006df2:	f04f 0a03 	mov.w	sl, #3
 8006df6:	e787      	b.n	8006d08 <_scanf_float+0x188>
 8006df8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	4640      	mov	r0, r8
 8006e00:	4798      	blx	r3
 8006e02:	2800      	cmp	r0, #0
 8006e04:	f43f aedf 	beq.w	8006bc6 <_scanf_float+0x46>
 8006e08:	e6ea      	b.n	8006be0 <_scanf_float+0x60>
 8006e0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e12:	463a      	mov	r2, r7
 8006e14:	4640      	mov	r0, r8
 8006e16:	4798      	blx	r3
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	6123      	str	r3, [r4, #16]
 8006e1e:	e6ec      	b.n	8006bfa <_scanf_float+0x7a>
 8006e20:	1e6b      	subs	r3, r5, #1
 8006e22:	2b06      	cmp	r3, #6
 8006e24:	d825      	bhi.n	8006e72 <_scanf_float+0x2f2>
 8006e26:	2d02      	cmp	r5, #2
 8006e28:	d836      	bhi.n	8006e98 <_scanf_float+0x318>
 8006e2a:	455e      	cmp	r6, fp
 8006e2c:	f67f aee8 	bls.w	8006c00 <_scanf_float+0x80>
 8006e30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e38:	463a      	mov	r2, r7
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4798      	blx	r3
 8006e3e:	6923      	ldr	r3, [r4, #16]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	6123      	str	r3, [r4, #16]
 8006e44:	e7f1      	b.n	8006e2a <_scanf_float+0x2aa>
 8006e46:	9802      	ldr	r0, [sp, #8]
 8006e48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006e50:	9002      	str	r0, [sp, #8]
 8006e52:	463a      	mov	r2, r7
 8006e54:	4640      	mov	r0, r8
 8006e56:	4798      	blx	r3
 8006e58:	6923      	ldr	r3, [r4, #16]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e62:	fa5f fa8a 	uxtb.w	sl, sl
 8006e66:	f1ba 0f02 	cmp.w	sl, #2
 8006e6a:	d1ec      	bne.n	8006e46 <_scanf_float+0x2c6>
 8006e6c:	3d03      	subs	r5, #3
 8006e6e:	b2ed      	uxtb	r5, r5
 8006e70:	1b76      	subs	r6, r6, r5
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	05da      	lsls	r2, r3, #23
 8006e76:	d52f      	bpl.n	8006ed8 <_scanf_float+0x358>
 8006e78:	055b      	lsls	r3, r3, #21
 8006e7a:	d510      	bpl.n	8006e9e <_scanf_float+0x31e>
 8006e7c:	455e      	cmp	r6, fp
 8006e7e:	f67f aebf 	bls.w	8006c00 <_scanf_float+0x80>
 8006e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e8a:	463a      	mov	r2, r7
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	4798      	blx	r3
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	6123      	str	r3, [r4, #16]
 8006e96:	e7f1      	b.n	8006e7c <_scanf_float+0x2fc>
 8006e98:	46aa      	mov	sl, r5
 8006e9a:	9602      	str	r6, [sp, #8]
 8006e9c:	e7df      	b.n	8006e5e <_scanf_float+0x2de>
 8006e9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	2965      	cmp	r1, #101	; 0x65
 8006ea6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006eaa:	f106 35ff 	add.w	r5, r6, #4294967295
 8006eae:	6123      	str	r3, [r4, #16]
 8006eb0:	d00c      	beq.n	8006ecc <_scanf_float+0x34c>
 8006eb2:	2945      	cmp	r1, #69	; 0x45
 8006eb4:	d00a      	beq.n	8006ecc <_scanf_float+0x34c>
 8006eb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eba:	463a      	mov	r2, r7
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4798      	blx	r3
 8006ec0:	6923      	ldr	r3, [r4, #16]
 8006ec2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	1eb5      	subs	r5, r6, #2
 8006eca:	6123      	str	r3, [r4, #16]
 8006ecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ed0:	463a      	mov	r2, r7
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	4798      	blx	r3
 8006ed6:	462e      	mov	r6, r5
 8006ed8:	6825      	ldr	r5, [r4, #0]
 8006eda:	f015 0510 	ands.w	r5, r5, #16
 8006ede:	d158      	bne.n	8006f92 <_scanf_float+0x412>
 8006ee0:	7035      	strb	r5, [r6, #0]
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eec:	d11c      	bne.n	8006f28 <_scanf_float+0x3a8>
 8006eee:	9b01      	ldr	r3, [sp, #4]
 8006ef0:	454b      	cmp	r3, r9
 8006ef2:	eba3 0209 	sub.w	r2, r3, r9
 8006ef6:	d124      	bne.n	8006f42 <_scanf_float+0x3c2>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4659      	mov	r1, fp
 8006efc:	4640      	mov	r0, r8
 8006efe:	f002 fc67 	bl	80097d0 <_strtod_r>
 8006f02:	9b03      	ldr	r3, [sp, #12]
 8006f04:	6821      	ldr	r1, [r4, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f011 0f02 	tst.w	r1, #2
 8006f0c:	ec57 6b10 	vmov	r6, r7, d0
 8006f10:	f103 0204 	add.w	r2, r3, #4
 8006f14:	d020      	beq.n	8006f58 <_scanf_float+0x3d8>
 8006f16:	9903      	ldr	r1, [sp, #12]
 8006f18:	600a      	str	r2, [r1, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	e9c3 6700 	strd	r6, r7, [r3]
 8006f20:	68e3      	ldr	r3, [r4, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60e3      	str	r3, [r4, #12]
 8006f26:	e66c      	b.n	8006c02 <_scanf_float+0x82>
 8006f28:	9b04      	ldr	r3, [sp, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0e4      	beq.n	8006ef8 <_scanf_float+0x378>
 8006f2e:	9905      	ldr	r1, [sp, #20]
 8006f30:	230a      	movs	r3, #10
 8006f32:	462a      	mov	r2, r5
 8006f34:	3101      	adds	r1, #1
 8006f36:	4640      	mov	r0, r8
 8006f38:	f002 fcd2 	bl	80098e0 <_strtol_r>
 8006f3c:	9b04      	ldr	r3, [sp, #16]
 8006f3e:	9e05      	ldr	r6, [sp, #20]
 8006f40:	1ac2      	subs	r2, r0, r3
 8006f42:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006f46:	429e      	cmp	r6, r3
 8006f48:	bf28      	it	cs
 8006f4a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006f4e:	4912      	ldr	r1, [pc, #72]	; (8006f98 <_scanf_float+0x418>)
 8006f50:	4630      	mov	r0, r6
 8006f52:	f000 f8e7 	bl	8007124 <siprintf>
 8006f56:	e7cf      	b.n	8006ef8 <_scanf_float+0x378>
 8006f58:	f011 0f04 	tst.w	r1, #4
 8006f5c:	9903      	ldr	r1, [sp, #12]
 8006f5e:	600a      	str	r2, [r1, #0]
 8006f60:	d1db      	bne.n	8006f1a <_scanf_float+0x39a>
 8006f62:	f8d3 8000 	ldr.w	r8, [r3]
 8006f66:	ee10 2a10 	vmov	r2, s0
 8006f6a:	ee10 0a10 	vmov	r0, s0
 8006f6e:	463b      	mov	r3, r7
 8006f70:	4639      	mov	r1, r7
 8006f72:	f7f9 fdf3 	bl	8000b5c <__aeabi_dcmpun>
 8006f76:	b128      	cbz	r0, 8006f84 <_scanf_float+0x404>
 8006f78:	4808      	ldr	r0, [pc, #32]	; (8006f9c <_scanf_float+0x41c>)
 8006f7a:	f000 f9ed 	bl	8007358 <nanf>
 8006f7e:	ed88 0a00 	vstr	s0, [r8]
 8006f82:	e7cd      	b.n	8006f20 <_scanf_float+0x3a0>
 8006f84:	4630      	mov	r0, r6
 8006f86:	4639      	mov	r1, r7
 8006f88:	f7f9 fe46 	bl	8000c18 <__aeabi_d2f>
 8006f8c:	f8c8 0000 	str.w	r0, [r8]
 8006f90:	e7c6      	b.n	8006f20 <_scanf_float+0x3a0>
 8006f92:	2500      	movs	r5, #0
 8006f94:	e635      	b.n	8006c02 <_scanf_float+0x82>
 8006f96:	bf00      	nop
 8006f98:	0800cbbe 	.word	0x0800cbbe
 8006f9c:	0800cf70 	.word	0x0800cf70

08006fa0 <std>:
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	b510      	push	{r4, lr}
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8006faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fae:	6083      	str	r3, [r0, #8]
 8006fb0:	8181      	strh	r1, [r0, #12]
 8006fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8006fb4:	81c2      	strh	r2, [r0, #14]
 8006fb6:	6183      	str	r3, [r0, #24]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	2208      	movs	r2, #8
 8006fbc:	305c      	adds	r0, #92	; 0x5c
 8006fbe:	f000 f942 	bl	8007246 <memset>
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <std+0x58>)
 8006fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <std+0x5c>)
 8006fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fca:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <std+0x60>)
 8006fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fce:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <std+0x64>)
 8006fd0:	6323      	str	r3, [r4, #48]	; 0x30
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <std+0x68>)
 8006fd4:	6224      	str	r4, [r4, #32]
 8006fd6:	429c      	cmp	r4, r3
 8006fd8:	d006      	beq.n	8006fe8 <std+0x48>
 8006fda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006fde:	4294      	cmp	r4, r2
 8006fe0:	d002      	beq.n	8006fe8 <std+0x48>
 8006fe2:	33d0      	adds	r3, #208	; 0xd0
 8006fe4:	429c      	cmp	r4, r3
 8006fe6:	d105      	bne.n	8006ff4 <std+0x54>
 8006fe8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff0:	f000 b9a6 	b.w	8007340 <__retarget_lock_init_recursive>
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	bf00      	nop
 8006ff8:	080071bd 	.word	0x080071bd
 8006ffc:	080071e3 	.word	0x080071e3
 8007000:	0800721b 	.word	0x0800721b
 8007004:	0800723f 	.word	0x0800723f
 8007008:	20000510 	.word	0x20000510

0800700c <stdio_exit_handler>:
 800700c:	4a02      	ldr	r2, [pc, #8]	; (8007018 <stdio_exit_handler+0xc>)
 800700e:	4903      	ldr	r1, [pc, #12]	; (800701c <stdio_exit_handler+0x10>)
 8007010:	4803      	ldr	r0, [pc, #12]	; (8007020 <stdio_exit_handler+0x14>)
 8007012:	f000 b869 	b.w	80070e8 <_fwalk_sglue>
 8007016:	bf00      	nop
 8007018:	2000000c 	.word	0x2000000c
 800701c:	0800a2e1 	.word	0x0800a2e1
 8007020:	20000018 	.word	0x20000018

08007024 <cleanup_stdio>:
 8007024:	6841      	ldr	r1, [r0, #4]
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <cleanup_stdio+0x34>)
 8007028:	4299      	cmp	r1, r3
 800702a:	b510      	push	{r4, lr}
 800702c:	4604      	mov	r4, r0
 800702e:	d001      	beq.n	8007034 <cleanup_stdio+0x10>
 8007030:	f003 f956 	bl	800a2e0 <_fflush_r>
 8007034:	68a1      	ldr	r1, [r4, #8]
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <cleanup_stdio+0x38>)
 8007038:	4299      	cmp	r1, r3
 800703a:	d002      	beq.n	8007042 <cleanup_stdio+0x1e>
 800703c:	4620      	mov	r0, r4
 800703e:	f003 f94f 	bl	800a2e0 <_fflush_r>
 8007042:	68e1      	ldr	r1, [r4, #12]
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <cleanup_stdio+0x3c>)
 8007046:	4299      	cmp	r1, r3
 8007048:	d004      	beq.n	8007054 <cleanup_stdio+0x30>
 800704a:	4620      	mov	r0, r4
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f003 b946 	b.w	800a2e0 <_fflush_r>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	20000510 	.word	0x20000510
 800705c:	20000578 	.word	0x20000578
 8007060:	200005e0 	.word	0x200005e0

08007064 <global_stdio_init.part.0>:
 8007064:	b510      	push	{r4, lr}
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <global_stdio_init.part.0+0x30>)
 8007068:	4c0b      	ldr	r4, [pc, #44]	; (8007098 <global_stdio_init.part.0+0x34>)
 800706a:	4a0c      	ldr	r2, [pc, #48]	; (800709c <global_stdio_init.part.0+0x38>)
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	4620      	mov	r0, r4
 8007070:	2200      	movs	r2, #0
 8007072:	2104      	movs	r1, #4
 8007074:	f7ff ff94 	bl	8006fa0 <std>
 8007078:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800707c:	2201      	movs	r2, #1
 800707e:	2109      	movs	r1, #9
 8007080:	f7ff ff8e 	bl	8006fa0 <std>
 8007084:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007088:	2202      	movs	r2, #2
 800708a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800708e:	2112      	movs	r1, #18
 8007090:	f7ff bf86 	b.w	8006fa0 <std>
 8007094:	20000648 	.word	0x20000648
 8007098:	20000510 	.word	0x20000510
 800709c:	0800700d 	.word	0x0800700d

080070a0 <__sfp_lock_acquire>:
 80070a0:	4801      	ldr	r0, [pc, #4]	; (80070a8 <__sfp_lock_acquire+0x8>)
 80070a2:	f000 b94e 	b.w	8007342 <__retarget_lock_acquire_recursive>
 80070a6:	bf00      	nop
 80070a8:	20000651 	.word	0x20000651

080070ac <__sfp_lock_release>:
 80070ac:	4801      	ldr	r0, [pc, #4]	; (80070b4 <__sfp_lock_release+0x8>)
 80070ae:	f000 b949 	b.w	8007344 <__retarget_lock_release_recursive>
 80070b2:	bf00      	nop
 80070b4:	20000651 	.word	0x20000651

080070b8 <__sinit>:
 80070b8:	b510      	push	{r4, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	f7ff fff0 	bl	80070a0 <__sfp_lock_acquire>
 80070c0:	6a23      	ldr	r3, [r4, #32]
 80070c2:	b11b      	cbz	r3, 80070cc <__sinit+0x14>
 80070c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c8:	f7ff bff0 	b.w	80070ac <__sfp_lock_release>
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <__sinit+0x28>)
 80070ce:	6223      	str	r3, [r4, #32]
 80070d0:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <__sinit+0x2c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f5      	bne.n	80070c4 <__sinit+0xc>
 80070d8:	f7ff ffc4 	bl	8007064 <global_stdio_init.part.0>
 80070dc:	e7f2      	b.n	80070c4 <__sinit+0xc>
 80070de:	bf00      	nop
 80070e0:	08007025 	.word	0x08007025
 80070e4:	20000648 	.word	0x20000648

080070e8 <_fwalk_sglue>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4607      	mov	r7, r0
 80070ee:	4688      	mov	r8, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	2600      	movs	r6, #0
 80070f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070f8:	f1b9 0901 	subs.w	r9, r9, #1
 80070fc:	d505      	bpl.n	800710a <_fwalk_sglue+0x22>
 80070fe:	6824      	ldr	r4, [r4, #0]
 8007100:	2c00      	cmp	r4, #0
 8007102:	d1f7      	bne.n	80070f4 <_fwalk_sglue+0xc>
 8007104:	4630      	mov	r0, r6
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	89ab      	ldrh	r3, [r5, #12]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d907      	bls.n	8007120 <_fwalk_sglue+0x38>
 8007110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007114:	3301      	adds	r3, #1
 8007116:	d003      	beq.n	8007120 <_fwalk_sglue+0x38>
 8007118:	4629      	mov	r1, r5
 800711a:	4638      	mov	r0, r7
 800711c:	47c0      	blx	r8
 800711e:	4306      	orrs	r6, r0
 8007120:	3568      	adds	r5, #104	; 0x68
 8007122:	e7e9      	b.n	80070f8 <_fwalk_sglue+0x10>

08007124 <siprintf>:
 8007124:	b40e      	push	{r1, r2, r3}
 8007126:	b500      	push	{lr}
 8007128:	b09c      	sub	sp, #112	; 0x70
 800712a:	ab1d      	add	r3, sp, #116	; 0x74
 800712c:	9002      	str	r0, [sp, #8]
 800712e:	9006      	str	r0, [sp, #24]
 8007130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007134:	4809      	ldr	r0, [pc, #36]	; (800715c <siprintf+0x38>)
 8007136:	9107      	str	r1, [sp, #28]
 8007138:	9104      	str	r1, [sp, #16]
 800713a:	4909      	ldr	r1, [pc, #36]	; (8007160 <siprintf+0x3c>)
 800713c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007140:	9105      	str	r1, [sp, #20]
 8007142:	6800      	ldr	r0, [r0, #0]
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	a902      	add	r1, sp, #8
 8007148:	f002 fc26 	bl	8009998 <_svfiprintf_r>
 800714c:	9b02      	ldr	r3, [sp, #8]
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	b01c      	add	sp, #112	; 0x70
 8007154:	f85d eb04 	ldr.w	lr, [sp], #4
 8007158:	b003      	add	sp, #12
 800715a:	4770      	bx	lr
 800715c:	20000064 	.word	0x20000064
 8007160:	ffff0208 	.word	0xffff0208

08007164 <siscanf>:
 8007164:	b40e      	push	{r1, r2, r3}
 8007166:	b510      	push	{r4, lr}
 8007168:	b09f      	sub	sp, #124	; 0x7c
 800716a:	ac21      	add	r4, sp, #132	; 0x84
 800716c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007170:	f854 2b04 	ldr.w	r2, [r4], #4
 8007174:	9201      	str	r2, [sp, #4]
 8007176:	f8ad 101c 	strh.w	r1, [sp, #28]
 800717a:	9004      	str	r0, [sp, #16]
 800717c:	9008      	str	r0, [sp, #32]
 800717e:	f7f9 f88f 	bl	80002a0 <strlen>
 8007182:	4b0c      	ldr	r3, [pc, #48]	; (80071b4 <siscanf+0x50>)
 8007184:	9005      	str	r0, [sp, #20]
 8007186:	9009      	str	r0, [sp, #36]	; 0x24
 8007188:	930d      	str	r3, [sp, #52]	; 0x34
 800718a:	480b      	ldr	r0, [pc, #44]	; (80071b8 <siscanf+0x54>)
 800718c:	9a01      	ldr	r2, [sp, #4]
 800718e:	6800      	ldr	r0, [r0, #0]
 8007190:	9403      	str	r4, [sp, #12]
 8007192:	2300      	movs	r3, #0
 8007194:	9311      	str	r3, [sp, #68]	; 0x44
 8007196:	9316      	str	r3, [sp, #88]	; 0x58
 8007198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800719c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80071a0:	a904      	add	r1, sp, #16
 80071a2:	4623      	mov	r3, r4
 80071a4:	f002 fd50 	bl	8009c48 <__ssvfiscanf_r>
 80071a8:	b01f      	add	sp, #124	; 0x7c
 80071aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ae:	b003      	add	sp, #12
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	080071df 	.word	0x080071df
 80071b8:	20000064 	.word	0x20000064

080071bc <__sread>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	460c      	mov	r4, r1
 80071c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c4:	f000 f86e 	bl	80072a4 <_read_r>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	bfab      	itete	ge
 80071cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071ce:	89a3      	ldrhlt	r3, [r4, #12]
 80071d0:	181b      	addge	r3, r3, r0
 80071d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071d6:	bfac      	ite	ge
 80071d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80071da:	81a3      	strhlt	r3, [r4, #12]
 80071dc:	bd10      	pop	{r4, pc}

080071de <__seofread>:
 80071de:	2000      	movs	r0, #0
 80071e0:	4770      	bx	lr

080071e2 <__swrite>:
 80071e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e6:	461f      	mov	r7, r3
 80071e8:	898b      	ldrh	r3, [r1, #12]
 80071ea:	05db      	lsls	r3, r3, #23
 80071ec:	4605      	mov	r5, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	4616      	mov	r6, r2
 80071f2:	d505      	bpl.n	8007200 <__swrite+0x1e>
 80071f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f8:	2302      	movs	r3, #2
 80071fa:	2200      	movs	r2, #0
 80071fc:	f000 f840 	bl	8007280 <_lseek_r>
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800720a:	81a3      	strh	r3, [r4, #12]
 800720c:	4632      	mov	r2, r6
 800720e:	463b      	mov	r3, r7
 8007210:	4628      	mov	r0, r5
 8007212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007216:	f000 b857 	b.w	80072c8 <_write_r>

0800721a <__sseek>:
 800721a:	b510      	push	{r4, lr}
 800721c:	460c      	mov	r4, r1
 800721e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007222:	f000 f82d 	bl	8007280 <_lseek_r>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	bf15      	itete	ne
 800722c:	6560      	strne	r0, [r4, #84]	; 0x54
 800722e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007236:	81a3      	strheq	r3, [r4, #12]
 8007238:	bf18      	it	ne
 800723a:	81a3      	strhne	r3, [r4, #12]
 800723c:	bd10      	pop	{r4, pc}

0800723e <__sclose>:
 800723e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007242:	f000 b80d 	b.w	8007260 <_close_r>

08007246 <memset>:
 8007246:	4402      	add	r2, r0
 8007248:	4603      	mov	r3, r0
 800724a:	4293      	cmp	r3, r2
 800724c:	d100      	bne.n	8007250 <memset+0xa>
 800724e:	4770      	bx	lr
 8007250:	f803 1b01 	strb.w	r1, [r3], #1
 8007254:	e7f9      	b.n	800724a <memset+0x4>
	...

08007258 <_localeconv_r>:
 8007258:	4800      	ldr	r0, [pc, #0]	; (800725c <_localeconv_r+0x4>)
 800725a:	4770      	bx	lr
 800725c:	20000158 	.word	0x20000158

08007260 <_close_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4d06      	ldr	r5, [pc, #24]	; (800727c <_close_r+0x1c>)
 8007264:	2300      	movs	r3, #0
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	f7fb f9e3 	bl	8002636 <_close>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_close_r+0x1a>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_close_r+0x1a>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	2000064c 	.word	0x2000064c

08007280 <_lseek_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4d07      	ldr	r5, [pc, #28]	; (80072a0 <_lseek_r+0x20>)
 8007284:	4604      	mov	r4, r0
 8007286:	4608      	mov	r0, r1
 8007288:	4611      	mov	r1, r2
 800728a:	2200      	movs	r2, #0
 800728c:	602a      	str	r2, [r5, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7fb f9f8 	bl	8002684 <_lseek>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_lseek_r+0x1e>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_lseek_r+0x1e>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	2000064c 	.word	0x2000064c

080072a4 <_read_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4d07      	ldr	r5, [pc, #28]	; (80072c4 <_read_r+0x20>)
 80072a8:	4604      	mov	r4, r0
 80072aa:	4608      	mov	r0, r1
 80072ac:	4611      	mov	r1, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	602a      	str	r2, [r5, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f7fb f986 	bl	80025c4 <_read>
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d102      	bne.n	80072c2 <_read_r+0x1e>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	b103      	cbz	r3, 80072c2 <_read_r+0x1e>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	2000064c 	.word	0x2000064c

080072c8 <_write_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4d07      	ldr	r5, [pc, #28]	; (80072e8 <_write_r+0x20>)
 80072cc:	4604      	mov	r4, r0
 80072ce:	4608      	mov	r0, r1
 80072d0:	4611      	mov	r1, r2
 80072d2:	2200      	movs	r2, #0
 80072d4:	602a      	str	r2, [r5, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f7fb f991 	bl	80025fe <_write>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_write_r+0x1e>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_write_r+0x1e>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	2000064c 	.word	0x2000064c

080072ec <__errno>:
 80072ec:	4b01      	ldr	r3, [pc, #4]	; (80072f4 <__errno+0x8>)
 80072ee:	6818      	ldr	r0, [r3, #0]
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20000064 	.word	0x20000064

080072f8 <__libc_init_array>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	4d0d      	ldr	r5, [pc, #52]	; (8007330 <__libc_init_array+0x38>)
 80072fc:	4c0d      	ldr	r4, [pc, #52]	; (8007334 <__libc_init_array+0x3c>)
 80072fe:	1b64      	subs	r4, r4, r5
 8007300:	10a4      	asrs	r4, r4, #2
 8007302:	2600      	movs	r6, #0
 8007304:	42a6      	cmp	r6, r4
 8007306:	d109      	bne.n	800731c <__libc_init_array+0x24>
 8007308:	4d0b      	ldr	r5, [pc, #44]	; (8007338 <__libc_init_array+0x40>)
 800730a:	4c0c      	ldr	r4, [pc, #48]	; (800733c <__libc_init_array+0x44>)
 800730c:	f005 fbf4 	bl	800caf8 <_init>
 8007310:	1b64      	subs	r4, r4, r5
 8007312:	10a4      	asrs	r4, r4, #2
 8007314:	2600      	movs	r6, #0
 8007316:	42a6      	cmp	r6, r4
 8007318:	d105      	bne.n	8007326 <__libc_init_array+0x2e>
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007320:	4798      	blx	r3
 8007322:	3601      	adds	r6, #1
 8007324:	e7ee      	b.n	8007304 <__libc_init_array+0xc>
 8007326:	f855 3b04 	ldr.w	r3, [r5], #4
 800732a:	4798      	blx	r3
 800732c:	3601      	adds	r6, #1
 800732e:	e7f2      	b.n	8007316 <__libc_init_array+0x1e>
 8007330:	0800d228 	.word	0x0800d228
 8007334:	0800d228 	.word	0x0800d228
 8007338:	0800d228 	.word	0x0800d228
 800733c:	0800d22c 	.word	0x0800d22c

08007340 <__retarget_lock_init_recursive>:
 8007340:	4770      	bx	lr

08007342 <__retarget_lock_acquire_recursive>:
 8007342:	4770      	bx	lr

08007344 <__retarget_lock_release_recursive>:
 8007344:	4770      	bx	lr

08007346 <strcpy>:
 8007346:	4603      	mov	r3, r0
 8007348:	f811 2b01 	ldrb.w	r2, [r1], #1
 800734c:	f803 2b01 	strb.w	r2, [r3], #1
 8007350:	2a00      	cmp	r2, #0
 8007352:	d1f9      	bne.n	8007348 <strcpy+0x2>
 8007354:	4770      	bx	lr
	...

08007358 <nanf>:
 8007358:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007360 <nanf+0x8>
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	7fc00000 	.word	0x7fc00000

08007364 <quorem>:
 8007364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	6903      	ldr	r3, [r0, #16]
 800736a:	690c      	ldr	r4, [r1, #16]
 800736c:	42a3      	cmp	r3, r4
 800736e:	4607      	mov	r7, r0
 8007370:	db7e      	blt.n	8007470 <quorem+0x10c>
 8007372:	3c01      	subs	r4, #1
 8007374:	f101 0814 	add.w	r8, r1, #20
 8007378:	f100 0514 	add.w	r5, r0, #20
 800737c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007386:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800738a:	3301      	adds	r3, #1
 800738c:	429a      	cmp	r2, r3
 800738e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007392:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007396:	fbb2 f6f3 	udiv	r6, r2, r3
 800739a:	d331      	bcc.n	8007400 <quorem+0x9c>
 800739c:	f04f 0e00 	mov.w	lr, #0
 80073a0:	4640      	mov	r0, r8
 80073a2:	46ac      	mov	ip, r5
 80073a4:	46f2      	mov	sl, lr
 80073a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80073aa:	b293      	uxth	r3, r2
 80073ac:	fb06 e303 	mla	r3, r6, r3, lr
 80073b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073b4:	0c1a      	lsrs	r2, r3, #16
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	ebaa 0303 	sub.w	r3, sl, r3
 80073bc:	f8dc a000 	ldr.w	sl, [ip]
 80073c0:	fa13 f38a 	uxtah	r3, r3, sl
 80073c4:	fb06 220e 	mla	r2, r6, lr, r2
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	9b00      	ldr	r3, [sp, #0]
 80073cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073d0:	b292      	uxth	r2, r2
 80073d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073da:	f8bd 3000 	ldrh.w	r3, [sp]
 80073de:	4581      	cmp	r9, r0
 80073e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073e4:	f84c 3b04 	str.w	r3, [ip], #4
 80073e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073ec:	d2db      	bcs.n	80073a6 <quorem+0x42>
 80073ee:	f855 300b 	ldr.w	r3, [r5, fp]
 80073f2:	b92b      	cbnz	r3, 8007400 <quorem+0x9c>
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	3b04      	subs	r3, #4
 80073f8:	429d      	cmp	r5, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	d32c      	bcc.n	8007458 <quorem+0xf4>
 80073fe:	613c      	str	r4, [r7, #16]
 8007400:	4638      	mov	r0, r7
 8007402:	f001 f9f1 	bl	80087e8 <__mcmp>
 8007406:	2800      	cmp	r0, #0
 8007408:	db22      	blt.n	8007450 <quorem+0xec>
 800740a:	3601      	adds	r6, #1
 800740c:	4629      	mov	r1, r5
 800740e:	2000      	movs	r0, #0
 8007410:	f858 2b04 	ldr.w	r2, [r8], #4
 8007414:	f8d1 c000 	ldr.w	ip, [r1]
 8007418:	b293      	uxth	r3, r2
 800741a:	1ac3      	subs	r3, r0, r3
 800741c:	0c12      	lsrs	r2, r2, #16
 800741e:	fa13 f38c 	uxtah	r3, r3, ip
 8007422:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007426:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800742a:	b29b      	uxth	r3, r3
 800742c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007430:	45c1      	cmp	r9, r8
 8007432:	f841 3b04 	str.w	r3, [r1], #4
 8007436:	ea4f 4022 	mov.w	r0, r2, asr #16
 800743a:	d2e9      	bcs.n	8007410 <quorem+0xac>
 800743c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007440:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007444:	b922      	cbnz	r2, 8007450 <quorem+0xec>
 8007446:	3b04      	subs	r3, #4
 8007448:	429d      	cmp	r5, r3
 800744a:	461a      	mov	r2, r3
 800744c:	d30a      	bcc.n	8007464 <quorem+0x100>
 800744e:	613c      	str	r4, [r7, #16]
 8007450:	4630      	mov	r0, r6
 8007452:	b003      	add	sp, #12
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	3b04      	subs	r3, #4
 800745c:	2a00      	cmp	r2, #0
 800745e:	d1ce      	bne.n	80073fe <quorem+0x9a>
 8007460:	3c01      	subs	r4, #1
 8007462:	e7c9      	b.n	80073f8 <quorem+0x94>
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	3b04      	subs	r3, #4
 8007468:	2a00      	cmp	r2, #0
 800746a:	d1f0      	bne.n	800744e <quorem+0xea>
 800746c:	3c01      	subs	r4, #1
 800746e:	e7eb      	b.n	8007448 <quorem+0xe4>
 8007470:	2000      	movs	r0, #0
 8007472:	e7ee      	b.n	8007452 <quorem+0xee>
 8007474:	0000      	movs	r0, r0
	...

08007478 <_dtoa_r>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	ed2d 8b04 	vpush	{d8-d9}
 8007480:	69c5      	ldr	r5, [r0, #28]
 8007482:	b093      	sub	sp, #76	; 0x4c
 8007484:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007488:	ec57 6b10 	vmov	r6, r7, d0
 800748c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007490:	9107      	str	r1, [sp, #28]
 8007492:	4604      	mov	r4, r0
 8007494:	920a      	str	r2, [sp, #40]	; 0x28
 8007496:	930d      	str	r3, [sp, #52]	; 0x34
 8007498:	b975      	cbnz	r5, 80074b8 <_dtoa_r+0x40>
 800749a:	2010      	movs	r0, #16
 800749c:	f000 fe2a 	bl	80080f4 <malloc>
 80074a0:	4602      	mov	r2, r0
 80074a2:	61e0      	str	r0, [r4, #28]
 80074a4:	b920      	cbnz	r0, 80074b0 <_dtoa_r+0x38>
 80074a6:	4bae      	ldr	r3, [pc, #696]	; (8007760 <_dtoa_r+0x2e8>)
 80074a8:	21ef      	movs	r1, #239	; 0xef
 80074aa:	48ae      	ldr	r0, [pc, #696]	; (8007764 <_dtoa_r+0x2ec>)
 80074ac:	f003 f808 	bl	800a4c0 <__assert_func>
 80074b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074b4:	6005      	str	r5, [r0, #0]
 80074b6:	60c5      	str	r5, [r0, #12]
 80074b8:	69e3      	ldr	r3, [r4, #28]
 80074ba:	6819      	ldr	r1, [r3, #0]
 80074bc:	b151      	cbz	r1, 80074d4 <_dtoa_r+0x5c>
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	604a      	str	r2, [r1, #4]
 80074c2:	2301      	movs	r3, #1
 80074c4:	4093      	lsls	r3, r2
 80074c6:	608b      	str	r3, [r1, #8]
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 ff07 	bl	80082dc <_Bfree>
 80074ce:	69e3      	ldr	r3, [r4, #28]
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	1e3b      	subs	r3, r7, #0
 80074d6:	bfbb      	ittet	lt
 80074d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074dc:	9303      	strlt	r3, [sp, #12]
 80074de:	2300      	movge	r3, #0
 80074e0:	2201      	movlt	r2, #1
 80074e2:	bfac      	ite	ge
 80074e4:	f8c8 3000 	strge.w	r3, [r8]
 80074e8:	f8c8 2000 	strlt.w	r2, [r8]
 80074ec:	4b9e      	ldr	r3, [pc, #632]	; (8007768 <_dtoa_r+0x2f0>)
 80074ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80074f2:	ea33 0308 	bics.w	r3, r3, r8
 80074f6:	d11b      	bne.n	8007530 <_dtoa_r+0xb8>
 80074f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007504:	4333      	orrs	r3, r6
 8007506:	f000 8593 	beq.w	8008030 <_dtoa_r+0xbb8>
 800750a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800750c:	b963      	cbnz	r3, 8007528 <_dtoa_r+0xb0>
 800750e:	4b97      	ldr	r3, [pc, #604]	; (800776c <_dtoa_r+0x2f4>)
 8007510:	e027      	b.n	8007562 <_dtoa_r+0xea>
 8007512:	4b97      	ldr	r3, [pc, #604]	; (8007770 <_dtoa_r+0x2f8>)
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	9800      	ldr	r0, [sp, #0]
 800751e:	b013      	add	sp, #76	; 0x4c
 8007520:	ecbd 8b04 	vpop	{d8-d9}
 8007524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007528:	4b90      	ldr	r3, [pc, #576]	; (800776c <_dtoa_r+0x2f4>)
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	3303      	adds	r3, #3
 800752e:	e7f3      	b.n	8007518 <_dtoa_r+0xa0>
 8007530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	ec51 0b17 	vmov	r0, r1, d7
 800753a:	eeb0 8a47 	vmov.f32	s16, s14
 800753e:	eef0 8a67 	vmov.f32	s17, s15
 8007542:	2300      	movs	r3, #0
 8007544:	f7f9 fad8 	bl	8000af8 <__aeabi_dcmpeq>
 8007548:	4681      	mov	r9, r0
 800754a:	b160      	cbz	r0, 8007566 <_dtoa_r+0xee>
 800754c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800754e:	2301      	movs	r3, #1
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8568 	beq.w	800802a <_dtoa_r+0xbb2>
 800755a:	4b86      	ldr	r3, [pc, #536]	; (8007774 <_dtoa_r+0x2fc>)
 800755c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800755e:	6013      	str	r3, [r2, #0]
 8007560:	3b01      	subs	r3, #1
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	e7da      	b.n	800751c <_dtoa_r+0xa4>
 8007566:	aa10      	add	r2, sp, #64	; 0x40
 8007568:	a911      	add	r1, sp, #68	; 0x44
 800756a:	4620      	mov	r0, r4
 800756c:	eeb0 0a48 	vmov.f32	s0, s16
 8007570:	eef0 0a68 	vmov.f32	s1, s17
 8007574:	f001 fa4e 	bl	8008a14 <__d2b>
 8007578:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800757c:	4682      	mov	sl, r0
 800757e:	2d00      	cmp	r5, #0
 8007580:	d07f      	beq.n	8007682 <_dtoa_r+0x20a>
 8007582:	ee18 3a90 	vmov	r3, s17
 8007586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800758a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800758e:	ec51 0b18 	vmov	r0, r1, d8
 8007592:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007596:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800759a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800759e:	4619      	mov	r1, r3
 80075a0:	2200      	movs	r2, #0
 80075a2:	4b75      	ldr	r3, [pc, #468]	; (8007778 <_dtoa_r+0x300>)
 80075a4:	f7f8 fe88 	bl	80002b8 <__aeabi_dsub>
 80075a8:	a367      	add	r3, pc, #412	; (adr r3, 8007748 <_dtoa_r+0x2d0>)
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	f7f9 f83b 	bl	8000628 <__aeabi_dmul>
 80075b2:	a367      	add	r3, pc, #412	; (adr r3, 8007750 <_dtoa_r+0x2d8>)
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f7f8 fe80 	bl	80002bc <__adddf3>
 80075bc:	4606      	mov	r6, r0
 80075be:	4628      	mov	r0, r5
 80075c0:	460f      	mov	r7, r1
 80075c2:	f7f8 ffc7 	bl	8000554 <__aeabi_i2d>
 80075c6:	a364      	add	r3, pc, #400	; (adr r3, 8007758 <_dtoa_r+0x2e0>)
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f7f9 f82c 	bl	8000628 <__aeabi_dmul>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4630      	mov	r0, r6
 80075d6:	4639      	mov	r1, r7
 80075d8:	f7f8 fe70 	bl	80002bc <__adddf3>
 80075dc:	4606      	mov	r6, r0
 80075de:	460f      	mov	r7, r1
 80075e0:	f7f9 fad2 	bl	8000b88 <__aeabi_d2iz>
 80075e4:	2200      	movs	r2, #0
 80075e6:	4683      	mov	fp, r0
 80075e8:	2300      	movs	r3, #0
 80075ea:	4630      	mov	r0, r6
 80075ec:	4639      	mov	r1, r7
 80075ee:	f7f9 fa8d 	bl	8000b0c <__aeabi_dcmplt>
 80075f2:	b148      	cbz	r0, 8007608 <_dtoa_r+0x190>
 80075f4:	4658      	mov	r0, fp
 80075f6:	f7f8 ffad 	bl	8000554 <__aeabi_i2d>
 80075fa:	4632      	mov	r2, r6
 80075fc:	463b      	mov	r3, r7
 80075fe:	f7f9 fa7b 	bl	8000af8 <__aeabi_dcmpeq>
 8007602:	b908      	cbnz	r0, 8007608 <_dtoa_r+0x190>
 8007604:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007608:	f1bb 0f16 	cmp.w	fp, #22
 800760c:	d857      	bhi.n	80076be <_dtoa_r+0x246>
 800760e:	4b5b      	ldr	r3, [pc, #364]	; (800777c <_dtoa_r+0x304>)
 8007610:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	ec51 0b18 	vmov	r0, r1, d8
 800761c:	f7f9 fa76 	bl	8000b0c <__aeabi_dcmplt>
 8007620:	2800      	cmp	r0, #0
 8007622:	d04e      	beq.n	80076c2 <_dtoa_r+0x24a>
 8007624:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007628:	2300      	movs	r3, #0
 800762a:	930c      	str	r3, [sp, #48]	; 0x30
 800762c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800762e:	1b5b      	subs	r3, r3, r5
 8007630:	1e5a      	subs	r2, r3, #1
 8007632:	bf45      	ittet	mi
 8007634:	f1c3 0301 	rsbmi	r3, r3, #1
 8007638:	9305      	strmi	r3, [sp, #20]
 800763a:	2300      	movpl	r3, #0
 800763c:	2300      	movmi	r3, #0
 800763e:	9206      	str	r2, [sp, #24]
 8007640:	bf54      	ite	pl
 8007642:	9305      	strpl	r3, [sp, #20]
 8007644:	9306      	strmi	r3, [sp, #24]
 8007646:	f1bb 0f00 	cmp.w	fp, #0
 800764a:	db3c      	blt.n	80076c6 <_dtoa_r+0x24e>
 800764c:	9b06      	ldr	r3, [sp, #24]
 800764e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007652:	445b      	add	r3, fp
 8007654:	9306      	str	r3, [sp, #24]
 8007656:	2300      	movs	r3, #0
 8007658:	9308      	str	r3, [sp, #32]
 800765a:	9b07      	ldr	r3, [sp, #28]
 800765c:	2b09      	cmp	r3, #9
 800765e:	d868      	bhi.n	8007732 <_dtoa_r+0x2ba>
 8007660:	2b05      	cmp	r3, #5
 8007662:	bfc4      	itt	gt
 8007664:	3b04      	subgt	r3, #4
 8007666:	9307      	strgt	r3, [sp, #28]
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	f1a3 0302 	sub.w	r3, r3, #2
 800766e:	bfcc      	ite	gt
 8007670:	2500      	movgt	r5, #0
 8007672:	2501      	movle	r5, #1
 8007674:	2b03      	cmp	r3, #3
 8007676:	f200 8085 	bhi.w	8007784 <_dtoa_r+0x30c>
 800767a:	e8df f003 	tbb	[pc, r3]
 800767e:	3b2e      	.short	0x3b2e
 8007680:	5839      	.short	0x5839
 8007682:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007686:	441d      	add	r5, r3
 8007688:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800768c:	2b20      	cmp	r3, #32
 800768e:	bfc1      	itttt	gt
 8007690:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007694:	fa08 f803 	lslgt.w	r8, r8, r3
 8007698:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800769c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80076a0:	bfd6      	itet	le
 80076a2:	f1c3 0320 	rsble	r3, r3, #32
 80076a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80076aa:	fa06 f003 	lslle.w	r0, r6, r3
 80076ae:	f7f8 ff41 	bl	8000534 <__aeabi_ui2d>
 80076b2:	2201      	movs	r2, #1
 80076b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80076b8:	3d01      	subs	r5, #1
 80076ba:	920e      	str	r2, [sp, #56]	; 0x38
 80076bc:	e76f      	b.n	800759e <_dtoa_r+0x126>
 80076be:	2301      	movs	r3, #1
 80076c0:	e7b3      	b.n	800762a <_dtoa_r+0x1b2>
 80076c2:	900c      	str	r0, [sp, #48]	; 0x30
 80076c4:	e7b2      	b.n	800762c <_dtoa_r+0x1b4>
 80076c6:	9b05      	ldr	r3, [sp, #20]
 80076c8:	eba3 030b 	sub.w	r3, r3, fp
 80076cc:	9305      	str	r3, [sp, #20]
 80076ce:	f1cb 0300 	rsb	r3, fp, #0
 80076d2:	9308      	str	r3, [sp, #32]
 80076d4:	2300      	movs	r3, #0
 80076d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076d8:	e7bf      	b.n	800765a <_dtoa_r+0x1e2>
 80076da:	2300      	movs	r3, #0
 80076dc:	9309      	str	r3, [sp, #36]	; 0x24
 80076de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dc52      	bgt.n	800778a <_dtoa_r+0x312>
 80076e4:	2301      	movs	r3, #1
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	461a      	mov	r2, r3
 80076ec:	920a      	str	r2, [sp, #40]	; 0x28
 80076ee:	e00b      	b.n	8007708 <_dtoa_r+0x290>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e7f3      	b.n	80076dc <_dtoa_r+0x264>
 80076f4:	2300      	movs	r3, #0
 80076f6:	9309      	str	r3, [sp, #36]	; 0x24
 80076f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076fa:	445b      	add	r3, fp
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	3301      	adds	r3, #1
 8007700:	2b01      	cmp	r3, #1
 8007702:	9304      	str	r3, [sp, #16]
 8007704:	bfb8      	it	lt
 8007706:	2301      	movlt	r3, #1
 8007708:	69e0      	ldr	r0, [r4, #28]
 800770a:	2100      	movs	r1, #0
 800770c:	2204      	movs	r2, #4
 800770e:	f102 0614 	add.w	r6, r2, #20
 8007712:	429e      	cmp	r6, r3
 8007714:	d93d      	bls.n	8007792 <_dtoa_r+0x31a>
 8007716:	6041      	str	r1, [r0, #4]
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fd9f 	bl	800825c <_Balloc>
 800771e:	9000      	str	r0, [sp, #0]
 8007720:	2800      	cmp	r0, #0
 8007722:	d139      	bne.n	8007798 <_dtoa_r+0x320>
 8007724:	4b16      	ldr	r3, [pc, #88]	; (8007780 <_dtoa_r+0x308>)
 8007726:	4602      	mov	r2, r0
 8007728:	f240 11af 	movw	r1, #431	; 0x1af
 800772c:	e6bd      	b.n	80074aa <_dtoa_r+0x32>
 800772e:	2301      	movs	r3, #1
 8007730:	e7e1      	b.n	80076f6 <_dtoa_r+0x27e>
 8007732:	2501      	movs	r5, #1
 8007734:	2300      	movs	r3, #0
 8007736:	9307      	str	r3, [sp, #28]
 8007738:	9509      	str	r5, [sp, #36]	; 0x24
 800773a:	f04f 33ff 	mov.w	r3, #4294967295
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	9304      	str	r3, [sp, #16]
 8007742:	2200      	movs	r2, #0
 8007744:	2312      	movs	r3, #18
 8007746:	e7d1      	b.n	80076ec <_dtoa_r+0x274>
 8007748:	636f4361 	.word	0x636f4361
 800774c:	3fd287a7 	.word	0x3fd287a7
 8007750:	8b60c8b3 	.word	0x8b60c8b3
 8007754:	3fc68a28 	.word	0x3fc68a28
 8007758:	509f79fb 	.word	0x509f79fb
 800775c:	3fd34413 	.word	0x3fd34413
 8007760:	0800cbd0 	.word	0x0800cbd0
 8007764:	0800cbe7 	.word	0x0800cbe7
 8007768:	7ff00000 	.word	0x7ff00000
 800776c:	0800cbcc 	.word	0x0800cbcc
 8007770:	0800cbc3 	.word	0x0800cbc3
 8007774:	0800cf29 	.word	0x0800cf29
 8007778:	3ff80000 	.word	0x3ff80000
 800777c:	0800ccd8 	.word	0x0800ccd8
 8007780:	0800cc3f 	.word	0x0800cc3f
 8007784:	2301      	movs	r3, #1
 8007786:	9309      	str	r3, [sp, #36]	; 0x24
 8007788:	e7d7      	b.n	800773a <_dtoa_r+0x2c2>
 800778a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	9304      	str	r3, [sp, #16]
 8007790:	e7ba      	b.n	8007708 <_dtoa_r+0x290>
 8007792:	3101      	adds	r1, #1
 8007794:	0052      	lsls	r2, r2, #1
 8007796:	e7ba      	b.n	800770e <_dtoa_r+0x296>
 8007798:	69e3      	ldr	r3, [r4, #28]
 800779a:	9a00      	ldr	r2, [sp, #0]
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	2b0e      	cmp	r3, #14
 80077a2:	f200 80a8 	bhi.w	80078f6 <_dtoa_r+0x47e>
 80077a6:	2d00      	cmp	r5, #0
 80077a8:	f000 80a5 	beq.w	80078f6 <_dtoa_r+0x47e>
 80077ac:	f1bb 0f00 	cmp.w	fp, #0
 80077b0:	dd38      	ble.n	8007824 <_dtoa_r+0x3ac>
 80077b2:	4bc0      	ldr	r3, [pc, #768]	; (8007ab4 <_dtoa_r+0x63c>)
 80077b4:	f00b 020f 	and.w	r2, fp, #15
 80077b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80077c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80077c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80077c8:	d019      	beq.n	80077fe <_dtoa_r+0x386>
 80077ca:	4bbb      	ldr	r3, [pc, #748]	; (8007ab8 <_dtoa_r+0x640>)
 80077cc:	ec51 0b18 	vmov	r0, r1, d8
 80077d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077d4:	f7f9 f852 	bl	800087c <__aeabi_ddiv>
 80077d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077dc:	f008 080f 	and.w	r8, r8, #15
 80077e0:	2503      	movs	r5, #3
 80077e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007ab8 <_dtoa_r+0x640>
 80077e6:	f1b8 0f00 	cmp.w	r8, #0
 80077ea:	d10a      	bne.n	8007802 <_dtoa_r+0x38a>
 80077ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f0:	4632      	mov	r2, r6
 80077f2:	463b      	mov	r3, r7
 80077f4:	f7f9 f842 	bl	800087c <__aeabi_ddiv>
 80077f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077fc:	e02b      	b.n	8007856 <_dtoa_r+0x3de>
 80077fe:	2502      	movs	r5, #2
 8007800:	e7ef      	b.n	80077e2 <_dtoa_r+0x36a>
 8007802:	f018 0f01 	tst.w	r8, #1
 8007806:	d008      	beq.n	800781a <_dtoa_r+0x3a2>
 8007808:	4630      	mov	r0, r6
 800780a:	4639      	mov	r1, r7
 800780c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007810:	f7f8 ff0a 	bl	8000628 <__aeabi_dmul>
 8007814:	3501      	adds	r5, #1
 8007816:	4606      	mov	r6, r0
 8007818:	460f      	mov	r7, r1
 800781a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800781e:	f109 0908 	add.w	r9, r9, #8
 8007822:	e7e0      	b.n	80077e6 <_dtoa_r+0x36e>
 8007824:	f000 809f 	beq.w	8007966 <_dtoa_r+0x4ee>
 8007828:	f1cb 0600 	rsb	r6, fp, #0
 800782c:	4ba1      	ldr	r3, [pc, #644]	; (8007ab4 <_dtoa_r+0x63c>)
 800782e:	4fa2      	ldr	r7, [pc, #648]	; (8007ab8 <_dtoa_r+0x640>)
 8007830:	f006 020f 	and.w	r2, r6, #15
 8007834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	ec51 0b18 	vmov	r0, r1, d8
 8007840:	f7f8 fef2 	bl	8000628 <__aeabi_dmul>
 8007844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007848:	1136      	asrs	r6, r6, #4
 800784a:	2300      	movs	r3, #0
 800784c:	2502      	movs	r5, #2
 800784e:	2e00      	cmp	r6, #0
 8007850:	d17e      	bne.n	8007950 <_dtoa_r+0x4d8>
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1d0      	bne.n	80077f8 <_dtoa_r+0x380>
 8007856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007858:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8084 	beq.w	800796a <_dtoa_r+0x4f2>
 8007862:	4b96      	ldr	r3, [pc, #600]	; (8007abc <_dtoa_r+0x644>)
 8007864:	2200      	movs	r2, #0
 8007866:	4640      	mov	r0, r8
 8007868:	4649      	mov	r1, r9
 800786a:	f7f9 f94f 	bl	8000b0c <__aeabi_dcmplt>
 800786e:	2800      	cmp	r0, #0
 8007870:	d07b      	beq.n	800796a <_dtoa_r+0x4f2>
 8007872:	9b04      	ldr	r3, [sp, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d078      	beq.n	800796a <_dtoa_r+0x4f2>
 8007878:	9b01      	ldr	r3, [sp, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	dd39      	ble.n	80078f2 <_dtoa_r+0x47a>
 800787e:	4b90      	ldr	r3, [pc, #576]	; (8007ac0 <_dtoa_r+0x648>)
 8007880:	2200      	movs	r2, #0
 8007882:	4640      	mov	r0, r8
 8007884:	4649      	mov	r1, r9
 8007886:	f7f8 fecf 	bl	8000628 <__aeabi_dmul>
 800788a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800788e:	9e01      	ldr	r6, [sp, #4]
 8007890:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007894:	3501      	adds	r5, #1
 8007896:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800789a:	4628      	mov	r0, r5
 800789c:	f7f8 fe5a 	bl	8000554 <__aeabi_i2d>
 80078a0:	4642      	mov	r2, r8
 80078a2:	464b      	mov	r3, r9
 80078a4:	f7f8 fec0 	bl	8000628 <__aeabi_dmul>
 80078a8:	4b86      	ldr	r3, [pc, #536]	; (8007ac4 <_dtoa_r+0x64c>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	f7f8 fd06 	bl	80002bc <__adddf3>
 80078b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80078b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078b8:	9303      	str	r3, [sp, #12]
 80078ba:	2e00      	cmp	r6, #0
 80078bc:	d158      	bne.n	8007970 <_dtoa_r+0x4f8>
 80078be:	4b82      	ldr	r3, [pc, #520]	; (8007ac8 <_dtoa_r+0x650>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	f7f8 fcf7 	bl	80002b8 <__aeabi_dsub>
 80078ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078ce:	4680      	mov	r8, r0
 80078d0:	4689      	mov	r9, r1
 80078d2:	f7f9 f939 	bl	8000b48 <__aeabi_dcmpgt>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	f040 8296 	bne.w	8007e08 <_dtoa_r+0x990>
 80078dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80078e0:	4640      	mov	r0, r8
 80078e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078e6:	4649      	mov	r1, r9
 80078e8:	f7f9 f910 	bl	8000b0c <__aeabi_dcmplt>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f040 8289 	bne.w	8007e04 <_dtoa_r+0x98c>
 80078f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80078f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f2c0 814e 	blt.w	8007b9a <_dtoa_r+0x722>
 80078fe:	f1bb 0f0e 	cmp.w	fp, #14
 8007902:	f300 814a 	bgt.w	8007b9a <_dtoa_r+0x722>
 8007906:	4b6b      	ldr	r3, [pc, #428]	; (8007ab4 <_dtoa_r+0x63c>)
 8007908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800790c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007912:	2b00      	cmp	r3, #0
 8007914:	f280 80dc 	bge.w	8007ad0 <_dtoa_r+0x658>
 8007918:	9b04      	ldr	r3, [sp, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f300 80d8 	bgt.w	8007ad0 <_dtoa_r+0x658>
 8007920:	f040 826f 	bne.w	8007e02 <_dtoa_r+0x98a>
 8007924:	4b68      	ldr	r3, [pc, #416]	; (8007ac8 <_dtoa_r+0x650>)
 8007926:	2200      	movs	r2, #0
 8007928:	4640      	mov	r0, r8
 800792a:	4649      	mov	r1, r9
 800792c:	f7f8 fe7c 	bl	8000628 <__aeabi_dmul>
 8007930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007934:	f7f9 f8fe 	bl	8000b34 <__aeabi_dcmpge>
 8007938:	9e04      	ldr	r6, [sp, #16]
 800793a:	4637      	mov	r7, r6
 800793c:	2800      	cmp	r0, #0
 800793e:	f040 8245 	bne.w	8007dcc <_dtoa_r+0x954>
 8007942:	9d00      	ldr	r5, [sp, #0]
 8007944:	2331      	movs	r3, #49	; 0x31
 8007946:	f805 3b01 	strb.w	r3, [r5], #1
 800794a:	f10b 0b01 	add.w	fp, fp, #1
 800794e:	e241      	b.n	8007dd4 <_dtoa_r+0x95c>
 8007950:	07f2      	lsls	r2, r6, #31
 8007952:	d505      	bpl.n	8007960 <_dtoa_r+0x4e8>
 8007954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007958:	f7f8 fe66 	bl	8000628 <__aeabi_dmul>
 800795c:	3501      	adds	r5, #1
 800795e:	2301      	movs	r3, #1
 8007960:	1076      	asrs	r6, r6, #1
 8007962:	3708      	adds	r7, #8
 8007964:	e773      	b.n	800784e <_dtoa_r+0x3d6>
 8007966:	2502      	movs	r5, #2
 8007968:	e775      	b.n	8007856 <_dtoa_r+0x3de>
 800796a:	9e04      	ldr	r6, [sp, #16]
 800796c:	465f      	mov	r7, fp
 800796e:	e792      	b.n	8007896 <_dtoa_r+0x41e>
 8007970:	9900      	ldr	r1, [sp, #0]
 8007972:	4b50      	ldr	r3, [pc, #320]	; (8007ab4 <_dtoa_r+0x63c>)
 8007974:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007978:	4431      	add	r1, r6
 800797a:	9102      	str	r1, [sp, #8]
 800797c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800797e:	eeb0 9a47 	vmov.f32	s18, s14
 8007982:	eef0 9a67 	vmov.f32	s19, s15
 8007986:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800798a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800798e:	2900      	cmp	r1, #0
 8007990:	d044      	beq.n	8007a1c <_dtoa_r+0x5a4>
 8007992:	494e      	ldr	r1, [pc, #312]	; (8007acc <_dtoa_r+0x654>)
 8007994:	2000      	movs	r0, #0
 8007996:	f7f8 ff71 	bl	800087c <__aeabi_ddiv>
 800799a:	ec53 2b19 	vmov	r2, r3, d9
 800799e:	f7f8 fc8b 	bl	80002b8 <__aeabi_dsub>
 80079a2:	9d00      	ldr	r5, [sp, #0]
 80079a4:	ec41 0b19 	vmov	d9, r0, r1
 80079a8:	4649      	mov	r1, r9
 80079aa:	4640      	mov	r0, r8
 80079ac:	f7f9 f8ec 	bl	8000b88 <__aeabi_d2iz>
 80079b0:	4606      	mov	r6, r0
 80079b2:	f7f8 fdcf 	bl	8000554 <__aeabi_i2d>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f8 fc7b 	bl	80002b8 <__aeabi_dsub>
 80079c2:	3630      	adds	r6, #48	; 0x30
 80079c4:	f805 6b01 	strb.w	r6, [r5], #1
 80079c8:	ec53 2b19 	vmov	r2, r3, d9
 80079cc:	4680      	mov	r8, r0
 80079ce:	4689      	mov	r9, r1
 80079d0:	f7f9 f89c 	bl	8000b0c <__aeabi_dcmplt>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d164      	bne.n	8007aa2 <_dtoa_r+0x62a>
 80079d8:	4642      	mov	r2, r8
 80079da:	464b      	mov	r3, r9
 80079dc:	4937      	ldr	r1, [pc, #220]	; (8007abc <_dtoa_r+0x644>)
 80079de:	2000      	movs	r0, #0
 80079e0:	f7f8 fc6a 	bl	80002b8 <__aeabi_dsub>
 80079e4:	ec53 2b19 	vmov	r2, r3, d9
 80079e8:	f7f9 f890 	bl	8000b0c <__aeabi_dcmplt>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	f040 80b6 	bne.w	8007b5e <_dtoa_r+0x6e6>
 80079f2:	9b02      	ldr	r3, [sp, #8]
 80079f4:	429d      	cmp	r5, r3
 80079f6:	f43f af7c 	beq.w	80078f2 <_dtoa_r+0x47a>
 80079fa:	4b31      	ldr	r3, [pc, #196]	; (8007ac0 <_dtoa_r+0x648>)
 80079fc:	ec51 0b19 	vmov	r0, r1, d9
 8007a00:	2200      	movs	r2, #0
 8007a02:	f7f8 fe11 	bl	8000628 <__aeabi_dmul>
 8007a06:	4b2e      	ldr	r3, [pc, #184]	; (8007ac0 <_dtoa_r+0x648>)
 8007a08:	ec41 0b19 	vmov	d9, r0, r1
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	4640      	mov	r0, r8
 8007a10:	4649      	mov	r1, r9
 8007a12:	f7f8 fe09 	bl	8000628 <__aeabi_dmul>
 8007a16:	4680      	mov	r8, r0
 8007a18:	4689      	mov	r9, r1
 8007a1a:	e7c5      	b.n	80079a8 <_dtoa_r+0x530>
 8007a1c:	ec51 0b17 	vmov	r0, r1, d7
 8007a20:	f7f8 fe02 	bl	8000628 <__aeabi_dmul>
 8007a24:	9b02      	ldr	r3, [sp, #8]
 8007a26:	9d00      	ldr	r5, [sp, #0]
 8007a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a2a:	ec41 0b19 	vmov	d9, r0, r1
 8007a2e:	4649      	mov	r1, r9
 8007a30:	4640      	mov	r0, r8
 8007a32:	f7f9 f8a9 	bl	8000b88 <__aeabi_d2iz>
 8007a36:	4606      	mov	r6, r0
 8007a38:	f7f8 fd8c 	bl	8000554 <__aeabi_i2d>
 8007a3c:	3630      	adds	r6, #48	; 0x30
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4640      	mov	r0, r8
 8007a44:	4649      	mov	r1, r9
 8007a46:	f7f8 fc37 	bl	80002b8 <__aeabi_dsub>
 8007a4a:	f805 6b01 	strb.w	r6, [r5], #1
 8007a4e:	9b02      	ldr	r3, [sp, #8]
 8007a50:	429d      	cmp	r5, r3
 8007a52:	4680      	mov	r8, r0
 8007a54:	4689      	mov	r9, r1
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	d124      	bne.n	8007aa6 <_dtoa_r+0x62e>
 8007a5c:	4b1b      	ldr	r3, [pc, #108]	; (8007acc <_dtoa_r+0x654>)
 8007a5e:	ec51 0b19 	vmov	r0, r1, d9
 8007a62:	f7f8 fc2b 	bl	80002bc <__adddf3>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	f7f9 f86b 	bl	8000b48 <__aeabi_dcmpgt>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d173      	bne.n	8007b5e <_dtoa_r+0x6e6>
 8007a76:	ec53 2b19 	vmov	r2, r3, d9
 8007a7a:	4914      	ldr	r1, [pc, #80]	; (8007acc <_dtoa_r+0x654>)
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f7f8 fc1b 	bl	80002b8 <__aeabi_dsub>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4640      	mov	r0, r8
 8007a88:	4649      	mov	r1, r9
 8007a8a:	f7f9 f83f 	bl	8000b0c <__aeabi_dcmplt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f af2f 	beq.w	80078f2 <_dtoa_r+0x47a>
 8007a94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a96:	1e6b      	subs	r3, r5, #1
 8007a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a9e:	2b30      	cmp	r3, #48	; 0x30
 8007aa0:	d0f8      	beq.n	8007a94 <_dtoa_r+0x61c>
 8007aa2:	46bb      	mov	fp, r7
 8007aa4:	e04a      	b.n	8007b3c <_dtoa_r+0x6c4>
 8007aa6:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <_dtoa_r+0x648>)
 8007aa8:	f7f8 fdbe 	bl	8000628 <__aeabi_dmul>
 8007aac:	4680      	mov	r8, r0
 8007aae:	4689      	mov	r9, r1
 8007ab0:	e7bd      	b.n	8007a2e <_dtoa_r+0x5b6>
 8007ab2:	bf00      	nop
 8007ab4:	0800ccd8 	.word	0x0800ccd8
 8007ab8:	0800ccb0 	.word	0x0800ccb0
 8007abc:	3ff00000 	.word	0x3ff00000
 8007ac0:	40240000 	.word	0x40240000
 8007ac4:	401c0000 	.word	0x401c0000
 8007ac8:	40140000 	.word	0x40140000
 8007acc:	3fe00000 	.word	0x3fe00000
 8007ad0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ad4:	9d00      	ldr	r5, [sp, #0]
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	464b      	mov	r3, r9
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	f7f8 fecd 	bl	800087c <__aeabi_ddiv>
 8007ae2:	f7f9 f851 	bl	8000b88 <__aeabi_d2iz>
 8007ae6:	9001      	str	r0, [sp, #4]
 8007ae8:	f7f8 fd34 	bl	8000554 <__aeabi_i2d>
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	f7f8 fd9a 	bl	8000628 <__aeabi_dmul>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4630      	mov	r0, r6
 8007afa:	4639      	mov	r1, r7
 8007afc:	f7f8 fbdc 	bl	80002b8 <__aeabi_dsub>
 8007b00:	9e01      	ldr	r6, [sp, #4]
 8007b02:	9f04      	ldr	r7, [sp, #16]
 8007b04:	3630      	adds	r6, #48	; 0x30
 8007b06:	f805 6b01 	strb.w	r6, [r5], #1
 8007b0a:	9e00      	ldr	r6, [sp, #0]
 8007b0c:	1bae      	subs	r6, r5, r6
 8007b0e:	42b7      	cmp	r7, r6
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	d134      	bne.n	8007b80 <_dtoa_r+0x708>
 8007b16:	f7f8 fbd1 	bl	80002bc <__adddf3>
 8007b1a:	4642      	mov	r2, r8
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460f      	mov	r7, r1
 8007b22:	f7f9 f811 	bl	8000b48 <__aeabi_dcmpgt>
 8007b26:	b9c8      	cbnz	r0, 8007b5c <_dtoa_r+0x6e4>
 8007b28:	4642      	mov	r2, r8
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	4639      	mov	r1, r7
 8007b30:	f7f8 ffe2 	bl	8000af8 <__aeabi_dcmpeq>
 8007b34:	b110      	cbz	r0, 8007b3c <_dtoa_r+0x6c4>
 8007b36:	9b01      	ldr	r3, [sp, #4]
 8007b38:	07db      	lsls	r3, r3, #31
 8007b3a:	d40f      	bmi.n	8007b5c <_dtoa_r+0x6e4>
 8007b3c:	4651      	mov	r1, sl
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fbcc 	bl	80082dc <_Bfree>
 8007b44:	2300      	movs	r3, #0
 8007b46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b48:	702b      	strb	r3, [r5, #0]
 8007b4a:	f10b 0301 	add.w	r3, fp, #1
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f43f ace2 	beq.w	800751c <_dtoa_r+0xa4>
 8007b58:	601d      	str	r5, [r3, #0]
 8007b5a:	e4df      	b.n	800751c <_dtoa_r+0xa4>
 8007b5c:	465f      	mov	r7, fp
 8007b5e:	462b      	mov	r3, r5
 8007b60:	461d      	mov	r5, r3
 8007b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b66:	2a39      	cmp	r2, #57	; 0x39
 8007b68:	d106      	bne.n	8007b78 <_dtoa_r+0x700>
 8007b6a:	9a00      	ldr	r2, [sp, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d1f7      	bne.n	8007b60 <_dtoa_r+0x6e8>
 8007b70:	9900      	ldr	r1, [sp, #0]
 8007b72:	2230      	movs	r2, #48	; 0x30
 8007b74:	3701      	adds	r7, #1
 8007b76:	700a      	strb	r2, [r1, #0]
 8007b78:	781a      	ldrb	r2, [r3, #0]
 8007b7a:	3201      	adds	r2, #1
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	e790      	b.n	8007aa2 <_dtoa_r+0x62a>
 8007b80:	4ba3      	ldr	r3, [pc, #652]	; (8007e10 <_dtoa_r+0x998>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f8 fd50 	bl	8000628 <__aeabi_dmul>
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	460f      	mov	r7, r1
 8007b90:	f7f8 ffb2 	bl	8000af8 <__aeabi_dcmpeq>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d09e      	beq.n	8007ad6 <_dtoa_r+0x65e>
 8007b98:	e7d0      	b.n	8007b3c <_dtoa_r+0x6c4>
 8007b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9c:	2a00      	cmp	r2, #0
 8007b9e:	f000 80ca 	beq.w	8007d36 <_dtoa_r+0x8be>
 8007ba2:	9a07      	ldr	r2, [sp, #28]
 8007ba4:	2a01      	cmp	r2, #1
 8007ba6:	f300 80ad 	bgt.w	8007d04 <_dtoa_r+0x88c>
 8007baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bac:	2a00      	cmp	r2, #0
 8007bae:	f000 80a5 	beq.w	8007cfc <_dtoa_r+0x884>
 8007bb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bb6:	9e08      	ldr	r6, [sp, #32]
 8007bb8:	9d05      	ldr	r5, [sp, #20]
 8007bba:	9a05      	ldr	r2, [sp, #20]
 8007bbc:	441a      	add	r2, r3
 8007bbe:	9205      	str	r2, [sp, #20]
 8007bc0:	9a06      	ldr	r2, [sp, #24]
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	441a      	add	r2, r3
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	9206      	str	r2, [sp, #24]
 8007bca:	f000 fc87 	bl	80084dc <__i2b>
 8007bce:	4607      	mov	r7, r0
 8007bd0:	b165      	cbz	r5, 8007bec <_dtoa_r+0x774>
 8007bd2:	9b06      	ldr	r3, [sp, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd09      	ble.n	8007bec <_dtoa_r+0x774>
 8007bd8:	42ab      	cmp	r3, r5
 8007bda:	9a05      	ldr	r2, [sp, #20]
 8007bdc:	bfa8      	it	ge
 8007bde:	462b      	movge	r3, r5
 8007be0:	1ad2      	subs	r2, r2, r3
 8007be2:	9205      	str	r2, [sp, #20]
 8007be4:	9a06      	ldr	r2, [sp, #24]
 8007be6:	1aed      	subs	r5, r5, r3
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	9306      	str	r3, [sp, #24]
 8007bec:	9b08      	ldr	r3, [sp, #32]
 8007bee:	b1f3      	cbz	r3, 8007c2e <_dtoa_r+0x7b6>
 8007bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80a3 	beq.w	8007d3e <_dtoa_r+0x8c6>
 8007bf8:	2e00      	cmp	r6, #0
 8007bfa:	dd10      	ble.n	8007c1e <_dtoa_r+0x7a6>
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	4632      	mov	r2, r6
 8007c00:	4620      	mov	r0, r4
 8007c02:	f000 fd2b 	bl	800865c <__pow5mult>
 8007c06:	4652      	mov	r2, sl
 8007c08:	4601      	mov	r1, r0
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 fc7b 	bl	8008508 <__multiply>
 8007c12:	4651      	mov	r1, sl
 8007c14:	4680      	mov	r8, r0
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 fb60 	bl	80082dc <_Bfree>
 8007c1c:	46c2      	mov	sl, r8
 8007c1e:	9b08      	ldr	r3, [sp, #32]
 8007c20:	1b9a      	subs	r2, r3, r6
 8007c22:	d004      	beq.n	8007c2e <_dtoa_r+0x7b6>
 8007c24:	4651      	mov	r1, sl
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 fd18 	bl	800865c <__pow5mult>
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	2101      	movs	r1, #1
 8007c30:	4620      	mov	r0, r4
 8007c32:	f000 fc53 	bl	80084dc <__i2b>
 8007c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	f340 8081 	ble.w	8007d42 <_dtoa_r+0x8ca>
 8007c40:	461a      	mov	r2, r3
 8007c42:	4601      	mov	r1, r0
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 fd09 	bl	800865c <__pow5mult>
 8007c4a:	9b07      	ldr	r3, [sp, #28]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	4606      	mov	r6, r0
 8007c50:	dd7a      	ble.n	8007d48 <_dtoa_r+0x8d0>
 8007c52:	f04f 0800 	mov.w	r8, #0
 8007c56:	6933      	ldr	r3, [r6, #16]
 8007c58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c5c:	6918      	ldr	r0, [r3, #16]
 8007c5e:	f000 fbef 	bl	8008440 <__hi0bits>
 8007c62:	f1c0 0020 	rsb	r0, r0, #32
 8007c66:	9b06      	ldr	r3, [sp, #24]
 8007c68:	4418      	add	r0, r3
 8007c6a:	f010 001f 	ands.w	r0, r0, #31
 8007c6e:	f000 8094 	beq.w	8007d9a <_dtoa_r+0x922>
 8007c72:	f1c0 0320 	rsb	r3, r0, #32
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	f340 8085 	ble.w	8007d86 <_dtoa_r+0x90e>
 8007c7c:	9b05      	ldr	r3, [sp, #20]
 8007c7e:	f1c0 001c 	rsb	r0, r0, #28
 8007c82:	4403      	add	r3, r0
 8007c84:	9305      	str	r3, [sp, #20]
 8007c86:	9b06      	ldr	r3, [sp, #24]
 8007c88:	4403      	add	r3, r0
 8007c8a:	4405      	add	r5, r0
 8007c8c:	9306      	str	r3, [sp, #24]
 8007c8e:	9b05      	ldr	r3, [sp, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dd05      	ble.n	8007ca0 <_dtoa_r+0x828>
 8007c94:	4651      	mov	r1, sl
 8007c96:	461a      	mov	r2, r3
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 fd39 	bl	8008710 <__lshift>
 8007c9e:	4682      	mov	sl, r0
 8007ca0:	9b06      	ldr	r3, [sp, #24]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	dd05      	ble.n	8007cb2 <_dtoa_r+0x83a>
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 fd30 	bl	8008710 <__lshift>
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d072      	beq.n	8007d9e <_dtoa_r+0x926>
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4650      	mov	r0, sl
 8007cbc:	f000 fd94 	bl	80087e8 <__mcmp>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	da6c      	bge.n	8007d9e <_dtoa_r+0x926>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4651      	mov	r1, sl
 8007cc8:	220a      	movs	r2, #10
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 fb28 	bl	8008320 <__multadd>
 8007cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cd6:	4682      	mov	sl, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 81b0 	beq.w	800803e <_dtoa_r+0xbc6>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4639      	mov	r1, r7
 8007ce2:	220a      	movs	r2, #10
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f000 fb1b 	bl	8008320 <__multadd>
 8007cea:	9b01      	ldr	r3, [sp, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	4607      	mov	r7, r0
 8007cf0:	f300 8096 	bgt.w	8007e20 <_dtoa_r+0x9a8>
 8007cf4:	9b07      	ldr	r3, [sp, #28]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	dc59      	bgt.n	8007dae <_dtoa_r+0x936>
 8007cfa:	e091      	b.n	8007e20 <_dtoa_r+0x9a8>
 8007cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d02:	e758      	b.n	8007bb6 <_dtoa_r+0x73e>
 8007d04:	9b04      	ldr	r3, [sp, #16]
 8007d06:	1e5e      	subs	r6, r3, #1
 8007d08:	9b08      	ldr	r3, [sp, #32]
 8007d0a:	42b3      	cmp	r3, r6
 8007d0c:	bfbf      	itttt	lt
 8007d0e:	9b08      	ldrlt	r3, [sp, #32]
 8007d10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007d12:	9608      	strlt	r6, [sp, #32]
 8007d14:	1af3      	sublt	r3, r6, r3
 8007d16:	bfb4      	ite	lt
 8007d18:	18d2      	addlt	r2, r2, r3
 8007d1a:	1b9e      	subge	r6, r3, r6
 8007d1c:	9b04      	ldr	r3, [sp, #16]
 8007d1e:	bfbc      	itt	lt
 8007d20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007d22:	2600      	movlt	r6, #0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bfb7      	itett	lt
 8007d28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007d2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007d30:	1a9d      	sublt	r5, r3, r2
 8007d32:	2300      	movlt	r3, #0
 8007d34:	e741      	b.n	8007bba <_dtoa_r+0x742>
 8007d36:	9e08      	ldr	r6, [sp, #32]
 8007d38:	9d05      	ldr	r5, [sp, #20]
 8007d3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d3c:	e748      	b.n	8007bd0 <_dtoa_r+0x758>
 8007d3e:	9a08      	ldr	r2, [sp, #32]
 8007d40:	e770      	b.n	8007c24 <_dtoa_r+0x7ac>
 8007d42:	9b07      	ldr	r3, [sp, #28]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	dc19      	bgt.n	8007d7c <_dtoa_r+0x904>
 8007d48:	9b02      	ldr	r3, [sp, #8]
 8007d4a:	b9bb      	cbnz	r3, 8007d7c <_dtoa_r+0x904>
 8007d4c:	9b03      	ldr	r3, [sp, #12]
 8007d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d52:	b99b      	cbnz	r3, 8007d7c <_dtoa_r+0x904>
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d5a:	0d1b      	lsrs	r3, r3, #20
 8007d5c:	051b      	lsls	r3, r3, #20
 8007d5e:	b183      	cbz	r3, 8007d82 <_dtoa_r+0x90a>
 8007d60:	9b05      	ldr	r3, [sp, #20]
 8007d62:	3301      	adds	r3, #1
 8007d64:	9305      	str	r3, [sp, #20]
 8007d66:	9b06      	ldr	r3, [sp, #24]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	9306      	str	r3, [sp, #24]
 8007d6c:	f04f 0801 	mov.w	r8, #1
 8007d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f47f af6f 	bne.w	8007c56 <_dtoa_r+0x7de>
 8007d78:	2001      	movs	r0, #1
 8007d7a:	e774      	b.n	8007c66 <_dtoa_r+0x7ee>
 8007d7c:	f04f 0800 	mov.w	r8, #0
 8007d80:	e7f6      	b.n	8007d70 <_dtoa_r+0x8f8>
 8007d82:	4698      	mov	r8, r3
 8007d84:	e7f4      	b.n	8007d70 <_dtoa_r+0x8f8>
 8007d86:	d082      	beq.n	8007c8e <_dtoa_r+0x816>
 8007d88:	9a05      	ldr	r2, [sp, #20]
 8007d8a:	331c      	adds	r3, #28
 8007d8c:	441a      	add	r2, r3
 8007d8e:	9205      	str	r2, [sp, #20]
 8007d90:	9a06      	ldr	r2, [sp, #24]
 8007d92:	441a      	add	r2, r3
 8007d94:	441d      	add	r5, r3
 8007d96:	9206      	str	r2, [sp, #24]
 8007d98:	e779      	b.n	8007c8e <_dtoa_r+0x816>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	e7f4      	b.n	8007d88 <_dtoa_r+0x910>
 8007d9e:	9b04      	ldr	r3, [sp, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dc37      	bgt.n	8007e14 <_dtoa_r+0x99c>
 8007da4:	9b07      	ldr	r3, [sp, #28]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	dd34      	ble.n	8007e14 <_dtoa_r+0x99c>
 8007daa:	9b04      	ldr	r3, [sp, #16]
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	b963      	cbnz	r3, 8007dcc <_dtoa_r+0x954>
 8007db2:	4631      	mov	r1, r6
 8007db4:	2205      	movs	r2, #5
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fab2 	bl	8008320 <__multadd>
 8007dbc:	4601      	mov	r1, r0
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	4650      	mov	r0, sl
 8007dc2:	f000 fd11 	bl	80087e8 <__mcmp>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f73f adbb 	bgt.w	8007942 <_dtoa_r+0x4ca>
 8007dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dce:	9d00      	ldr	r5, [sp, #0]
 8007dd0:	ea6f 0b03 	mvn.w	fp, r3
 8007dd4:	f04f 0800 	mov.w	r8, #0
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 fa7e 	bl	80082dc <_Bfree>
 8007de0:	2f00      	cmp	r7, #0
 8007de2:	f43f aeab 	beq.w	8007b3c <_dtoa_r+0x6c4>
 8007de6:	f1b8 0f00 	cmp.w	r8, #0
 8007dea:	d005      	beq.n	8007df8 <_dtoa_r+0x980>
 8007dec:	45b8      	cmp	r8, r7
 8007dee:	d003      	beq.n	8007df8 <_dtoa_r+0x980>
 8007df0:	4641      	mov	r1, r8
 8007df2:	4620      	mov	r0, r4
 8007df4:	f000 fa72 	bl	80082dc <_Bfree>
 8007df8:	4639      	mov	r1, r7
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 fa6e 	bl	80082dc <_Bfree>
 8007e00:	e69c      	b.n	8007b3c <_dtoa_r+0x6c4>
 8007e02:	2600      	movs	r6, #0
 8007e04:	4637      	mov	r7, r6
 8007e06:	e7e1      	b.n	8007dcc <_dtoa_r+0x954>
 8007e08:	46bb      	mov	fp, r7
 8007e0a:	4637      	mov	r7, r6
 8007e0c:	e599      	b.n	8007942 <_dtoa_r+0x4ca>
 8007e0e:	bf00      	nop
 8007e10:	40240000 	.word	0x40240000
 8007e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 80c8 	beq.w	8007fac <_dtoa_r+0xb34>
 8007e1c:	9b04      	ldr	r3, [sp, #16]
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	dd05      	ble.n	8007e30 <_dtoa_r+0x9b8>
 8007e24:	4639      	mov	r1, r7
 8007e26:	462a      	mov	r2, r5
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 fc71 	bl	8008710 <__lshift>
 8007e2e:	4607      	mov	r7, r0
 8007e30:	f1b8 0f00 	cmp.w	r8, #0
 8007e34:	d05b      	beq.n	8007eee <_dtoa_r+0xa76>
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 fa0f 	bl	800825c <_Balloc>
 8007e3e:	4605      	mov	r5, r0
 8007e40:	b928      	cbnz	r0, 8007e4e <_dtoa_r+0x9d6>
 8007e42:	4b83      	ldr	r3, [pc, #524]	; (8008050 <_dtoa_r+0xbd8>)
 8007e44:	4602      	mov	r2, r0
 8007e46:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007e4a:	f7ff bb2e 	b.w	80074aa <_dtoa_r+0x32>
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	3202      	adds	r2, #2
 8007e52:	0092      	lsls	r2, r2, #2
 8007e54:	f107 010c 	add.w	r1, r7, #12
 8007e58:	300c      	adds	r0, #12
 8007e5a:	f002 fb19 	bl	800a490 <memcpy>
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4629      	mov	r1, r5
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 fc54 	bl	8008710 <__lshift>
 8007e68:	9b00      	ldr	r3, [sp, #0]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e72:	4413      	add	r3, r2
 8007e74:	9308      	str	r3, [sp, #32]
 8007e76:	9b02      	ldr	r3, [sp, #8]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	46b8      	mov	r8, r7
 8007e7e:	9306      	str	r3, [sp, #24]
 8007e80:	4607      	mov	r7, r0
 8007e82:	9b04      	ldr	r3, [sp, #16]
 8007e84:	4631      	mov	r1, r6
 8007e86:	3b01      	subs	r3, #1
 8007e88:	4650      	mov	r0, sl
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	f7ff fa6a 	bl	8007364 <quorem>
 8007e90:	4641      	mov	r1, r8
 8007e92:	9002      	str	r0, [sp, #8]
 8007e94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e98:	4650      	mov	r0, sl
 8007e9a:	f000 fca5 	bl	80087e8 <__mcmp>
 8007e9e:	463a      	mov	r2, r7
 8007ea0:	9005      	str	r0, [sp, #20]
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 fcbb 	bl	8008820 <__mdiff>
 8007eaa:	68c2      	ldr	r2, [r0, #12]
 8007eac:	4605      	mov	r5, r0
 8007eae:	bb02      	cbnz	r2, 8007ef2 <_dtoa_r+0xa7a>
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	f000 fc98 	bl	80087e8 <__mcmp>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8007ec0:	f000 fa0c 	bl	80082dc <_Bfree>
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ec8:	9d04      	ldr	r5, [sp, #16]
 8007eca:	ea43 0102 	orr.w	r1, r3, r2
 8007ece:	9b06      	ldr	r3, [sp, #24]
 8007ed0:	4319      	orrs	r1, r3
 8007ed2:	d110      	bne.n	8007ef6 <_dtoa_r+0xa7e>
 8007ed4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ed8:	d029      	beq.n	8007f2e <_dtoa_r+0xab6>
 8007eda:	9b05      	ldr	r3, [sp, #20]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dd02      	ble.n	8007ee6 <_dtoa_r+0xa6e>
 8007ee0:	9b02      	ldr	r3, [sp, #8]
 8007ee2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	f883 9000 	strb.w	r9, [r3]
 8007eec:	e774      	b.n	8007dd8 <_dtoa_r+0x960>
 8007eee:	4638      	mov	r0, r7
 8007ef0:	e7ba      	b.n	8007e68 <_dtoa_r+0x9f0>
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	e7e1      	b.n	8007eba <_dtoa_r+0xa42>
 8007ef6:	9b05      	ldr	r3, [sp, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	db04      	blt.n	8007f06 <_dtoa_r+0xa8e>
 8007efc:	9907      	ldr	r1, [sp, #28]
 8007efe:	430b      	orrs	r3, r1
 8007f00:	9906      	ldr	r1, [sp, #24]
 8007f02:	430b      	orrs	r3, r1
 8007f04:	d120      	bne.n	8007f48 <_dtoa_r+0xad0>
 8007f06:	2a00      	cmp	r2, #0
 8007f08:	dded      	ble.n	8007ee6 <_dtoa_r+0xa6e>
 8007f0a:	4651      	mov	r1, sl
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 fbfe 	bl	8008710 <__lshift>
 8007f14:	4631      	mov	r1, r6
 8007f16:	4682      	mov	sl, r0
 8007f18:	f000 fc66 	bl	80087e8 <__mcmp>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	dc03      	bgt.n	8007f28 <_dtoa_r+0xab0>
 8007f20:	d1e1      	bne.n	8007ee6 <_dtoa_r+0xa6e>
 8007f22:	f019 0f01 	tst.w	r9, #1
 8007f26:	d0de      	beq.n	8007ee6 <_dtoa_r+0xa6e>
 8007f28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f2c:	d1d8      	bne.n	8007ee0 <_dtoa_r+0xa68>
 8007f2e:	9a01      	ldr	r2, [sp, #4]
 8007f30:	2339      	movs	r3, #57	; 0x39
 8007f32:	7013      	strb	r3, [r2, #0]
 8007f34:	462b      	mov	r3, r5
 8007f36:	461d      	mov	r5, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f3e:	2a39      	cmp	r2, #57	; 0x39
 8007f40:	d06c      	beq.n	800801c <_dtoa_r+0xba4>
 8007f42:	3201      	adds	r2, #1
 8007f44:	701a      	strb	r2, [r3, #0]
 8007f46:	e747      	b.n	8007dd8 <_dtoa_r+0x960>
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	dd07      	ble.n	8007f5c <_dtoa_r+0xae4>
 8007f4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f50:	d0ed      	beq.n	8007f2e <_dtoa_r+0xab6>
 8007f52:	9a01      	ldr	r2, [sp, #4]
 8007f54:	f109 0301 	add.w	r3, r9, #1
 8007f58:	7013      	strb	r3, [r2, #0]
 8007f5a:	e73d      	b.n	8007dd8 <_dtoa_r+0x960>
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	9a08      	ldr	r2, [sp, #32]
 8007f60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d043      	beq.n	8007ff0 <_dtoa_r+0xb78>
 8007f68:	4651      	mov	r1, sl
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 f9d6 	bl	8008320 <__multadd>
 8007f74:	45b8      	cmp	r8, r7
 8007f76:	4682      	mov	sl, r0
 8007f78:	f04f 0300 	mov.w	r3, #0
 8007f7c:	f04f 020a 	mov.w	r2, #10
 8007f80:	4641      	mov	r1, r8
 8007f82:	4620      	mov	r0, r4
 8007f84:	d107      	bne.n	8007f96 <_dtoa_r+0xb1e>
 8007f86:	f000 f9cb 	bl	8008320 <__multadd>
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	9b04      	ldr	r3, [sp, #16]
 8007f90:	3301      	adds	r3, #1
 8007f92:	9304      	str	r3, [sp, #16]
 8007f94:	e775      	b.n	8007e82 <_dtoa_r+0xa0a>
 8007f96:	f000 f9c3 	bl	8008320 <__multadd>
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	220a      	movs	r2, #10
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 f9bc 	bl	8008320 <__multadd>
 8007fa8:	4607      	mov	r7, r0
 8007faa:	e7f0      	b.n	8007f8e <_dtoa_r+0xb16>
 8007fac:	9b04      	ldr	r3, [sp, #16]
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	9d00      	ldr	r5, [sp, #0]
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	4650      	mov	r0, sl
 8007fb6:	f7ff f9d5 	bl	8007364 <quorem>
 8007fba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007fbe:	9b00      	ldr	r3, [sp, #0]
 8007fc0:	f805 9b01 	strb.w	r9, [r5], #1
 8007fc4:	1aea      	subs	r2, r5, r3
 8007fc6:	9b01      	ldr	r3, [sp, #4]
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	dd07      	ble.n	8007fdc <_dtoa_r+0xb64>
 8007fcc:	4651      	mov	r1, sl
 8007fce:	2300      	movs	r3, #0
 8007fd0:	220a      	movs	r2, #10
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 f9a4 	bl	8008320 <__multadd>
 8007fd8:	4682      	mov	sl, r0
 8007fda:	e7ea      	b.n	8007fb2 <_dtoa_r+0xb3a>
 8007fdc:	9b01      	ldr	r3, [sp, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bfc8      	it	gt
 8007fe2:	461d      	movgt	r5, r3
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	bfd8      	it	le
 8007fe8:	2501      	movle	r5, #1
 8007fea:	441d      	add	r5, r3
 8007fec:	f04f 0800 	mov.w	r8, #0
 8007ff0:	4651      	mov	r1, sl
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f000 fb8b 	bl	8008710 <__lshift>
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	4682      	mov	sl, r0
 8007ffe:	f000 fbf3 	bl	80087e8 <__mcmp>
 8008002:	2800      	cmp	r0, #0
 8008004:	dc96      	bgt.n	8007f34 <_dtoa_r+0xabc>
 8008006:	d102      	bne.n	800800e <_dtoa_r+0xb96>
 8008008:	f019 0f01 	tst.w	r9, #1
 800800c:	d192      	bne.n	8007f34 <_dtoa_r+0xabc>
 800800e:	462b      	mov	r3, r5
 8008010:	461d      	mov	r5, r3
 8008012:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008016:	2a30      	cmp	r2, #48	; 0x30
 8008018:	d0fa      	beq.n	8008010 <_dtoa_r+0xb98>
 800801a:	e6dd      	b.n	8007dd8 <_dtoa_r+0x960>
 800801c:	9a00      	ldr	r2, [sp, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d189      	bne.n	8007f36 <_dtoa_r+0xabe>
 8008022:	f10b 0b01 	add.w	fp, fp, #1
 8008026:	2331      	movs	r3, #49	; 0x31
 8008028:	e796      	b.n	8007f58 <_dtoa_r+0xae0>
 800802a:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <_dtoa_r+0xbdc>)
 800802c:	f7ff ba99 	b.w	8007562 <_dtoa_r+0xea>
 8008030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008032:	2b00      	cmp	r3, #0
 8008034:	f47f aa6d 	bne.w	8007512 <_dtoa_r+0x9a>
 8008038:	4b07      	ldr	r3, [pc, #28]	; (8008058 <_dtoa_r+0xbe0>)
 800803a:	f7ff ba92 	b.w	8007562 <_dtoa_r+0xea>
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	dcb5      	bgt.n	8007fb0 <_dtoa_r+0xb38>
 8008044:	9b07      	ldr	r3, [sp, #28]
 8008046:	2b02      	cmp	r3, #2
 8008048:	f73f aeb1 	bgt.w	8007dae <_dtoa_r+0x936>
 800804c:	e7b0      	b.n	8007fb0 <_dtoa_r+0xb38>
 800804e:	bf00      	nop
 8008050:	0800cc3f 	.word	0x0800cc3f
 8008054:	0800cf28 	.word	0x0800cf28
 8008058:	0800cbc3 	.word	0x0800cbc3

0800805c <_free_r>:
 800805c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800805e:	2900      	cmp	r1, #0
 8008060:	d044      	beq.n	80080ec <_free_r+0x90>
 8008062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008066:	9001      	str	r0, [sp, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f1a1 0404 	sub.w	r4, r1, #4
 800806e:	bfb8      	it	lt
 8008070:	18e4      	addlt	r4, r4, r3
 8008072:	f000 f8e7 	bl	8008244 <__malloc_lock>
 8008076:	4a1e      	ldr	r2, [pc, #120]	; (80080f0 <_free_r+0x94>)
 8008078:	9801      	ldr	r0, [sp, #4]
 800807a:	6813      	ldr	r3, [r2, #0]
 800807c:	b933      	cbnz	r3, 800808c <_free_r+0x30>
 800807e:	6063      	str	r3, [r4, #4]
 8008080:	6014      	str	r4, [r2, #0]
 8008082:	b003      	add	sp, #12
 8008084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008088:	f000 b8e2 	b.w	8008250 <__malloc_unlock>
 800808c:	42a3      	cmp	r3, r4
 800808e:	d908      	bls.n	80080a2 <_free_r+0x46>
 8008090:	6825      	ldr	r5, [r4, #0]
 8008092:	1961      	adds	r1, r4, r5
 8008094:	428b      	cmp	r3, r1
 8008096:	bf01      	itttt	eq
 8008098:	6819      	ldreq	r1, [r3, #0]
 800809a:	685b      	ldreq	r3, [r3, #4]
 800809c:	1949      	addeq	r1, r1, r5
 800809e:	6021      	streq	r1, [r4, #0]
 80080a0:	e7ed      	b.n	800807e <_free_r+0x22>
 80080a2:	461a      	mov	r2, r3
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	b10b      	cbz	r3, 80080ac <_free_r+0x50>
 80080a8:	42a3      	cmp	r3, r4
 80080aa:	d9fa      	bls.n	80080a2 <_free_r+0x46>
 80080ac:	6811      	ldr	r1, [r2, #0]
 80080ae:	1855      	adds	r5, r2, r1
 80080b0:	42a5      	cmp	r5, r4
 80080b2:	d10b      	bne.n	80080cc <_free_r+0x70>
 80080b4:	6824      	ldr	r4, [r4, #0]
 80080b6:	4421      	add	r1, r4
 80080b8:	1854      	adds	r4, r2, r1
 80080ba:	42a3      	cmp	r3, r4
 80080bc:	6011      	str	r1, [r2, #0]
 80080be:	d1e0      	bne.n	8008082 <_free_r+0x26>
 80080c0:	681c      	ldr	r4, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	6053      	str	r3, [r2, #4]
 80080c6:	440c      	add	r4, r1
 80080c8:	6014      	str	r4, [r2, #0]
 80080ca:	e7da      	b.n	8008082 <_free_r+0x26>
 80080cc:	d902      	bls.n	80080d4 <_free_r+0x78>
 80080ce:	230c      	movs	r3, #12
 80080d0:	6003      	str	r3, [r0, #0]
 80080d2:	e7d6      	b.n	8008082 <_free_r+0x26>
 80080d4:	6825      	ldr	r5, [r4, #0]
 80080d6:	1961      	adds	r1, r4, r5
 80080d8:	428b      	cmp	r3, r1
 80080da:	bf04      	itt	eq
 80080dc:	6819      	ldreq	r1, [r3, #0]
 80080de:	685b      	ldreq	r3, [r3, #4]
 80080e0:	6063      	str	r3, [r4, #4]
 80080e2:	bf04      	itt	eq
 80080e4:	1949      	addeq	r1, r1, r5
 80080e6:	6021      	streq	r1, [r4, #0]
 80080e8:	6054      	str	r4, [r2, #4]
 80080ea:	e7ca      	b.n	8008082 <_free_r+0x26>
 80080ec:	b003      	add	sp, #12
 80080ee:	bd30      	pop	{r4, r5, pc}
 80080f0:	20000654 	.word	0x20000654

080080f4 <malloc>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <malloc+0xc>)
 80080f6:	4601      	mov	r1, r0
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	f000 b823 	b.w	8008144 <_malloc_r>
 80080fe:	bf00      	nop
 8008100:	20000064 	.word	0x20000064

08008104 <sbrk_aligned>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	4e0e      	ldr	r6, [pc, #56]	; (8008140 <sbrk_aligned+0x3c>)
 8008108:	460c      	mov	r4, r1
 800810a:	6831      	ldr	r1, [r6, #0]
 800810c:	4605      	mov	r5, r0
 800810e:	b911      	cbnz	r1, 8008116 <sbrk_aligned+0x12>
 8008110:	f002 f9ae 	bl	800a470 <_sbrk_r>
 8008114:	6030      	str	r0, [r6, #0]
 8008116:	4621      	mov	r1, r4
 8008118:	4628      	mov	r0, r5
 800811a:	f002 f9a9 	bl	800a470 <_sbrk_r>
 800811e:	1c43      	adds	r3, r0, #1
 8008120:	d00a      	beq.n	8008138 <sbrk_aligned+0x34>
 8008122:	1cc4      	adds	r4, r0, #3
 8008124:	f024 0403 	bic.w	r4, r4, #3
 8008128:	42a0      	cmp	r0, r4
 800812a:	d007      	beq.n	800813c <sbrk_aligned+0x38>
 800812c:	1a21      	subs	r1, r4, r0
 800812e:	4628      	mov	r0, r5
 8008130:	f002 f99e 	bl	800a470 <_sbrk_r>
 8008134:	3001      	adds	r0, #1
 8008136:	d101      	bne.n	800813c <sbrk_aligned+0x38>
 8008138:	f04f 34ff 	mov.w	r4, #4294967295
 800813c:	4620      	mov	r0, r4
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	20000658 	.word	0x20000658

08008144 <_malloc_r>:
 8008144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008148:	1ccd      	adds	r5, r1, #3
 800814a:	f025 0503 	bic.w	r5, r5, #3
 800814e:	3508      	adds	r5, #8
 8008150:	2d0c      	cmp	r5, #12
 8008152:	bf38      	it	cc
 8008154:	250c      	movcc	r5, #12
 8008156:	2d00      	cmp	r5, #0
 8008158:	4607      	mov	r7, r0
 800815a:	db01      	blt.n	8008160 <_malloc_r+0x1c>
 800815c:	42a9      	cmp	r1, r5
 800815e:	d905      	bls.n	800816c <_malloc_r+0x28>
 8008160:	230c      	movs	r3, #12
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	2600      	movs	r6, #0
 8008166:	4630      	mov	r0, r6
 8008168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008240 <_malloc_r+0xfc>
 8008170:	f000 f868 	bl	8008244 <__malloc_lock>
 8008174:	f8d8 3000 	ldr.w	r3, [r8]
 8008178:	461c      	mov	r4, r3
 800817a:	bb5c      	cbnz	r4, 80081d4 <_malloc_r+0x90>
 800817c:	4629      	mov	r1, r5
 800817e:	4638      	mov	r0, r7
 8008180:	f7ff ffc0 	bl	8008104 <sbrk_aligned>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	4604      	mov	r4, r0
 8008188:	d155      	bne.n	8008236 <_malloc_r+0xf2>
 800818a:	f8d8 4000 	ldr.w	r4, [r8]
 800818e:	4626      	mov	r6, r4
 8008190:	2e00      	cmp	r6, #0
 8008192:	d145      	bne.n	8008220 <_malloc_r+0xdc>
 8008194:	2c00      	cmp	r4, #0
 8008196:	d048      	beq.n	800822a <_malloc_r+0xe6>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	4631      	mov	r1, r6
 800819c:	4638      	mov	r0, r7
 800819e:	eb04 0903 	add.w	r9, r4, r3
 80081a2:	f002 f965 	bl	800a470 <_sbrk_r>
 80081a6:	4581      	cmp	r9, r0
 80081a8:	d13f      	bne.n	800822a <_malloc_r+0xe6>
 80081aa:	6821      	ldr	r1, [r4, #0]
 80081ac:	1a6d      	subs	r5, r5, r1
 80081ae:	4629      	mov	r1, r5
 80081b0:	4638      	mov	r0, r7
 80081b2:	f7ff ffa7 	bl	8008104 <sbrk_aligned>
 80081b6:	3001      	adds	r0, #1
 80081b8:	d037      	beq.n	800822a <_malloc_r+0xe6>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	442b      	add	r3, r5
 80081be:	6023      	str	r3, [r4, #0]
 80081c0:	f8d8 3000 	ldr.w	r3, [r8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d038      	beq.n	800823a <_malloc_r+0xf6>
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	42a2      	cmp	r2, r4
 80081cc:	d12b      	bne.n	8008226 <_malloc_r+0xe2>
 80081ce:	2200      	movs	r2, #0
 80081d0:	605a      	str	r2, [r3, #4]
 80081d2:	e00f      	b.n	80081f4 <_malloc_r+0xb0>
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	1b52      	subs	r2, r2, r5
 80081d8:	d41f      	bmi.n	800821a <_malloc_r+0xd6>
 80081da:	2a0b      	cmp	r2, #11
 80081dc:	d917      	bls.n	800820e <_malloc_r+0xca>
 80081de:	1961      	adds	r1, r4, r5
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	6025      	str	r5, [r4, #0]
 80081e4:	bf18      	it	ne
 80081e6:	6059      	strne	r1, [r3, #4]
 80081e8:	6863      	ldr	r3, [r4, #4]
 80081ea:	bf08      	it	eq
 80081ec:	f8c8 1000 	streq.w	r1, [r8]
 80081f0:	5162      	str	r2, [r4, r5]
 80081f2:	604b      	str	r3, [r1, #4]
 80081f4:	4638      	mov	r0, r7
 80081f6:	f104 060b 	add.w	r6, r4, #11
 80081fa:	f000 f829 	bl	8008250 <__malloc_unlock>
 80081fe:	f026 0607 	bic.w	r6, r6, #7
 8008202:	1d23      	adds	r3, r4, #4
 8008204:	1af2      	subs	r2, r6, r3
 8008206:	d0ae      	beq.n	8008166 <_malloc_r+0x22>
 8008208:	1b9b      	subs	r3, r3, r6
 800820a:	50a3      	str	r3, [r4, r2]
 800820c:	e7ab      	b.n	8008166 <_malloc_r+0x22>
 800820e:	42a3      	cmp	r3, r4
 8008210:	6862      	ldr	r2, [r4, #4]
 8008212:	d1dd      	bne.n	80081d0 <_malloc_r+0x8c>
 8008214:	f8c8 2000 	str.w	r2, [r8]
 8008218:	e7ec      	b.n	80081f4 <_malloc_r+0xb0>
 800821a:	4623      	mov	r3, r4
 800821c:	6864      	ldr	r4, [r4, #4]
 800821e:	e7ac      	b.n	800817a <_malloc_r+0x36>
 8008220:	4634      	mov	r4, r6
 8008222:	6876      	ldr	r6, [r6, #4]
 8008224:	e7b4      	b.n	8008190 <_malloc_r+0x4c>
 8008226:	4613      	mov	r3, r2
 8008228:	e7cc      	b.n	80081c4 <_malloc_r+0x80>
 800822a:	230c      	movs	r3, #12
 800822c:	603b      	str	r3, [r7, #0]
 800822e:	4638      	mov	r0, r7
 8008230:	f000 f80e 	bl	8008250 <__malloc_unlock>
 8008234:	e797      	b.n	8008166 <_malloc_r+0x22>
 8008236:	6025      	str	r5, [r4, #0]
 8008238:	e7dc      	b.n	80081f4 <_malloc_r+0xb0>
 800823a:	605b      	str	r3, [r3, #4]
 800823c:	deff      	udf	#255	; 0xff
 800823e:	bf00      	nop
 8008240:	20000654 	.word	0x20000654

08008244 <__malloc_lock>:
 8008244:	4801      	ldr	r0, [pc, #4]	; (800824c <__malloc_lock+0x8>)
 8008246:	f7ff b87c 	b.w	8007342 <__retarget_lock_acquire_recursive>
 800824a:	bf00      	nop
 800824c:	20000650 	.word	0x20000650

08008250 <__malloc_unlock>:
 8008250:	4801      	ldr	r0, [pc, #4]	; (8008258 <__malloc_unlock+0x8>)
 8008252:	f7ff b877 	b.w	8007344 <__retarget_lock_release_recursive>
 8008256:	bf00      	nop
 8008258:	20000650 	.word	0x20000650

0800825c <_Balloc>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	69c6      	ldr	r6, [r0, #28]
 8008260:	4604      	mov	r4, r0
 8008262:	460d      	mov	r5, r1
 8008264:	b976      	cbnz	r6, 8008284 <_Balloc+0x28>
 8008266:	2010      	movs	r0, #16
 8008268:	f7ff ff44 	bl	80080f4 <malloc>
 800826c:	4602      	mov	r2, r0
 800826e:	61e0      	str	r0, [r4, #28]
 8008270:	b920      	cbnz	r0, 800827c <_Balloc+0x20>
 8008272:	4b18      	ldr	r3, [pc, #96]	; (80082d4 <_Balloc+0x78>)
 8008274:	4818      	ldr	r0, [pc, #96]	; (80082d8 <_Balloc+0x7c>)
 8008276:	216b      	movs	r1, #107	; 0x6b
 8008278:	f002 f922 	bl	800a4c0 <__assert_func>
 800827c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008280:	6006      	str	r6, [r0, #0]
 8008282:	60c6      	str	r6, [r0, #12]
 8008284:	69e6      	ldr	r6, [r4, #28]
 8008286:	68f3      	ldr	r3, [r6, #12]
 8008288:	b183      	cbz	r3, 80082ac <_Balloc+0x50>
 800828a:	69e3      	ldr	r3, [r4, #28]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008292:	b9b8      	cbnz	r0, 80082c4 <_Balloc+0x68>
 8008294:	2101      	movs	r1, #1
 8008296:	fa01 f605 	lsl.w	r6, r1, r5
 800829a:	1d72      	adds	r2, r6, #5
 800829c:	0092      	lsls	r2, r2, #2
 800829e:	4620      	mov	r0, r4
 80082a0:	f002 f92c 	bl	800a4fc <_calloc_r>
 80082a4:	b160      	cbz	r0, 80082c0 <_Balloc+0x64>
 80082a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082aa:	e00e      	b.n	80082ca <_Balloc+0x6e>
 80082ac:	2221      	movs	r2, #33	; 0x21
 80082ae:	2104      	movs	r1, #4
 80082b0:	4620      	mov	r0, r4
 80082b2:	f002 f923 	bl	800a4fc <_calloc_r>
 80082b6:	69e3      	ldr	r3, [r4, #28]
 80082b8:	60f0      	str	r0, [r6, #12]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e4      	bne.n	800828a <_Balloc+0x2e>
 80082c0:	2000      	movs	r0, #0
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	6802      	ldr	r2, [r0, #0]
 80082c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082ca:	2300      	movs	r3, #0
 80082cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082d0:	e7f7      	b.n	80082c2 <_Balloc+0x66>
 80082d2:	bf00      	nop
 80082d4:	0800cbd0 	.word	0x0800cbd0
 80082d8:	0800cc50 	.word	0x0800cc50

080082dc <_Bfree>:
 80082dc:	b570      	push	{r4, r5, r6, lr}
 80082de:	69c6      	ldr	r6, [r0, #28]
 80082e0:	4605      	mov	r5, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	b976      	cbnz	r6, 8008304 <_Bfree+0x28>
 80082e6:	2010      	movs	r0, #16
 80082e8:	f7ff ff04 	bl	80080f4 <malloc>
 80082ec:	4602      	mov	r2, r0
 80082ee:	61e8      	str	r0, [r5, #28]
 80082f0:	b920      	cbnz	r0, 80082fc <_Bfree+0x20>
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <_Bfree+0x3c>)
 80082f4:	4809      	ldr	r0, [pc, #36]	; (800831c <_Bfree+0x40>)
 80082f6:	218f      	movs	r1, #143	; 0x8f
 80082f8:	f002 f8e2 	bl	800a4c0 <__assert_func>
 80082fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008300:	6006      	str	r6, [r0, #0]
 8008302:	60c6      	str	r6, [r0, #12]
 8008304:	b13c      	cbz	r4, 8008316 <_Bfree+0x3a>
 8008306:	69eb      	ldr	r3, [r5, #28]
 8008308:	6862      	ldr	r2, [r4, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008310:	6021      	str	r1, [r4, #0]
 8008312:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	0800cbd0 	.word	0x0800cbd0
 800831c:	0800cc50 	.word	0x0800cc50

08008320 <__multadd>:
 8008320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008324:	690d      	ldr	r5, [r1, #16]
 8008326:	4607      	mov	r7, r0
 8008328:	460c      	mov	r4, r1
 800832a:	461e      	mov	r6, r3
 800832c:	f101 0c14 	add.w	ip, r1, #20
 8008330:	2000      	movs	r0, #0
 8008332:	f8dc 3000 	ldr.w	r3, [ip]
 8008336:	b299      	uxth	r1, r3
 8008338:	fb02 6101 	mla	r1, r2, r1, r6
 800833c:	0c1e      	lsrs	r6, r3, #16
 800833e:	0c0b      	lsrs	r3, r1, #16
 8008340:	fb02 3306 	mla	r3, r2, r6, r3
 8008344:	b289      	uxth	r1, r1
 8008346:	3001      	adds	r0, #1
 8008348:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800834c:	4285      	cmp	r5, r0
 800834e:	f84c 1b04 	str.w	r1, [ip], #4
 8008352:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008356:	dcec      	bgt.n	8008332 <__multadd+0x12>
 8008358:	b30e      	cbz	r6, 800839e <__multadd+0x7e>
 800835a:	68a3      	ldr	r3, [r4, #8]
 800835c:	42ab      	cmp	r3, r5
 800835e:	dc19      	bgt.n	8008394 <__multadd+0x74>
 8008360:	6861      	ldr	r1, [r4, #4]
 8008362:	4638      	mov	r0, r7
 8008364:	3101      	adds	r1, #1
 8008366:	f7ff ff79 	bl	800825c <_Balloc>
 800836a:	4680      	mov	r8, r0
 800836c:	b928      	cbnz	r0, 800837a <__multadd+0x5a>
 800836e:	4602      	mov	r2, r0
 8008370:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <__multadd+0x84>)
 8008372:	480d      	ldr	r0, [pc, #52]	; (80083a8 <__multadd+0x88>)
 8008374:	21ba      	movs	r1, #186	; 0xba
 8008376:	f002 f8a3 	bl	800a4c0 <__assert_func>
 800837a:	6922      	ldr	r2, [r4, #16]
 800837c:	3202      	adds	r2, #2
 800837e:	f104 010c 	add.w	r1, r4, #12
 8008382:	0092      	lsls	r2, r2, #2
 8008384:	300c      	adds	r0, #12
 8008386:	f002 f883 	bl	800a490 <memcpy>
 800838a:	4621      	mov	r1, r4
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff ffa5 	bl	80082dc <_Bfree>
 8008392:	4644      	mov	r4, r8
 8008394:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008398:	3501      	adds	r5, #1
 800839a:	615e      	str	r6, [r3, #20]
 800839c:	6125      	str	r5, [r4, #16]
 800839e:	4620      	mov	r0, r4
 80083a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a4:	0800cc3f 	.word	0x0800cc3f
 80083a8:	0800cc50 	.word	0x0800cc50

080083ac <__s2b>:
 80083ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b0:	460c      	mov	r4, r1
 80083b2:	4615      	mov	r5, r2
 80083b4:	461f      	mov	r7, r3
 80083b6:	2209      	movs	r2, #9
 80083b8:	3308      	adds	r3, #8
 80083ba:	4606      	mov	r6, r0
 80083bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80083c0:	2100      	movs	r1, #0
 80083c2:	2201      	movs	r2, #1
 80083c4:	429a      	cmp	r2, r3
 80083c6:	db09      	blt.n	80083dc <__s2b+0x30>
 80083c8:	4630      	mov	r0, r6
 80083ca:	f7ff ff47 	bl	800825c <_Balloc>
 80083ce:	b940      	cbnz	r0, 80083e2 <__s2b+0x36>
 80083d0:	4602      	mov	r2, r0
 80083d2:	4b19      	ldr	r3, [pc, #100]	; (8008438 <__s2b+0x8c>)
 80083d4:	4819      	ldr	r0, [pc, #100]	; (800843c <__s2b+0x90>)
 80083d6:	21d3      	movs	r1, #211	; 0xd3
 80083d8:	f002 f872 	bl	800a4c0 <__assert_func>
 80083dc:	0052      	lsls	r2, r2, #1
 80083de:	3101      	adds	r1, #1
 80083e0:	e7f0      	b.n	80083c4 <__s2b+0x18>
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	6143      	str	r3, [r0, #20]
 80083e6:	2d09      	cmp	r5, #9
 80083e8:	f04f 0301 	mov.w	r3, #1
 80083ec:	6103      	str	r3, [r0, #16]
 80083ee:	dd16      	ble.n	800841e <__s2b+0x72>
 80083f0:	f104 0909 	add.w	r9, r4, #9
 80083f4:	46c8      	mov	r8, r9
 80083f6:	442c      	add	r4, r5
 80083f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80083fc:	4601      	mov	r1, r0
 80083fe:	3b30      	subs	r3, #48	; 0x30
 8008400:	220a      	movs	r2, #10
 8008402:	4630      	mov	r0, r6
 8008404:	f7ff ff8c 	bl	8008320 <__multadd>
 8008408:	45a0      	cmp	r8, r4
 800840a:	d1f5      	bne.n	80083f8 <__s2b+0x4c>
 800840c:	f1a5 0408 	sub.w	r4, r5, #8
 8008410:	444c      	add	r4, r9
 8008412:	1b2d      	subs	r5, r5, r4
 8008414:	1963      	adds	r3, r4, r5
 8008416:	42bb      	cmp	r3, r7
 8008418:	db04      	blt.n	8008424 <__s2b+0x78>
 800841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841e:	340a      	adds	r4, #10
 8008420:	2509      	movs	r5, #9
 8008422:	e7f6      	b.n	8008412 <__s2b+0x66>
 8008424:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008428:	4601      	mov	r1, r0
 800842a:	3b30      	subs	r3, #48	; 0x30
 800842c:	220a      	movs	r2, #10
 800842e:	4630      	mov	r0, r6
 8008430:	f7ff ff76 	bl	8008320 <__multadd>
 8008434:	e7ee      	b.n	8008414 <__s2b+0x68>
 8008436:	bf00      	nop
 8008438:	0800cc3f 	.word	0x0800cc3f
 800843c:	0800cc50 	.word	0x0800cc50

08008440 <__hi0bits>:
 8008440:	0c03      	lsrs	r3, r0, #16
 8008442:	041b      	lsls	r3, r3, #16
 8008444:	b9d3      	cbnz	r3, 800847c <__hi0bits+0x3c>
 8008446:	0400      	lsls	r0, r0, #16
 8008448:	2310      	movs	r3, #16
 800844a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800844e:	bf04      	itt	eq
 8008450:	0200      	lsleq	r0, r0, #8
 8008452:	3308      	addeq	r3, #8
 8008454:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008458:	bf04      	itt	eq
 800845a:	0100      	lsleq	r0, r0, #4
 800845c:	3304      	addeq	r3, #4
 800845e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008462:	bf04      	itt	eq
 8008464:	0080      	lsleq	r0, r0, #2
 8008466:	3302      	addeq	r3, #2
 8008468:	2800      	cmp	r0, #0
 800846a:	db05      	blt.n	8008478 <__hi0bits+0x38>
 800846c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008470:	f103 0301 	add.w	r3, r3, #1
 8008474:	bf08      	it	eq
 8008476:	2320      	moveq	r3, #32
 8008478:	4618      	mov	r0, r3
 800847a:	4770      	bx	lr
 800847c:	2300      	movs	r3, #0
 800847e:	e7e4      	b.n	800844a <__hi0bits+0xa>

08008480 <__lo0bits>:
 8008480:	6803      	ldr	r3, [r0, #0]
 8008482:	f013 0207 	ands.w	r2, r3, #7
 8008486:	d00c      	beq.n	80084a2 <__lo0bits+0x22>
 8008488:	07d9      	lsls	r1, r3, #31
 800848a:	d422      	bmi.n	80084d2 <__lo0bits+0x52>
 800848c:	079a      	lsls	r2, r3, #30
 800848e:	bf49      	itett	mi
 8008490:	085b      	lsrmi	r3, r3, #1
 8008492:	089b      	lsrpl	r3, r3, #2
 8008494:	6003      	strmi	r3, [r0, #0]
 8008496:	2201      	movmi	r2, #1
 8008498:	bf5c      	itt	pl
 800849a:	6003      	strpl	r3, [r0, #0]
 800849c:	2202      	movpl	r2, #2
 800849e:	4610      	mov	r0, r2
 80084a0:	4770      	bx	lr
 80084a2:	b299      	uxth	r1, r3
 80084a4:	b909      	cbnz	r1, 80084aa <__lo0bits+0x2a>
 80084a6:	0c1b      	lsrs	r3, r3, #16
 80084a8:	2210      	movs	r2, #16
 80084aa:	b2d9      	uxtb	r1, r3
 80084ac:	b909      	cbnz	r1, 80084b2 <__lo0bits+0x32>
 80084ae:	3208      	adds	r2, #8
 80084b0:	0a1b      	lsrs	r3, r3, #8
 80084b2:	0719      	lsls	r1, r3, #28
 80084b4:	bf04      	itt	eq
 80084b6:	091b      	lsreq	r3, r3, #4
 80084b8:	3204      	addeq	r2, #4
 80084ba:	0799      	lsls	r1, r3, #30
 80084bc:	bf04      	itt	eq
 80084be:	089b      	lsreq	r3, r3, #2
 80084c0:	3202      	addeq	r2, #2
 80084c2:	07d9      	lsls	r1, r3, #31
 80084c4:	d403      	bmi.n	80084ce <__lo0bits+0x4e>
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	f102 0201 	add.w	r2, r2, #1
 80084cc:	d003      	beq.n	80084d6 <__lo0bits+0x56>
 80084ce:	6003      	str	r3, [r0, #0]
 80084d0:	e7e5      	b.n	800849e <__lo0bits+0x1e>
 80084d2:	2200      	movs	r2, #0
 80084d4:	e7e3      	b.n	800849e <__lo0bits+0x1e>
 80084d6:	2220      	movs	r2, #32
 80084d8:	e7e1      	b.n	800849e <__lo0bits+0x1e>
	...

080084dc <__i2b>:
 80084dc:	b510      	push	{r4, lr}
 80084de:	460c      	mov	r4, r1
 80084e0:	2101      	movs	r1, #1
 80084e2:	f7ff febb 	bl	800825c <_Balloc>
 80084e6:	4602      	mov	r2, r0
 80084e8:	b928      	cbnz	r0, 80084f6 <__i2b+0x1a>
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <__i2b+0x24>)
 80084ec:	4805      	ldr	r0, [pc, #20]	; (8008504 <__i2b+0x28>)
 80084ee:	f240 1145 	movw	r1, #325	; 0x145
 80084f2:	f001 ffe5 	bl	800a4c0 <__assert_func>
 80084f6:	2301      	movs	r3, #1
 80084f8:	6144      	str	r4, [r0, #20]
 80084fa:	6103      	str	r3, [r0, #16]
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	bf00      	nop
 8008500:	0800cc3f 	.word	0x0800cc3f
 8008504:	0800cc50 	.word	0x0800cc50

08008508 <__multiply>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	4691      	mov	r9, r2
 800850e:	690a      	ldr	r2, [r1, #16]
 8008510:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008514:	429a      	cmp	r2, r3
 8008516:	bfb8      	it	lt
 8008518:	460b      	movlt	r3, r1
 800851a:	460c      	mov	r4, r1
 800851c:	bfbc      	itt	lt
 800851e:	464c      	movlt	r4, r9
 8008520:	4699      	movlt	r9, r3
 8008522:	6927      	ldr	r7, [r4, #16]
 8008524:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008528:	68a3      	ldr	r3, [r4, #8]
 800852a:	6861      	ldr	r1, [r4, #4]
 800852c:	eb07 060a 	add.w	r6, r7, sl
 8008530:	42b3      	cmp	r3, r6
 8008532:	b085      	sub	sp, #20
 8008534:	bfb8      	it	lt
 8008536:	3101      	addlt	r1, #1
 8008538:	f7ff fe90 	bl	800825c <_Balloc>
 800853c:	b930      	cbnz	r0, 800854c <__multiply+0x44>
 800853e:	4602      	mov	r2, r0
 8008540:	4b44      	ldr	r3, [pc, #272]	; (8008654 <__multiply+0x14c>)
 8008542:	4845      	ldr	r0, [pc, #276]	; (8008658 <__multiply+0x150>)
 8008544:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008548:	f001 ffba 	bl	800a4c0 <__assert_func>
 800854c:	f100 0514 	add.w	r5, r0, #20
 8008550:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008554:	462b      	mov	r3, r5
 8008556:	2200      	movs	r2, #0
 8008558:	4543      	cmp	r3, r8
 800855a:	d321      	bcc.n	80085a0 <__multiply+0x98>
 800855c:	f104 0314 	add.w	r3, r4, #20
 8008560:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008564:	f109 0314 	add.w	r3, r9, #20
 8008568:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800856c:	9202      	str	r2, [sp, #8]
 800856e:	1b3a      	subs	r2, r7, r4
 8008570:	3a15      	subs	r2, #21
 8008572:	f022 0203 	bic.w	r2, r2, #3
 8008576:	3204      	adds	r2, #4
 8008578:	f104 0115 	add.w	r1, r4, #21
 800857c:	428f      	cmp	r7, r1
 800857e:	bf38      	it	cc
 8008580:	2204      	movcc	r2, #4
 8008582:	9201      	str	r2, [sp, #4]
 8008584:	9a02      	ldr	r2, [sp, #8]
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	429a      	cmp	r2, r3
 800858a:	d80c      	bhi.n	80085a6 <__multiply+0x9e>
 800858c:	2e00      	cmp	r6, #0
 800858e:	dd03      	ble.n	8008598 <__multiply+0x90>
 8008590:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008594:	2b00      	cmp	r3, #0
 8008596:	d05b      	beq.n	8008650 <__multiply+0x148>
 8008598:	6106      	str	r6, [r0, #16]
 800859a:	b005      	add	sp, #20
 800859c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a0:	f843 2b04 	str.w	r2, [r3], #4
 80085a4:	e7d8      	b.n	8008558 <__multiply+0x50>
 80085a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80085aa:	f1ba 0f00 	cmp.w	sl, #0
 80085ae:	d024      	beq.n	80085fa <__multiply+0xf2>
 80085b0:	f104 0e14 	add.w	lr, r4, #20
 80085b4:	46a9      	mov	r9, r5
 80085b6:	f04f 0c00 	mov.w	ip, #0
 80085ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085be:	f8d9 1000 	ldr.w	r1, [r9]
 80085c2:	fa1f fb82 	uxth.w	fp, r2
 80085c6:	b289      	uxth	r1, r1
 80085c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80085cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085d0:	f8d9 2000 	ldr.w	r2, [r9]
 80085d4:	4461      	add	r1, ip
 80085d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085da:	fb0a c20b 	mla	r2, sl, fp, ip
 80085de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085e2:	b289      	uxth	r1, r1
 80085e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085e8:	4577      	cmp	r7, lr
 80085ea:	f849 1b04 	str.w	r1, [r9], #4
 80085ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085f2:	d8e2      	bhi.n	80085ba <__multiply+0xb2>
 80085f4:	9a01      	ldr	r2, [sp, #4]
 80085f6:	f845 c002 	str.w	ip, [r5, r2]
 80085fa:	9a03      	ldr	r2, [sp, #12]
 80085fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008600:	3304      	adds	r3, #4
 8008602:	f1b9 0f00 	cmp.w	r9, #0
 8008606:	d021      	beq.n	800864c <__multiply+0x144>
 8008608:	6829      	ldr	r1, [r5, #0]
 800860a:	f104 0c14 	add.w	ip, r4, #20
 800860e:	46ae      	mov	lr, r5
 8008610:	f04f 0a00 	mov.w	sl, #0
 8008614:	f8bc b000 	ldrh.w	fp, [ip]
 8008618:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800861c:	fb09 220b 	mla	r2, r9, fp, r2
 8008620:	4452      	add	r2, sl
 8008622:	b289      	uxth	r1, r1
 8008624:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008628:	f84e 1b04 	str.w	r1, [lr], #4
 800862c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008630:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008634:	f8be 1000 	ldrh.w	r1, [lr]
 8008638:	fb09 110a 	mla	r1, r9, sl, r1
 800863c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008640:	4567      	cmp	r7, ip
 8008642:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008646:	d8e5      	bhi.n	8008614 <__multiply+0x10c>
 8008648:	9a01      	ldr	r2, [sp, #4]
 800864a:	50a9      	str	r1, [r5, r2]
 800864c:	3504      	adds	r5, #4
 800864e:	e799      	b.n	8008584 <__multiply+0x7c>
 8008650:	3e01      	subs	r6, #1
 8008652:	e79b      	b.n	800858c <__multiply+0x84>
 8008654:	0800cc3f 	.word	0x0800cc3f
 8008658:	0800cc50 	.word	0x0800cc50

0800865c <__pow5mult>:
 800865c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008660:	4615      	mov	r5, r2
 8008662:	f012 0203 	ands.w	r2, r2, #3
 8008666:	4606      	mov	r6, r0
 8008668:	460f      	mov	r7, r1
 800866a:	d007      	beq.n	800867c <__pow5mult+0x20>
 800866c:	4c25      	ldr	r4, [pc, #148]	; (8008704 <__pow5mult+0xa8>)
 800866e:	3a01      	subs	r2, #1
 8008670:	2300      	movs	r3, #0
 8008672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008676:	f7ff fe53 	bl	8008320 <__multadd>
 800867a:	4607      	mov	r7, r0
 800867c:	10ad      	asrs	r5, r5, #2
 800867e:	d03d      	beq.n	80086fc <__pow5mult+0xa0>
 8008680:	69f4      	ldr	r4, [r6, #28]
 8008682:	b97c      	cbnz	r4, 80086a4 <__pow5mult+0x48>
 8008684:	2010      	movs	r0, #16
 8008686:	f7ff fd35 	bl	80080f4 <malloc>
 800868a:	4602      	mov	r2, r0
 800868c:	61f0      	str	r0, [r6, #28]
 800868e:	b928      	cbnz	r0, 800869c <__pow5mult+0x40>
 8008690:	4b1d      	ldr	r3, [pc, #116]	; (8008708 <__pow5mult+0xac>)
 8008692:	481e      	ldr	r0, [pc, #120]	; (800870c <__pow5mult+0xb0>)
 8008694:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008698:	f001 ff12 	bl	800a4c0 <__assert_func>
 800869c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086a0:	6004      	str	r4, [r0, #0]
 80086a2:	60c4      	str	r4, [r0, #12]
 80086a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80086a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086ac:	b94c      	cbnz	r4, 80086c2 <__pow5mult+0x66>
 80086ae:	f240 2171 	movw	r1, #625	; 0x271
 80086b2:	4630      	mov	r0, r6
 80086b4:	f7ff ff12 	bl	80084dc <__i2b>
 80086b8:	2300      	movs	r3, #0
 80086ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80086be:	4604      	mov	r4, r0
 80086c0:	6003      	str	r3, [r0, #0]
 80086c2:	f04f 0900 	mov.w	r9, #0
 80086c6:	07eb      	lsls	r3, r5, #31
 80086c8:	d50a      	bpl.n	80086e0 <__pow5mult+0x84>
 80086ca:	4639      	mov	r1, r7
 80086cc:	4622      	mov	r2, r4
 80086ce:	4630      	mov	r0, r6
 80086d0:	f7ff ff1a 	bl	8008508 <__multiply>
 80086d4:	4639      	mov	r1, r7
 80086d6:	4680      	mov	r8, r0
 80086d8:	4630      	mov	r0, r6
 80086da:	f7ff fdff 	bl	80082dc <_Bfree>
 80086de:	4647      	mov	r7, r8
 80086e0:	106d      	asrs	r5, r5, #1
 80086e2:	d00b      	beq.n	80086fc <__pow5mult+0xa0>
 80086e4:	6820      	ldr	r0, [r4, #0]
 80086e6:	b938      	cbnz	r0, 80086f8 <__pow5mult+0x9c>
 80086e8:	4622      	mov	r2, r4
 80086ea:	4621      	mov	r1, r4
 80086ec:	4630      	mov	r0, r6
 80086ee:	f7ff ff0b 	bl	8008508 <__multiply>
 80086f2:	6020      	str	r0, [r4, #0]
 80086f4:	f8c0 9000 	str.w	r9, [r0]
 80086f8:	4604      	mov	r4, r0
 80086fa:	e7e4      	b.n	80086c6 <__pow5mult+0x6a>
 80086fc:	4638      	mov	r0, r7
 80086fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008702:	bf00      	nop
 8008704:	0800cda0 	.word	0x0800cda0
 8008708:	0800cbd0 	.word	0x0800cbd0
 800870c:	0800cc50 	.word	0x0800cc50

08008710 <__lshift>:
 8008710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008714:	460c      	mov	r4, r1
 8008716:	6849      	ldr	r1, [r1, #4]
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	4607      	mov	r7, r0
 8008722:	4691      	mov	r9, r2
 8008724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008728:	f108 0601 	add.w	r6, r8, #1
 800872c:	42b3      	cmp	r3, r6
 800872e:	db0b      	blt.n	8008748 <__lshift+0x38>
 8008730:	4638      	mov	r0, r7
 8008732:	f7ff fd93 	bl	800825c <_Balloc>
 8008736:	4605      	mov	r5, r0
 8008738:	b948      	cbnz	r0, 800874e <__lshift+0x3e>
 800873a:	4602      	mov	r2, r0
 800873c:	4b28      	ldr	r3, [pc, #160]	; (80087e0 <__lshift+0xd0>)
 800873e:	4829      	ldr	r0, [pc, #164]	; (80087e4 <__lshift+0xd4>)
 8008740:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008744:	f001 febc 	bl	800a4c0 <__assert_func>
 8008748:	3101      	adds	r1, #1
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	e7ee      	b.n	800872c <__lshift+0x1c>
 800874e:	2300      	movs	r3, #0
 8008750:	f100 0114 	add.w	r1, r0, #20
 8008754:	f100 0210 	add.w	r2, r0, #16
 8008758:	4618      	mov	r0, r3
 800875a:	4553      	cmp	r3, sl
 800875c:	db33      	blt.n	80087c6 <__lshift+0xb6>
 800875e:	6920      	ldr	r0, [r4, #16]
 8008760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008764:	f104 0314 	add.w	r3, r4, #20
 8008768:	f019 091f 	ands.w	r9, r9, #31
 800876c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008770:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008774:	d02b      	beq.n	80087ce <__lshift+0xbe>
 8008776:	f1c9 0e20 	rsb	lr, r9, #32
 800877a:	468a      	mov	sl, r1
 800877c:	2200      	movs	r2, #0
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	fa00 f009 	lsl.w	r0, r0, r9
 8008784:	4310      	orrs	r0, r2
 8008786:	f84a 0b04 	str.w	r0, [sl], #4
 800878a:	f853 2b04 	ldr.w	r2, [r3], #4
 800878e:	459c      	cmp	ip, r3
 8008790:	fa22 f20e 	lsr.w	r2, r2, lr
 8008794:	d8f3      	bhi.n	800877e <__lshift+0x6e>
 8008796:	ebac 0304 	sub.w	r3, ip, r4
 800879a:	3b15      	subs	r3, #21
 800879c:	f023 0303 	bic.w	r3, r3, #3
 80087a0:	3304      	adds	r3, #4
 80087a2:	f104 0015 	add.w	r0, r4, #21
 80087a6:	4584      	cmp	ip, r0
 80087a8:	bf38      	it	cc
 80087aa:	2304      	movcc	r3, #4
 80087ac:	50ca      	str	r2, [r1, r3]
 80087ae:	b10a      	cbz	r2, 80087b4 <__lshift+0xa4>
 80087b0:	f108 0602 	add.w	r6, r8, #2
 80087b4:	3e01      	subs	r6, #1
 80087b6:	4638      	mov	r0, r7
 80087b8:	612e      	str	r6, [r5, #16]
 80087ba:	4621      	mov	r1, r4
 80087bc:	f7ff fd8e 	bl	80082dc <_Bfree>
 80087c0:	4628      	mov	r0, r5
 80087c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80087ca:	3301      	adds	r3, #1
 80087cc:	e7c5      	b.n	800875a <__lshift+0x4a>
 80087ce:	3904      	subs	r1, #4
 80087d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80087d8:	459c      	cmp	ip, r3
 80087da:	d8f9      	bhi.n	80087d0 <__lshift+0xc0>
 80087dc:	e7ea      	b.n	80087b4 <__lshift+0xa4>
 80087de:	bf00      	nop
 80087e0:	0800cc3f 	.word	0x0800cc3f
 80087e4:	0800cc50 	.word	0x0800cc50

080087e8 <__mcmp>:
 80087e8:	b530      	push	{r4, r5, lr}
 80087ea:	6902      	ldr	r2, [r0, #16]
 80087ec:	690c      	ldr	r4, [r1, #16]
 80087ee:	1b12      	subs	r2, r2, r4
 80087f0:	d10e      	bne.n	8008810 <__mcmp+0x28>
 80087f2:	f100 0314 	add.w	r3, r0, #20
 80087f6:	3114      	adds	r1, #20
 80087f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008800:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008804:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008808:	42a5      	cmp	r5, r4
 800880a:	d003      	beq.n	8008814 <__mcmp+0x2c>
 800880c:	d305      	bcc.n	800881a <__mcmp+0x32>
 800880e:	2201      	movs	r2, #1
 8008810:	4610      	mov	r0, r2
 8008812:	bd30      	pop	{r4, r5, pc}
 8008814:	4283      	cmp	r3, r0
 8008816:	d3f3      	bcc.n	8008800 <__mcmp+0x18>
 8008818:	e7fa      	b.n	8008810 <__mcmp+0x28>
 800881a:	f04f 32ff 	mov.w	r2, #4294967295
 800881e:	e7f7      	b.n	8008810 <__mcmp+0x28>

08008820 <__mdiff>:
 8008820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	460c      	mov	r4, r1
 8008826:	4606      	mov	r6, r0
 8008828:	4611      	mov	r1, r2
 800882a:	4620      	mov	r0, r4
 800882c:	4690      	mov	r8, r2
 800882e:	f7ff ffdb 	bl	80087e8 <__mcmp>
 8008832:	1e05      	subs	r5, r0, #0
 8008834:	d110      	bne.n	8008858 <__mdiff+0x38>
 8008836:	4629      	mov	r1, r5
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff fd0f 	bl	800825c <_Balloc>
 800883e:	b930      	cbnz	r0, 800884e <__mdiff+0x2e>
 8008840:	4b3a      	ldr	r3, [pc, #232]	; (800892c <__mdiff+0x10c>)
 8008842:	4602      	mov	r2, r0
 8008844:	f240 2137 	movw	r1, #567	; 0x237
 8008848:	4839      	ldr	r0, [pc, #228]	; (8008930 <__mdiff+0x110>)
 800884a:	f001 fe39 	bl	800a4c0 <__assert_func>
 800884e:	2301      	movs	r3, #1
 8008850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008858:	bfa4      	itt	ge
 800885a:	4643      	movge	r3, r8
 800885c:	46a0      	movge	r8, r4
 800885e:	4630      	mov	r0, r6
 8008860:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008864:	bfa6      	itte	ge
 8008866:	461c      	movge	r4, r3
 8008868:	2500      	movge	r5, #0
 800886a:	2501      	movlt	r5, #1
 800886c:	f7ff fcf6 	bl	800825c <_Balloc>
 8008870:	b920      	cbnz	r0, 800887c <__mdiff+0x5c>
 8008872:	4b2e      	ldr	r3, [pc, #184]	; (800892c <__mdiff+0x10c>)
 8008874:	4602      	mov	r2, r0
 8008876:	f240 2145 	movw	r1, #581	; 0x245
 800887a:	e7e5      	b.n	8008848 <__mdiff+0x28>
 800887c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008880:	6926      	ldr	r6, [r4, #16]
 8008882:	60c5      	str	r5, [r0, #12]
 8008884:	f104 0914 	add.w	r9, r4, #20
 8008888:	f108 0514 	add.w	r5, r8, #20
 800888c:	f100 0e14 	add.w	lr, r0, #20
 8008890:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008894:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008898:	f108 0210 	add.w	r2, r8, #16
 800889c:	46f2      	mov	sl, lr
 800889e:	2100      	movs	r1, #0
 80088a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80088a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088a8:	fa11 f88b 	uxtah	r8, r1, fp
 80088ac:	b299      	uxth	r1, r3
 80088ae:	0c1b      	lsrs	r3, r3, #16
 80088b0:	eba8 0801 	sub.w	r8, r8, r1
 80088b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088b8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088bc:	fa1f f888 	uxth.w	r8, r8
 80088c0:	1419      	asrs	r1, r3, #16
 80088c2:	454e      	cmp	r6, r9
 80088c4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088c8:	f84a 3b04 	str.w	r3, [sl], #4
 80088cc:	d8e8      	bhi.n	80088a0 <__mdiff+0x80>
 80088ce:	1b33      	subs	r3, r6, r4
 80088d0:	3b15      	subs	r3, #21
 80088d2:	f023 0303 	bic.w	r3, r3, #3
 80088d6:	3304      	adds	r3, #4
 80088d8:	3415      	adds	r4, #21
 80088da:	42a6      	cmp	r6, r4
 80088dc:	bf38      	it	cc
 80088de:	2304      	movcc	r3, #4
 80088e0:	441d      	add	r5, r3
 80088e2:	4473      	add	r3, lr
 80088e4:	469e      	mov	lr, r3
 80088e6:	462e      	mov	r6, r5
 80088e8:	4566      	cmp	r6, ip
 80088ea:	d30e      	bcc.n	800890a <__mdiff+0xea>
 80088ec:	f10c 0203 	add.w	r2, ip, #3
 80088f0:	1b52      	subs	r2, r2, r5
 80088f2:	f022 0203 	bic.w	r2, r2, #3
 80088f6:	3d03      	subs	r5, #3
 80088f8:	45ac      	cmp	ip, r5
 80088fa:	bf38      	it	cc
 80088fc:	2200      	movcc	r2, #0
 80088fe:	4413      	add	r3, r2
 8008900:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008904:	b17a      	cbz	r2, 8008926 <__mdiff+0x106>
 8008906:	6107      	str	r7, [r0, #16]
 8008908:	e7a4      	b.n	8008854 <__mdiff+0x34>
 800890a:	f856 8b04 	ldr.w	r8, [r6], #4
 800890e:	fa11 f288 	uxtah	r2, r1, r8
 8008912:	1414      	asrs	r4, r2, #16
 8008914:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008918:	b292      	uxth	r2, r2
 800891a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800891e:	f84e 2b04 	str.w	r2, [lr], #4
 8008922:	1421      	asrs	r1, r4, #16
 8008924:	e7e0      	b.n	80088e8 <__mdiff+0xc8>
 8008926:	3f01      	subs	r7, #1
 8008928:	e7ea      	b.n	8008900 <__mdiff+0xe0>
 800892a:	bf00      	nop
 800892c:	0800cc3f 	.word	0x0800cc3f
 8008930:	0800cc50 	.word	0x0800cc50

08008934 <__ulp>:
 8008934:	b082      	sub	sp, #8
 8008936:	ed8d 0b00 	vstr	d0, [sp]
 800893a:	9a01      	ldr	r2, [sp, #4]
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <__ulp+0x48>)
 800893e:	4013      	ands	r3, r2
 8008940:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008944:	2b00      	cmp	r3, #0
 8008946:	dc08      	bgt.n	800895a <__ulp+0x26>
 8008948:	425b      	negs	r3, r3
 800894a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800894e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008952:	da04      	bge.n	800895e <__ulp+0x2a>
 8008954:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008958:	4113      	asrs	r3, r2
 800895a:	2200      	movs	r2, #0
 800895c:	e008      	b.n	8008970 <__ulp+0x3c>
 800895e:	f1a2 0314 	sub.w	r3, r2, #20
 8008962:	2b1e      	cmp	r3, #30
 8008964:	bfda      	itte	le
 8008966:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800896a:	40da      	lsrle	r2, r3
 800896c:	2201      	movgt	r2, #1
 800896e:	2300      	movs	r3, #0
 8008970:	4619      	mov	r1, r3
 8008972:	4610      	mov	r0, r2
 8008974:	ec41 0b10 	vmov	d0, r0, r1
 8008978:	b002      	add	sp, #8
 800897a:	4770      	bx	lr
 800897c:	7ff00000 	.word	0x7ff00000

08008980 <__b2d>:
 8008980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008984:	6906      	ldr	r6, [r0, #16]
 8008986:	f100 0814 	add.w	r8, r0, #20
 800898a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800898e:	1f37      	subs	r7, r6, #4
 8008990:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008994:	4610      	mov	r0, r2
 8008996:	f7ff fd53 	bl	8008440 <__hi0bits>
 800899a:	f1c0 0320 	rsb	r3, r0, #32
 800899e:	280a      	cmp	r0, #10
 80089a0:	600b      	str	r3, [r1, #0]
 80089a2:	491b      	ldr	r1, [pc, #108]	; (8008a10 <__b2d+0x90>)
 80089a4:	dc15      	bgt.n	80089d2 <__b2d+0x52>
 80089a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80089aa:	fa22 f30c 	lsr.w	r3, r2, ip
 80089ae:	45b8      	cmp	r8, r7
 80089b0:	ea43 0501 	orr.w	r5, r3, r1
 80089b4:	bf34      	ite	cc
 80089b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80089ba:	2300      	movcs	r3, #0
 80089bc:	3015      	adds	r0, #21
 80089be:	fa02 f000 	lsl.w	r0, r2, r0
 80089c2:	fa23 f30c 	lsr.w	r3, r3, ip
 80089c6:	4303      	orrs	r3, r0
 80089c8:	461c      	mov	r4, r3
 80089ca:	ec45 4b10 	vmov	d0, r4, r5
 80089ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d2:	45b8      	cmp	r8, r7
 80089d4:	bf3a      	itte	cc
 80089d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80089da:	f1a6 0708 	subcc.w	r7, r6, #8
 80089de:	2300      	movcs	r3, #0
 80089e0:	380b      	subs	r0, #11
 80089e2:	d012      	beq.n	8008a0a <__b2d+0x8a>
 80089e4:	f1c0 0120 	rsb	r1, r0, #32
 80089e8:	fa23 f401 	lsr.w	r4, r3, r1
 80089ec:	4082      	lsls	r2, r0
 80089ee:	4322      	orrs	r2, r4
 80089f0:	4547      	cmp	r7, r8
 80089f2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80089f6:	bf8c      	ite	hi
 80089f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80089fc:	2200      	movls	r2, #0
 80089fe:	4083      	lsls	r3, r0
 8008a00:	40ca      	lsrs	r2, r1
 8008a02:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a06:	4313      	orrs	r3, r2
 8008a08:	e7de      	b.n	80089c8 <__b2d+0x48>
 8008a0a:	ea42 0501 	orr.w	r5, r2, r1
 8008a0e:	e7db      	b.n	80089c8 <__b2d+0x48>
 8008a10:	3ff00000 	.word	0x3ff00000

08008a14 <__d2b>:
 8008a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a18:	460f      	mov	r7, r1
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	ec59 8b10 	vmov	r8, r9, d0
 8008a20:	4616      	mov	r6, r2
 8008a22:	f7ff fc1b 	bl	800825c <_Balloc>
 8008a26:	4604      	mov	r4, r0
 8008a28:	b930      	cbnz	r0, 8008a38 <__d2b+0x24>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	4b24      	ldr	r3, [pc, #144]	; (8008ac0 <__d2b+0xac>)
 8008a2e:	4825      	ldr	r0, [pc, #148]	; (8008ac4 <__d2b+0xb0>)
 8008a30:	f240 310f 	movw	r1, #783	; 0x30f
 8008a34:	f001 fd44 	bl	800a4c0 <__assert_func>
 8008a38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a40:	bb2d      	cbnz	r5, 8008a8e <__d2b+0x7a>
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	f1b8 0300 	subs.w	r3, r8, #0
 8008a48:	d026      	beq.n	8008a98 <__d2b+0x84>
 8008a4a:	4668      	mov	r0, sp
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	f7ff fd17 	bl	8008480 <__lo0bits>
 8008a52:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a56:	b1e8      	cbz	r0, 8008a94 <__d2b+0x80>
 8008a58:	f1c0 0320 	rsb	r3, r0, #32
 8008a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a60:	430b      	orrs	r3, r1
 8008a62:	40c2      	lsrs	r2, r0
 8008a64:	6163      	str	r3, [r4, #20]
 8008a66:	9201      	str	r2, [sp, #4]
 8008a68:	9b01      	ldr	r3, [sp, #4]
 8008a6a:	61a3      	str	r3, [r4, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bf14      	ite	ne
 8008a70:	2202      	movne	r2, #2
 8008a72:	2201      	moveq	r2, #1
 8008a74:	6122      	str	r2, [r4, #16]
 8008a76:	b1bd      	cbz	r5, 8008aa8 <__d2b+0x94>
 8008a78:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a7c:	4405      	add	r5, r0
 8008a7e:	603d      	str	r5, [r7, #0]
 8008a80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a84:	6030      	str	r0, [r6, #0]
 8008a86:	4620      	mov	r0, r4
 8008a88:	b003      	add	sp, #12
 8008a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a92:	e7d6      	b.n	8008a42 <__d2b+0x2e>
 8008a94:	6161      	str	r1, [r4, #20]
 8008a96:	e7e7      	b.n	8008a68 <__d2b+0x54>
 8008a98:	a801      	add	r0, sp, #4
 8008a9a:	f7ff fcf1 	bl	8008480 <__lo0bits>
 8008a9e:	9b01      	ldr	r3, [sp, #4]
 8008aa0:	6163      	str	r3, [r4, #20]
 8008aa2:	3020      	adds	r0, #32
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	e7e5      	b.n	8008a74 <__d2b+0x60>
 8008aa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008aac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ab0:	6038      	str	r0, [r7, #0]
 8008ab2:	6918      	ldr	r0, [r3, #16]
 8008ab4:	f7ff fcc4 	bl	8008440 <__hi0bits>
 8008ab8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008abc:	e7e2      	b.n	8008a84 <__d2b+0x70>
 8008abe:	bf00      	nop
 8008ac0:	0800cc3f 	.word	0x0800cc3f
 8008ac4:	0800cc50 	.word	0x0800cc50

08008ac8 <__ratio>:
 8008ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	4688      	mov	r8, r1
 8008ace:	4669      	mov	r1, sp
 8008ad0:	4681      	mov	r9, r0
 8008ad2:	f7ff ff55 	bl	8008980 <__b2d>
 8008ad6:	a901      	add	r1, sp, #4
 8008ad8:	4640      	mov	r0, r8
 8008ada:	ec55 4b10 	vmov	r4, r5, d0
 8008ade:	f7ff ff4f 	bl	8008980 <__b2d>
 8008ae2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ae6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008aea:	eba3 0c02 	sub.w	ip, r3, r2
 8008aee:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008af2:	1a9b      	subs	r3, r3, r2
 8008af4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008af8:	ec51 0b10 	vmov	r0, r1, d0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	bfd6      	itet	le
 8008b00:	460a      	movle	r2, r1
 8008b02:	462a      	movgt	r2, r5
 8008b04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b08:	468b      	mov	fp, r1
 8008b0a:	462f      	mov	r7, r5
 8008b0c:	bfd4      	ite	le
 8008b0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b16:	4620      	mov	r0, r4
 8008b18:	ee10 2a10 	vmov	r2, s0
 8008b1c:	465b      	mov	r3, fp
 8008b1e:	4639      	mov	r1, r7
 8008b20:	f7f7 feac 	bl	800087c <__aeabi_ddiv>
 8008b24:	ec41 0b10 	vmov	d0, r0, r1
 8008b28:	b003      	add	sp, #12
 8008b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b2e <__copybits>:
 8008b2e:	3901      	subs	r1, #1
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	1149      	asrs	r1, r1, #5
 8008b34:	6914      	ldr	r4, [r2, #16]
 8008b36:	3101      	adds	r1, #1
 8008b38:	f102 0314 	add.w	r3, r2, #20
 8008b3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b44:	1f05      	subs	r5, r0, #4
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	d30c      	bcc.n	8008b64 <__copybits+0x36>
 8008b4a:	1aa3      	subs	r3, r4, r2
 8008b4c:	3b11      	subs	r3, #17
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	3211      	adds	r2, #17
 8008b54:	42a2      	cmp	r2, r4
 8008b56:	bf88      	it	hi
 8008b58:	2300      	movhi	r3, #0
 8008b5a:	4418      	add	r0, r3
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	4288      	cmp	r0, r1
 8008b60:	d305      	bcc.n	8008b6e <__copybits+0x40>
 8008b62:	bd70      	pop	{r4, r5, r6, pc}
 8008b64:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b68:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b6c:	e7eb      	b.n	8008b46 <__copybits+0x18>
 8008b6e:	f840 3b04 	str.w	r3, [r0], #4
 8008b72:	e7f4      	b.n	8008b5e <__copybits+0x30>

08008b74 <__any_on>:
 8008b74:	f100 0214 	add.w	r2, r0, #20
 8008b78:	6900      	ldr	r0, [r0, #16]
 8008b7a:	114b      	asrs	r3, r1, #5
 8008b7c:	4298      	cmp	r0, r3
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	db11      	blt.n	8008ba6 <__any_on+0x32>
 8008b82:	dd0a      	ble.n	8008b9a <__any_on+0x26>
 8008b84:	f011 011f 	ands.w	r1, r1, #31
 8008b88:	d007      	beq.n	8008b9a <__any_on+0x26>
 8008b8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b8e:	fa24 f001 	lsr.w	r0, r4, r1
 8008b92:	fa00 f101 	lsl.w	r1, r0, r1
 8008b96:	428c      	cmp	r4, r1
 8008b98:	d10b      	bne.n	8008bb2 <__any_on+0x3e>
 8008b9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d803      	bhi.n	8008baa <__any_on+0x36>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	e7f7      	b.n	8008b9a <__any_on+0x26>
 8008baa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bae:	2900      	cmp	r1, #0
 8008bb0:	d0f5      	beq.n	8008b9e <__any_on+0x2a>
 8008bb2:	2001      	movs	r0, #1
 8008bb4:	e7f6      	b.n	8008ba4 <__any_on+0x30>

08008bb6 <sulp>:
 8008bb6:	b570      	push	{r4, r5, r6, lr}
 8008bb8:	4604      	mov	r4, r0
 8008bba:	460d      	mov	r5, r1
 8008bbc:	ec45 4b10 	vmov	d0, r4, r5
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	f7ff feb7 	bl	8008934 <__ulp>
 8008bc6:	ec51 0b10 	vmov	r0, r1, d0
 8008bca:	b17e      	cbz	r6, 8008bec <sulp+0x36>
 8008bcc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	dd09      	ble.n	8008bec <sulp+0x36>
 8008bd8:	051b      	lsls	r3, r3, #20
 8008bda:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008bde:	2400      	movs	r4, #0
 8008be0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008be4:	4622      	mov	r2, r4
 8008be6:	462b      	mov	r3, r5
 8008be8:	f7f7 fd1e 	bl	8000628 <__aeabi_dmul>
 8008bec:	bd70      	pop	{r4, r5, r6, pc}
	...

08008bf0 <_strtod_l>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	ed2d 8b02 	vpush	{d8}
 8008bf8:	b09b      	sub	sp, #108	; 0x6c
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	9213      	str	r2, [sp, #76]	; 0x4c
 8008bfe:	2200      	movs	r2, #0
 8008c00:	9216      	str	r2, [sp, #88]	; 0x58
 8008c02:	460d      	mov	r5, r1
 8008c04:	f04f 0800 	mov.w	r8, #0
 8008c08:	f04f 0900 	mov.w	r9, #0
 8008c0c:	460a      	mov	r2, r1
 8008c0e:	9215      	str	r2, [sp, #84]	; 0x54
 8008c10:	7811      	ldrb	r1, [r2, #0]
 8008c12:	292b      	cmp	r1, #43	; 0x2b
 8008c14:	d04c      	beq.n	8008cb0 <_strtod_l+0xc0>
 8008c16:	d83a      	bhi.n	8008c8e <_strtod_l+0x9e>
 8008c18:	290d      	cmp	r1, #13
 8008c1a:	d834      	bhi.n	8008c86 <_strtod_l+0x96>
 8008c1c:	2908      	cmp	r1, #8
 8008c1e:	d834      	bhi.n	8008c8a <_strtod_l+0x9a>
 8008c20:	2900      	cmp	r1, #0
 8008c22:	d03d      	beq.n	8008ca0 <_strtod_l+0xb0>
 8008c24:	2200      	movs	r2, #0
 8008c26:	920a      	str	r2, [sp, #40]	; 0x28
 8008c28:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008c2a:	7832      	ldrb	r2, [r6, #0]
 8008c2c:	2a30      	cmp	r2, #48	; 0x30
 8008c2e:	f040 80b4 	bne.w	8008d9a <_strtod_l+0x1aa>
 8008c32:	7872      	ldrb	r2, [r6, #1]
 8008c34:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008c38:	2a58      	cmp	r2, #88	; 0x58
 8008c3a:	d170      	bne.n	8008d1e <_strtod_l+0x12e>
 8008c3c:	9302      	str	r3, [sp, #8]
 8008c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	ab16      	add	r3, sp, #88	; 0x58
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	4a8e      	ldr	r2, [pc, #568]	; (8008e80 <_strtod_l+0x290>)
 8008c48:	ab17      	add	r3, sp, #92	; 0x5c
 8008c4a:	a915      	add	r1, sp, #84	; 0x54
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f001 fcd3 	bl	800a5f8 <__gethex>
 8008c52:	f010 070f 	ands.w	r7, r0, #15
 8008c56:	4605      	mov	r5, r0
 8008c58:	d005      	beq.n	8008c66 <_strtod_l+0x76>
 8008c5a:	2f06      	cmp	r7, #6
 8008c5c:	d12a      	bne.n	8008cb4 <_strtod_l+0xc4>
 8008c5e:	3601      	adds	r6, #1
 8008c60:	2300      	movs	r3, #0
 8008c62:	9615      	str	r6, [sp, #84]	; 0x54
 8008c64:	930a      	str	r3, [sp, #40]	; 0x28
 8008c66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f040 857f 	bne.w	800976c <_strtod_l+0xb7c>
 8008c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c70:	b1db      	cbz	r3, 8008caa <_strtod_l+0xba>
 8008c72:	4642      	mov	r2, r8
 8008c74:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c78:	ec43 2b10 	vmov	d0, r2, r3
 8008c7c:	b01b      	add	sp, #108	; 0x6c
 8008c7e:	ecbd 8b02 	vpop	{d8}
 8008c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c86:	2920      	cmp	r1, #32
 8008c88:	d1cc      	bne.n	8008c24 <_strtod_l+0x34>
 8008c8a:	3201      	adds	r2, #1
 8008c8c:	e7bf      	b.n	8008c0e <_strtod_l+0x1e>
 8008c8e:	292d      	cmp	r1, #45	; 0x2d
 8008c90:	d1c8      	bne.n	8008c24 <_strtod_l+0x34>
 8008c92:	2101      	movs	r1, #1
 8008c94:	910a      	str	r1, [sp, #40]	; 0x28
 8008c96:	1c51      	adds	r1, r2, #1
 8008c98:	9115      	str	r1, [sp, #84]	; 0x54
 8008c9a:	7852      	ldrb	r2, [r2, #1]
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	d1c3      	bne.n	8008c28 <_strtod_l+0x38>
 8008ca0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ca2:	9515      	str	r5, [sp, #84]	; 0x54
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f040 855f 	bne.w	8009768 <_strtod_l+0xb78>
 8008caa:	4642      	mov	r2, r8
 8008cac:	464b      	mov	r3, r9
 8008cae:	e7e3      	b.n	8008c78 <_strtod_l+0x88>
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	e7ef      	b.n	8008c94 <_strtod_l+0xa4>
 8008cb4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008cb6:	b13a      	cbz	r2, 8008cc8 <_strtod_l+0xd8>
 8008cb8:	2135      	movs	r1, #53	; 0x35
 8008cba:	a818      	add	r0, sp, #96	; 0x60
 8008cbc:	f7ff ff37 	bl	8008b2e <__copybits>
 8008cc0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f7ff fb0a 	bl	80082dc <_Bfree>
 8008cc8:	3f01      	subs	r7, #1
 8008cca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ccc:	2f04      	cmp	r7, #4
 8008cce:	d806      	bhi.n	8008cde <_strtod_l+0xee>
 8008cd0:	e8df f007 	tbb	[pc, r7]
 8008cd4:	201d0314 	.word	0x201d0314
 8008cd8:	14          	.byte	0x14
 8008cd9:	00          	.byte	0x00
 8008cda:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008cde:	05e9      	lsls	r1, r5, #23
 8008ce0:	bf48      	it	mi
 8008ce2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008ce6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cea:	0d1b      	lsrs	r3, r3, #20
 8008cec:	051b      	lsls	r3, r3, #20
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1b9      	bne.n	8008c66 <_strtod_l+0x76>
 8008cf2:	f7fe fafb 	bl	80072ec <__errno>
 8008cf6:	2322      	movs	r3, #34	; 0x22
 8008cf8:	6003      	str	r3, [r0, #0]
 8008cfa:	e7b4      	b.n	8008c66 <_strtod_l+0x76>
 8008cfc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008d00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d08:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008d0c:	e7e7      	b.n	8008cde <_strtod_l+0xee>
 8008d0e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008e88 <_strtod_l+0x298>
 8008d12:	e7e4      	b.n	8008cde <_strtod_l+0xee>
 8008d14:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008d18:	f04f 38ff 	mov.w	r8, #4294967295
 8008d1c:	e7df      	b.n	8008cde <_strtod_l+0xee>
 8008d1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	9215      	str	r2, [sp, #84]	; 0x54
 8008d24:	785b      	ldrb	r3, [r3, #1]
 8008d26:	2b30      	cmp	r3, #48	; 0x30
 8008d28:	d0f9      	beq.n	8008d1e <_strtod_l+0x12e>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d09b      	beq.n	8008c66 <_strtod_l+0x76>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	f04f 0a00 	mov.w	sl, #0
 8008d34:	9304      	str	r3, [sp, #16]
 8008d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d3a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008d3e:	46d3      	mov	fp, sl
 8008d40:	220a      	movs	r2, #10
 8008d42:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008d44:	7806      	ldrb	r6, [r0, #0]
 8008d46:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d4a:	b2d9      	uxtb	r1, r3
 8008d4c:	2909      	cmp	r1, #9
 8008d4e:	d926      	bls.n	8008d9e <_strtod_l+0x1ae>
 8008d50:	494c      	ldr	r1, [pc, #304]	; (8008e84 <_strtod_l+0x294>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	f001 fb79 	bl	800a44a <strncmp>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d030      	beq.n	8008dbe <_strtod_l+0x1ce>
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	4632      	mov	r2, r6
 8008d60:	9005      	str	r0, [sp, #20]
 8008d62:	465e      	mov	r6, fp
 8008d64:	4603      	mov	r3, r0
 8008d66:	2a65      	cmp	r2, #101	; 0x65
 8008d68:	d001      	beq.n	8008d6e <_strtod_l+0x17e>
 8008d6a:	2a45      	cmp	r2, #69	; 0x45
 8008d6c:	d113      	bne.n	8008d96 <_strtod_l+0x1a6>
 8008d6e:	b91e      	cbnz	r6, 8008d78 <_strtod_l+0x188>
 8008d70:	9a04      	ldr	r2, [sp, #16]
 8008d72:	4302      	orrs	r2, r0
 8008d74:	d094      	beq.n	8008ca0 <_strtod_l+0xb0>
 8008d76:	2600      	movs	r6, #0
 8008d78:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008d7a:	1c6a      	adds	r2, r5, #1
 8008d7c:	9215      	str	r2, [sp, #84]	; 0x54
 8008d7e:	786a      	ldrb	r2, [r5, #1]
 8008d80:	2a2b      	cmp	r2, #43	; 0x2b
 8008d82:	d074      	beq.n	8008e6e <_strtod_l+0x27e>
 8008d84:	2a2d      	cmp	r2, #45	; 0x2d
 8008d86:	d078      	beq.n	8008e7a <_strtod_l+0x28a>
 8008d88:	f04f 0c00 	mov.w	ip, #0
 8008d8c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008d90:	2909      	cmp	r1, #9
 8008d92:	d97f      	bls.n	8008e94 <_strtod_l+0x2a4>
 8008d94:	9515      	str	r5, [sp, #84]	; 0x54
 8008d96:	2700      	movs	r7, #0
 8008d98:	e09e      	b.n	8008ed8 <_strtod_l+0x2e8>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e7c8      	b.n	8008d30 <_strtod_l+0x140>
 8008d9e:	f1bb 0f08 	cmp.w	fp, #8
 8008da2:	bfd8      	it	le
 8008da4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008da6:	f100 0001 	add.w	r0, r0, #1
 8008daa:	bfda      	itte	le
 8008dac:	fb02 3301 	mlale	r3, r2, r1, r3
 8008db0:	9309      	strle	r3, [sp, #36]	; 0x24
 8008db2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008db6:	f10b 0b01 	add.w	fp, fp, #1
 8008dba:	9015      	str	r0, [sp, #84]	; 0x54
 8008dbc:	e7c1      	b.n	8008d42 <_strtod_l+0x152>
 8008dbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	9215      	str	r2, [sp, #84]	; 0x54
 8008dc4:	785a      	ldrb	r2, [r3, #1]
 8008dc6:	f1bb 0f00 	cmp.w	fp, #0
 8008dca:	d037      	beq.n	8008e3c <_strtod_l+0x24c>
 8008dcc:	9005      	str	r0, [sp, #20]
 8008dce:	465e      	mov	r6, fp
 8008dd0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008dd4:	2b09      	cmp	r3, #9
 8008dd6:	d912      	bls.n	8008dfe <_strtod_l+0x20e>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e7c4      	b.n	8008d66 <_strtod_l+0x176>
 8008ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	9215      	str	r2, [sp, #84]	; 0x54
 8008de2:	785a      	ldrb	r2, [r3, #1]
 8008de4:	3001      	adds	r0, #1
 8008de6:	2a30      	cmp	r2, #48	; 0x30
 8008de8:	d0f8      	beq.n	8008ddc <_strtod_l+0x1ec>
 8008dea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008dee:	2b08      	cmp	r3, #8
 8008df0:	f200 84c1 	bhi.w	8009776 <_strtod_l+0xb86>
 8008df4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008df6:	9005      	str	r0, [sp, #20]
 8008df8:	2000      	movs	r0, #0
 8008dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	3a30      	subs	r2, #48	; 0x30
 8008e00:	f100 0301 	add.w	r3, r0, #1
 8008e04:	d014      	beq.n	8008e30 <_strtod_l+0x240>
 8008e06:	9905      	ldr	r1, [sp, #20]
 8008e08:	4419      	add	r1, r3
 8008e0a:	9105      	str	r1, [sp, #20]
 8008e0c:	4633      	mov	r3, r6
 8008e0e:	eb00 0c06 	add.w	ip, r0, r6
 8008e12:	210a      	movs	r1, #10
 8008e14:	4563      	cmp	r3, ip
 8008e16:	d113      	bne.n	8008e40 <_strtod_l+0x250>
 8008e18:	1833      	adds	r3, r6, r0
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	f106 0601 	add.w	r6, r6, #1
 8008e20:	4406      	add	r6, r0
 8008e22:	dc1a      	bgt.n	8008e5a <_strtod_l+0x26a>
 8008e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e26:	230a      	movs	r3, #10
 8008e28:	fb03 2301 	mla	r3, r3, r1, r2
 8008e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e32:	1c51      	adds	r1, r2, #1
 8008e34:	9115      	str	r1, [sp, #84]	; 0x54
 8008e36:	7852      	ldrb	r2, [r2, #1]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	e7c9      	b.n	8008dd0 <_strtod_l+0x1e0>
 8008e3c:	4658      	mov	r0, fp
 8008e3e:	e7d2      	b.n	8008de6 <_strtod_l+0x1f6>
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	f103 0301 	add.w	r3, r3, #1
 8008e46:	dc03      	bgt.n	8008e50 <_strtod_l+0x260>
 8008e48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e4a:	434f      	muls	r7, r1
 8008e4c:	9709      	str	r7, [sp, #36]	; 0x24
 8008e4e:	e7e1      	b.n	8008e14 <_strtod_l+0x224>
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	bfd8      	it	le
 8008e54:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008e58:	e7dc      	b.n	8008e14 <_strtod_l+0x224>
 8008e5a:	2e10      	cmp	r6, #16
 8008e5c:	bfdc      	itt	le
 8008e5e:	230a      	movle	r3, #10
 8008e60:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008e64:	e7e3      	b.n	8008e2e <_strtod_l+0x23e>
 8008e66:	2300      	movs	r3, #0
 8008e68:	9305      	str	r3, [sp, #20]
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e780      	b.n	8008d70 <_strtod_l+0x180>
 8008e6e:	f04f 0c00 	mov.w	ip, #0
 8008e72:	1caa      	adds	r2, r5, #2
 8008e74:	9215      	str	r2, [sp, #84]	; 0x54
 8008e76:	78aa      	ldrb	r2, [r5, #2]
 8008e78:	e788      	b.n	8008d8c <_strtod_l+0x19c>
 8008e7a:	f04f 0c01 	mov.w	ip, #1
 8008e7e:	e7f8      	b.n	8008e72 <_strtod_l+0x282>
 8008e80:	0800cdb0 	.word	0x0800cdb0
 8008e84:	0800cdac 	.word	0x0800cdac
 8008e88:	7ff00000 	.word	0x7ff00000
 8008e8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e8e:	1c51      	adds	r1, r2, #1
 8008e90:	9115      	str	r1, [sp, #84]	; 0x54
 8008e92:	7852      	ldrb	r2, [r2, #1]
 8008e94:	2a30      	cmp	r2, #48	; 0x30
 8008e96:	d0f9      	beq.n	8008e8c <_strtod_l+0x29c>
 8008e98:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008e9c:	2908      	cmp	r1, #8
 8008e9e:	f63f af7a 	bhi.w	8008d96 <_strtod_l+0x1a6>
 8008ea2:	3a30      	subs	r2, #48	; 0x30
 8008ea4:	9208      	str	r2, [sp, #32]
 8008ea6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ea8:	920c      	str	r2, [sp, #48]	; 0x30
 8008eaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008eac:	1c57      	adds	r7, r2, #1
 8008eae:	9715      	str	r7, [sp, #84]	; 0x54
 8008eb0:	7852      	ldrb	r2, [r2, #1]
 8008eb2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008eb6:	f1be 0f09 	cmp.w	lr, #9
 8008eba:	d938      	bls.n	8008f2e <_strtod_l+0x33e>
 8008ebc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ebe:	1a7f      	subs	r7, r7, r1
 8008ec0:	2f08      	cmp	r7, #8
 8008ec2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008ec6:	dc03      	bgt.n	8008ed0 <_strtod_l+0x2e0>
 8008ec8:	9908      	ldr	r1, [sp, #32]
 8008eca:	428f      	cmp	r7, r1
 8008ecc:	bfa8      	it	ge
 8008ece:	460f      	movge	r7, r1
 8008ed0:	f1bc 0f00 	cmp.w	ip, #0
 8008ed4:	d000      	beq.n	8008ed8 <_strtod_l+0x2e8>
 8008ed6:	427f      	negs	r7, r7
 8008ed8:	2e00      	cmp	r6, #0
 8008eda:	d14f      	bne.n	8008f7c <_strtod_l+0x38c>
 8008edc:	9904      	ldr	r1, [sp, #16]
 8008ede:	4301      	orrs	r1, r0
 8008ee0:	f47f aec1 	bne.w	8008c66 <_strtod_l+0x76>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f47f aedb 	bne.w	8008ca0 <_strtod_l+0xb0>
 8008eea:	2a69      	cmp	r2, #105	; 0x69
 8008eec:	d029      	beq.n	8008f42 <_strtod_l+0x352>
 8008eee:	dc26      	bgt.n	8008f3e <_strtod_l+0x34e>
 8008ef0:	2a49      	cmp	r2, #73	; 0x49
 8008ef2:	d026      	beq.n	8008f42 <_strtod_l+0x352>
 8008ef4:	2a4e      	cmp	r2, #78	; 0x4e
 8008ef6:	f47f aed3 	bne.w	8008ca0 <_strtod_l+0xb0>
 8008efa:	499b      	ldr	r1, [pc, #620]	; (8009168 <_strtod_l+0x578>)
 8008efc:	a815      	add	r0, sp, #84	; 0x54
 8008efe:	f001 fdbb 	bl	800aa78 <__match>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	f43f aecc 	beq.w	8008ca0 <_strtod_l+0xb0>
 8008f08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b28      	cmp	r3, #40	; 0x28
 8008f0e:	d12f      	bne.n	8008f70 <_strtod_l+0x380>
 8008f10:	4996      	ldr	r1, [pc, #600]	; (800916c <_strtod_l+0x57c>)
 8008f12:	aa18      	add	r2, sp, #96	; 0x60
 8008f14:	a815      	add	r0, sp, #84	; 0x54
 8008f16:	f001 fdc3 	bl	800aaa0 <__hexnan>
 8008f1a:	2805      	cmp	r0, #5
 8008f1c:	d128      	bne.n	8008f70 <_strtod_l+0x380>
 8008f1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008f28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008f2c:	e69b      	b.n	8008c66 <_strtod_l+0x76>
 8008f2e:	9f08      	ldr	r7, [sp, #32]
 8008f30:	210a      	movs	r1, #10
 8008f32:	fb01 2107 	mla	r1, r1, r7, r2
 8008f36:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008f3a:	9208      	str	r2, [sp, #32]
 8008f3c:	e7b5      	b.n	8008eaa <_strtod_l+0x2ba>
 8008f3e:	2a6e      	cmp	r2, #110	; 0x6e
 8008f40:	e7d9      	b.n	8008ef6 <_strtod_l+0x306>
 8008f42:	498b      	ldr	r1, [pc, #556]	; (8009170 <_strtod_l+0x580>)
 8008f44:	a815      	add	r0, sp, #84	; 0x54
 8008f46:	f001 fd97 	bl	800aa78 <__match>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	f43f aea8 	beq.w	8008ca0 <_strtod_l+0xb0>
 8008f50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f52:	4988      	ldr	r1, [pc, #544]	; (8009174 <_strtod_l+0x584>)
 8008f54:	3b01      	subs	r3, #1
 8008f56:	a815      	add	r0, sp, #84	; 0x54
 8008f58:	9315      	str	r3, [sp, #84]	; 0x54
 8008f5a:	f001 fd8d 	bl	800aa78 <__match>
 8008f5e:	b910      	cbnz	r0, 8008f66 <_strtod_l+0x376>
 8008f60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f62:	3301      	adds	r3, #1
 8008f64:	9315      	str	r3, [sp, #84]	; 0x54
 8008f66:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009184 <_strtod_l+0x594>
 8008f6a:	f04f 0800 	mov.w	r8, #0
 8008f6e:	e67a      	b.n	8008c66 <_strtod_l+0x76>
 8008f70:	4881      	ldr	r0, [pc, #516]	; (8009178 <_strtod_l+0x588>)
 8008f72:	f001 fa9d 	bl	800a4b0 <nan>
 8008f76:	ec59 8b10 	vmov	r8, r9, d0
 8008f7a:	e674      	b.n	8008c66 <_strtod_l+0x76>
 8008f7c:	9b05      	ldr	r3, [sp, #20]
 8008f7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f80:	1afb      	subs	r3, r7, r3
 8008f82:	f1bb 0f00 	cmp.w	fp, #0
 8008f86:	bf08      	it	eq
 8008f88:	46b3      	moveq	fp, r6
 8008f8a:	2e10      	cmp	r6, #16
 8008f8c:	9308      	str	r3, [sp, #32]
 8008f8e:	4635      	mov	r5, r6
 8008f90:	bfa8      	it	ge
 8008f92:	2510      	movge	r5, #16
 8008f94:	f7f7 face 	bl	8000534 <__aeabi_ui2d>
 8008f98:	2e09      	cmp	r6, #9
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	4689      	mov	r9, r1
 8008f9e:	dd13      	ble.n	8008fc8 <_strtod_l+0x3d8>
 8008fa0:	4b76      	ldr	r3, [pc, #472]	; (800917c <_strtod_l+0x58c>)
 8008fa2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008fa6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008faa:	f7f7 fb3d 	bl	8000628 <__aeabi_dmul>
 8008fae:	4680      	mov	r8, r0
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	4689      	mov	r9, r1
 8008fb4:	f7f7 fabe 	bl	8000534 <__aeabi_ui2d>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4640      	mov	r0, r8
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	f7f7 f97c 	bl	80002bc <__adddf3>
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	4689      	mov	r9, r1
 8008fc8:	2e0f      	cmp	r6, #15
 8008fca:	dc38      	bgt.n	800903e <_strtod_l+0x44e>
 8008fcc:	9b08      	ldr	r3, [sp, #32]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f43f ae49 	beq.w	8008c66 <_strtod_l+0x76>
 8008fd4:	dd24      	ble.n	8009020 <_strtod_l+0x430>
 8008fd6:	2b16      	cmp	r3, #22
 8008fd8:	dc0b      	bgt.n	8008ff2 <_strtod_l+0x402>
 8008fda:	4968      	ldr	r1, [pc, #416]	; (800917c <_strtod_l+0x58c>)
 8008fdc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe4:	4642      	mov	r2, r8
 8008fe6:	464b      	mov	r3, r9
 8008fe8:	f7f7 fb1e 	bl	8000628 <__aeabi_dmul>
 8008fec:	4680      	mov	r8, r0
 8008fee:	4689      	mov	r9, r1
 8008ff0:	e639      	b.n	8008c66 <_strtod_l+0x76>
 8008ff2:	9a08      	ldr	r2, [sp, #32]
 8008ff4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	db20      	blt.n	800903e <_strtod_l+0x44e>
 8008ffc:	4c5f      	ldr	r4, [pc, #380]	; (800917c <_strtod_l+0x58c>)
 8008ffe:	f1c6 060f 	rsb	r6, r6, #15
 8009002:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009006:	4642      	mov	r2, r8
 8009008:	464b      	mov	r3, r9
 800900a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800900e:	f7f7 fb0b 	bl	8000628 <__aeabi_dmul>
 8009012:	9b08      	ldr	r3, [sp, #32]
 8009014:	1b9e      	subs	r6, r3, r6
 8009016:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800901a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800901e:	e7e3      	b.n	8008fe8 <_strtod_l+0x3f8>
 8009020:	9b08      	ldr	r3, [sp, #32]
 8009022:	3316      	adds	r3, #22
 8009024:	db0b      	blt.n	800903e <_strtod_l+0x44e>
 8009026:	9b05      	ldr	r3, [sp, #20]
 8009028:	1bdf      	subs	r7, r3, r7
 800902a:	4b54      	ldr	r3, [pc, #336]	; (800917c <_strtod_l+0x58c>)
 800902c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009034:	4640      	mov	r0, r8
 8009036:	4649      	mov	r1, r9
 8009038:	f7f7 fc20 	bl	800087c <__aeabi_ddiv>
 800903c:	e7d6      	b.n	8008fec <_strtod_l+0x3fc>
 800903e:	9b08      	ldr	r3, [sp, #32]
 8009040:	1b75      	subs	r5, r6, r5
 8009042:	441d      	add	r5, r3
 8009044:	2d00      	cmp	r5, #0
 8009046:	dd70      	ble.n	800912a <_strtod_l+0x53a>
 8009048:	f015 030f 	ands.w	r3, r5, #15
 800904c:	d00a      	beq.n	8009064 <_strtod_l+0x474>
 800904e:	494b      	ldr	r1, [pc, #300]	; (800917c <_strtod_l+0x58c>)
 8009050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009054:	4642      	mov	r2, r8
 8009056:	464b      	mov	r3, r9
 8009058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800905c:	f7f7 fae4 	bl	8000628 <__aeabi_dmul>
 8009060:	4680      	mov	r8, r0
 8009062:	4689      	mov	r9, r1
 8009064:	f035 050f 	bics.w	r5, r5, #15
 8009068:	d04d      	beq.n	8009106 <_strtod_l+0x516>
 800906a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800906e:	dd22      	ble.n	80090b6 <_strtod_l+0x4c6>
 8009070:	2500      	movs	r5, #0
 8009072:	46ab      	mov	fp, r5
 8009074:	9509      	str	r5, [sp, #36]	; 0x24
 8009076:	9505      	str	r5, [sp, #20]
 8009078:	2322      	movs	r3, #34	; 0x22
 800907a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009184 <_strtod_l+0x594>
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	f04f 0800 	mov.w	r8, #0
 8009084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009086:	2b00      	cmp	r3, #0
 8009088:	f43f aded 	beq.w	8008c66 <_strtod_l+0x76>
 800908c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800908e:	4620      	mov	r0, r4
 8009090:	f7ff f924 	bl	80082dc <_Bfree>
 8009094:	9905      	ldr	r1, [sp, #20]
 8009096:	4620      	mov	r0, r4
 8009098:	f7ff f920 	bl	80082dc <_Bfree>
 800909c:	4659      	mov	r1, fp
 800909e:	4620      	mov	r0, r4
 80090a0:	f7ff f91c 	bl	80082dc <_Bfree>
 80090a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090a6:	4620      	mov	r0, r4
 80090a8:	f7ff f918 	bl	80082dc <_Bfree>
 80090ac:	4629      	mov	r1, r5
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7ff f914 	bl	80082dc <_Bfree>
 80090b4:	e5d7      	b.n	8008c66 <_strtod_l+0x76>
 80090b6:	4b32      	ldr	r3, [pc, #200]	; (8009180 <_strtod_l+0x590>)
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	2300      	movs	r3, #0
 80090bc:	112d      	asrs	r5, r5, #4
 80090be:	4640      	mov	r0, r8
 80090c0:	4649      	mov	r1, r9
 80090c2:	469a      	mov	sl, r3
 80090c4:	2d01      	cmp	r5, #1
 80090c6:	dc21      	bgt.n	800910c <_strtod_l+0x51c>
 80090c8:	b10b      	cbz	r3, 80090ce <_strtod_l+0x4de>
 80090ca:	4680      	mov	r8, r0
 80090cc:	4689      	mov	r9, r1
 80090ce:	492c      	ldr	r1, [pc, #176]	; (8009180 <_strtod_l+0x590>)
 80090d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80090d4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80090d8:	4642      	mov	r2, r8
 80090da:	464b      	mov	r3, r9
 80090dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e0:	f7f7 faa2 	bl	8000628 <__aeabi_dmul>
 80090e4:	4b27      	ldr	r3, [pc, #156]	; (8009184 <_strtod_l+0x594>)
 80090e6:	460a      	mov	r2, r1
 80090e8:	400b      	ands	r3, r1
 80090ea:	4927      	ldr	r1, [pc, #156]	; (8009188 <_strtod_l+0x598>)
 80090ec:	428b      	cmp	r3, r1
 80090ee:	4680      	mov	r8, r0
 80090f0:	d8be      	bhi.n	8009070 <_strtod_l+0x480>
 80090f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80090f6:	428b      	cmp	r3, r1
 80090f8:	bf86      	itte	hi
 80090fa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800918c <_strtod_l+0x59c>
 80090fe:	f04f 38ff 	movhi.w	r8, #4294967295
 8009102:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009106:	2300      	movs	r3, #0
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	e07b      	b.n	8009204 <_strtod_l+0x614>
 800910c:	07ea      	lsls	r2, r5, #31
 800910e:	d505      	bpl.n	800911c <_strtod_l+0x52c>
 8009110:	9b04      	ldr	r3, [sp, #16]
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 fa87 	bl	8000628 <__aeabi_dmul>
 800911a:	2301      	movs	r3, #1
 800911c:	9a04      	ldr	r2, [sp, #16]
 800911e:	3208      	adds	r2, #8
 8009120:	f10a 0a01 	add.w	sl, sl, #1
 8009124:	106d      	asrs	r5, r5, #1
 8009126:	9204      	str	r2, [sp, #16]
 8009128:	e7cc      	b.n	80090c4 <_strtod_l+0x4d4>
 800912a:	d0ec      	beq.n	8009106 <_strtod_l+0x516>
 800912c:	426d      	negs	r5, r5
 800912e:	f015 020f 	ands.w	r2, r5, #15
 8009132:	d00a      	beq.n	800914a <_strtod_l+0x55a>
 8009134:	4b11      	ldr	r3, [pc, #68]	; (800917c <_strtod_l+0x58c>)
 8009136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800913a:	4640      	mov	r0, r8
 800913c:	4649      	mov	r1, r9
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 fb9b 	bl	800087c <__aeabi_ddiv>
 8009146:	4680      	mov	r8, r0
 8009148:	4689      	mov	r9, r1
 800914a:	112d      	asrs	r5, r5, #4
 800914c:	d0db      	beq.n	8009106 <_strtod_l+0x516>
 800914e:	2d1f      	cmp	r5, #31
 8009150:	dd1e      	ble.n	8009190 <_strtod_l+0x5a0>
 8009152:	2500      	movs	r5, #0
 8009154:	46ab      	mov	fp, r5
 8009156:	9509      	str	r5, [sp, #36]	; 0x24
 8009158:	9505      	str	r5, [sp, #20]
 800915a:	2322      	movs	r3, #34	; 0x22
 800915c:	f04f 0800 	mov.w	r8, #0
 8009160:	f04f 0900 	mov.w	r9, #0
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	e78d      	b.n	8009084 <_strtod_l+0x494>
 8009168:	0800cb99 	.word	0x0800cb99
 800916c:	0800cdc4 	.word	0x0800cdc4
 8009170:	0800cb91 	.word	0x0800cb91
 8009174:	0800cbc6 	.word	0x0800cbc6
 8009178:	0800cf70 	.word	0x0800cf70
 800917c:	0800ccd8 	.word	0x0800ccd8
 8009180:	0800ccb0 	.word	0x0800ccb0
 8009184:	7ff00000 	.word	0x7ff00000
 8009188:	7ca00000 	.word	0x7ca00000
 800918c:	7fefffff 	.word	0x7fefffff
 8009190:	f015 0310 	ands.w	r3, r5, #16
 8009194:	bf18      	it	ne
 8009196:	236a      	movne	r3, #106	; 0x6a
 8009198:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800953c <_strtod_l+0x94c>
 800919c:	9304      	str	r3, [sp, #16]
 800919e:	4640      	mov	r0, r8
 80091a0:	4649      	mov	r1, r9
 80091a2:	2300      	movs	r3, #0
 80091a4:	07ea      	lsls	r2, r5, #31
 80091a6:	d504      	bpl.n	80091b2 <_strtod_l+0x5c2>
 80091a8:	e9da 2300 	ldrd	r2, r3, [sl]
 80091ac:	f7f7 fa3c 	bl	8000628 <__aeabi_dmul>
 80091b0:	2301      	movs	r3, #1
 80091b2:	106d      	asrs	r5, r5, #1
 80091b4:	f10a 0a08 	add.w	sl, sl, #8
 80091b8:	d1f4      	bne.n	80091a4 <_strtod_l+0x5b4>
 80091ba:	b10b      	cbz	r3, 80091c0 <_strtod_l+0x5d0>
 80091bc:	4680      	mov	r8, r0
 80091be:	4689      	mov	r9, r1
 80091c0:	9b04      	ldr	r3, [sp, #16]
 80091c2:	b1bb      	cbz	r3, 80091f4 <_strtod_l+0x604>
 80091c4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80091c8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	4649      	mov	r1, r9
 80091d0:	dd10      	ble.n	80091f4 <_strtod_l+0x604>
 80091d2:	2b1f      	cmp	r3, #31
 80091d4:	f340 811e 	ble.w	8009414 <_strtod_l+0x824>
 80091d8:	2b34      	cmp	r3, #52	; 0x34
 80091da:	bfde      	ittt	le
 80091dc:	f04f 33ff 	movle.w	r3, #4294967295
 80091e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80091e4:	4093      	lslle	r3, r2
 80091e6:	f04f 0800 	mov.w	r8, #0
 80091ea:	bfcc      	ite	gt
 80091ec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80091f0:	ea03 0901 	andle.w	r9, r3, r1
 80091f4:	2200      	movs	r2, #0
 80091f6:	2300      	movs	r3, #0
 80091f8:	4640      	mov	r0, r8
 80091fa:	4649      	mov	r1, r9
 80091fc:	f7f7 fc7c 	bl	8000af8 <__aeabi_dcmpeq>
 8009200:	2800      	cmp	r0, #0
 8009202:	d1a6      	bne.n	8009152 <_strtod_l+0x562>
 8009204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800920a:	4633      	mov	r3, r6
 800920c:	465a      	mov	r2, fp
 800920e:	4620      	mov	r0, r4
 8009210:	f7ff f8cc 	bl	80083ac <__s2b>
 8009214:	9009      	str	r0, [sp, #36]	; 0x24
 8009216:	2800      	cmp	r0, #0
 8009218:	f43f af2a 	beq.w	8009070 <_strtod_l+0x480>
 800921c:	9a08      	ldr	r2, [sp, #32]
 800921e:	9b05      	ldr	r3, [sp, #20]
 8009220:	2a00      	cmp	r2, #0
 8009222:	eba3 0307 	sub.w	r3, r3, r7
 8009226:	bfa8      	it	ge
 8009228:	2300      	movge	r3, #0
 800922a:	930c      	str	r3, [sp, #48]	; 0x30
 800922c:	2500      	movs	r5, #0
 800922e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009232:	9312      	str	r3, [sp, #72]	; 0x48
 8009234:	46ab      	mov	fp, r5
 8009236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009238:	4620      	mov	r0, r4
 800923a:	6859      	ldr	r1, [r3, #4]
 800923c:	f7ff f80e 	bl	800825c <_Balloc>
 8009240:	9005      	str	r0, [sp, #20]
 8009242:	2800      	cmp	r0, #0
 8009244:	f43f af18 	beq.w	8009078 <_strtod_l+0x488>
 8009248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	3202      	adds	r2, #2
 800924e:	f103 010c 	add.w	r1, r3, #12
 8009252:	0092      	lsls	r2, r2, #2
 8009254:	300c      	adds	r0, #12
 8009256:	f001 f91b 	bl	800a490 <memcpy>
 800925a:	ec49 8b10 	vmov	d0, r8, r9
 800925e:	aa18      	add	r2, sp, #96	; 0x60
 8009260:	a917      	add	r1, sp, #92	; 0x5c
 8009262:	4620      	mov	r0, r4
 8009264:	f7ff fbd6 	bl	8008a14 <__d2b>
 8009268:	ec49 8b18 	vmov	d8, r8, r9
 800926c:	9016      	str	r0, [sp, #88]	; 0x58
 800926e:	2800      	cmp	r0, #0
 8009270:	f43f af02 	beq.w	8009078 <_strtod_l+0x488>
 8009274:	2101      	movs	r1, #1
 8009276:	4620      	mov	r0, r4
 8009278:	f7ff f930 	bl	80084dc <__i2b>
 800927c:	4683      	mov	fp, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	f43f aefa 	beq.w	8009078 <_strtod_l+0x488>
 8009284:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009286:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009288:	2e00      	cmp	r6, #0
 800928a:	bfab      	itete	ge
 800928c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800928e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009290:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009292:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009296:	bfac      	ite	ge
 8009298:	eb06 0a03 	addge.w	sl, r6, r3
 800929c:	1b9f      	sublt	r7, r3, r6
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	1af6      	subs	r6, r6, r3
 80092a2:	4416      	add	r6, r2
 80092a4:	4ba0      	ldr	r3, [pc, #640]	; (8009528 <_strtod_l+0x938>)
 80092a6:	3e01      	subs	r6, #1
 80092a8:	429e      	cmp	r6, r3
 80092aa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092ae:	f280 80c4 	bge.w	800943a <_strtod_l+0x84a>
 80092b2:	1b9b      	subs	r3, r3, r6
 80092b4:	2b1f      	cmp	r3, #31
 80092b6:	eba2 0203 	sub.w	r2, r2, r3
 80092ba:	f04f 0101 	mov.w	r1, #1
 80092be:	f300 80b0 	bgt.w	8009422 <_strtod_l+0x832>
 80092c2:	fa01 f303 	lsl.w	r3, r1, r3
 80092c6:	930e      	str	r3, [sp, #56]	; 0x38
 80092c8:	2300      	movs	r3, #0
 80092ca:	930d      	str	r3, [sp, #52]	; 0x34
 80092cc:	eb0a 0602 	add.w	r6, sl, r2
 80092d0:	9b04      	ldr	r3, [sp, #16]
 80092d2:	45b2      	cmp	sl, r6
 80092d4:	4417      	add	r7, r2
 80092d6:	441f      	add	r7, r3
 80092d8:	4653      	mov	r3, sl
 80092da:	bfa8      	it	ge
 80092dc:	4633      	movge	r3, r6
 80092de:	42bb      	cmp	r3, r7
 80092e0:	bfa8      	it	ge
 80092e2:	463b      	movge	r3, r7
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bfc2      	ittt	gt
 80092e8:	1af6      	subgt	r6, r6, r3
 80092ea:	1aff      	subgt	r7, r7, r3
 80092ec:	ebaa 0a03 	subgt.w	sl, sl, r3
 80092f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dd17      	ble.n	8009326 <_strtod_l+0x736>
 80092f6:	4659      	mov	r1, fp
 80092f8:	461a      	mov	r2, r3
 80092fa:	4620      	mov	r0, r4
 80092fc:	f7ff f9ae 	bl	800865c <__pow5mult>
 8009300:	4683      	mov	fp, r0
 8009302:	2800      	cmp	r0, #0
 8009304:	f43f aeb8 	beq.w	8009078 <_strtod_l+0x488>
 8009308:	4601      	mov	r1, r0
 800930a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800930c:	4620      	mov	r0, r4
 800930e:	f7ff f8fb 	bl	8008508 <__multiply>
 8009312:	900b      	str	r0, [sp, #44]	; 0x2c
 8009314:	2800      	cmp	r0, #0
 8009316:	f43f aeaf 	beq.w	8009078 <_strtod_l+0x488>
 800931a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800931c:	4620      	mov	r0, r4
 800931e:	f7fe ffdd 	bl	80082dc <_Bfree>
 8009322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009324:	9316      	str	r3, [sp, #88]	; 0x58
 8009326:	2e00      	cmp	r6, #0
 8009328:	f300 808c 	bgt.w	8009444 <_strtod_l+0x854>
 800932c:	9b08      	ldr	r3, [sp, #32]
 800932e:	2b00      	cmp	r3, #0
 8009330:	dd08      	ble.n	8009344 <_strtod_l+0x754>
 8009332:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009334:	9905      	ldr	r1, [sp, #20]
 8009336:	4620      	mov	r0, r4
 8009338:	f7ff f990 	bl	800865c <__pow5mult>
 800933c:	9005      	str	r0, [sp, #20]
 800933e:	2800      	cmp	r0, #0
 8009340:	f43f ae9a 	beq.w	8009078 <_strtod_l+0x488>
 8009344:	2f00      	cmp	r7, #0
 8009346:	dd08      	ble.n	800935a <_strtod_l+0x76a>
 8009348:	9905      	ldr	r1, [sp, #20]
 800934a:	463a      	mov	r2, r7
 800934c:	4620      	mov	r0, r4
 800934e:	f7ff f9df 	bl	8008710 <__lshift>
 8009352:	9005      	str	r0, [sp, #20]
 8009354:	2800      	cmp	r0, #0
 8009356:	f43f ae8f 	beq.w	8009078 <_strtod_l+0x488>
 800935a:	f1ba 0f00 	cmp.w	sl, #0
 800935e:	dd08      	ble.n	8009372 <_strtod_l+0x782>
 8009360:	4659      	mov	r1, fp
 8009362:	4652      	mov	r2, sl
 8009364:	4620      	mov	r0, r4
 8009366:	f7ff f9d3 	bl	8008710 <__lshift>
 800936a:	4683      	mov	fp, r0
 800936c:	2800      	cmp	r0, #0
 800936e:	f43f ae83 	beq.w	8009078 <_strtod_l+0x488>
 8009372:	9a05      	ldr	r2, [sp, #20]
 8009374:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009376:	4620      	mov	r0, r4
 8009378:	f7ff fa52 	bl	8008820 <__mdiff>
 800937c:	4605      	mov	r5, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	f43f ae7a 	beq.w	8009078 <_strtod_l+0x488>
 8009384:	68c3      	ldr	r3, [r0, #12]
 8009386:	930b      	str	r3, [sp, #44]	; 0x2c
 8009388:	2300      	movs	r3, #0
 800938a:	60c3      	str	r3, [r0, #12]
 800938c:	4659      	mov	r1, fp
 800938e:	f7ff fa2b 	bl	80087e8 <__mcmp>
 8009392:	2800      	cmp	r0, #0
 8009394:	da60      	bge.n	8009458 <_strtod_l+0x868>
 8009396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009398:	ea53 0308 	orrs.w	r3, r3, r8
 800939c:	f040 8084 	bne.w	80094a8 <_strtod_l+0x8b8>
 80093a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d17f      	bne.n	80094a8 <_strtod_l+0x8b8>
 80093a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093ac:	0d1b      	lsrs	r3, r3, #20
 80093ae:	051b      	lsls	r3, r3, #20
 80093b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093b4:	d978      	bls.n	80094a8 <_strtod_l+0x8b8>
 80093b6:	696b      	ldr	r3, [r5, #20]
 80093b8:	b913      	cbnz	r3, 80093c0 <_strtod_l+0x7d0>
 80093ba:	692b      	ldr	r3, [r5, #16]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	dd73      	ble.n	80094a8 <_strtod_l+0x8b8>
 80093c0:	4629      	mov	r1, r5
 80093c2:	2201      	movs	r2, #1
 80093c4:	4620      	mov	r0, r4
 80093c6:	f7ff f9a3 	bl	8008710 <__lshift>
 80093ca:	4659      	mov	r1, fp
 80093cc:	4605      	mov	r5, r0
 80093ce:	f7ff fa0b 	bl	80087e8 <__mcmp>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	dd68      	ble.n	80094a8 <_strtod_l+0x8b8>
 80093d6:	9904      	ldr	r1, [sp, #16]
 80093d8:	4a54      	ldr	r2, [pc, #336]	; (800952c <_strtod_l+0x93c>)
 80093da:	464b      	mov	r3, r9
 80093dc:	2900      	cmp	r1, #0
 80093de:	f000 8084 	beq.w	80094ea <_strtod_l+0x8fa>
 80093e2:	ea02 0109 	and.w	r1, r2, r9
 80093e6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80093ea:	dc7e      	bgt.n	80094ea <_strtod_l+0x8fa>
 80093ec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80093f0:	f77f aeb3 	ble.w	800915a <_strtod_l+0x56a>
 80093f4:	4b4e      	ldr	r3, [pc, #312]	; (8009530 <_strtod_l+0x940>)
 80093f6:	4640      	mov	r0, r8
 80093f8:	4649      	mov	r1, r9
 80093fa:	2200      	movs	r2, #0
 80093fc:	f7f7 f914 	bl	8000628 <__aeabi_dmul>
 8009400:	4b4a      	ldr	r3, [pc, #296]	; (800952c <_strtod_l+0x93c>)
 8009402:	400b      	ands	r3, r1
 8009404:	4680      	mov	r8, r0
 8009406:	4689      	mov	r9, r1
 8009408:	2b00      	cmp	r3, #0
 800940a:	f47f ae3f 	bne.w	800908c <_strtod_l+0x49c>
 800940e:	2322      	movs	r3, #34	; 0x22
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	e63b      	b.n	800908c <_strtod_l+0x49c>
 8009414:	f04f 32ff 	mov.w	r2, #4294967295
 8009418:	fa02 f303 	lsl.w	r3, r2, r3
 800941c:	ea03 0808 	and.w	r8, r3, r8
 8009420:	e6e8      	b.n	80091f4 <_strtod_l+0x604>
 8009422:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009426:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800942a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800942e:	36e2      	adds	r6, #226	; 0xe2
 8009430:	fa01 f306 	lsl.w	r3, r1, r6
 8009434:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009438:	e748      	b.n	80092cc <_strtod_l+0x6dc>
 800943a:	2100      	movs	r1, #0
 800943c:	2301      	movs	r3, #1
 800943e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009442:	e743      	b.n	80092cc <_strtod_l+0x6dc>
 8009444:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009446:	4632      	mov	r2, r6
 8009448:	4620      	mov	r0, r4
 800944a:	f7ff f961 	bl	8008710 <__lshift>
 800944e:	9016      	str	r0, [sp, #88]	; 0x58
 8009450:	2800      	cmp	r0, #0
 8009452:	f47f af6b 	bne.w	800932c <_strtod_l+0x73c>
 8009456:	e60f      	b.n	8009078 <_strtod_l+0x488>
 8009458:	46ca      	mov	sl, r9
 800945a:	d171      	bne.n	8009540 <_strtod_l+0x950>
 800945c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800945e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009462:	b352      	cbz	r2, 80094ba <_strtod_l+0x8ca>
 8009464:	4a33      	ldr	r2, [pc, #204]	; (8009534 <_strtod_l+0x944>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d12a      	bne.n	80094c0 <_strtod_l+0x8d0>
 800946a:	9b04      	ldr	r3, [sp, #16]
 800946c:	4641      	mov	r1, r8
 800946e:	b1fb      	cbz	r3, 80094b0 <_strtod_l+0x8c0>
 8009470:	4b2e      	ldr	r3, [pc, #184]	; (800952c <_strtod_l+0x93c>)
 8009472:	ea09 0303 	and.w	r3, r9, r3
 8009476:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800947a:	f04f 32ff 	mov.w	r2, #4294967295
 800947e:	d81a      	bhi.n	80094b6 <_strtod_l+0x8c6>
 8009480:	0d1b      	lsrs	r3, r3, #20
 8009482:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009486:	fa02 f303 	lsl.w	r3, r2, r3
 800948a:	4299      	cmp	r1, r3
 800948c:	d118      	bne.n	80094c0 <_strtod_l+0x8d0>
 800948e:	4b2a      	ldr	r3, [pc, #168]	; (8009538 <_strtod_l+0x948>)
 8009490:	459a      	cmp	sl, r3
 8009492:	d102      	bne.n	800949a <_strtod_l+0x8aa>
 8009494:	3101      	adds	r1, #1
 8009496:	f43f adef 	beq.w	8009078 <_strtod_l+0x488>
 800949a:	4b24      	ldr	r3, [pc, #144]	; (800952c <_strtod_l+0x93c>)
 800949c:	ea0a 0303 	and.w	r3, sl, r3
 80094a0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80094a4:	f04f 0800 	mov.w	r8, #0
 80094a8:	9b04      	ldr	r3, [sp, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1a2      	bne.n	80093f4 <_strtod_l+0x804>
 80094ae:	e5ed      	b.n	800908c <_strtod_l+0x49c>
 80094b0:	f04f 33ff 	mov.w	r3, #4294967295
 80094b4:	e7e9      	b.n	800948a <_strtod_l+0x89a>
 80094b6:	4613      	mov	r3, r2
 80094b8:	e7e7      	b.n	800948a <_strtod_l+0x89a>
 80094ba:	ea53 0308 	orrs.w	r3, r3, r8
 80094be:	d08a      	beq.n	80093d6 <_strtod_l+0x7e6>
 80094c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094c2:	b1e3      	cbz	r3, 80094fe <_strtod_l+0x90e>
 80094c4:	ea13 0f0a 	tst.w	r3, sl
 80094c8:	d0ee      	beq.n	80094a8 <_strtod_l+0x8b8>
 80094ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094cc:	9a04      	ldr	r2, [sp, #16]
 80094ce:	4640      	mov	r0, r8
 80094d0:	4649      	mov	r1, r9
 80094d2:	b1c3      	cbz	r3, 8009506 <_strtod_l+0x916>
 80094d4:	f7ff fb6f 	bl	8008bb6 <sulp>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	ec51 0b18 	vmov	r0, r1, d8
 80094e0:	f7f6 feec 	bl	80002bc <__adddf3>
 80094e4:	4680      	mov	r8, r0
 80094e6:	4689      	mov	r9, r1
 80094e8:	e7de      	b.n	80094a8 <_strtod_l+0x8b8>
 80094ea:	4013      	ands	r3, r2
 80094ec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80094f0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80094f4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80094f8:	f04f 38ff 	mov.w	r8, #4294967295
 80094fc:	e7d4      	b.n	80094a8 <_strtod_l+0x8b8>
 80094fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009500:	ea13 0f08 	tst.w	r3, r8
 8009504:	e7e0      	b.n	80094c8 <_strtod_l+0x8d8>
 8009506:	f7ff fb56 	bl	8008bb6 <sulp>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	ec51 0b18 	vmov	r0, r1, d8
 8009512:	f7f6 fed1 	bl	80002b8 <__aeabi_dsub>
 8009516:	2200      	movs	r2, #0
 8009518:	2300      	movs	r3, #0
 800951a:	4680      	mov	r8, r0
 800951c:	4689      	mov	r9, r1
 800951e:	f7f7 faeb 	bl	8000af8 <__aeabi_dcmpeq>
 8009522:	2800      	cmp	r0, #0
 8009524:	d0c0      	beq.n	80094a8 <_strtod_l+0x8b8>
 8009526:	e618      	b.n	800915a <_strtod_l+0x56a>
 8009528:	fffffc02 	.word	0xfffffc02
 800952c:	7ff00000 	.word	0x7ff00000
 8009530:	39500000 	.word	0x39500000
 8009534:	000fffff 	.word	0x000fffff
 8009538:	7fefffff 	.word	0x7fefffff
 800953c:	0800cdd8 	.word	0x0800cdd8
 8009540:	4659      	mov	r1, fp
 8009542:	4628      	mov	r0, r5
 8009544:	f7ff fac0 	bl	8008ac8 <__ratio>
 8009548:	ec57 6b10 	vmov	r6, r7, d0
 800954c:	ee10 0a10 	vmov	r0, s0
 8009550:	2200      	movs	r2, #0
 8009552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009556:	4639      	mov	r1, r7
 8009558:	f7f7 fae2 	bl	8000b20 <__aeabi_dcmple>
 800955c:	2800      	cmp	r0, #0
 800955e:	d071      	beq.n	8009644 <_strtod_l+0xa54>
 8009560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009562:	2b00      	cmp	r3, #0
 8009564:	d17c      	bne.n	8009660 <_strtod_l+0xa70>
 8009566:	f1b8 0f00 	cmp.w	r8, #0
 800956a:	d15a      	bne.n	8009622 <_strtod_l+0xa32>
 800956c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009570:	2b00      	cmp	r3, #0
 8009572:	d15d      	bne.n	8009630 <_strtod_l+0xa40>
 8009574:	4b90      	ldr	r3, [pc, #576]	; (80097b8 <_strtod_l+0xbc8>)
 8009576:	2200      	movs	r2, #0
 8009578:	4630      	mov	r0, r6
 800957a:	4639      	mov	r1, r7
 800957c:	f7f7 fac6 	bl	8000b0c <__aeabi_dcmplt>
 8009580:	2800      	cmp	r0, #0
 8009582:	d15c      	bne.n	800963e <_strtod_l+0xa4e>
 8009584:	4630      	mov	r0, r6
 8009586:	4639      	mov	r1, r7
 8009588:	4b8c      	ldr	r3, [pc, #560]	; (80097bc <_strtod_l+0xbcc>)
 800958a:	2200      	movs	r2, #0
 800958c:	f7f7 f84c 	bl	8000628 <__aeabi_dmul>
 8009590:	4606      	mov	r6, r0
 8009592:	460f      	mov	r7, r1
 8009594:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009598:	9606      	str	r6, [sp, #24]
 800959a:	9307      	str	r3, [sp, #28]
 800959c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80095a4:	4b86      	ldr	r3, [pc, #536]	; (80097c0 <_strtod_l+0xbd0>)
 80095a6:	ea0a 0303 	and.w	r3, sl, r3
 80095aa:	930d      	str	r3, [sp, #52]	; 0x34
 80095ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095ae:	4b85      	ldr	r3, [pc, #532]	; (80097c4 <_strtod_l+0xbd4>)
 80095b0:	429a      	cmp	r2, r3
 80095b2:	f040 8090 	bne.w	80096d6 <_strtod_l+0xae6>
 80095b6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80095ba:	ec49 8b10 	vmov	d0, r8, r9
 80095be:	f7ff f9b9 	bl	8008934 <__ulp>
 80095c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095c6:	ec51 0b10 	vmov	r0, r1, d0
 80095ca:	f7f7 f82d 	bl	8000628 <__aeabi_dmul>
 80095ce:	4642      	mov	r2, r8
 80095d0:	464b      	mov	r3, r9
 80095d2:	f7f6 fe73 	bl	80002bc <__adddf3>
 80095d6:	460b      	mov	r3, r1
 80095d8:	4979      	ldr	r1, [pc, #484]	; (80097c0 <_strtod_l+0xbd0>)
 80095da:	4a7b      	ldr	r2, [pc, #492]	; (80097c8 <_strtod_l+0xbd8>)
 80095dc:	4019      	ands	r1, r3
 80095de:	4291      	cmp	r1, r2
 80095e0:	4680      	mov	r8, r0
 80095e2:	d944      	bls.n	800966e <_strtod_l+0xa7e>
 80095e4:	ee18 2a90 	vmov	r2, s17
 80095e8:	4b78      	ldr	r3, [pc, #480]	; (80097cc <_strtod_l+0xbdc>)
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d104      	bne.n	80095f8 <_strtod_l+0xa08>
 80095ee:	ee18 3a10 	vmov	r3, s16
 80095f2:	3301      	adds	r3, #1
 80095f4:	f43f ad40 	beq.w	8009078 <_strtod_l+0x488>
 80095f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80097cc <_strtod_l+0xbdc>
 80095fc:	f04f 38ff 	mov.w	r8, #4294967295
 8009600:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009602:	4620      	mov	r0, r4
 8009604:	f7fe fe6a 	bl	80082dc <_Bfree>
 8009608:	9905      	ldr	r1, [sp, #20]
 800960a:	4620      	mov	r0, r4
 800960c:	f7fe fe66 	bl	80082dc <_Bfree>
 8009610:	4659      	mov	r1, fp
 8009612:	4620      	mov	r0, r4
 8009614:	f7fe fe62 	bl	80082dc <_Bfree>
 8009618:	4629      	mov	r1, r5
 800961a:	4620      	mov	r0, r4
 800961c:	f7fe fe5e 	bl	80082dc <_Bfree>
 8009620:	e609      	b.n	8009236 <_strtod_l+0x646>
 8009622:	f1b8 0f01 	cmp.w	r8, #1
 8009626:	d103      	bne.n	8009630 <_strtod_l+0xa40>
 8009628:	f1b9 0f00 	cmp.w	r9, #0
 800962c:	f43f ad95 	beq.w	800915a <_strtod_l+0x56a>
 8009630:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009788 <_strtod_l+0xb98>
 8009634:	4f60      	ldr	r7, [pc, #384]	; (80097b8 <_strtod_l+0xbc8>)
 8009636:	ed8d 7b06 	vstr	d7, [sp, #24]
 800963a:	2600      	movs	r6, #0
 800963c:	e7ae      	b.n	800959c <_strtod_l+0x9ac>
 800963e:	4f5f      	ldr	r7, [pc, #380]	; (80097bc <_strtod_l+0xbcc>)
 8009640:	2600      	movs	r6, #0
 8009642:	e7a7      	b.n	8009594 <_strtod_l+0x9a4>
 8009644:	4b5d      	ldr	r3, [pc, #372]	; (80097bc <_strtod_l+0xbcc>)
 8009646:	4630      	mov	r0, r6
 8009648:	4639      	mov	r1, r7
 800964a:	2200      	movs	r2, #0
 800964c:	f7f6 ffec 	bl	8000628 <__aeabi_dmul>
 8009650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009652:	4606      	mov	r6, r0
 8009654:	460f      	mov	r7, r1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d09c      	beq.n	8009594 <_strtod_l+0x9a4>
 800965a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800965e:	e79d      	b.n	800959c <_strtod_l+0x9ac>
 8009660:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009790 <_strtod_l+0xba0>
 8009664:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009668:	ec57 6b17 	vmov	r6, r7, d7
 800966c:	e796      	b.n	800959c <_strtod_l+0x9ac>
 800966e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009672:	9b04      	ldr	r3, [sp, #16]
 8009674:	46ca      	mov	sl, r9
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1c2      	bne.n	8009600 <_strtod_l+0xa10>
 800967a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800967e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009680:	0d1b      	lsrs	r3, r3, #20
 8009682:	051b      	lsls	r3, r3, #20
 8009684:	429a      	cmp	r2, r3
 8009686:	d1bb      	bne.n	8009600 <_strtod_l+0xa10>
 8009688:	4630      	mov	r0, r6
 800968a:	4639      	mov	r1, r7
 800968c:	f7f7 fb2c 	bl	8000ce8 <__aeabi_d2lz>
 8009690:	f7f6 ff9c 	bl	80005cc <__aeabi_l2d>
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	4630      	mov	r0, r6
 800969a:	4639      	mov	r1, r7
 800969c:	f7f6 fe0c 	bl	80002b8 <__aeabi_dsub>
 80096a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096a6:	ea43 0308 	orr.w	r3, r3, r8
 80096aa:	4313      	orrs	r3, r2
 80096ac:	4606      	mov	r6, r0
 80096ae:	460f      	mov	r7, r1
 80096b0:	d054      	beq.n	800975c <_strtod_l+0xb6c>
 80096b2:	a339      	add	r3, pc, #228	; (adr r3, 8009798 <_strtod_l+0xba8>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	f7f7 fa28 	bl	8000b0c <__aeabi_dcmplt>
 80096bc:	2800      	cmp	r0, #0
 80096be:	f47f ace5 	bne.w	800908c <_strtod_l+0x49c>
 80096c2:	a337      	add	r3, pc, #220	; (adr r3, 80097a0 <_strtod_l+0xbb0>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	4630      	mov	r0, r6
 80096ca:	4639      	mov	r1, r7
 80096cc:	f7f7 fa3c 	bl	8000b48 <__aeabi_dcmpgt>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d095      	beq.n	8009600 <_strtod_l+0xa10>
 80096d4:	e4da      	b.n	800908c <_strtod_l+0x49c>
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	b333      	cbz	r3, 8009728 <_strtod_l+0xb38>
 80096da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096e0:	d822      	bhi.n	8009728 <_strtod_l+0xb38>
 80096e2:	a331      	add	r3, pc, #196	; (adr r3, 80097a8 <_strtod_l+0xbb8>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	4630      	mov	r0, r6
 80096ea:	4639      	mov	r1, r7
 80096ec:	f7f7 fa18 	bl	8000b20 <__aeabi_dcmple>
 80096f0:	b1a0      	cbz	r0, 800971c <_strtod_l+0xb2c>
 80096f2:	4639      	mov	r1, r7
 80096f4:	4630      	mov	r0, r6
 80096f6:	f7f7 fa6f 	bl	8000bd8 <__aeabi_d2uiz>
 80096fa:	2801      	cmp	r0, #1
 80096fc:	bf38      	it	cc
 80096fe:	2001      	movcc	r0, #1
 8009700:	f7f6 ff18 	bl	8000534 <__aeabi_ui2d>
 8009704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009706:	4606      	mov	r6, r0
 8009708:	460f      	mov	r7, r1
 800970a:	bb23      	cbnz	r3, 8009756 <_strtod_l+0xb66>
 800970c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009710:	9010      	str	r0, [sp, #64]	; 0x40
 8009712:	9311      	str	r3, [sp, #68]	; 0x44
 8009714:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009718:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800971c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800971e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009720:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009724:	1a9b      	subs	r3, r3, r2
 8009726:	930f      	str	r3, [sp, #60]	; 0x3c
 8009728:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800972c:	eeb0 0a48 	vmov.f32	s0, s16
 8009730:	eef0 0a68 	vmov.f32	s1, s17
 8009734:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009738:	f7ff f8fc 	bl	8008934 <__ulp>
 800973c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009740:	ec53 2b10 	vmov	r2, r3, d0
 8009744:	f7f6 ff70 	bl	8000628 <__aeabi_dmul>
 8009748:	ec53 2b18 	vmov	r2, r3, d8
 800974c:	f7f6 fdb6 	bl	80002bc <__adddf3>
 8009750:	4680      	mov	r8, r0
 8009752:	4689      	mov	r9, r1
 8009754:	e78d      	b.n	8009672 <_strtod_l+0xa82>
 8009756:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800975a:	e7db      	b.n	8009714 <_strtod_l+0xb24>
 800975c:	a314      	add	r3, pc, #80	; (adr r3, 80097b0 <_strtod_l+0xbc0>)
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	f7f7 f9d3 	bl	8000b0c <__aeabi_dcmplt>
 8009766:	e7b3      	b.n	80096d0 <_strtod_l+0xae0>
 8009768:	2300      	movs	r3, #0
 800976a:	930a      	str	r3, [sp, #40]	; 0x28
 800976c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800976e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	f7ff ba7c 	b.w	8008c6e <_strtod_l+0x7e>
 8009776:	2a65      	cmp	r2, #101	; 0x65
 8009778:	f43f ab75 	beq.w	8008e66 <_strtod_l+0x276>
 800977c:	2a45      	cmp	r2, #69	; 0x45
 800977e:	f43f ab72 	beq.w	8008e66 <_strtod_l+0x276>
 8009782:	2301      	movs	r3, #1
 8009784:	f7ff bbaa 	b.w	8008edc <_strtod_l+0x2ec>
 8009788:	00000000 	.word	0x00000000
 800978c:	bff00000 	.word	0xbff00000
 8009790:	00000000 	.word	0x00000000
 8009794:	3ff00000 	.word	0x3ff00000
 8009798:	94a03595 	.word	0x94a03595
 800979c:	3fdfffff 	.word	0x3fdfffff
 80097a0:	35afe535 	.word	0x35afe535
 80097a4:	3fe00000 	.word	0x3fe00000
 80097a8:	ffc00000 	.word	0xffc00000
 80097ac:	41dfffff 	.word	0x41dfffff
 80097b0:	94a03595 	.word	0x94a03595
 80097b4:	3fcfffff 	.word	0x3fcfffff
 80097b8:	3ff00000 	.word	0x3ff00000
 80097bc:	3fe00000 	.word	0x3fe00000
 80097c0:	7ff00000 	.word	0x7ff00000
 80097c4:	7fe00000 	.word	0x7fe00000
 80097c8:	7c9fffff 	.word	0x7c9fffff
 80097cc:	7fefffff 	.word	0x7fefffff

080097d0 <_strtod_r>:
 80097d0:	4b01      	ldr	r3, [pc, #4]	; (80097d8 <_strtod_r+0x8>)
 80097d2:	f7ff ba0d 	b.w	8008bf0 <_strtod_l>
 80097d6:	bf00      	nop
 80097d8:	20000068 	.word	0x20000068

080097dc <_strtol_l.constprop.0>:
 80097dc:	2b01      	cmp	r3, #1
 80097de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e2:	d001      	beq.n	80097e8 <_strtol_l.constprop.0+0xc>
 80097e4:	2b24      	cmp	r3, #36	; 0x24
 80097e6:	d906      	bls.n	80097f6 <_strtol_l.constprop.0+0x1a>
 80097e8:	f7fd fd80 	bl	80072ec <__errno>
 80097ec:	2316      	movs	r3, #22
 80097ee:	6003      	str	r3, [r0, #0]
 80097f0:	2000      	movs	r0, #0
 80097f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80098dc <_strtol_l.constprop.0+0x100>
 80097fa:	460d      	mov	r5, r1
 80097fc:	462e      	mov	r6, r5
 80097fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009802:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009806:	f017 0708 	ands.w	r7, r7, #8
 800980a:	d1f7      	bne.n	80097fc <_strtol_l.constprop.0+0x20>
 800980c:	2c2d      	cmp	r4, #45	; 0x2d
 800980e:	d132      	bne.n	8009876 <_strtol_l.constprop.0+0x9a>
 8009810:	782c      	ldrb	r4, [r5, #0]
 8009812:	2701      	movs	r7, #1
 8009814:	1cb5      	adds	r5, r6, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d05b      	beq.n	80098d2 <_strtol_l.constprop.0+0xf6>
 800981a:	2b10      	cmp	r3, #16
 800981c:	d109      	bne.n	8009832 <_strtol_l.constprop.0+0x56>
 800981e:	2c30      	cmp	r4, #48	; 0x30
 8009820:	d107      	bne.n	8009832 <_strtol_l.constprop.0+0x56>
 8009822:	782c      	ldrb	r4, [r5, #0]
 8009824:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009828:	2c58      	cmp	r4, #88	; 0x58
 800982a:	d14d      	bne.n	80098c8 <_strtol_l.constprop.0+0xec>
 800982c:	786c      	ldrb	r4, [r5, #1]
 800982e:	2310      	movs	r3, #16
 8009830:	3502      	adds	r5, #2
 8009832:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009836:	f108 38ff 	add.w	r8, r8, #4294967295
 800983a:	f04f 0e00 	mov.w	lr, #0
 800983e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009842:	4676      	mov	r6, lr
 8009844:	fb03 8a19 	mls	sl, r3, r9, r8
 8009848:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800984c:	f1bc 0f09 	cmp.w	ip, #9
 8009850:	d816      	bhi.n	8009880 <_strtol_l.constprop.0+0xa4>
 8009852:	4664      	mov	r4, ip
 8009854:	42a3      	cmp	r3, r4
 8009856:	dd24      	ble.n	80098a2 <_strtol_l.constprop.0+0xc6>
 8009858:	f1be 3fff 	cmp.w	lr, #4294967295
 800985c:	d008      	beq.n	8009870 <_strtol_l.constprop.0+0x94>
 800985e:	45b1      	cmp	r9, r6
 8009860:	d31c      	bcc.n	800989c <_strtol_l.constprop.0+0xc0>
 8009862:	d101      	bne.n	8009868 <_strtol_l.constprop.0+0x8c>
 8009864:	45a2      	cmp	sl, r4
 8009866:	db19      	blt.n	800989c <_strtol_l.constprop.0+0xc0>
 8009868:	fb06 4603 	mla	r6, r6, r3, r4
 800986c:	f04f 0e01 	mov.w	lr, #1
 8009870:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009874:	e7e8      	b.n	8009848 <_strtol_l.constprop.0+0x6c>
 8009876:	2c2b      	cmp	r4, #43	; 0x2b
 8009878:	bf04      	itt	eq
 800987a:	782c      	ldrbeq	r4, [r5, #0]
 800987c:	1cb5      	addeq	r5, r6, #2
 800987e:	e7ca      	b.n	8009816 <_strtol_l.constprop.0+0x3a>
 8009880:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009884:	f1bc 0f19 	cmp.w	ip, #25
 8009888:	d801      	bhi.n	800988e <_strtol_l.constprop.0+0xb2>
 800988a:	3c37      	subs	r4, #55	; 0x37
 800988c:	e7e2      	b.n	8009854 <_strtol_l.constprop.0+0x78>
 800988e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009892:	f1bc 0f19 	cmp.w	ip, #25
 8009896:	d804      	bhi.n	80098a2 <_strtol_l.constprop.0+0xc6>
 8009898:	3c57      	subs	r4, #87	; 0x57
 800989a:	e7db      	b.n	8009854 <_strtol_l.constprop.0+0x78>
 800989c:	f04f 3eff 	mov.w	lr, #4294967295
 80098a0:	e7e6      	b.n	8009870 <_strtol_l.constprop.0+0x94>
 80098a2:	f1be 3fff 	cmp.w	lr, #4294967295
 80098a6:	d105      	bne.n	80098b4 <_strtol_l.constprop.0+0xd8>
 80098a8:	2322      	movs	r3, #34	; 0x22
 80098aa:	6003      	str	r3, [r0, #0]
 80098ac:	4646      	mov	r6, r8
 80098ae:	b942      	cbnz	r2, 80098c2 <_strtol_l.constprop.0+0xe6>
 80098b0:	4630      	mov	r0, r6
 80098b2:	e79e      	b.n	80097f2 <_strtol_l.constprop.0+0x16>
 80098b4:	b107      	cbz	r7, 80098b8 <_strtol_l.constprop.0+0xdc>
 80098b6:	4276      	negs	r6, r6
 80098b8:	2a00      	cmp	r2, #0
 80098ba:	d0f9      	beq.n	80098b0 <_strtol_l.constprop.0+0xd4>
 80098bc:	f1be 0f00 	cmp.w	lr, #0
 80098c0:	d000      	beq.n	80098c4 <_strtol_l.constprop.0+0xe8>
 80098c2:	1e69      	subs	r1, r5, #1
 80098c4:	6011      	str	r1, [r2, #0]
 80098c6:	e7f3      	b.n	80098b0 <_strtol_l.constprop.0+0xd4>
 80098c8:	2430      	movs	r4, #48	; 0x30
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1b1      	bne.n	8009832 <_strtol_l.constprop.0+0x56>
 80098ce:	2308      	movs	r3, #8
 80098d0:	e7af      	b.n	8009832 <_strtol_l.constprop.0+0x56>
 80098d2:	2c30      	cmp	r4, #48	; 0x30
 80098d4:	d0a5      	beq.n	8009822 <_strtol_l.constprop.0+0x46>
 80098d6:	230a      	movs	r3, #10
 80098d8:	e7ab      	b.n	8009832 <_strtol_l.constprop.0+0x56>
 80098da:	bf00      	nop
 80098dc:	0800ce01 	.word	0x0800ce01

080098e0 <_strtol_r>:
 80098e0:	f7ff bf7c 	b.w	80097dc <_strtol_l.constprop.0>

080098e4 <__ssputs_r>:
 80098e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e8:	688e      	ldr	r6, [r1, #8]
 80098ea:	461f      	mov	r7, r3
 80098ec:	42be      	cmp	r6, r7
 80098ee:	680b      	ldr	r3, [r1, #0]
 80098f0:	4682      	mov	sl, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	4690      	mov	r8, r2
 80098f6:	d82c      	bhi.n	8009952 <__ssputs_r+0x6e>
 80098f8:	898a      	ldrh	r2, [r1, #12]
 80098fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098fe:	d026      	beq.n	800994e <__ssputs_r+0x6a>
 8009900:	6965      	ldr	r5, [r4, #20]
 8009902:	6909      	ldr	r1, [r1, #16]
 8009904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009908:	eba3 0901 	sub.w	r9, r3, r1
 800990c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009910:	1c7b      	adds	r3, r7, #1
 8009912:	444b      	add	r3, r9
 8009914:	106d      	asrs	r5, r5, #1
 8009916:	429d      	cmp	r5, r3
 8009918:	bf38      	it	cc
 800991a:	461d      	movcc	r5, r3
 800991c:	0553      	lsls	r3, r2, #21
 800991e:	d527      	bpl.n	8009970 <__ssputs_r+0x8c>
 8009920:	4629      	mov	r1, r5
 8009922:	f7fe fc0f 	bl	8008144 <_malloc_r>
 8009926:	4606      	mov	r6, r0
 8009928:	b360      	cbz	r0, 8009984 <__ssputs_r+0xa0>
 800992a:	6921      	ldr	r1, [r4, #16]
 800992c:	464a      	mov	r2, r9
 800992e:	f000 fdaf 	bl	800a490 <memcpy>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	6126      	str	r6, [r4, #16]
 8009940:	6165      	str	r5, [r4, #20]
 8009942:	444e      	add	r6, r9
 8009944:	eba5 0509 	sub.w	r5, r5, r9
 8009948:	6026      	str	r6, [r4, #0]
 800994a:	60a5      	str	r5, [r4, #8]
 800994c:	463e      	mov	r6, r7
 800994e:	42be      	cmp	r6, r7
 8009950:	d900      	bls.n	8009954 <__ssputs_r+0x70>
 8009952:	463e      	mov	r6, r7
 8009954:	6820      	ldr	r0, [r4, #0]
 8009956:	4632      	mov	r2, r6
 8009958:	4641      	mov	r1, r8
 800995a:	f000 fd5c 	bl	800a416 <memmove>
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	1b9b      	subs	r3, r3, r6
 8009962:	60a3      	str	r3, [r4, #8]
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	4433      	add	r3, r6
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	2000      	movs	r0, #0
 800996c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009970:	462a      	mov	r2, r5
 8009972:	f001 f942 	bl	800abfa <_realloc_r>
 8009976:	4606      	mov	r6, r0
 8009978:	2800      	cmp	r0, #0
 800997a:	d1e0      	bne.n	800993e <__ssputs_r+0x5a>
 800997c:	6921      	ldr	r1, [r4, #16]
 800997e:	4650      	mov	r0, sl
 8009980:	f7fe fb6c 	bl	800805c <_free_r>
 8009984:	230c      	movs	r3, #12
 8009986:	f8ca 3000 	str.w	r3, [sl]
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	f04f 30ff 	mov.w	r0, #4294967295
 8009996:	e7e9      	b.n	800996c <__ssputs_r+0x88>

08009998 <_svfiprintf_r>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	4698      	mov	r8, r3
 800999e:	898b      	ldrh	r3, [r1, #12]
 80099a0:	061b      	lsls	r3, r3, #24
 80099a2:	b09d      	sub	sp, #116	; 0x74
 80099a4:	4607      	mov	r7, r0
 80099a6:	460d      	mov	r5, r1
 80099a8:	4614      	mov	r4, r2
 80099aa:	d50e      	bpl.n	80099ca <_svfiprintf_r+0x32>
 80099ac:	690b      	ldr	r3, [r1, #16]
 80099ae:	b963      	cbnz	r3, 80099ca <_svfiprintf_r+0x32>
 80099b0:	2140      	movs	r1, #64	; 0x40
 80099b2:	f7fe fbc7 	bl	8008144 <_malloc_r>
 80099b6:	6028      	str	r0, [r5, #0]
 80099b8:	6128      	str	r0, [r5, #16]
 80099ba:	b920      	cbnz	r0, 80099c6 <_svfiprintf_r+0x2e>
 80099bc:	230c      	movs	r3, #12
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295
 80099c4:	e0d0      	b.n	8009b68 <_svfiprintf_r+0x1d0>
 80099c6:	2340      	movs	r3, #64	; 0x40
 80099c8:	616b      	str	r3, [r5, #20]
 80099ca:	2300      	movs	r3, #0
 80099cc:	9309      	str	r3, [sp, #36]	; 0x24
 80099ce:	2320      	movs	r3, #32
 80099d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80099d8:	2330      	movs	r3, #48	; 0x30
 80099da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b80 <_svfiprintf_r+0x1e8>
 80099de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099e2:	f04f 0901 	mov.w	r9, #1
 80099e6:	4623      	mov	r3, r4
 80099e8:	469a      	mov	sl, r3
 80099ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ee:	b10a      	cbz	r2, 80099f4 <_svfiprintf_r+0x5c>
 80099f0:	2a25      	cmp	r2, #37	; 0x25
 80099f2:	d1f9      	bne.n	80099e8 <_svfiprintf_r+0x50>
 80099f4:	ebba 0b04 	subs.w	fp, sl, r4
 80099f8:	d00b      	beq.n	8009a12 <_svfiprintf_r+0x7a>
 80099fa:	465b      	mov	r3, fp
 80099fc:	4622      	mov	r2, r4
 80099fe:	4629      	mov	r1, r5
 8009a00:	4638      	mov	r0, r7
 8009a02:	f7ff ff6f 	bl	80098e4 <__ssputs_r>
 8009a06:	3001      	adds	r0, #1
 8009a08:	f000 80a9 	beq.w	8009b5e <_svfiprintf_r+0x1c6>
 8009a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a0e:	445a      	add	r2, fp
 8009a10:	9209      	str	r2, [sp, #36]	; 0x24
 8009a12:	f89a 3000 	ldrb.w	r3, [sl]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 80a1 	beq.w	8009b5e <_svfiprintf_r+0x1c6>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a26:	f10a 0a01 	add.w	sl, sl, #1
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	9307      	str	r3, [sp, #28]
 8009a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a32:	931a      	str	r3, [sp, #104]	; 0x68
 8009a34:	4654      	mov	r4, sl
 8009a36:	2205      	movs	r2, #5
 8009a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a3c:	4850      	ldr	r0, [pc, #320]	; (8009b80 <_svfiprintf_r+0x1e8>)
 8009a3e:	f7f6 fbdf 	bl	8000200 <memchr>
 8009a42:	9a04      	ldr	r2, [sp, #16]
 8009a44:	b9d8      	cbnz	r0, 8009a7e <_svfiprintf_r+0xe6>
 8009a46:	06d0      	lsls	r0, r2, #27
 8009a48:	bf44      	itt	mi
 8009a4a:	2320      	movmi	r3, #32
 8009a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a50:	0711      	lsls	r1, r2, #28
 8009a52:	bf44      	itt	mi
 8009a54:	232b      	movmi	r3, #43	; 0x2b
 8009a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a60:	d015      	beq.n	8009a8e <_svfiprintf_r+0xf6>
 8009a62:	9a07      	ldr	r2, [sp, #28]
 8009a64:	4654      	mov	r4, sl
 8009a66:	2000      	movs	r0, #0
 8009a68:	f04f 0c0a 	mov.w	ip, #10
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a72:	3b30      	subs	r3, #48	; 0x30
 8009a74:	2b09      	cmp	r3, #9
 8009a76:	d94d      	bls.n	8009b14 <_svfiprintf_r+0x17c>
 8009a78:	b1b0      	cbz	r0, 8009aa8 <_svfiprintf_r+0x110>
 8009a7a:	9207      	str	r2, [sp, #28]
 8009a7c:	e014      	b.n	8009aa8 <_svfiprintf_r+0x110>
 8009a7e:	eba0 0308 	sub.w	r3, r0, r8
 8009a82:	fa09 f303 	lsl.w	r3, r9, r3
 8009a86:	4313      	orrs	r3, r2
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	46a2      	mov	sl, r4
 8009a8c:	e7d2      	b.n	8009a34 <_svfiprintf_r+0x9c>
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	1d19      	adds	r1, r3, #4
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	9103      	str	r1, [sp, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	bfbb      	ittet	lt
 8009a9a:	425b      	neglt	r3, r3
 8009a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009aa0:	9307      	strge	r3, [sp, #28]
 8009aa2:	9307      	strlt	r3, [sp, #28]
 8009aa4:	bfb8      	it	lt
 8009aa6:	9204      	strlt	r2, [sp, #16]
 8009aa8:	7823      	ldrb	r3, [r4, #0]
 8009aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8009aac:	d10c      	bne.n	8009ac8 <_svfiprintf_r+0x130>
 8009aae:	7863      	ldrb	r3, [r4, #1]
 8009ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ab2:	d134      	bne.n	8009b1e <_svfiprintf_r+0x186>
 8009ab4:	9b03      	ldr	r3, [sp, #12]
 8009ab6:	1d1a      	adds	r2, r3, #4
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	9203      	str	r2, [sp, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bfb8      	it	lt
 8009ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ac4:	3402      	adds	r4, #2
 8009ac6:	9305      	str	r3, [sp, #20]
 8009ac8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009b90 <_svfiprintf_r+0x1f8>
 8009acc:	7821      	ldrb	r1, [r4, #0]
 8009ace:	2203      	movs	r2, #3
 8009ad0:	4650      	mov	r0, sl
 8009ad2:	f7f6 fb95 	bl	8000200 <memchr>
 8009ad6:	b138      	cbz	r0, 8009ae8 <_svfiprintf_r+0x150>
 8009ad8:	9b04      	ldr	r3, [sp, #16]
 8009ada:	eba0 000a 	sub.w	r0, r0, sl
 8009ade:	2240      	movs	r2, #64	; 0x40
 8009ae0:	4082      	lsls	r2, r0
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	3401      	adds	r4, #1
 8009ae6:	9304      	str	r3, [sp, #16]
 8009ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aec:	4825      	ldr	r0, [pc, #148]	; (8009b84 <_svfiprintf_r+0x1ec>)
 8009aee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009af2:	2206      	movs	r2, #6
 8009af4:	f7f6 fb84 	bl	8000200 <memchr>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d038      	beq.n	8009b6e <_svfiprintf_r+0x1d6>
 8009afc:	4b22      	ldr	r3, [pc, #136]	; (8009b88 <_svfiprintf_r+0x1f0>)
 8009afe:	bb1b      	cbnz	r3, 8009b48 <_svfiprintf_r+0x1b0>
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	3307      	adds	r3, #7
 8009b04:	f023 0307 	bic.w	r3, r3, #7
 8009b08:	3308      	adds	r3, #8
 8009b0a:	9303      	str	r3, [sp, #12]
 8009b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0e:	4433      	add	r3, r6
 8009b10:	9309      	str	r3, [sp, #36]	; 0x24
 8009b12:	e768      	b.n	80099e6 <_svfiprintf_r+0x4e>
 8009b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b18:	460c      	mov	r4, r1
 8009b1a:	2001      	movs	r0, #1
 8009b1c:	e7a6      	b.n	8009a6c <_svfiprintf_r+0xd4>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	3401      	adds	r4, #1
 8009b22:	9305      	str	r3, [sp, #20]
 8009b24:	4619      	mov	r1, r3
 8009b26:	f04f 0c0a 	mov.w	ip, #10
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b30:	3a30      	subs	r2, #48	; 0x30
 8009b32:	2a09      	cmp	r2, #9
 8009b34:	d903      	bls.n	8009b3e <_svfiprintf_r+0x1a6>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0c6      	beq.n	8009ac8 <_svfiprintf_r+0x130>
 8009b3a:	9105      	str	r1, [sp, #20]
 8009b3c:	e7c4      	b.n	8009ac8 <_svfiprintf_r+0x130>
 8009b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b42:	4604      	mov	r4, r0
 8009b44:	2301      	movs	r3, #1
 8009b46:	e7f0      	b.n	8009b2a <_svfiprintf_r+0x192>
 8009b48:	ab03      	add	r3, sp, #12
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	462a      	mov	r2, r5
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <_svfiprintf_r+0x1f4>)
 8009b50:	a904      	add	r1, sp, #16
 8009b52:	4638      	mov	r0, r7
 8009b54:	f7fc fc4e 	bl	80063f4 <_printf_float>
 8009b58:	1c42      	adds	r2, r0, #1
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	d1d6      	bne.n	8009b0c <_svfiprintf_r+0x174>
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	065b      	lsls	r3, r3, #25
 8009b62:	f53f af2d 	bmi.w	80099c0 <_svfiprintf_r+0x28>
 8009b66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b68:	b01d      	add	sp, #116	; 0x74
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	ab03      	add	r3, sp, #12
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	462a      	mov	r2, r5
 8009b74:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <_svfiprintf_r+0x1f4>)
 8009b76:	a904      	add	r1, sp, #16
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f7fc fedf 	bl	800693c <_printf_i>
 8009b7e:	e7eb      	b.n	8009b58 <_svfiprintf_r+0x1c0>
 8009b80:	0800cf01 	.word	0x0800cf01
 8009b84:	0800cf0b 	.word	0x0800cf0b
 8009b88:	080063f5 	.word	0x080063f5
 8009b8c:	080098e5 	.word	0x080098e5
 8009b90:	0800cf07 	.word	0x0800cf07

08009b94 <_sungetc_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	1c4b      	adds	r3, r1, #1
 8009b98:	4614      	mov	r4, r2
 8009b9a:	d103      	bne.n	8009ba4 <_sungetc_r+0x10>
 8009b9c:	f04f 35ff 	mov.w	r5, #4294967295
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	bd38      	pop	{r3, r4, r5, pc}
 8009ba4:	8993      	ldrh	r3, [r2, #12]
 8009ba6:	f023 0320 	bic.w	r3, r3, #32
 8009baa:	8193      	strh	r3, [r2, #12]
 8009bac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bae:	6852      	ldr	r2, [r2, #4]
 8009bb0:	b2cd      	uxtb	r5, r1
 8009bb2:	b18b      	cbz	r3, 8009bd8 <_sungetc_r+0x44>
 8009bb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	dd08      	ble.n	8009bcc <_sungetc_r+0x38>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	1e5a      	subs	r2, r3, #1
 8009bbe:	6022      	str	r2, [r4, #0]
 8009bc0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009bc4:	6863      	ldr	r3, [r4, #4]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	6063      	str	r3, [r4, #4]
 8009bca:	e7e9      	b.n	8009ba0 <_sungetc_r+0xc>
 8009bcc:	4621      	mov	r1, r4
 8009bce:	f000 fbe8 	bl	800a3a2 <__submore>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d0f1      	beq.n	8009bba <_sungetc_r+0x26>
 8009bd6:	e7e1      	b.n	8009b9c <_sungetc_r+0x8>
 8009bd8:	6921      	ldr	r1, [r4, #16]
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	b151      	cbz	r1, 8009bf4 <_sungetc_r+0x60>
 8009bde:	4299      	cmp	r1, r3
 8009be0:	d208      	bcs.n	8009bf4 <_sungetc_r+0x60>
 8009be2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009be6:	42a9      	cmp	r1, r5
 8009be8:	d104      	bne.n	8009bf4 <_sungetc_r+0x60>
 8009bea:	3b01      	subs	r3, #1
 8009bec:	3201      	adds	r2, #1
 8009bee:	6023      	str	r3, [r4, #0]
 8009bf0:	6062      	str	r2, [r4, #4]
 8009bf2:	e7d5      	b.n	8009ba0 <_sungetc_r+0xc>
 8009bf4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8009bfe:	2303      	movs	r3, #3
 8009c00:	63a3      	str	r3, [r4, #56]	; 0x38
 8009c02:	4623      	mov	r3, r4
 8009c04:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e7dc      	b.n	8009bc8 <_sungetc_r+0x34>

08009c0e <__ssrefill_r>:
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	460c      	mov	r4, r1
 8009c12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009c14:	b169      	cbz	r1, 8009c32 <__ssrefill_r+0x24>
 8009c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c1a:	4299      	cmp	r1, r3
 8009c1c:	d001      	beq.n	8009c22 <__ssrefill_r+0x14>
 8009c1e:	f7fe fa1d 	bl	800805c <_free_r>
 8009c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c24:	6063      	str	r3, [r4, #4]
 8009c26:	2000      	movs	r0, #0
 8009c28:	6360      	str	r0, [r4, #52]	; 0x34
 8009c2a:	b113      	cbz	r3, 8009c32 <__ssrefill_r+0x24>
 8009c2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	bd10      	pop	{r4, pc}
 8009c32:	6923      	ldr	r3, [r4, #16]
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	2300      	movs	r3, #0
 8009c38:	6063      	str	r3, [r4, #4]
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f043 0320 	orr.w	r3, r3, #32
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295
 8009c46:	e7f3      	b.n	8009c30 <__ssrefill_r+0x22>

08009c48 <__ssvfiscanf_r>:
 8009c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009c52:	2100      	movs	r1, #0
 8009c54:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009c58:	49a6      	ldr	r1, [pc, #664]	; (8009ef4 <__ssvfiscanf_r+0x2ac>)
 8009c5a:	91a0      	str	r1, [sp, #640]	; 0x280
 8009c5c:	f10d 0804 	add.w	r8, sp, #4
 8009c60:	49a5      	ldr	r1, [pc, #660]	; (8009ef8 <__ssvfiscanf_r+0x2b0>)
 8009c62:	4fa6      	ldr	r7, [pc, #664]	; (8009efc <__ssvfiscanf_r+0x2b4>)
 8009c64:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009f00 <__ssvfiscanf_r+0x2b8>
 8009c68:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	7813      	ldrb	r3, [r2, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 815a 	beq.w	8009f2e <__ssvfiscanf_r+0x2e6>
 8009c7a:	5cf9      	ldrb	r1, [r7, r3]
 8009c7c:	f011 0108 	ands.w	r1, r1, #8
 8009c80:	f102 0501 	add.w	r5, r2, #1
 8009c84:	d019      	beq.n	8009cba <__ssvfiscanf_r+0x72>
 8009c86:	6863      	ldr	r3, [r4, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dd0f      	ble.n	8009cac <__ssvfiscanf_r+0x64>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	781a      	ldrb	r2, [r3, #0]
 8009c90:	5cba      	ldrb	r2, [r7, r2]
 8009c92:	0712      	lsls	r2, r2, #28
 8009c94:	d401      	bmi.n	8009c9a <__ssvfiscanf_r+0x52>
 8009c96:	462a      	mov	r2, r5
 8009c98:	e7eb      	b.n	8009c72 <__ssvfiscanf_r+0x2a>
 8009c9a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	9245      	str	r2, [sp, #276]	; 0x114
 8009ca0:	6862      	ldr	r2, [r4, #4]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	3a01      	subs	r2, #1
 8009ca6:	6062      	str	r2, [r4, #4]
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	e7ec      	b.n	8009c86 <__ssvfiscanf_r+0x3e>
 8009cac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	4798      	blx	r3
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d0e9      	beq.n	8009c8c <__ssvfiscanf_r+0x44>
 8009cb8:	e7ed      	b.n	8009c96 <__ssvfiscanf_r+0x4e>
 8009cba:	2b25      	cmp	r3, #37	; 0x25
 8009cbc:	d012      	beq.n	8009ce4 <__ssvfiscanf_r+0x9c>
 8009cbe:	469a      	mov	sl, r3
 8009cc0:	6863      	ldr	r3, [r4, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f340 8091 	ble.w	8009dea <__ssvfiscanf_r+0x1a2>
 8009cc8:	6822      	ldr	r2, [r4, #0]
 8009cca:	7813      	ldrb	r3, [r2, #0]
 8009ccc:	4553      	cmp	r3, sl
 8009cce:	f040 812e 	bne.w	8009f2e <__ssvfiscanf_r+0x2e6>
 8009cd2:	6863      	ldr	r3, [r4, #4]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	6063      	str	r3, [r4, #4]
 8009cd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009cda:	3201      	adds	r2, #1
 8009cdc:	3301      	adds	r3, #1
 8009cde:	6022      	str	r2, [r4, #0]
 8009ce0:	9345      	str	r3, [sp, #276]	; 0x114
 8009ce2:	e7d8      	b.n	8009c96 <__ssvfiscanf_r+0x4e>
 8009ce4:	9141      	str	r1, [sp, #260]	; 0x104
 8009ce6:	9143      	str	r1, [sp, #268]	; 0x10c
 8009ce8:	7853      	ldrb	r3, [r2, #1]
 8009cea:	2b2a      	cmp	r3, #42	; 0x2a
 8009cec:	bf02      	ittt	eq
 8009cee:	2310      	moveq	r3, #16
 8009cf0:	1c95      	addeq	r5, r2, #2
 8009cf2:	9341      	streq	r3, [sp, #260]	; 0x104
 8009cf4:	220a      	movs	r2, #10
 8009cf6:	46aa      	mov	sl, r5
 8009cf8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009cfc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009d00:	2b09      	cmp	r3, #9
 8009d02:	d91c      	bls.n	8009d3e <__ssvfiscanf_r+0xf6>
 8009d04:	487e      	ldr	r0, [pc, #504]	; (8009f00 <__ssvfiscanf_r+0x2b8>)
 8009d06:	2203      	movs	r2, #3
 8009d08:	f7f6 fa7a 	bl	8000200 <memchr>
 8009d0c:	b138      	cbz	r0, 8009d1e <__ssvfiscanf_r+0xd6>
 8009d0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009d10:	eba0 0009 	sub.w	r0, r0, r9
 8009d14:	2301      	movs	r3, #1
 8009d16:	4083      	lsls	r3, r0
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	9341      	str	r3, [sp, #260]	; 0x104
 8009d1c:	4655      	mov	r5, sl
 8009d1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d22:	2b78      	cmp	r3, #120	; 0x78
 8009d24:	d806      	bhi.n	8009d34 <__ssvfiscanf_r+0xec>
 8009d26:	2b57      	cmp	r3, #87	; 0x57
 8009d28:	d810      	bhi.n	8009d4c <__ssvfiscanf_r+0x104>
 8009d2a:	2b25      	cmp	r3, #37	; 0x25
 8009d2c:	d0c7      	beq.n	8009cbe <__ssvfiscanf_r+0x76>
 8009d2e:	d857      	bhi.n	8009de0 <__ssvfiscanf_r+0x198>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d065      	beq.n	8009e00 <__ssvfiscanf_r+0x1b8>
 8009d34:	2303      	movs	r3, #3
 8009d36:	9347      	str	r3, [sp, #284]	; 0x11c
 8009d38:	230a      	movs	r3, #10
 8009d3a:	9342      	str	r3, [sp, #264]	; 0x108
 8009d3c:	e076      	b.n	8009e2c <__ssvfiscanf_r+0x1e4>
 8009d3e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009d40:	fb02 1103 	mla	r1, r2, r3, r1
 8009d44:	3930      	subs	r1, #48	; 0x30
 8009d46:	9143      	str	r1, [sp, #268]	; 0x10c
 8009d48:	4655      	mov	r5, sl
 8009d4a:	e7d4      	b.n	8009cf6 <__ssvfiscanf_r+0xae>
 8009d4c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009d50:	2a20      	cmp	r2, #32
 8009d52:	d8ef      	bhi.n	8009d34 <__ssvfiscanf_r+0xec>
 8009d54:	a101      	add	r1, pc, #4	; (adr r1, 8009d5c <__ssvfiscanf_r+0x114>)
 8009d56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d5a:	bf00      	nop
 8009d5c:	08009e0f 	.word	0x08009e0f
 8009d60:	08009d35 	.word	0x08009d35
 8009d64:	08009d35 	.word	0x08009d35
 8009d68:	08009e6d 	.word	0x08009e6d
 8009d6c:	08009d35 	.word	0x08009d35
 8009d70:	08009d35 	.word	0x08009d35
 8009d74:	08009d35 	.word	0x08009d35
 8009d78:	08009d35 	.word	0x08009d35
 8009d7c:	08009d35 	.word	0x08009d35
 8009d80:	08009d35 	.word	0x08009d35
 8009d84:	08009d35 	.word	0x08009d35
 8009d88:	08009e83 	.word	0x08009e83
 8009d8c:	08009e69 	.word	0x08009e69
 8009d90:	08009de7 	.word	0x08009de7
 8009d94:	08009de7 	.word	0x08009de7
 8009d98:	08009de7 	.word	0x08009de7
 8009d9c:	08009d35 	.word	0x08009d35
 8009da0:	08009e25 	.word	0x08009e25
 8009da4:	08009d35 	.word	0x08009d35
 8009da8:	08009d35 	.word	0x08009d35
 8009dac:	08009d35 	.word	0x08009d35
 8009db0:	08009d35 	.word	0x08009d35
 8009db4:	08009e93 	.word	0x08009e93
 8009db8:	08009e61 	.word	0x08009e61
 8009dbc:	08009e07 	.word	0x08009e07
 8009dc0:	08009d35 	.word	0x08009d35
 8009dc4:	08009d35 	.word	0x08009d35
 8009dc8:	08009e8f 	.word	0x08009e8f
 8009dcc:	08009d35 	.word	0x08009d35
 8009dd0:	08009e69 	.word	0x08009e69
 8009dd4:	08009d35 	.word	0x08009d35
 8009dd8:	08009d35 	.word	0x08009d35
 8009ddc:	08009e0f 	.word	0x08009e0f
 8009de0:	3b45      	subs	r3, #69	; 0x45
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d8a6      	bhi.n	8009d34 <__ssvfiscanf_r+0xec>
 8009de6:	2305      	movs	r3, #5
 8009de8:	e01f      	b.n	8009e2a <__ssvfiscanf_r+0x1e2>
 8009dea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009dec:	4621      	mov	r1, r4
 8009dee:	4630      	mov	r0, r6
 8009df0:	4798      	blx	r3
 8009df2:	2800      	cmp	r0, #0
 8009df4:	f43f af68 	beq.w	8009cc8 <__ssvfiscanf_r+0x80>
 8009df8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	f040 808d 	bne.w	8009f1a <__ssvfiscanf_r+0x2d2>
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295
 8009e04:	e08f      	b.n	8009f26 <__ssvfiscanf_r+0x2de>
 8009e06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e08:	f042 0220 	orr.w	r2, r2, #32
 8009e0c:	9241      	str	r2, [sp, #260]	; 0x104
 8009e0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e14:	9241      	str	r2, [sp, #260]	; 0x104
 8009e16:	2210      	movs	r2, #16
 8009e18:	2b6f      	cmp	r3, #111	; 0x6f
 8009e1a:	9242      	str	r2, [sp, #264]	; 0x108
 8009e1c:	bf34      	ite	cc
 8009e1e:	2303      	movcc	r3, #3
 8009e20:	2304      	movcs	r3, #4
 8009e22:	e002      	b.n	8009e2a <__ssvfiscanf_r+0x1e2>
 8009e24:	2300      	movs	r3, #0
 8009e26:	9342      	str	r3, [sp, #264]	; 0x108
 8009e28:	2303      	movs	r3, #3
 8009e2a:	9347      	str	r3, [sp, #284]	; 0x11c
 8009e2c:	6863      	ldr	r3, [r4, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dd3d      	ble.n	8009eae <__ssvfiscanf_r+0x266>
 8009e32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e34:	0659      	lsls	r1, r3, #25
 8009e36:	d404      	bmi.n	8009e42 <__ssvfiscanf_r+0x1fa>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	781a      	ldrb	r2, [r3, #0]
 8009e3c:	5cba      	ldrb	r2, [r7, r2]
 8009e3e:	0712      	lsls	r2, r2, #28
 8009e40:	d43c      	bmi.n	8009ebc <__ssvfiscanf_r+0x274>
 8009e42:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	dc4b      	bgt.n	8009ee0 <__ssvfiscanf_r+0x298>
 8009e48:	466b      	mov	r3, sp
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	a941      	add	r1, sp, #260	; 0x104
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f000 f872 	bl	8009f38 <_scanf_chars>
 8009e54:	2801      	cmp	r0, #1
 8009e56:	d06a      	beq.n	8009f2e <__ssvfiscanf_r+0x2e6>
 8009e58:	2802      	cmp	r0, #2
 8009e5a:	f47f af1c 	bne.w	8009c96 <__ssvfiscanf_r+0x4e>
 8009e5e:	e7cb      	b.n	8009df8 <__ssvfiscanf_r+0x1b0>
 8009e60:	2308      	movs	r3, #8
 8009e62:	9342      	str	r3, [sp, #264]	; 0x108
 8009e64:	2304      	movs	r3, #4
 8009e66:	e7e0      	b.n	8009e2a <__ssvfiscanf_r+0x1e2>
 8009e68:	220a      	movs	r2, #10
 8009e6a:	e7d5      	b.n	8009e18 <__ssvfiscanf_r+0x1d0>
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	4640      	mov	r0, r8
 8009e70:	f000 fa5e 	bl	800a330 <__sccl>
 8009e74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e7a:	9341      	str	r3, [sp, #260]	; 0x104
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e7d3      	b.n	8009e2a <__ssvfiscanf_r+0x1e2>
 8009e82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e88:	9341      	str	r3, [sp, #260]	; 0x104
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e7cd      	b.n	8009e2a <__ssvfiscanf_r+0x1e2>
 8009e8e:	2302      	movs	r3, #2
 8009e90:	e7cb      	b.n	8009e2a <__ssvfiscanf_r+0x1e2>
 8009e92:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009e94:	06c3      	lsls	r3, r0, #27
 8009e96:	f53f aefe 	bmi.w	8009c96 <__ssvfiscanf_r+0x4e>
 8009e9a:	9b00      	ldr	r3, [sp, #0]
 8009e9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e9e:	1d19      	adds	r1, r3, #4
 8009ea0:	9100      	str	r1, [sp, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	07c0      	lsls	r0, r0, #31
 8009ea6:	bf4c      	ite	mi
 8009ea8:	801a      	strhmi	r2, [r3, #0]
 8009eaa:	601a      	strpl	r2, [r3, #0]
 8009eac:	e6f3      	b.n	8009c96 <__ssvfiscanf_r+0x4e>
 8009eae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	4798      	blx	r3
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d0bb      	beq.n	8009e32 <__ssvfiscanf_r+0x1ea>
 8009eba:	e79d      	b.n	8009df8 <__ssvfiscanf_r+0x1b0>
 8009ebc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009ebe:	3201      	adds	r2, #1
 8009ec0:	9245      	str	r2, [sp, #276]	; 0x114
 8009ec2:	6862      	ldr	r2, [r4, #4]
 8009ec4:	3a01      	subs	r2, #1
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	6062      	str	r2, [r4, #4]
 8009eca:	dd02      	ble.n	8009ed2 <__ssvfiscanf_r+0x28a>
 8009ecc:	3301      	adds	r3, #1
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	e7b2      	b.n	8009e38 <__ssvfiscanf_r+0x1f0>
 8009ed2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4798      	blx	r3
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d0ac      	beq.n	8009e38 <__ssvfiscanf_r+0x1f0>
 8009ede:	e78b      	b.n	8009df8 <__ssvfiscanf_r+0x1b0>
 8009ee0:	2b04      	cmp	r3, #4
 8009ee2:	dc0f      	bgt.n	8009f04 <__ssvfiscanf_r+0x2bc>
 8009ee4:	466b      	mov	r3, sp
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	a941      	add	r1, sp, #260	; 0x104
 8009eea:	4630      	mov	r0, r6
 8009eec:	f000 f87e 	bl	8009fec <_scanf_i>
 8009ef0:	e7b0      	b.n	8009e54 <__ssvfiscanf_r+0x20c>
 8009ef2:	bf00      	nop
 8009ef4:	08009b95 	.word	0x08009b95
 8009ef8:	08009c0f 	.word	0x08009c0f
 8009efc:	0800ce01 	.word	0x0800ce01
 8009f00:	0800cf07 	.word	0x0800cf07
 8009f04:	4b0b      	ldr	r3, [pc, #44]	; (8009f34 <__ssvfiscanf_r+0x2ec>)
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f43f aec5 	beq.w	8009c96 <__ssvfiscanf_r+0x4e>
 8009f0c:	466b      	mov	r3, sp
 8009f0e:	4622      	mov	r2, r4
 8009f10:	a941      	add	r1, sp, #260	; 0x104
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7fc fe34 	bl	8006b80 <_scanf_float>
 8009f18:	e79c      	b.n	8009e54 <__ssvfiscanf_r+0x20c>
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f20:	bf18      	it	ne
 8009f22:	f04f 30ff 	movne.w	r0, #4294967295
 8009f26:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009f30:	e7f9      	b.n	8009f26 <__ssvfiscanf_r+0x2de>
 8009f32:	bf00      	nop
 8009f34:	08006b81 	.word	0x08006b81

08009f38 <_scanf_chars>:
 8009f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f3c:	4615      	mov	r5, r2
 8009f3e:	688a      	ldr	r2, [r1, #8]
 8009f40:	4680      	mov	r8, r0
 8009f42:	460c      	mov	r4, r1
 8009f44:	b932      	cbnz	r2, 8009f54 <_scanf_chars+0x1c>
 8009f46:	698a      	ldr	r2, [r1, #24]
 8009f48:	2a00      	cmp	r2, #0
 8009f4a:	bf0c      	ite	eq
 8009f4c:	2201      	moveq	r2, #1
 8009f4e:	f04f 32ff 	movne.w	r2, #4294967295
 8009f52:	608a      	str	r2, [r1, #8]
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009fe8 <_scanf_chars+0xb0>
 8009f5a:	06d1      	lsls	r1, r2, #27
 8009f5c:	bf5f      	itttt	pl
 8009f5e:	681a      	ldrpl	r2, [r3, #0]
 8009f60:	1d11      	addpl	r1, r2, #4
 8009f62:	6019      	strpl	r1, [r3, #0]
 8009f64:	6816      	ldrpl	r6, [r2, #0]
 8009f66:	2700      	movs	r7, #0
 8009f68:	69a0      	ldr	r0, [r4, #24]
 8009f6a:	b188      	cbz	r0, 8009f90 <_scanf_chars+0x58>
 8009f6c:	2801      	cmp	r0, #1
 8009f6e:	d107      	bne.n	8009f80 <_scanf_chars+0x48>
 8009f70:	682a      	ldr	r2, [r5, #0]
 8009f72:	7811      	ldrb	r1, [r2, #0]
 8009f74:	6962      	ldr	r2, [r4, #20]
 8009f76:	5c52      	ldrb	r2, [r2, r1]
 8009f78:	b952      	cbnz	r2, 8009f90 <_scanf_chars+0x58>
 8009f7a:	2f00      	cmp	r7, #0
 8009f7c:	d031      	beq.n	8009fe2 <_scanf_chars+0xaa>
 8009f7e:	e022      	b.n	8009fc6 <_scanf_chars+0x8e>
 8009f80:	2802      	cmp	r0, #2
 8009f82:	d120      	bne.n	8009fc6 <_scanf_chars+0x8e>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009f8c:	071b      	lsls	r3, r3, #28
 8009f8e:	d41a      	bmi.n	8009fc6 <_scanf_chars+0x8e>
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	06da      	lsls	r2, r3, #27
 8009f94:	bf5e      	ittt	pl
 8009f96:	682b      	ldrpl	r3, [r5, #0]
 8009f98:	781b      	ldrbpl	r3, [r3, #0]
 8009f9a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009f9e:	682a      	ldr	r2, [r5, #0]
 8009fa0:	686b      	ldr	r3, [r5, #4]
 8009fa2:	3201      	adds	r2, #1
 8009fa4:	602a      	str	r2, [r5, #0]
 8009fa6:	68a2      	ldr	r2, [r4, #8]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	3a01      	subs	r2, #1
 8009fac:	606b      	str	r3, [r5, #4]
 8009fae:	3701      	adds	r7, #1
 8009fb0:	60a2      	str	r2, [r4, #8]
 8009fb2:	b142      	cbz	r2, 8009fc6 <_scanf_chars+0x8e>
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	dcd7      	bgt.n	8009f68 <_scanf_chars+0x30>
 8009fb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	4798      	blx	r3
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d0d0      	beq.n	8009f68 <_scanf_chars+0x30>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	f013 0310 	ands.w	r3, r3, #16
 8009fcc:	d105      	bne.n	8009fda <_scanf_chars+0xa2>
 8009fce:	68e2      	ldr	r2, [r4, #12]
 8009fd0:	3201      	adds	r2, #1
 8009fd2:	60e2      	str	r2, [r4, #12]
 8009fd4:	69a2      	ldr	r2, [r4, #24]
 8009fd6:	b102      	cbz	r2, 8009fda <_scanf_chars+0xa2>
 8009fd8:	7033      	strb	r3, [r6, #0]
 8009fda:	6923      	ldr	r3, [r4, #16]
 8009fdc:	443b      	add	r3, r7
 8009fde:	6123      	str	r3, [r4, #16]
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fe6:	bf00      	nop
 8009fe8:	0800ce01 	.word	0x0800ce01

08009fec <_scanf_i>:
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	4698      	mov	r8, r3
 8009ff2:	4b74      	ldr	r3, [pc, #464]	; (800a1c4 <_scanf_i+0x1d8>)
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	4682      	mov	sl, r0
 8009ff8:	4616      	mov	r6, r2
 8009ffa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ffe:	b087      	sub	sp, #28
 800a000:	ab03      	add	r3, sp, #12
 800a002:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a006:	4b70      	ldr	r3, [pc, #448]	; (800a1c8 <_scanf_i+0x1dc>)
 800a008:	69a1      	ldr	r1, [r4, #24]
 800a00a:	4a70      	ldr	r2, [pc, #448]	; (800a1cc <_scanf_i+0x1e0>)
 800a00c:	2903      	cmp	r1, #3
 800a00e:	bf18      	it	ne
 800a010:	461a      	movne	r2, r3
 800a012:	68a3      	ldr	r3, [r4, #8]
 800a014:	9201      	str	r2, [sp, #4]
 800a016:	1e5a      	subs	r2, r3, #1
 800a018:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a01c:	bf88      	it	hi
 800a01e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a022:	4627      	mov	r7, r4
 800a024:	bf82      	ittt	hi
 800a026:	eb03 0905 	addhi.w	r9, r3, r5
 800a02a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a02e:	60a3      	strhi	r3, [r4, #8]
 800a030:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a034:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a038:	bf98      	it	ls
 800a03a:	f04f 0900 	movls.w	r9, #0
 800a03e:	6023      	str	r3, [r4, #0]
 800a040:	463d      	mov	r5, r7
 800a042:	f04f 0b00 	mov.w	fp, #0
 800a046:	6831      	ldr	r1, [r6, #0]
 800a048:	ab03      	add	r3, sp, #12
 800a04a:	7809      	ldrb	r1, [r1, #0]
 800a04c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a050:	2202      	movs	r2, #2
 800a052:	f7f6 f8d5 	bl	8000200 <memchr>
 800a056:	b328      	cbz	r0, 800a0a4 <_scanf_i+0xb8>
 800a058:	f1bb 0f01 	cmp.w	fp, #1
 800a05c:	d159      	bne.n	800a112 <_scanf_i+0x126>
 800a05e:	6862      	ldr	r2, [r4, #4]
 800a060:	b92a      	cbnz	r2, 800a06e <_scanf_i+0x82>
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	2308      	movs	r3, #8
 800a066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a06a:	6063      	str	r3, [r4, #4]
 800a06c:	6022      	str	r2, [r4, #0]
 800a06e:	6822      	ldr	r2, [r4, #0]
 800a070:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a074:	6022      	str	r2, [r4, #0]
 800a076:	68a2      	ldr	r2, [r4, #8]
 800a078:	1e51      	subs	r1, r2, #1
 800a07a:	60a1      	str	r1, [r4, #8]
 800a07c:	b192      	cbz	r2, 800a0a4 <_scanf_i+0xb8>
 800a07e:	6832      	ldr	r2, [r6, #0]
 800a080:	1c51      	adds	r1, r2, #1
 800a082:	6031      	str	r1, [r6, #0]
 800a084:	7812      	ldrb	r2, [r2, #0]
 800a086:	f805 2b01 	strb.w	r2, [r5], #1
 800a08a:	6872      	ldr	r2, [r6, #4]
 800a08c:	3a01      	subs	r2, #1
 800a08e:	2a00      	cmp	r2, #0
 800a090:	6072      	str	r2, [r6, #4]
 800a092:	dc07      	bgt.n	800a0a4 <_scanf_i+0xb8>
 800a094:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a098:	4631      	mov	r1, r6
 800a09a:	4650      	mov	r0, sl
 800a09c:	4790      	blx	r2
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	f040 8085 	bne.w	800a1ae <_scanf_i+0x1c2>
 800a0a4:	f10b 0b01 	add.w	fp, fp, #1
 800a0a8:	f1bb 0f03 	cmp.w	fp, #3
 800a0ac:	d1cb      	bne.n	800a046 <_scanf_i+0x5a>
 800a0ae:	6863      	ldr	r3, [r4, #4]
 800a0b0:	b90b      	cbnz	r3, 800a0b6 <_scanf_i+0xca>
 800a0b2:	230a      	movs	r3, #10
 800a0b4:	6063      	str	r3, [r4, #4]
 800a0b6:	6863      	ldr	r3, [r4, #4]
 800a0b8:	4945      	ldr	r1, [pc, #276]	; (800a1d0 <_scanf_i+0x1e4>)
 800a0ba:	6960      	ldr	r0, [r4, #20]
 800a0bc:	1ac9      	subs	r1, r1, r3
 800a0be:	f000 f937 	bl	800a330 <__sccl>
 800a0c2:	f04f 0b00 	mov.w	fp, #0
 800a0c6:	68a3      	ldr	r3, [r4, #8]
 800a0c8:	6822      	ldr	r2, [r4, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d03d      	beq.n	800a14a <_scanf_i+0x15e>
 800a0ce:	6831      	ldr	r1, [r6, #0]
 800a0d0:	6960      	ldr	r0, [r4, #20]
 800a0d2:	f891 c000 	ldrb.w	ip, [r1]
 800a0d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d035      	beq.n	800a14a <_scanf_i+0x15e>
 800a0de:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a0e2:	d124      	bne.n	800a12e <_scanf_i+0x142>
 800a0e4:	0510      	lsls	r0, r2, #20
 800a0e6:	d522      	bpl.n	800a12e <_scanf_i+0x142>
 800a0e8:	f10b 0b01 	add.w	fp, fp, #1
 800a0ec:	f1b9 0f00 	cmp.w	r9, #0
 800a0f0:	d003      	beq.n	800a0fa <_scanf_i+0x10e>
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	f109 39ff 	add.w	r9, r9, #4294967295
 800a0f8:	60a3      	str	r3, [r4, #8]
 800a0fa:	6873      	ldr	r3, [r6, #4]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	6073      	str	r3, [r6, #4]
 800a102:	dd1b      	ble.n	800a13c <_scanf_i+0x150>
 800a104:	6833      	ldr	r3, [r6, #0]
 800a106:	3301      	adds	r3, #1
 800a108:	6033      	str	r3, [r6, #0]
 800a10a:	68a3      	ldr	r3, [r4, #8]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	60a3      	str	r3, [r4, #8]
 800a110:	e7d9      	b.n	800a0c6 <_scanf_i+0xda>
 800a112:	f1bb 0f02 	cmp.w	fp, #2
 800a116:	d1ae      	bne.n	800a076 <_scanf_i+0x8a>
 800a118:	6822      	ldr	r2, [r4, #0]
 800a11a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a11e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a122:	d1bf      	bne.n	800a0a4 <_scanf_i+0xb8>
 800a124:	2310      	movs	r3, #16
 800a126:	6063      	str	r3, [r4, #4]
 800a128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a12c:	e7a2      	b.n	800a074 <_scanf_i+0x88>
 800a12e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a132:	6022      	str	r2, [r4, #0]
 800a134:	780b      	ldrb	r3, [r1, #0]
 800a136:	f805 3b01 	strb.w	r3, [r5], #1
 800a13a:	e7de      	b.n	800a0fa <_scanf_i+0x10e>
 800a13c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a140:	4631      	mov	r1, r6
 800a142:	4650      	mov	r0, sl
 800a144:	4798      	blx	r3
 800a146:	2800      	cmp	r0, #0
 800a148:	d0df      	beq.n	800a10a <_scanf_i+0x11e>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	05d9      	lsls	r1, r3, #23
 800a14e:	d50d      	bpl.n	800a16c <_scanf_i+0x180>
 800a150:	42bd      	cmp	r5, r7
 800a152:	d909      	bls.n	800a168 <_scanf_i+0x17c>
 800a154:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a158:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a15c:	4632      	mov	r2, r6
 800a15e:	4650      	mov	r0, sl
 800a160:	4798      	blx	r3
 800a162:	f105 39ff 	add.w	r9, r5, #4294967295
 800a166:	464d      	mov	r5, r9
 800a168:	42bd      	cmp	r5, r7
 800a16a:	d028      	beq.n	800a1be <_scanf_i+0x1d2>
 800a16c:	6822      	ldr	r2, [r4, #0]
 800a16e:	f012 0210 	ands.w	r2, r2, #16
 800a172:	d113      	bne.n	800a19c <_scanf_i+0x1b0>
 800a174:	702a      	strb	r2, [r5, #0]
 800a176:	6863      	ldr	r3, [r4, #4]
 800a178:	9e01      	ldr	r6, [sp, #4]
 800a17a:	4639      	mov	r1, r7
 800a17c:	4650      	mov	r0, sl
 800a17e:	47b0      	blx	r6
 800a180:	f8d8 3000 	ldr.w	r3, [r8]
 800a184:	6821      	ldr	r1, [r4, #0]
 800a186:	1d1a      	adds	r2, r3, #4
 800a188:	f8c8 2000 	str.w	r2, [r8]
 800a18c:	f011 0f20 	tst.w	r1, #32
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	d00f      	beq.n	800a1b4 <_scanf_i+0x1c8>
 800a194:	6018      	str	r0, [r3, #0]
 800a196:	68e3      	ldr	r3, [r4, #12]
 800a198:	3301      	adds	r3, #1
 800a19a:	60e3      	str	r3, [r4, #12]
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	1bed      	subs	r5, r5, r7
 800a1a0:	445d      	add	r5, fp
 800a1a2:	442b      	add	r3, r5
 800a1a4:	6123      	str	r3, [r4, #16]
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	b007      	add	sp, #28
 800a1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ae:	f04f 0b00 	mov.w	fp, #0
 800a1b2:	e7ca      	b.n	800a14a <_scanf_i+0x15e>
 800a1b4:	07ca      	lsls	r2, r1, #31
 800a1b6:	bf4c      	ite	mi
 800a1b8:	8018      	strhmi	r0, [r3, #0]
 800a1ba:	6018      	strpl	r0, [r3, #0]
 800a1bc:	e7eb      	b.n	800a196 <_scanf_i+0x1aa>
 800a1be:	2001      	movs	r0, #1
 800a1c0:	e7f2      	b.n	800a1a8 <_scanf_i+0x1bc>
 800a1c2:	bf00      	nop
 800a1c4:	0800cb60 	.word	0x0800cb60
 800a1c8:	0800ad3d 	.word	0x0800ad3d
 800a1cc:	080098e1 	.word	0x080098e1
 800a1d0:	0800cf22 	.word	0x0800cf22

0800a1d4 <__sflush_r>:
 800a1d4:	898a      	ldrh	r2, [r1, #12]
 800a1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1da:	4605      	mov	r5, r0
 800a1dc:	0710      	lsls	r0, r2, #28
 800a1de:	460c      	mov	r4, r1
 800a1e0:	d458      	bmi.n	800a294 <__sflush_r+0xc0>
 800a1e2:	684b      	ldr	r3, [r1, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	dc05      	bgt.n	800a1f4 <__sflush_r+0x20>
 800a1e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	dc02      	bgt.n	800a1f4 <__sflush_r+0x20>
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1f6:	2e00      	cmp	r6, #0
 800a1f8:	d0f9      	beq.n	800a1ee <__sflush_r+0x1a>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a200:	682f      	ldr	r7, [r5, #0]
 800a202:	6a21      	ldr	r1, [r4, #32]
 800a204:	602b      	str	r3, [r5, #0]
 800a206:	d032      	beq.n	800a26e <__sflush_r+0x9a>
 800a208:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	075a      	lsls	r2, r3, #29
 800a20e:	d505      	bpl.n	800a21c <__sflush_r+0x48>
 800a210:	6863      	ldr	r3, [r4, #4]
 800a212:	1ac0      	subs	r0, r0, r3
 800a214:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a216:	b10b      	cbz	r3, 800a21c <__sflush_r+0x48>
 800a218:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a21a:	1ac0      	subs	r0, r0, r3
 800a21c:	2300      	movs	r3, #0
 800a21e:	4602      	mov	r2, r0
 800a220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a222:	6a21      	ldr	r1, [r4, #32]
 800a224:	4628      	mov	r0, r5
 800a226:	47b0      	blx	r6
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	d106      	bne.n	800a23c <__sflush_r+0x68>
 800a22e:	6829      	ldr	r1, [r5, #0]
 800a230:	291d      	cmp	r1, #29
 800a232:	d82b      	bhi.n	800a28c <__sflush_r+0xb8>
 800a234:	4a29      	ldr	r2, [pc, #164]	; (800a2dc <__sflush_r+0x108>)
 800a236:	410a      	asrs	r2, r1
 800a238:	07d6      	lsls	r6, r2, #31
 800a23a:	d427      	bmi.n	800a28c <__sflush_r+0xb8>
 800a23c:	2200      	movs	r2, #0
 800a23e:	6062      	str	r2, [r4, #4]
 800a240:	04d9      	lsls	r1, r3, #19
 800a242:	6922      	ldr	r2, [r4, #16]
 800a244:	6022      	str	r2, [r4, #0]
 800a246:	d504      	bpl.n	800a252 <__sflush_r+0x7e>
 800a248:	1c42      	adds	r2, r0, #1
 800a24a:	d101      	bne.n	800a250 <__sflush_r+0x7c>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b903      	cbnz	r3, 800a252 <__sflush_r+0x7e>
 800a250:	6560      	str	r0, [r4, #84]	; 0x54
 800a252:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a254:	602f      	str	r7, [r5, #0]
 800a256:	2900      	cmp	r1, #0
 800a258:	d0c9      	beq.n	800a1ee <__sflush_r+0x1a>
 800a25a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a25e:	4299      	cmp	r1, r3
 800a260:	d002      	beq.n	800a268 <__sflush_r+0x94>
 800a262:	4628      	mov	r0, r5
 800a264:	f7fd fefa 	bl	800805c <_free_r>
 800a268:	2000      	movs	r0, #0
 800a26a:	6360      	str	r0, [r4, #52]	; 0x34
 800a26c:	e7c0      	b.n	800a1f0 <__sflush_r+0x1c>
 800a26e:	2301      	movs	r3, #1
 800a270:	4628      	mov	r0, r5
 800a272:	47b0      	blx	r6
 800a274:	1c41      	adds	r1, r0, #1
 800a276:	d1c8      	bne.n	800a20a <__sflush_r+0x36>
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0c5      	beq.n	800a20a <__sflush_r+0x36>
 800a27e:	2b1d      	cmp	r3, #29
 800a280:	d001      	beq.n	800a286 <__sflush_r+0xb2>
 800a282:	2b16      	cmp	r3, #22
 800a284:	d101      	bne.n	800a28a <__sflush_r+0xb6>
 800a286:	602f      	str	r7, [r5, #0]
 800a288:	e7b1      	b.n	800a1ee <__sflush_r+0x1a>
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	e7ad      	b.n	800a1f0 <__sflush_r+0x1c>
 800a294:	690f      	ldr	r7, [r1, #16]
 800a296:	2f00      	cmp	r7, #0
 800a298:	d0a9      	beq.n	800a1ee <__sflush_r+0x1a>
 800a29a:	0793      	lsls	r3, r2, #30
 800a29c:	680e      	ldr	r6, [r1, #0]
 800a29e:	bf08      	it	eq
 800a2a0:	694b      	ldreq	r3, [r1, #20]
 800a2a2:	600f      	str	r7, [r1, #0]
 800a2a4:	bf18      	it	ne
 800a2a6:	2300      	movne	r3, #0
 800a2a8:	eba6 0807 	sub.w	r8, r6, r7
 800a2ac:	608b      	str	r3, [r1, #8]
 800a2ae:	f1b8 0f00 	cmp.w	r8, #0
 800a2b2:	dd9c      	ble.n	800a1ee <__sflush_r+0x1a>
 800a2b4:	6a21      	ldr	r1, [r4, #32]
 800a2b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2b8:	4643      	mov	r3, r8
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	4628      	mov	r0, r5
 800a2be:	47b0      	blx	r6
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	dc06      	bgt.n	800a2d2 <__sflush_r+0xfe>
 800a2c4:	89a3      	ldrh	r3, [r4, #12]
 800a2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d0:	e78e      	b.n	800a1f0 <__sflush_r+0x1c>
 800a2d2:	4407      	add	r7, r0
 800a2d4:	eba8 0800 	sub.w	r8, r8, r0
 800a2d8:	e7e9      	b.n	800a2ae <__sflush_r+0xda>
 800a2da:	bf00      	nop
 800a2dc:	dfbffffe 	.word	0xdfbffffe

0800a2e0 <_fflush_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	690b      	ldr	r3, [r1, #16]
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	b913      	cbnz	r3, 800a2f0 <_fflush_r+0x10>
 800a2ea:	2500      	movs	r5, #0
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	b118      	cbz	r0, 800a2fa <_fflush_r+0x1a>
 800a2f2:	6a03      	ldr	r3, [r0, #32]
 800a2f4:	b90b      	cbnz	r3, 800a2fa <_fflush_r+0x1a>
 800a2f6:	f7fc fedf 	bl	80070b8 <__sinit>
 800a2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d0f3      	beq.n	800a2ea <_fflush_r+0xa>
 800a302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a304:	07d0      	lsls	r0, r2, #31
 800a306:	d404      	bmi.n	800a312 <_fflush_r+0x32>
 800a308:	0599      	lsls	r1, r3, #22
 800a30a:	d402      	bmi.n	800a312 <_fflush_r+0x32>
 800a30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a30e:	f7fd f818 	bl	8007342 <__retarget_lock_acquire_recursive>
 800a312:	4628      	mov	r0, r5
 800a314:	4621      	mov	r1, r4
 800a316:	f7ff ff5d 	bl	800a1d4 <__sflush_r>
 800a31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a31c:	07da      	lsls	r2, r3, #31
 800a31e:	4605      	mov	r5, r0
 800a320:	d4e4      	bmi.n	800a2ec <_fflush_r+0xc>
 800a322:	89a3      	ldrh	r3, [r4, #12]
 800a324:	059b      	lsls	r3, r3, #22
 800a326:	d4e1      	bmi.n	800a2ec <_fflush_r+0xc>
 800a328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a32a:	f7fd f80b 	bl	8007344 <__retarget_lock_release_recursive>
 800a32e:	e7dd      	b.n	800a2ec <_fflush_r+0xc>

0800a330 <__sccl>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	780b      	ldrb	r3, [r1, #0]
 800a334:	4604      	mov	r4, r0
 800a336:	2b5e      	cmp	r3, #94	; 0x5e
 800a338:	bf0b      	itete	eq
 800a33a:	784b      	ldrbeq	r3, [r1, #1]
 800a33c:	1c4a      	addne	r2, r1, #1
 800a33e:	1c8a      	addeq	r2, r1, #2
 800a340:	2100      	movne	r1, #0
 800a342:	bf08      	it	eq
 800a344:	2101      	moveq	r1, #1
 800a346:	3801      	subs	r0, #1
 800a348:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a34c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a350:	42a8      	cmp	r0, r5
 800a352:	d1fb      	bne.n	800a34c <__sccl+0x1c>
 800a354:	b90b      	cbnz	r3, 800a35a <__sccl+0x2a>
 800a356:	1e50      	subs	r0, r2, #1
 800a358:	bd70      	pop	{r4, r5, r6, pc}
 800a35a:	f081 0101 	eor.w	r1, r1, #1
 800a35e:	54e1      	strb	r1, [r4, r3]
 800a360:	4610      	mov	r0, r2
 800a362:	4602      	mov	r2, r0
 800a364:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a368:	2d2d      	cmp	r5, #45	; 0x2d
 800a36a:	d005      	beq.n	800a378 <__sccl+0x48>
 800a36c:	2d5d      	cmp	r5, #93	; 0x5d
 800a36e:	d016      	beq.n	800a39e <__sccl+0x6e>
 800a370:	2d00      	cmp	r5, #0
 800a372:	d0f1      	beq.n	800a358 <__sccl+0x28>
 800a374:	462b      	mov	r3, r5
 800a376:	e7f2      	b.n	800a35e <__sccl+0x2e>
 800a378:	7846      	ldrb	r6, [r0, #1]
 800a37a:	2e5d      	cmp	r6, #93	; 0x5d
 800a37c:	d0fa      	beq.n	800a374 <__sccl+0x44>
 800a37e:	42b3      	cmp	r3, r6
 800a380:	dcf8      	bgt.n	800a374 <__sccl+0x44>
 800a382:	3002      	adds	r0, #2
 800a384:	461a      	mov	r2, r3
 800a386:	3201      	adds	r2, #1
 800a388:	4296      	cmp	r6, r2
 800a38a:	54a1      	strb	r1, [r4, r2]
 800a38c:	dcfb      	bgt.n	800a386 <__sccl+0x56>
 800a38e:	1af2      	subs	r2, r6, r3
 800a390:	3a01      	subs	r2, #1
 800a392:	1c5d      	adds	r5, r3, #1
 800a394:	42b3      	cmp	r3, r6
 800a396:	bfa8      	it	ge
 800a398:	2200      	movge	r2, #0
 800a39a:	18ab      	adds	r3, r5, r2
 800a39c:	e7e1      	b.n	800a362 <__sccl+0x32>
 800a39e:	4610      	mov	r0, r2
 800a3a0:	e7da      	b.n	800a358 <__sccl+0x28>

0800a3a2 <__submore>:
 800a3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a3aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3ae:	4299      	cmp	r1, r3
 800a3b0:	d11d      	bne.n	800a3ee <__submore+0x4c>
 800a3b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3b6:	f7fd fec5 	bl	8008144 <_malloc_r>
 800a3ba:	b918      	cbnz	r0, 800a3c4 <__submore+0x22>
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a3ca:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a3ce:	6360      	str	r0, [r4, #52]	; 0x34
 800a3d0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a3d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a3d8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a3dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a3e0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a3e4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a3e8:	6020      	str	r0, [r4, #0]
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	e7e8      	b.n	800a3c0 <__submore+0x1e>
 800a3ee:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a3f0:	0077      	lsls	r7, r6, #1
 800a3f2:	463a      	mov	r2, r7
 800a3f4:	f000 fc01 	bl	800abfa <_realloc_r>
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d0de      	beq.n	800a3bc <__submore+0x1a>
 800a3fe:	eb00 0806 	add.w	r8, r0, r6
 800a402:	4601      	mov	r1, r0
 800a404:	4632      	mov	r2, r6
 800a406:	4640      	mov	r0, r8
 800a408:	f000 f842 	bl	800a490 <memcpy>
 800a40c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a410:	f8c4 8000 	str.w	r8, [r4]
 800a414:	e7e9      	b.n	800a3ea <__submore+0x48>

0800a416 <memmove>:
 800a416:	4288      	cmp	r0, r1
 800a418:	b510      	push	{r4, lr}
 800a41a:	eb01 0402 	add.w	r4, r1, r2
 800a41e:	d902      	bls.n	800a426 <memmove+0x10>
 800a420:	4284      	cmp	r4, r0
 800a422:	4623      	mov	r3, r4
 800a424:	d807      	bhi.n	800a436 <memmove+0x20>
 800a426:	1e43      	subs	r3, r0, #1
 800a428:	42a1      	cmp	r1, r4
 800a42a:	d008      	beq.n	800a43e <memmove+0x28>
 800a42c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a430:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a434:	e7f8      	b.n	800a428 <memmove+0x12>
 800a436:	4402      	add	r2, r0
 800a438:	4601      	mov	r1, r0
 800a43a:	428a      	cmp	r2, r1
 800a43c:	d100      	bne.n	800a440 <memmove+0x2a>
 800a43e:	bd10      	pop	{r4, pc}
 800a440:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a444:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a448:	e7f7      	b.n	800a43a <memmove+0x24>

0800a44a <strncmp>:
 800a44a:	b510      	push	{r4, lr}
 800a44c:	b16a      	cbz	r2, 800a46a <strncmp+0x20>
 800a44e:	3901      	subs	r1, #1
 800a450:	1884      	adds	r4, r0, r2
 800a452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a456:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d103      	bne.n	800a466 <strncmp+0x1c>
 800a45e:	42a0      	cmp	r0, r4
 800a460:	d001      	beq.n	800a466 <strncmp+0x1c>
 800a462:	2a00      	cmp	r2, #0
 800a464:	d1f5      	bne.n	800a452 <strncmp+0x8>
 800a466:	1ad0      	subs	r0, r2, r3
 800a468:	bd10      	pop	{r4, pc}
 800a46a:	4610      	mov	r0, r2
 800a46c:	e7fc      	b.n	800a468 <strncmp+0x1e>
	...

0800a470 <_sbrk_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4d06      	ldr	r5, [pc, #24]	; (800a48c <_sbrk_r+0x1c>)
 800a474:	2300      	movs	r3, #0
 800a476:	4604      	mov	r4, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	602b      	str	r3, [r5, #0]
 800a47c:	f7f8 f910 	bl	80026a0 <_sbrk>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d102      	bne.n	800a48a <_sbrk_r+0x1a>
 800a484:	682b      	ldr	r3, [r5, #0]
 800a486:	b103      	cbz	r3, 800a48a <_sbrk_r+0x1a>
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	2000064c 	.word	0x2000064c

0800a490 <memcpy>:
 800a490:	440a      	add	r2, r1
 800a492:	4291      	cmp	r1, r2
 800a494:	f100 33ff 	add.w	r3, r0, #4294967295
 800a498:	d100      	bne.n	800a49c <memcpy+0xc>
 800a49a:	4770      	bx	lr
 800a49c:	b510      	push	{r4, lr}
 800a49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4a6:	4291      	cmp	r1, r2
 800a4a8:	d1f9      	bne.n	800a49e <memcpy+0xe>
 800a4aa:	bd10      	pop	{r4, pc}
 800a4ac:	0000      	movs	r0, r0
	...

0800a4b0 <nan>:
 800a4b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a4b8 <nan+0x8>
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	00000000 	.word	0x00000000
 800a4bc:	7ff80000 	.word	0x7ff80000

0800a4c0 <__assert_func>:
 800a4c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4c2:	4614      	mov	r4, r2
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <__assert_func+0x2c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	68d8      	ldr	r0, [r3, #12]
 800a4ce:	b14c      	cbz	r4, 800a4e4 <__assert_func+0x24>
 800a4d0:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <__assert_func+0x30>)
 800a4d2:	9100      	str	r1, [sp, #0]
 800a4d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4d8:	4906      	ldr	r1, [pc, #24]	; (800a4f4 <__assert_func+0x34>)
 800a4da:	462b      	mov	r3, r5
 800a4dc:	f000 fc3e 	bl	800ad5c <fiprintf>
 800a4e0:	f000 fc4e 	bl	800ad80 <abort>
 800a4e4:	4b04      	ldr	r3, [pc, #16]	; (800a4f8 <__assert_func+0x38>)
 800a4e6:	461c      	mov	r4, r3
 800a4e8:	e7f3      	b.n	800a4d2 <__assert_func+0x12>
 800a4ea:	bf00      	nop
 800a4ec:	20000064 	.word	0x20000064
 800a4f0:	0800cf35 	.word	0x0800cf35
 800a4f4:	0800cf42 	.word	0x0800cf42
 800a4f8:	0800cf70 	.word	0x0800cf70

0800a4fc <_calloc_r>:
 800a4fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4fe:	fba1 2402 	umull	r2, r4, r1, r2
 800a502:	b94c      	cbnz	r4, 800a518 <_calloc_r+0x1c>
 800a504:	4611      	mov	r1, r2
 800a506:	9201      	str	r2, [sp, #4]
 800a508:	f7fd fe1c 	bl	8008144 <_malloc_r>
 800a50c:	9a01      	ldr	r2, [sp, #4]
 800a50e:	4605      	mov	r5, r0
 800a510:	b930      	cbnz	r0, 800a520 <_calloc_r+0x24>
 800a512:	4628      	mov	r0, r5
 800a514:	b003      	add	sp, #12
 800a516:	bd30      	pop	{r4, r5, pc}
 800a518:	220c      	movs	r2, #12
 800a51a:	6002      	str	r2, [r0, #0]
 800a51c:	2500      	movs	r5, #0
 800a51e:	e7f8      	b.n	800a512 <_calloc_r+0x16>
 800a520:	4621      	mov	r1, r4
 800a522:	f7fc fe90 	bl	8007246 <memset>
 800a526:	e7f4      	b.n	800a512 <_calloc_r+0x16>

0800a528 <rshift>:
 800a528:	6903      	ldr	r3, [r0, #16]
 800a52a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a52e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a532:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a536:	f100 0414 	add.w	r4, r0, #20
 800a53a:	dd45      	ble.n	800a5c8 <rshift+0xa0>
 800a53c:	f011 011f 	ands.w	r1, r1, #31
 800a540:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a544:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a548:	d10c      	bne.n	800a564 <rshift+0x3c>
 800a54a:	f100 0710 	add.w	r7, r0, #16
 800a54e:	4629      	mov	r1, r5
 800a550:	42b1      	cmp	r1, r6
 800a552:	d334      	bcc.n	800a5be <rshift+0x96>
 800a554:	1a9b      	subs	r3, r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	1eea      	subs	r2, r5, #3
 800a55a:	4296      	cmp	r6, r2
 800a55c:	bf38      	it	cc
 800a55e:	2300      	movcc	r3, #0
 800a560:	4423      	add	r3, r4
 800a562:	e015      	b.n	800a590 <rshift+0x68>
 800a564:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a568:	f1c1 0820 	rsb	r8, r1, #32
 800a56c:	40cf      	lsrs	r7, r1
 800a56e:	f105 0e04 	add.w	lr, r5, #4
 800a572:	46a1      	mov	r9, r4
 800a574:	4576      	cmp	r6, lr
 800a576:	46f4      	mov	ip, lr
 800a578:	d815      	bhi.n	800a5a6 <rshift+0x7e>
 800a57a:	1a9a      	subs	r2, r3, r2
 800a57c:	0092      	lsls	r2, r2, #2
 800a57e:	3a04      	subs	r2, #4
 800a580:	3501      	adds	r5, #1
 800a582:	42ae      	cmp	r6, r5
 800a584:	bf38      	it	cc
 800a586:	2200      	movcc	r2, #0
 800a588:	18a3      	adds	r3, r4, r2
 800a58a:	50a7      	str	r7, [r4, r2]
 800a58c:	b107      	cbz	r7, 800a590 <rshift+0x68>
 800a58e:	3304      	adds	r3, #4
 800a590:	1b1a      	subs	r2, r3, r4
 800a592:	42a3      	cmp	r3, r4
 800a594:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a598:	bf08      	it	eq
 800a59a:	2300      	moveq	r3, #0
 800a59c:	6102      	str	r2, [r0, #16]
 800a59e:	bf08      	it	eq
 800a5a0:	6143      	streq	r3, [r0, #20]
 800a5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5a6:	f8dc c000 	ldr.w	ip, [ip]
 800a5aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800a5ae:	ea4c 0707 	orr.w	r7, ip, r7
 800a5b2:	f849 7b04 	str.w	r7, [r9], #4
 800a5b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5ba:	40cf      	lsrs	r7, r1
 800a5bc:	e7da      	b.n	800a574 <rshift+0x4c>
 800a5be:	f851 cb04 	ldr.w	ip, [r1], #4
 800a5c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800a5c6:	e7c3      	b.n	800a550 <rshift+0x28>
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	e7e1      	b.n	800a590 <rshift+0x68>

0800a5cc <__hexdig_fun>:
 800a5cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5d0:	2b09      	cmp	r3, #9
 800a5d2:	d802      	bhi.n	800a5da <__hexdig_fun+0xe>
 800a5d4:	3820      	subs	r0, #32
 800a5d6:	b2c0      	uxtb	r0, r0
 800a5d8:	4770      	bx	lr
 800a5da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5de:	2b05      	cmp	r3, #5
 800a5e0:	d801      	bhi.n	800a5e6 <__hexdig_fun+0x1a>
 800a5e2:	3847      	subs	r0, #71	; 0x47
 800a5e4:	e7f7      	b.n	800a5d6 <__hexdig_fun+0xa>
 800a5e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5ea:	2b05      	cmp	r3, #5
 800a5ec:	d801      	bhi.n	800a5f2 <__hexdig_fun+0x26>
 800a5ee:	3827      	subs	r0, #39	; 0x27
 800a5f0:	e7f1      	b.n	800a5d6 <__hexdig_fun+0xa>
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <__gethex>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	4617      	mov	r7, r2
 800a5fe:	680a      	ldr	r2, [r1, #0]
 800a600:	b085      	sub	sp, #20
 800a602:	f102 0b02 	add.w	fp, r2, #2
 800a606:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a60a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a60e:	4681      	mov	r9, r0
 800a610:	468a      	mov	sl, r1
 800a612:	9302      	str	r3, [sp, #8]
 800a614:	32fe      	adds	r2, #254	; 0xfe
 800a616:	eb02 030b 	add.w	r3, r2, fp
 800a61a:	46d8      	mov	r8, fp
 800a61c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	2830      	cmp	r0, #48	; 0x30
 800a624:	d0f7      	beq.n	800a616 <__gethex+0x1e>
 800a626:	f7ff ffd1 	bl	800a5cc <__hexdig_fun>
 800a62a:	4604      	mov	r4, r0
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d138      	bne.n	800a6a2 <__gethex+0xaa>
 800a630:	49a7      	ldr	r1, [pc, #668]	; (800a8d0 <__gethex+0x2d8>)
 800a632:	2201      	movs	r2, #1
 800a634:	4640      	mov	r0, r8
 800a636:	f7ff ff08 	bl	800a44a <strncmp>
 800a63a:	4606      	mov	r6, r0
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d169      	bne.n	800a714 <__gethex+0x11c>
 800a640:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a644:	465d      	mov	r5, fp
 800a646:	f7ff ffc1 	bl	800a5cc <__hexdig_fun>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d064      	beq.n	800a718 <__gethex+0x120>
 800a64e:	465a      	mov	r2, fp
 800a650:	7810      	ldrb	r0, [r2, #0]
 800a652:	2830      	cmp	r0, #48	; 0x30
 800a654:	4690      	mov	r8, r2
 800a656:	f102 0201 	add.w	r2, r2, #1
 800a65a:	d0f9      	beq.n	800a650 <__gethex+0x58>
 800a65c:	f7ff ffb6 	bl	800a5cc <__hexdig_fun>
 800a660:	2301      	movs	r3, #1
 800a662:	fab0 f480 	clz	r4, r0
 800a666:	0964      	lsrs	r4, r4, #5
 800a668:	465e      	mov	r6, fp
 800a66a:	9301      	str	r3, [sp, #4]
 800a66c:	4642      	mov	r2, r8
 800a66e:	4615      	mov	r5, r2
 800a670:	3201      	adds	r2, #1
 800a672:	7828      	ldrb	r0, [r5, #0]
 800a674:	f7ff ffaa 	bl	800a5cc <__hexdig_fun>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d1f8      	bne.n	800a66e <__gethex+0x76>
 800a67c:	4994      	ldr	r1, [pc, #592]	; (800a8d0 <__gethex+0x2d8>)
 800a67e:	2201      	movs	r2, #1
 800a680:	4628      	mov	r0, r5
 800a682:	f7ff fee2 	bl	800a44a <strncmp>
 800a686:	b978      	cbnz	r0, 800a6a8 <__gethex+0xb0>
 800a688:	b946      	cbnz	r6, 800a69c <__gethex+0xa4>
 800a68a:	1c6e      	adds	r6, r5, #1
 800a68c:	4632      	mov	r2, r6
 800a68e:	4615      	mov	r5, r2
 800a690:	3201      	adds	r2, #1
 800a692:	7828      	ldrb	r0, [r5, #0]
 800a694:	f7ff ff9a 	bl	800a5cc <__hexdig_fun>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d1f8      	bne.n	800a68e <__gethex+0x96>
 800a69c:	1b73      	subs	r3, r6, r5
 800a69e:	009e      	lsls	r6, r3, #2
 800a6a0:	e004      	b.n	800a6ac <__gethex+0xb4>
 800a6a2:	2400      	movs	r4, #0
 800a6a4:	4626      	mov	r6, r4
 800a6a6:	e7e1      	b.n	800a66c <__gethex+0x74>
 800a6a8:	2e00      	cmp	r6, #0
 800a6aa:	d1f7      	bne.n	800a69c <__gethex+0xa4>
 800a6ac:	782b      	ldrb	r3, [r5, #0]
 800a6ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6b2:	2b50      	cmp	r3, #80	; 0x50
 800a6b4:	d13d      	bne.n	800a732 <__gethex+0x13a>
 800a6b6:	786b      	ldrb	r3, [r5, #1]
 800a6b8:	2b2b      	cmp	r3, #43	; 0x2b
 800a6ba:	d02f      	beq.n	800a71c <__gethex+0x124>
 800a6bc:	2b2d      	cmp	r3, #45	; 0x2d
 800a6be:	d031      	beq.n	800a724 <__gethex+0x12c>
 800a6c0:	1c69      	adds	r1, r5, #1
 800a6c2:	f04f 0b00 	mov.w	fp, #0
 800a6c6:	7808      	ldrb	r0, [r1, #0]
 800a6c8:	f7ff ff80 	bl	800a5cc <__hexdig_fun>
 800a6cc:	1e42      	subs	r2, r0, #1
 800a6ce:	b2d2      	uxtb	r2, r2
 800a6d0:	2a18      	cmp	r2, #24
 800a6d2:	d82e      	bhi.n	800a732 <__gethex+0x13a>
 800a6d4:	f1a0 0210 	sub.w	r2, r0, #16
 800a6d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6dc:	f7ff ff76 	bl	800a5cc <__hexdig_fun>
 800a6e0:	f100 3cff 	add.w	ip, r0, #4294967295
 800a6e4:	fa5f fc8c 	uxtb.w	ip, ip
 800a6e8:	f1bc 0f18 	cmp.w	ip, #24
 800a6ec:	d91d      	bls.n	800a72a <__gethex+0x132>
 800a6ee:	f1bb 0f00 	cmp.w	fp, #0
 800a6f2:	d000      	beq.n	800a6f6 <__gethex+0xfe>
 800a6f4:	4252      	negs	r2, r2
 800a6f6:	4416      	add	r6, r2
 800a6f8:	f8ca 1000 	str.w	r1, [sl]
 800a6fc:	b1dc      	cbz	r4, 800a736 <__gethex+0x13e>
 800a6fe:	9b01      	ldr	r3, [sp, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	bf14      	ite	ne
 800a704:	f04f 0800 	movne.w	r8, #0
 800a708:	f04f 0806 	moveq.w	r8, #6
 800a70c:	4640      	mov	r0, r8
 800a70e:	b005      	add	sp, #20
 800a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a714:	4645      	mov	r5, r8
 800a716:	4626      	mov	r6, r4
 800a718:	2401      	movs	r4, #1
 800a71a:	e7c7      	b.n	800a6ac <__gethex+0xb4>
 800a71c:	f04f 0b00 	mov.w	fp, #0
 800a720:	1ca9      	adds	r1, r5, #2
 800a722:	e7d0      	b.n	800a6c6 <__gethex+0xce>
 800a724:	f04f 0b01 	mov.w	fp, #1
 800a728:	e7fa      	b.n	800a720 <__gethex+0x128>
 800a72a:	230a      	movs	r3, #10
 800a72c:	fb03 0002 	mla	r0, r3, r2, r0
 800a730:	e7d0      	b.n	800a6d4 <__gethex+0xdc>
 800a732:	4629      	mov	r1, r5
 800a734:	e7e0      	b.n	800a6f8 <__gethex+0x100>
 800a736:	eba5 0308 	sub.w	r3, r5, r8
 800a73a:	3b01      	subs	r3, #1
 800a73c:	4621      	mov	r1, r4
 800a73e:	2b07      	cmp	r3, #7
 800a740:	dc0a      	bgt.n	800a758 <__gethex+0x160>
 800a742:	4648      	mov	r0, r9
 800a744:	f7fd fd8a 	bl	800825c <_Balloc>
 800a748:	4604      	mov	r4, r0
 800a74a:	b940      	cbnz	r0, 800a75e <__gethex+0x166>
 800a74c:	4b61      	ldr	r3, [pc, #388]	; (800a8d4 <__gethex+0x2dc>)
 800a74e:	4602      	mov	r2, r0
 800a750:	21e4      	movs	r1, #228	; 0xe4
 800a752:	4861      	ldr	r0, [pc, #388]	; (800a8d8 <__gethex+0x2e0>)
 800a754:	f7ff feb4 	bl	800a4c0 <__assert_func>
 800a758:	3101      	adds	r1, #1
 800a75a:	105b      	asrs	r3, r3, #1
 800a75c:	e7ef      	b.n	800a73e <__gethex+0x146>
 800a75e:	f100 0a14 	add.w	sl, r0, #20
 800a762:	2300      	movs	r3, #0
 800a764:	495a      	ldr	r1, [pc, #360]	; (800a8d0 <__gethex+0x2d8>)
 800a766:	f8cd a004 	str.w	sl, [sp, #4]
 800a76a:	469b      	mov	fp, r3
 800a76c:	45a8      	cmp	r8, r5
 800a76e:	d342      	bcc.n	800a7f6 <__gethex+0x1fe>
 800a770:	9801      	ldr	r0, [sp, #4]
 800a772:	f840 bb04 	str.w	fp, [r0], #4
 800a776:	eba0 000a 	sub.w	r0, r0, sl
 800a77a:	1080      	asrs	r0, r0, #2
 800a77c:	6120      	str	r0, [r4, #16]
 800a77e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a782:	4658      	mov	r0, fp
 800a784:	f7fd fe5c 	bl	8008440 <__hi0bits>
 800a788:	683d      	ldr	r5, [r7, #0]
 800a78a:	eba8 0000 	sub.w	r0, r8, r0
 800a78e:	42a8      	cmp	r0, r5
 800a790:	dd59      	ble.n	800a846 <__gethex+0x24e>
 800a792:	eba0 0805 	sub.w	r8, r0, r5
 800a796:	4641      	mov	r1, r8
 800a798:	4620      	mov	r0, r4
 800a79a:	f7fe f9eb 	bl	8008b74 <__any_on>
 800a79e:	4683      	mov	fp, r0
 800a7a0:	b1b8      	cbz	r0, 800a7d2 <__gethex+0x1da>
 800a7a2:	f108 33ff 	add.w	r3, r8, #4294967295
 800a7a6:	1159      	asrs	r1, r3, #5
 800a7a8:	f003 021f 	and.w	r2, r3, #31
 800a7ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a7b0:	f04f 0b01 	mov.w	fp, #1
 800a7b4:	fa0b f202 	lsl.w	r2, fp, r2
 800a7b8:	420a      	tst	r2, r1
 800a7ba:	d00a      	beq.n	800a7d2 <__gethex+0x1da>
 800a7bc:	455b      	cmp	r3, fp
 800a7be:	dd06      	ble.n	800a7ce <__gethex+0x1d6>
 800a7c0:	f1a8 0102 	sub.w	r1, r8, #2
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f7fe f9d5 	bl	8008b74 <__any_on>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d138      	bne.n	800a840 <__gethex+0x248>
 800a7ce:	f04f 0b02 	mov.w	fp, #2
 800a7d2:	4641      	mov	r1, r8
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7ff fea7 	bl	800a528 <rshift>
 800a7da:	4446      	add	r6, r8
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	42b3      	cmp	r3, r6
 800a7e0:	da41      	bge.n	800a866 <__gethex+0x26e>
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	4648      	mov	r0, r9
 800a7e6:	f7fd fd79 	bl	80082dc <_Bfree>
 800a7ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a7f4:	e78a      	b.n	800a70c <__gethex+0x114>
 800a7f6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a7fa:	2a2e      	cmp	r2, #46	; 0x2e
 800a7fc:	d014      	beq.n	800a828 <__gethex+0x230>
 800a7fe:	2b20      	cmp	r3, #32
 800a800:	d106      	bne.n	800a810 <__gethex+0x218>
 800a802:	9b01      	ldr	r3, [sp, #4]
 800a804:	f843 bb04 	str.w	fp, [r3], #4
 800a808:	f04f 0b00 	mov.w	fp, #0
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	465b      	mov	r3, fp
 800a810:	7828      	ldrb	r0, [r5, #0]
 800a812:	9303      	str	r3, [sp, #12]
 800a814:	f7ff feda 	bl	800a5cc <__hexdig_fun>
 800a818:	9b03      	ldr	r3, [sp, #12]
 800a81a:	f000 000f 	and.w	r0, r0, #15
 800a81e:	4098      	lsls	r0, r3
 800a820:	ea4b 0b00 	orr.w	fp, fp, r0
 800a824:	3304      	adds	r3, #4
 800a826:	e7a1      	b.n	800a76c <__gethex+0x174>
 800a828:	45a8      	cmp	r8, r5
 800a82a:	d8e8      	bhi.n	800a7fe <__gethex+0x206>
 800a82c:	2201      	movs	r2, #1
 800a82e:	4628      	mov	r0, r5
 800a830:	9303      	str	r3, [sp, #12]
 800a832:	f7ff fe0a 	bl	800a44a <strncmp>
 800a836:	4926      	ldr	r1, [pc, #152]	; (800a8d0 <__gethex+0x2d8>)
 800a838:	9b03      	ldr	r3, [sp, #12]
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d1df      	bne.n	800a7fe <__gethex+0x206>
 800a83e:	e795      	b.n	800a76c <__gethex+0x174>
 800a840:	f04f 0b03 	mov.w	fp, #3
 800a844:	e7c5      	b.n	800a7d2 <__gethex+0x1da>
 800a846:	da0b      	bge.n	800a860 <__gethex+0x268>
 800a848:	eba5 0800 	sub.w	r8, r5, r0
 800a84c:	4621      	mov	r1, r4
 800a84e:	4642      	mov	r2, r8
 800a850:	4648      	mov	r0, r9
 800a852:	f7fd ff5d 	bl	8008710 <__lshift>
 800a856:	eba6 0608 	sub.w	r6, r6, r8
 800a85a:	4604      	mov	r4, r0
 800a85c:	f100 0a14 	add.w	sl, r0, #20
 800a860:	f04f 0b00 	mov.w	fp, #0
 800a864:	e7ba      	b.n	800a7dc <__gethex+0x1e4>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	42b3      	cmp	r3, r6
 800a86a:	dd73      	ble.n	800a954 <__gethex+0x35c>
 800a86c:	1b9e      	subs	r6, r3, r6
 800a86e:	42b5      	cmp	r5, r6
 800a870:	dc34      	bgt.n	800a8dc <__gethex+0x2e4>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2b02      	cmp	r3, #2
 800a876:	d023      	beq.n	800a8c0 <__gethex+0x2c8>
 800a878:	2b03      	cmp	r3, #3
 800a87a:	d025      	beq.n	800a8c8 <__gethex+0x2d0>
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d115      	bne.n	800a8ac <__gethex+0x2b4>
 800a880:	42b5      	cmp	r5, r6
 800a882:	d113      	bne.n	800a8ac <__gethex+0x2b4>
 800a884:	2d01      	cmp	r5, #1
 800a886:	d10b      	bne.n	800a8a0 <__gethex+0x2a8>
 800a888:	9a02      	ldr	r2, [sp, #8]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	2301      	movs	r3, #1
 800a890:	6123      	str	r3, [r4, #16]
 800a892:	f8ca 3000 	str.w	r3, [sl]
 800a896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a898:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a89c:	601c      	str	r4, [r3, #0]
 800a89e:	e735      	b.n	800a70c <__gethex+0x114>
 800a8a0:	1e69      	subs	r1, r5, #1
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f7fe f966 	bl	8008b74 <__any_on>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d1ed      	bne.n	800a888 <__gethex+0x290>
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4648      	mov	r0, r9
 800a8b0:	f7fd fd14 	bl	80082dc <_Bfree>
 800a8b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	6013      	str	r3, [r2, #0]
 800a8ba:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a8be:	e725      	b.n	800a70c <__gethex+0x114>
 800a8c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1f2      	bne.n	800a8ac <__gethex+0x2b4>
 800a8c6:	e7df      	b.n	800a888 <__gethex+0x290>
 800a8c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1dc      	bne.n	800a888 <__gethex+0x290>
 800a8ce:	e7ed      	b.n	800a8ac <__gethex+0x2b4>
 800a8d0:	0800cdac 	.word	0x0800cdac
 800a8d4:	0800cc3f 	.word	0x0800cc3f
 800a8d8:	0800cf71 	.word	0x0800cf71
 800a8dc:	f106 38ff 	add.w	r8, r6, #4294967295
 800a8e0:	f1bb 0f00 	cmp.w	fp, #0
 800a8e4:	d133      	bne.n	800a94e <__gethex+0x356>
 800a8e6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ea:	d004      	beq.n	800a8f6 <__gethex+0x2fe>
 800a8ec:	4641      	mov	r1, r8
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f7fe f940 	bl	8008b74 <__any_on>
 800a8f4:	4683      	mov	fp, r0
 800a8f6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a900:	f008 081f 	and.w	r8, r8, #31
 800a904:	fa03 f308 	lsl.w	r3, r3, r8
 800a908:	4213      	tst	r3, r2
 800a90a:	4631      	mov	r1, r6
 800a90c:	4620      	mov	r0, r4
 800a90e:	bf18      	it	ne
 800a910:	f04b 0b02 	orrne.w	fp, fp, #2
 800a914:	1bad      	subs	r5, r5, r6
 800a916:	f7ff fe07 	bl	800a528 <rshift>
 800a91a:	687e      	ldr	r6, [r7, #4]
 800a91c:	f04f 0802 	mov.w	r8, #2
 800a920:	f1bb 0f00 	cmp.w	fp, #0
 800a924:	d04a      	beq.n	800a9bc <__gethex+0x3c4>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d016      	beq.n	800a95a <__gethex+0x362>
 800a92c:	2b03      	cmp	r3, #3
 800a92e:	d018      	beq.n	800a962 <__gethex+0x36a>
 800a930:	2b01      	cmp	r3, #1
 800a932:	d109      	bne.n	800a948 <__gethex+0x350>
 800a934:	f01b 0f02 	tst.w	fp, #2
 800a938:	d006      	beq.n	800a948 <__gethex+0x350>
 800a93a:	f8da 3000 	ldr.w	r3, [sl]
 800a93e:	ea4b 0b03 	orr.w	fp, fp, r3
 800a942:	f01b 0f01 	tst.w	fp, #1
 800a946:	d10f      	bne.n	800a968 <__gethex+0x370>
 800a948:	f048 0810 	orr.w	r8, r8, #16
 800a94c:	e036      	b.n	800a9bc <__gethex+0x3c4>
 800a94e:	f04f 0b01 	mov.w	fp, #1
 800a952:	e7d0      	b.n	800a8f6 <__gethex+0x2fe>
 800a954:	f04f 0801 	mov.w	r8, #1
 800a958:	e7e2      	b.n	800a920 <__gethex+0x328>
 800a95a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a95c:	f1c3 0301 	rsb	r3, r3, #1
 800a960:	930f      	str	r3, [sp, #60]	; 0x3c
 800a962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0ef      	beq.n	800a948 <__gethex+0x350>
 800a968:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a96c:	f104 0214 	add.w	r2, r4, #20
 800a970:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a97a:	2300      	movs	r3, #0
 800a97c:	4694      	mov	ip, r2
 800a97e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a982:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a986:	d01e      	beq.n	800a9c6 <__gethex+0x3ce>
 800a988:	3101      	adds	r1, #1
 800a98a:	f8cc 1000 	str.w	r1, [ip]
 800a98e:	f1b8 0f02 	cmp.w	r8, #2
 800a992:	f104 0214 	add.w	r2, r4, #20
 800a996:	d13d      	bne.n	800aa14 <__gethex+0x41c>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	42ab      	cmp	r3, r5
 800a99e:	d10b      	bne.n	800a9b8 <__gethex+0x3c0>
 800a9a0:	1169      	asrs	r1, r5, #5
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	f005 051f 	and.w	r5, r5, #31
 800a9a8:	fa03 f505 	lsl.w	r5, r3, r5
 800a9ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9b0:	421d      	tst	r5, r3
 800a9b2:	bf18      	it	ne
 800a9b4:	f04f 0801 	movne.w	r8, #1
 800a9b8:	f048 0820 	orr.w	r8, r8, #32
 800a9bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9be:	601c      	str	r4, [r3, #0]
 800a9c0:	9b02      	ldr	r3, [sp, #8]
 800a9c2:	601e      	str	r6, [r3, #0]
 800a9c4:	e6a2      	b.n	800a70c <__gethex+0x114>
 800a9c6:	4290      	cmp	r0, r2
 800a9c8:	f842 3c04 	str.w	r3, [r2, #-4]
 800a9cc:	d8d6      	bhi.n	800a97c <__gethex+0x384>
 800a9ce:	68a2      	ldr	r2, [r4, #8]
 800a9d0:	4593      	cmp	fp, r2
 800a9d2:	db17      	blt.n	800aa04 <__gethex+0x40c>
 800a9d4:	6861      	ldr	r1, [r4, #4]
 800a9d6:	4648      	mov	r0, r9
 800a9d8:	3101      	adds	r1, #1
 800a9da:	f7fd fc3f 	bl	800825c <_Balloc>
 800a9de:	4682      	mov	sl, r0
 800a9e0:	b918      	cbnz	r0, 800a9ea <__gethex+0x3f2>
 800a9e2:	4b1b      	ldr	r3, [pc, #108]	; (800aa50 <__gethex+0x458>)
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	2184      	movs	r1, #132	; 0x84
 800a9e8:	e6b3      	b.n	800a752 <__gethex+0x15a>
 800a9ea:	6922      	ldr	r2, [r4, #16]
 800a9ec:	3202      	adds	r2, #2
 800a9ee:	f104 010c 	add.w	r1, r4, #12
 800a9f2:	0092      	lsls	r2, r2, #2
 800a9f4:	300c      	adds	r0, #12
 800a9f6:	f7ff fd4b 	bl	800a490 <memcpy>
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	4648      	mov	r0, r9
 800a9fe:	f7fd fc6d 	bl	80082dc <_Bfree>
 800aa02:	4654      	mov	r4, sl
 800aa04:	6922      	ldr	r2, [r4, #16]
 800aa06:	1c51      	adds	r1, r2, #1
 800aa08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aa0c:	6121      	str	r1, [r4, #16]
 800aa0e:	2101      	movs	r1, #1
 800aa10:	6151      	str	r1, [r2, #20]
 800aa12:	e7bc      	b.n	800a98e <__gethex+0x396>
 800aa14:	6921      	ldr	r1, [r4, #16]
 800aa16:	4559      	cmp	r1, fp
 800aa18:	dd0b      	ble.n	800aa32 <__gethex+0x43a>
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7ff fd83 	bl	800a528 <rshift>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	3601      	adds	r6, #1
 800aa26:	42b3      	cmp	r3, r6
 800aa28:	f6ff aedb 	blt.w	800a7e2 <__gethex+0x1ea>
 800aa2c:	f04f 0801 	mov.w	r8, #1
 800aa30:	e7c2      	b.n	800a9b8 <__gethex+0x3c0>
 800aa32:	f015 051f 	ands.w	r5, r5, #31
 800aa36:	d0f9      	beq.n	800aa2c <__gethex+0x434>
 800aa38:	9b01      	ldr	r3, [sp, #4]
 800aa3a:	441a      	add	r2, r3
 800aa3c:	f1c5 0520 	rsb	r5, r5, #32
 800aa40:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800aa44:	f7fd fcfc 	bl	8008440 <__hi0bits>
 800aa48:	42a8      	cmp	r0, r5
 800aa4a:	dbe6      	blt.n	800aa1a <__gethex+0x422>
 800aa4c:	e7ee      	b.n	800aa2c <__gethex+0x434>
 800aa4e:	bf00      	nop
 800aa50:	0800cc3f 	.word	0x0800cc3f

0800aa54 <L_shift>:
 800aa54:	f1c2 0208 	rsb	r2, r2, #8
 800aa58:	0092      	lsls	r2, r2, #2
 800aa5a:	b570      	push	{r4, r5, r6, lr}
 800aa5c:	f1c2 0620 	rsb	r6, r2, #32
 800aa60:	6843      	ldr	r3, [r0, #4]
 800aa62:	6804      	ldr	r4, [r0, #0]
 800aa64:	fa03 f506 	lsl.w	r5, r3, r6
 800aa68:	432c      	orrs	r4, r5
 800aa6a:	40d3      	lsrs	r3, r2
 800aa6c:	6004      	str	r4, [r0, #0]
 800aa6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa72:	4288      	cmp	r0, r1
 800aa74:	d3f4      	bcc.n	800aa60 <L_shift+0xc>
 800aa76:	bd70      	pop	{r4, r5, r6, pc}

0800aa78 <__match>:
 800aa78:	b530      	push	{r4, r5, lr}
 800aa7a:	6803      	ldr	r3, [r0, #0]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa82:	b914      	cbnz	r4, 800aa8a <__match+0x12>
 800aa84:	6003      	str	r3, [r0, #0]
 800aa86:	2001      	movs	r0, #1
 800aa88:	bd30      	pop	{r4, r5, pc}
 800aa8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa92:	2d19      	cmp	r5, #25
 800aa94:	bf98      	it	ls
 800aa96:	3220      	addls	r2, #32
 800aa98:	42a2      	cmp	r2, r4
 800aa9a:	d0f0      	beq.n	800aa7e <__match+0x6>
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e7f3      	b.n	800aa88 <__match+0x10>

0800aaa0 <__hexnan>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	680b      	ldr	r3, [r1, #0]
 800aaa6:	6801      	ldr	r1, [r0, #0]
 800aaa8:	115e      	asrs	r6, r3, #5
 800aaaa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aaae:	f013 031f 	ands.w	r3, r3, #31
 800aab2:	b087      	sub	sp, #28
 800aab4:	bf18      	it	ne
 800aab6:	3604      	addne	r6, #4
 800aab8:	2500      	movs	r5, #0
 800aaba:	1f37      	subs	r7, r6, #4
 800aabc:	4682      	mov	sl, r0
 800aabe:	4690      	mov	r8, r2
 800aac0:	9301      	str	r3, [sp, #4]
 800aac2:	f846 5c04 	str.w	r5, [r6, #-4]
 800aac6:	46b9      	mov	r9, r7
 800aac8:	463c      	mov	r4, r7
 800aaca:	9502      	str	r5, [sp, #8]
 800aacc:	46ab      	mov	fp, r5
 800aace:	784a      	ldrb	r2, [r1, #1]
 800aad0:	1c4b      	adds	r3, r1, #1
 800aad2:	9303      	str	r3, [sp, #12]
 800aad4:	b342      	cbz	r2, 800ab28 <__hexnan+0x88>
 800aad6:	4610      	mov	r0, r2
 800aad8:	9105      	str	r1, [sp, #20]
 800aada:	9204      	str	r2, [sp, #16]
 800aadc:	f7ff fd76 	bl	800a5cc <__hexdig_fun>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d14f      	bne.n	800ab84 <__hexnan+0xe4>
 800aae4:	9a04      	ldr	r2, [sp, #16]
 800aae6:	9905      	ldr	r1, [sp, #20]
 800aae8:	2a20      	cmp	r2, #32
 800aaea:	d818      	bhi.n	800ab1e <__hexnan+0x7e>
 800aaec:	9b02      	ldr	r3, [sp, #8]
 800aaee:	459b      	cmp	fp, r3
 800aaf0:	dd13      	ble.n	800ab1a <__hexnan+0x7a>
 800aaf2:	454c      	cmp	r4, r9
 800aaf4:	d206      	bcs.n	800ab04 <__hexnan+0x64>
 800aaf6:	2d07      	cmp	r5, #7
 800aaf8:	dc04      	bgt.n	800ab04 <__hexnan+0x64>
 800aafa:	462a      	mov	r2, r5
 800aafc:	4649      	mov	r1, r9
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7ff ffa8 	bl	800aa54 <L_shift>
 800ab04:	4544      	cmp	r4, r8
 800ab06:	d950      	bls.n	800abaa <__hexnan+0x10a>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f1a4 0904 	sub.w	r9, r4, #4
 800ab0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab12:	f8cd b008 	str.w	fp, [sp, #8]
 800ab16:	464c      	mov	r4, r9
 800ab18:	461d      	mov	r5, r3
 800ab1a:	9903      	ldr	r1, [sp, #12]
 800ab1c:	e7d7      	b.n	800aace <__hexnan+0x2e>
 800ab1e:	2a29      	cmp	r2, #41	; 0x29
 800ab20:	d155      	bne.n	800abce <__hexnan+0x12e>
 800ab22:	3102      	adds	r1, #2
 800ab24:	f8ca 1000 	str.w	r1, [sl]
 800ab28:	f1bb 0f00 	cmp.w	fp, #0
 800ab2c:	d04f      	beq.n	800abce <__hexnan+0x12e>
 800ab2e:	454c      	cmp	r4, r9
 800ab30:	d206      	bcs.n	800ab40 <__hexnan+0xa0>
 800ab32:	2d07      	cmp	r5, #7
 800ab34:	dc04      	bgt.n	800ab40 <__hexnan+0xa0>
 800ab36:	462a      	mov	r2, r5
 800ab38:	4649      	mov	r1, r9
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff ff8a 	bl	800aa54 <L_shift>
 800ab40:	4544      	cmp	r4, r8
 800ab42:	d934      	bls.n	800abae <__hexnan+0x10e>
 800ab44:	f1a8 0204 	sub.w	r2, r8, #4
 800ab48:	4623      	mov	r3, r4
 800ab4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab4e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab52:	429f      	cmp	r7, r3
 800ab54:	d2f9      	bcs.n	800ab4a <__hexnan+0xaa>
 800ab56:	1b3b      	subs	r3, r7, r4
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	3e03      	subs	r6, #3
 800ab60:	3401      	adds	r4, #1
 800ab62:	42a6      	cmp	r6, r4
 800ab64:	bf38      	it	cc
 800ab66:	2304      	movcc	r3, #4
 800ab68:	4443      	add	r3, r8
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f843 2b04 	str.w	r2, [r3], #4
 800ab70:	429f      	cmp	r7, r3
 800ab72:	d2fb      	bcs.n	800ab6c <__hexnan+0xcc>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	b91b      	cbnz	r3, 800ab80 <__hexnan+0xe0>
 800ab78:	4547      	cmp	r7, r8
 800ab7a:	d126      	bne.n	800abca <__hexnan+0x12a>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	603b      	str	r3, [r7, #0]
 800ab80:	2005      	movs	r0, #5
 800ab82:	e025      	b.n	800abd0 <__hexnan+0x130>
 800ab84:	3501      	adds	r5, #1
 800ab86:	2d08      	cmp	r5, #8
 800ab88:	f10b 0b01 	add.w	fp, fp, #1
 800ab8c:	dd06      	ble.n	800ab9c <__hexnan+0xfc>
 800ab8e:	4544      	cmp	r4, r8
 800ab90:	d9c3      	bls.n	800ab1a <__hexnan+0x7a>
 800ab92:	2300      	movs	r3, #0
 800ab94:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab98:	2501      	movs	r5, #1
 800ab9a:	3c04      	subs	r4, #4
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	f000 000f 	and.w	r0, r0, #15
 800aba2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aba6:	6020      	str	r0, [r4, #0]
 800aba8:	e7b7      	b.n	800ab1a <__hexnan+0x7a>
 800abaa:	2508      	movs	r5, #8
 800abac:	e7b5      	b.n	800ab1a <__hexnan+0x7a>
 800abae:	9b01      	ldr	r3, [sp, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d0df      	beq.n	800ab74 <__hexnan+0xd4>
 800abb4:	f1c3 0320 	rsb	r3, r3, #32
 800abb8:	f04f 32ff 	mov.w	r2, #4294967295
 800abbc:	40da      	lsrs	r2, r3
 800abbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800abc2:	4013      	ands	r3, r2
 800abc4:	f846 3c04 	str.w	r3, [r6, #-4]
 800abc8:	e7d4      	b.n	800ab74 <__hexnan+0xd4>
 800abca:	3f04      	subs	r7, #4
 800abcc:	e7d2      	b.n	800ab74 <__hexnan+0xd4>
 800abce:	2004      	movs	r0, #4
 800abd0:	b007      	add	sp, #28
 800abd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abd6 <__ascii_mbtowc>:
 800abd6:	b082      	sub	sp, #8
 800abd8:	b901      	cbnz	r1, 800abdc <__ascii_mbtowc+0x6>
 800abda:	a901      	add	r1, sp, #4
 800abdc:	b142      	cbz	r2, 800abf0 <__ascii_mbtowc+0x1a>
 800abde:	b14b      	cbz	r3, 800abf4 <__ascii_mbtowc+0x1e>
 800abe0:	7813      	ldrb	r3, [r2, #0]
 800abe2:	600b      	str	r3, [r1, #0]
 800abe4:	7812      	ldrb	r2, [r2, #0]
 800abe6:	1e10      	subs	r0, r2, #0
 800abe8:	bf18      	it	ne
 800abea:	2001      	movne	r0, #1
 800abec:	b002      	add	sp, #8
 800abee:	4770      	bx	lr
 800abf0:	4610      	mov	r0, r2
 800abf2:	e7fb      	b.n	800abec <__ascii_mbtowc+0x16>
 800abf4:	f06f 0001 	mvn.w	r0, #1
 800abf8:	e7f8      	b.n	800abec <__ascii_mbtowc+0x16>

0800abfa <_realloc_r>:
 800abfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abfe:	4680      	mov	r8, r0
 800ac00:	4614      	mov	r4, r2
 800ac02:	460e      	mov	r6, r1
 800ac04:	b921      	cbnz	r1, 800ac10 <_realloc_r+0x16>
 800ac06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	f7fd ba9a 	b.w	8008144 <_malloc_r>
 800ac10:	b92a      	cbnz	r2, 800ac1e <_realloc_r+0x24>
 800ac12:	f7fd fa23 	bl	800805c <_free_r>
 800ac16:	4625      	mov	r5, r4
 800ac18:	4628      	mov	r0, r5
 800ac1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac1e:	f000 f8b6 	bl	800ad8e <_malloc_usable_size_r>
 800ac22:	4284      	cmp	r4, r0
 800ac24:	4607      	mov	r7, r0
 800ac26:	d802      	bhi.n	800ac2e <_realloc_r+0x34>
 800ac28:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac2c:	d812      	bhi.n	800ac54 <_realloc_r+0x5a>
 800ac2e:	4621      	mov	r1, r4
 800ac30:	4640      	mov	r0, r8
 800ac32:	f7fd fa87 	bl	8008144 <_malloc_r>
 800ac36:	4605      	mov	r5, r0
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d0ed      	beq.n	800ac18 <_realloc_r+0x1e>
 800ac3c:	42bc      	cmp	r4, r7
 800ac3e:	4622      	mov	r2, r4
 800ac40:	4631      	mov	r1, r6
 800ac42:	bf28      	it	cs
 800ac44:	463a      	movcs	r2, r7
 800ac46:	f7ff fc23 	bl	800a490 <memcpy>
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4640      	mov	r0, r8
 800ac4e:	f7fd fa05 	bl	800805c <_free_r>
 800ac52:	e7e1      	b.n	800ac18 <_realloc_r+0x1e>
 800ac54:	4635      	mov	r5, r6
 800ac56:	e7df      	b.n	800ac18 <_realloc_r+0x1e>

0800ac58 <_strtoul_l.constprop.0>:
 800ac58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac5c:	4f36      	ldr	r7, [pc, #216]	; (800ad38 <_strtoul_l.constprop.0+0xe0>)
 800ac5e:	4686      	mov	lr, r0
 800ac60:	460d      	mov	r5, r1
 800ac62:	4628      	mov	r0, r5
 800ac64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac68:	5d3e      	ldrb	r6, [r7, r4]
 800ac6a:	f016 0608 	ands.w	r6, r6, #8
 800ac6e:	d1f8      	bne.n	800ac62 <_strtoul_l.constprop.0+0xa>
 800ac70:	2c2d      	cmp	r4, #45	; 0x2d
 800ac72:	d130      	bne.n	800acd6 <_strtoul_l.constprop.0+0x7e>
 800ac74:	782c      	ldrb	r4, [r5, #0]
 800ac76:	2601      	movs	r6, #1
 800ac78:	1c85      	adds	r5, r0, #2
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d057      	beq.n	800ad2e <_strtoul_l.constprop.0+0xd6>
 800ac7e:	2b10      	cmp	r3, #16
 800ac80:	d109      	bne.n	800ac96 <_strtoul_l.constprop.0+0x3e>
 800ac82:	2c30      	cmp	r4, #48	; 0x30
 800ac84:	d107      	bne.n	800ac96 <_strtoul_l.constprop.0+0x3e>
 800ac86:	7828      	ldrb	r0, [r5, #0]
 800ac88:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ac8c:	2858      	cmp	r0, #88	; 0x58
 800ac8e:	d149      	bne.n	800ad24 <_strtoul_l.constprop.0+0xcc>
 800ac90:	786c      	ldrb	r4, [r5, #1]
 800ac92:	2310      	movs	r3, #16
 800ac94:	3502      	adds	r5, #2
 800ac96:	f04f 38ff 	mov.w	r8, #4294967295
 800ac9a:	2700      	movs	r7, #0
 800ac9c:	fbb8 f8f3 	udiv	r8, r8, r3
 800aca0:	fb03 f908 	mul.w	r9, r3, r8
 800aca4:	ea6f 0909 	mvn.w	r9, r9
 800aca8:	4638      	mov	r0, r7
 800acaa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800acae:	f1bc 0f09 	cmp.w	ip, #9
 800acb2:	d815      	bhi.n	800ace0 <_strtoul_l.constprop.0+0x88>
 800acb4:	4664      	mov	r4, ip
 800acb6:	42a3      	cmp	r3, r4
 800acb8:	dd23      	ble.n	800ad02 <_strtoul_l.constprop.0+0xaa>
 800acba:	f1b7 3fff 	cmp.w	r7, #4294967295
 800acbe:	d007      	beq.n	800acd0 <_strtoul_l.constprop.0+0x78>
 800acc0:	4580      	cmp	r8, r0
 800acc2:	d31b      	bcc.n	800acfc <_strtoul_l.constprop.0+0xa4>
 800acc4:	d101      	bne.n	800acca <_strtoul_l.constprop.0+0x72>
 800acc6:	45a1      	cmp	r9, r4
 800acc8:	db18      	blt.n	800acfc <_strtoul_l.constprop.0+0xa4>
 800acca:	fb00 4003 	mla	r0, r0, r3, r4
 800acce:	2701      	movs	r7, #1
 800acd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acd4:	e7e9      	b.n	800acaa <_strtoul_l.constprop.0+0x52>
 800acd6:	2c2b      	cmp	r4, #43	; 0x2b
 800acd8:	bf04      	itt	eq
 800acda:	782c      	ldrbeq	r4, [r5, #0]
 800acdc:	1c85      	addeq	r5, r0, #2
 800acde:	e7cc      	b.n	800ac7a <_strtoul_l.constprop.0+0x22>
 800ace0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ace4:	f1bc 0f19 	cmp.w	ip, #25
 800ace8:	d801      	bhi.n	800acee <_strtoul_l.constprop.0+0x96>
 800acea:	3c37      	subs	r4, #55	; 0x37
 800acec:	e7e3      	b.n	800acb6 <_strtoul_l.constprop.0+0x5e>
 800acee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800acf2:	f1bc 0f19 	cmp.w	ip, #25
 800acf6:	d804      	bhi.n	800ad02 <_strtoul_l.constprop.0+0xaa>
 800acf8:	3c57      	subs	r4, #87	; 0x57
 800acfa:	e7dc      	b.n	800acb6 <_strtoul_l.constprop.0+0x5e>
 800acfc:	f04f 37ff 	mov.w	r7, #4294967295
 800ad00:	e7e6      	b.n	800acd0 <_strtoul_l.constprop.0+0x78>
 800ad02:	1c7b      	adds	r3, r7, #1
 800ad04:	d106      	bne.n	800ad14 <_strtoul_l.constprop.0+0xbc>
 800ad06:	2322      	movs	r3, #34	; 0x22
 800ad08:	f8ce 3000 	str.w	r3, [lr]
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	b932      	cbnz	r2, 800ad1e <_strtoul_l.constprop.0+0xc6>
 800ad10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad14:	b106      	cbz	r6, 800ad18 <_strtoul_l.constprop.0+0xc0>
 800ad16:	4240      	negs	r0, r0
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	d0f9      	beq.n	800ad10 <_strtoul_l.constprop.0+0xb8>
 800ad1c:	b107      	cbz	r7, 800ad20 <_strtoul_l.constprop.0+0xc8>
 800ad1e:	1e69      	subs	r1, r5, #1
 800ad20:	6011      	str	r1, [r2, #0]
 800ad22:	e7f5      	b.n	800ad10 <_strtoul_l.constprop.0+0xb8>
 800ad24:	2430      	movs	r4, #48	; 0x30
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1b5      	bne.n	800ac96 <_strtoul_l.constprop.0+0x3e>
 800ad2a:	2308      	movs	r3, #8
 800ad2c:	e7b3      	b.n	800ac96 <_strtoul_l.constprop.0+0x3e>
 800ad2e:	2c30      	cmp	r4, #48	; 0x30
 800ad30:	d0a9      	beq.n	800ac86 <_strtoul_l.constprop.0+0x2e>
 800ad32:	230a      	movs	r3, #10
 800ad34:	e7af      	b.n	800ac96 <_strtoul_l.constprop.0+0x3e>
 800ad36:	bf00      	nop
 800ad38:	0800ce01 	.word	0x0800ce01

0800ad3c <_strtoul_r>:
 800ad3c:	f7ff bf8c 	b.w	800ac58 <_strtoul_l.constprop.0>

0800ad40 <__ascii_wctomb>:
 800ad40:	b149      	cbz	r1, 800ad56 <__ascii_wctomb+0x16>
 800ad42:	2aff      	cmp	r2, #255	; 0xff
 800ad44:	bf85      	ittet	hi
 800ad46:	238a      	movhi	r3, #138	; 0x8a
 800ad48:	6003      	strhi	r3, [r0, #0]
 800ad4a:	700a      	strbls	r2, [r1, #0]
 800ad4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad50:	bf98      	it	ls
 800ad52:	2001      	movls	r0, #1
 800ad54:	4770      	bx	lr
 800ad56:	4608      	mov	r0, r1
 800ad58:	4770      	bx	lr
	...

0800ad5c <fiprintf>:
 800ad5c:	b40e      	push	{r1, r2, r3}
 800ad5e:	b503      	push	{r0, r1, lr}
 800ad60:	4601      	mov	r1, r0
 800ad62:	ab03      	add	r3, sp, #12
 800ad64:	4805      	ldr	r0, [pc, #20]	; (800ad7c <fiprintf+0x20>)
 800ad66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6a:	6800      	ldr	r0, [r0, #0]
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	f000 f83f 	bl	800adf0 <_vfiprintf_r>
 800ad72:	b002      	add	sp, #8
 800ad74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad78:	b003      	add	sp, #12
 800ad7a:	4770      	bx	lr
 800ad7c:	20000064 	.word	0x20000064

0800ad80 <abort>:
 800ad80:	b508      	push	{r3, lr}
 800ad82:	2006      	movs	r0, #6
 800ad84:	f000 fa0c 	bl	800b1a0 <raise>
 800ad88:	2001      	movs	r0, #1
 800ad8a:	f7f7 fc11 	bl	80025b0 <_exit>

0800ad8e <_malloc_usable_size_r>:
 800ad8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad92:	1f18      	subs	r0, r3, #4
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	bfbc      	itt	lt
 800ad98:	580b      	ldrlt	r3, [r1, r0]
 800ad9a:	18c0      	addlt	r0, r0, r3
 800ad9c:	4770      	bx	lr

0800ad9e <__sfputc_r>:
 800ad9e:	6893      	ldr	r3, [r2, #8]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	b410      	push	{r4}
 800ada6:	6093      	str	r3, [r2, #8]
 800ada8:	da08      	bge.n	800adbc <__sfputc_r+0x1e>
 800adaa:	6994      	ldr	r4, [r2, #24]
 800adac:	42a3      	cmp	r3, r4
 800adae:	db01      	blt.n	800adb4 <__sfputc_r+0x16>
 800adb0:	290a      	cmp	r1, #10
 800adb2:	d103      	bne.n	800adbc <__sfputc_r+0x1e>
 800adb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adb8:	f000 b934 	b.w	800b024 <__swbuf_r>
 800adbc:	6813      	ldr	r3, [r2, #0]
 800adbe:	1c58      	adds	r0, r3, #1
 800adc0:	6010      	str	r0, [r2, #0]
 800adc2:	7019      	strb	r1, [r3, #0]
 800adc4:	4608      	mov	r0, r1
 800adc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <__sfputs_r>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	4606      	mov	r6, r0
 800add0:	460f      	mov	r7, r1
 800add2:	4614      	mov	r4, r2
 800add4:	18d5      	adds	r5, r2, r3
 800add6:	42ac      	cmp	r4, r5
 800add8:	d101      	bne.n	800adde <__sfputs_r+0x12>
 800adda:	2000      	movs	r0, #0
 800addc:	e007      	b.n	800adee <__sfputs_r+0x22>
 800adde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade2:	463a      	mov	r2, r7
 800ade4:	4630      	mov	r0, r6
 800ade6:	f7ff ffda 	bl	800ad9e <__sfputc_r>
 800adea:	1c43      	adds	r3, r0, #1
 800adec:	d1f3      	bne.n	800add6 <__sfputs_r+0xa>
 800adee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adf0 <_vfiprintf_r>:
 800adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	460d      	mov	r5, r1
 800adf6:	b09d      	sub	sp, #116	; 0x74
 800adf8:	4614      	mov	r4, r2
 800adfa:	4698      	mov	r8, r3
 800adfc:	4606      	mov	r6, r0
 800adfe:	b118      	cbz	r0, 800ae08 <_vfiprintf_r+0x18>
 800ae00:	6a03      	ldr	r3, [r0, #32]
 800ae02:	b90b      	cbnz	r3, 800ae08 <_vfiprintf_r+0x18>
 800ae04:	f7fc f958 	bl	80070b8 <__sinit>
 800ae08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae0a:	07d9      	lsls	r1, r3, #31
 800ae0c:	d405      	bmi.n	800ae1a <_vfiprintf_r+0x2a>
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	059a      	lsls	r2, r3, #22
 800ae12:	d402      	bmi.n	800ae1a <_vfiprintf_r+0x2a>
 800ae14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae16:	f7fc fa94 	bl	8007342 <__retarget_lock_acquire_recursive>
 800ae1a:	89ab      	ldrh	r3, [r5, #12]
 800ae1c:	071b      	lsls	r3, r3, #28
 800ae1e:	d501      	bpl.n	800ae24 <_vfiprintf_r+0x34>
 800ae20:	692b      	ldr	r3, [r5, #16]
 800ae22:	b99b      	cbnz	r3, 800ae4c <_vfiprintf_r+0x5c>
 800ae24:	4629      	mov	r1, r5
 800ae26:	4630      	mov	r0, r6
 800ae28:	f000 f93a 	bl	800b0a0 <__swsetup_r>
 800ae2c:	b170      	cbz	r0, 800ae4c <_vfiprintf_r+0x5c>
 800ae2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae30:	07dc      	lsls	r4, r3, #31
 800ae32:	d504      	bpl.n	800ae3e <_vfiprintf_r+0x4e>
 800ae34:	f04f 30ff 	mov.w	r0, #4294967295
 800ae38:	b01d      	add	sp, #116	; 0x74
 800ae3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3e:	89ab      	ldrh	r3, [r5, #12]
 800ae40:	0598      	lsls	r0, r3, #22
 800ae42:	d4f7      	bmi.n	800ae34 <_vfiprintf_r+0x44>
 800ae44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae46:	f7fc fa7d 	bl	8007344 <__retarget_lock_release_recursive>
 800ae4a:	e7f3      	b.n	800ae34 <_vfiprintf_r+0x44>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae50:	2320      	movs	r3, #32
 800ae52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae5a:	2330      	movs	r3, #48	; 0x30
 800ae5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b010 <_vfiprintf_r+0x220>
 800ae60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae64:	f04f 0901 	mov.w	r9, #1
 800ae68:	4623      	mov	r3, r4
 800ae6a:	469a      	mov	sl, r3
 800ae6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae70:	b10a      	cbz	r2, 800ae76 <_vfiprintf_r+0x86>
 800ae72:	2a25      	cmp	r2, #37	; 0x25
 800ae74:	d1f9      	bne.n	800ae6a <_vfiprintf_r+0x7a>
 800ae76:	ebba 0b04 	subs.w	fp, sl, r4
 800ae7a:	d00b      	beq.n	800ae94 <_vfiprintf_r+0xa4>
 800ae7c:	465b      	mov	r3, fp
 800ae7e:	4622      	mov	r2, r4
 800ae80:	4629      	mov	r1, r5
 800ae82:	4630      	mov	r0, r6
 800ae84:	f7ff ffa2 	bl	800adcc <__sfputs_r>
 800ae88:	3001      	adds	r0, #1
 800ae8a:	f000 80a9 	beq.w	800afe0 <_vfiprintf_r+0x1f0>
 800ae8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae90:	445a      	add	r2, fp
 800ae92:	9209      	str	r2, [sp, #36]	; 0x24
 800ae94:	f89a 3000 	ldrb.w	r3, [sl]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 80a1 	beq.w	800afe0 <_vfiprintf_r+0x1f0>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f04f 32ff 	mov.w	r2, #4294967295
 800aea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aea8:	f10a 0a01 	add.w	sl, sl, #1
 800aeac:	9304      	str	r3, [sp, #16]
 800aeae:	9307      	str	r3, [sp, #28]
 800aeb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aeb4:	931a      	str	r3, [sp, #104]	; 0x68
 800aeb6:	4654      	mov	r4, sl
 800aeb8:	2205      	movs	r2, #5
 800aeba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aebe:	4854      	ldr	r0, [pc, #336]	; (800b010 <_vfiprintf_r+0x220>)
 800aec0:	f7f5 f99e 	bl	8000200 <memchr>
 800aec4:	9a04      	ldr	r2, [sp, #16]
 800aec6:	b9d8      	cbnz	r0, 800af00 <_vfiprintf_r+0x110>
 800aec8:	06d1      	lsls	r1, r2, #27
 800aeca:	bf44      	itt	mi
 800aecc:	2320      	movmi	r3, #32
 800aece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aed2:	0713      	lsls	r3, r2, #28
 800aed4:	bf44      	itt	mi
 800aed6:	232b      	movmi	r3, #43	; 0x2b
 800aed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aedc:	f89a 3000 	ldrb.w	r3, [sl]
 800aee0:	2b2a      	cmp	r3, #42	; 0x2a
 800aee2:	d015      	beq.n	800af10 <_vfiprintf_r+0x120>
 800aee4:	9a07      	ldr	r2, [sp, #28]
 800aee6:	4654      	mov	r4, sl
 800aee8:	2000      	movs	r0, #0
 800aeea:	f04f 0c0a 	mov.w	ip, #10
 800aeee:	4621      	mov	r1, r4
 800aef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aef4:	3b30      	subs	r3, #48	; 0x30
 800aef6:	2b09      	cmp	r3, #9
 800aef8:	d94d      	bls.n	800af96 <_vfiprintf_r+0x1a6>
 800aefa:	b1b0      	cbz	r0, 800af2a <_vfiprintf_r+0x13a>
 800aefc:	9207      	str	r2, [sp, #28]
 800aefe:	e014      	b.n	800af2a <_vfiprintf_r+0x13a>
 800af00:	eba0 0308 	sub.w	r3, r0, r8
 800af04:	fa09 f303 	lsl.w	r3, r9, r3
 800af08:	4313      	orrs	r3, r2
 800af0a:	9304      	str	r3, [sp, #16]
 800af0c:	46a2      	mov	sl, r4
 800af0e:	e7d2      	b.n	800aeb6 <_vfiprintf_r+0xc6>
 800af10:	9b03      	ldr	r3, [sp, #12]
 800af12:	1d19      	adds	r1, r3, #4
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	9103      	str	r1, [sp, #12]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bfbb      	ittet	lt
 800af1c:	425b      	neglt	r3, r3
 800af1e:	f042 0202 	orrlt.w	r2, r2, #2
 800af22:	9307      	strge	r3, [sp, #28]
 800af24:	9307      	strlt	r3, [sp, #28]
 800af26:	bfb8      	it	lt
 800af28:	9204      	strlt	r2, [sp, #16]
 800af2a:	7823      	ldrb	r3, [r4, #0]
 800af2c:	2b2e      	cmp	r3, #46	; 0x2e
 800af2e:	d10c      	bne.n	800af4a <_vfiprintf_r+0x15a>
 800af30:	7863      	ldrb	r3, [r4, #1]
 800af32:	2b2a      	cmp	r3, #42	; 0x2a
 800af34:	d134      	bne.n	800afa0 <_vfiprintf_r+0x1b0>
 800af36:	9b03      	ldr	r3, [sp, #12]
 800af38:	1d1a      	adds	r2, r3, #4
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	9203      	str	r2, [sp, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	bfb8      	it	lt
 800af42:	f04f 33ff 	movlt.w	r3, #4294967295
 800af46:	3402      	adds	r4, #2
 800af48:	9305      	str	r3, [sp, #20]
 800af4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b020 <_vfiprintf_r+0x230>
 800af4e:	7821      	ldrb	r1, [r4, #0]
 800af50:	2203      	movs	r2, #3
 800af52:	4650      	mov	r0, sl
 800af54:	f7f5 f954 	bl	8000200 <memchr>
 800af58:	b138      	cbz	r0, 800af6a <_vfiprintf_r+0x17a>
 800af5a:	9b04      	ldr	r3, [sp, #16]
 800af5c:	eba0 000a 	sub.w	r0, r0, sl
 800af60:	2240      	movs	r2, #64	; 0x40
 800af62:	4082      	lsls	r2, r0
 800af64:	4313      	orrs	r3, r2
 800af66:	3401      	adds	r4, #1
 800af68:	9304      	str	r3, [sp, #16]
 800af6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af6e:	4829      	ldr	r0, [pc, #164]	; (800b014 <_vfiprintf_r+0x224>)
 800af70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af74:	2206      	movs	r2, #6
 800af76:	f7f5 f943 	bl	8000200 <memchr>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d03f      	beq.n	800affe <_vfiprintf_r+0x20e>
 800af7e:	4b26      	ldr	r3, [pc, #152]	; (800b018 <_vfiprintf_r+0x228>)
 800af80:	bb1b      	cbnz	r3, 800afca <_vfiprintf_r+0x1da>
 800af82:	9b03      	ldr	r3, [sp, #12]
 800af84:	3307      	adds	r3, #7
 800af86:	f023 0307 	bic.w	r3, r3, #7
 800af8a:	3308      	adds	r3, #8
 800af8c:	9303      	str	r3, [sp, #12]
 800af8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af90:	443b      	add	r3, r7
 800af92:	9309      	str	r3, [sp, #36]	; 0x24
 800af94:	e768      	b.n	800ae68 <_vfiprintf_r+0x78>
 800af96:	fb0c 3202 	mla	r2, ip, r2, r3
 800af9a:	460c      	mov	r4, r1
 800af9c:	2001      	movs	r0, #1
 800af9e:	e7a6      	b.n	800aeee <_vfiprintf_r+0xfe>
 800afa0:	2300      	movs	r3, #0
 800afa2:	3401      	adds	r4, #1
 800afa4:	9305      	str	r3, [sp, #20]
 800afa6:	4619      	mov	r1, r3
 800afa8:	f04f 0c0a 	mov.w	ip, #10
 800afac:	4620      	mov	r0, r4
 800afae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afb2:	3a30      	subs	r2, #48	; 0x30
 800afb4:	2a09      	cmp	r2, #9
 800afb6:	d903      	bls.n	800afc0 <_vfiprintf_r+0x1d0>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0c6      	beq.n	800af4a <_vfiprintf_r+0x15a>
 800afbc:	9105      	str	r1, [sp, #20]
 800afbe:	e7c4      	b.n	800af4a <_vfiprintf_r+0x15a>
 800afc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800afc4:	4604      	mov	r4, r0
 800afc6:	2301      	movs	r3, #1
 800afc8:	e7f0      	b.n	800afac <_vfiprintf_r+0x1bc>
 800afca:	ab03      	add	r3, sp, #12
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	462a      	mov	r2, r5
 800afd0:	4b12      	ldr	r3, [pc, #72]	; (800b01c <_vfiprintf_r+0x22c>)
 800afd2:	a904      	add	r1, sp, #16
 800afd4:	4630      	mov	r0, r6
 800afd6:	f7fb fa0d 	bl	80063f4 <_printf_float>
 800afda:	4607      	mov	r7, r0
 800afdc:	1c78      	adds	r0, r7, #1
 800afde:	d1d6      	bne.n	800af8e <_vfiprintf_r+0x19e>
 800afe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afe2:	07d9      	lsls	r1, r3, #31
 800afe4:	d405      	bmi.n	800aff2 <_vfiprintf_r+0x202>
 800afe6:	89ab      	ldrh	r3, [r5, #12]
 800afe8:	059a      	lsls	r2, r3, #22
 800afea:	d402      	bmi.n	800aff2 <_vfiprintf_r+0x202>
 800afec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afee:	f7fc f9a9 	bl	8007344 <__retarget_lock_release_recursive>
 800aff2:	89ab      	ldrh	r3, [r5, #12]
 800aff4:	065b      	lsls	r3, r3, #25
 800aff6:	f53f af1d 	bmi.w	800ae34 <_vfiprintf_r+0x44>
 800affa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800affc:	e71c      	b.n	800ae38 <_vfiprintf_r+0x48>
 800affe:	ab03      	add	r3, sp, #12
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	462a      	mov	r2, r5
 800b004:	4b05      	ldr	r3, [pc, #20]	; (800b01c <_vfiprintf_r+0x22c>)
 800b006:	a904      	add	r1, sp, #16
 800b008:	4630      	mov	r0, r6
 800b00a:	f7fb fc97 	bl	800693c <_printf_i>
 800b00e:	e7e4      	b.n	800afda <_vfiprintf_r+0x1ea>
 800b010:	0800cf01 	.word	0x0800cf01
 800b014:	0800cf0b 	.word	0x0800cf0b
 800b018:	080063f5 	.word	0x080063f5
 800b01c:	0800adcd 	.word	0x0800adcd
 800b020:	0800cf07 	.word	0x0800cf07

0800b024 <__swbuf_r>:
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b026:	460e      	mov	r6, r1
 800b028:	4614      	mov	r4, r2
 800b02a:	4605      	mov	r5, r0
 800b02c:	b118      	cbz	r0, 800b036 <__swbuf_r+0x12>
 800b02e:	6a03      	ldr	r3, [r0, #32]
 800b030:	b90b      	cbnz	r3, 800b036 <__swbuf_r+0x12>
 800b032:	f7fc f841 	bl	80070b8 <__sinit>
 800b036:	69a3      	ldr	r3, [r4, #24]
 800b038:	60a3      	str	r3, [r4, #8]
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	071a      	lsls	r2, r3, #28
 800b03e:	d525      	bpl.n	800b08c <__swbuf_r+0x68>
 800b040:	6923      	ldr	r3, [r4, #16]
 800b042:	b31b      	cbz	r3, 800b08c <__swbuf_r+0x68>
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	6922      	ldr	r2, [r4, #16]
 800b048:	1a98      	subs	r0, r3, r2
 800b04a:	6963      	ldr	r3, [r4, #20]
 800b04c:	b2f6      	uxtb	r6, r6
 800b04e:	4283      	cmp	r3, r0
 800b050:	4637      	mov	r7, r6
 800b052:	dc04      	bgt.n	800b05e <__swbuf_r+0x3a>
 800b054:	4621      	mov	r1, r4
 800b056:	4628      	mov	r0, r5
 800b058:	f7ff f942 	bl	800a2e0 <_fflush_r>
 800b05c:	b9e0      	cbnz	r0, 800b098 <__swbuf_r+0x74>
 800b05e:	68a3      	ldr	r3, [r4, #8]
 800b060:	3b01      	subs	r3, #1
 800b062:	60a3      	str	r3, [r4, #8]
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	1c5a      	adds	r2, r3, #1
 800b068:	6022      	str	r2, [r4, #0]
 800b06a:	701e      	strb	r6, [r3, #0]
 800b06c:	6962      	ldr	r2, [r4, #20]
 800b06e:	1c43      	adds	r3, r0, #1
 800b070:	429a      	cmp	r2, r3
 800b072:	d004      	beq.n	800b07e <__swbuf_r+0x5a>
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	07db      	lsls	r3, r3, #31
 800b078:	d506      	bpl.n	800b088 <__swbuf_r+0x64>
 800b07a:	2e0a      	cmp	r6, #10
 800b07c:	d104      	bne.n	800b088 <__swbuf_r+0x64>
 800b07e:	4621      	mov	r1, r4
 800b080:	4628      	mov	r0, r5
 800b082:	f7ff f92d 	bl	800a2e0 <_fflush_r>
 800b086:	b938      	cbnz	r0, 800b098 <__swbuf_r+0x74>
 800b088:	4638      	mov	r0, r7
 800b08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b08c:	4621      	mov	r1, r4
 800b08e:	4628      	mov	r0, r5
 800b090:	f000 f806 	bl	800b0a0 <__swsetup_r>
 800b094:	2800      	cmp	r0, #0
 800b096:	d0d5      	beq.n	800b044 <__swbuf_r+0x20>
 800b098:	f04f 37ff 	mov.w	r7, #4294967295
 800b09c:	e7f4      	b.n	800b088 <__swbuf_r+0x64>
	...

0800b0a0 <__swsetup_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4b2a      	ldr	r3, [pc, #168]	; (800b14c <__swsetup_r+0xac>)
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	b118      	cbz	r0, 800b0b4 <__swsetup_r+0x14>
 800b0ac:	6a03      	ldr	r3, [r0, #32]
 800b0ae:	b90b      	cbnz	r3, 800b0b4 <__swsetup_r+0x14>
 800b0b0:	f7fc f802 	bl	80070b8 <__sinit>
 800b0b4:	89a3      	ldrh	r3, [r4, #12]
 800b0b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0ba:	0718      	lsls	r0, r3, #28
 800b0bc:	d422      	bmi.n	800b104 <__swsetup_r+0x64>
 800b0be:	06d9      	lsls	r1, r3, #27
 800b0c0:	d407      	bmi.n	800b0d2 <__swsetup_r+0x32>
 800b0c2:	2309      	movs	r3, #9
 800b0c4:	602b      	str	r3, [r5, #0]
 800b0c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0ca:	81a3      	strh	r3, [r4, #12]
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	e034      	b.n	800b13c <__swsetup_r+0x9c>
 800b0d2:	0758      	lsls	r0, r3, #29
 800b0d4:	d512      	bpl.n	800b0fc <__swsetup_r+0x5c>
 800b0d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0d8:	b141      	cbz	r1, 800b0ec <__swsetup_r+0x4c>
 800b0da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0de:	4299      	cmp	r1, r3
 800b0e0:	d002      	beq.n	800b0e8 <__swsetup_r+0x48>
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f7fc ffba 	bl	800805c <_free_r>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	6363      	str	r3, [r4, #52]	; 0x34
 800b0ec:	89a3      	ldrh	r3, [r4, #12]
 800b0ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0f2:	81a3      	strh	r3, [r4, #12]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	6063      	str	r3, [r4, #4]
 800b0f8:	6923      	ldr	r3, [r4, #16]
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	f043 0308 	orr.w	r3, r3, #8
 800b102:	81a3      	strh	r3, [r4, #12]
 800b104:	6923      	ldr	r3, [r4, #16]
 800b106:	b94b      	cbnz	r3, 800b11c <__swsetup_r+0x7c>
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b10e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b112:	d003      	beq.n	800b11c <__swsetup_r+0x7c>
 800b114:	4621      	mov	r1, r4
 800b116:	4628      	mov	r0, r5
 800b118:	f000 f884 	bl	800b224 <__smakebuf_r>
 800b11c:	89a0      	ldrh	r0, [r4, #12]
 800b11e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b122:	f010 0301 	ands.w	r3, r0, #1
 800b126:	d00a      	beq.n	800b13e <__swsetup_r+0x9e>
 800b128:	2300      	movs	r3, #0
 800b12a:	60a3      	str	r3, [r4, #8]
 800b12c:	6963      	ldr	r3, [r4, #20]
 800b12e:	425b      	negs	r3, r3
 800b130:	61a3      	str	r3, [r4, #24]
 800b132:	6923      	ldr	r3, [r4, #16]
 800b134:	b943      	cbnz	r3, 800b148 <__swsetup_r+0xa8>
 800b136:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b13a:	d1c4      	bne.n	800b0c6 <__swsetup_r+0x26>
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	0781      	lsls	r1, r0, #30
 800b140:	bf58      	it	pl
 800b142:	6963      	ldrpl	r3, [r4, #20]
 800b144:	60a3      	str	r3, [r4, #8]
 800b146:	e7f4      	b.n	800b132 <__swsetup_r+0x92>
 800b148:	2000      	movs	r0, #0
 800b14a:	e7f7      	b.n	800b13c <__swsetup_r+0x9c>
 800b14c:	20000064 	.word	0x20000064

0800b150 <_raise_r>:
 800b150:	291f      	cmp	r1, #31
 800b152:	b538      	push	{r3, r4, r5, lr}
 800b154:	4604      	mov	r4, r0
 800b156:	460d      	mov	r5, r1
 800b158:	d904      	bls.n	800b164 <_raise_r+0x14>
 800b15a:	2316      	movs	r3, #22
 800b15c:	6003      	str	r3, [r0, #0]
 800b15e:	f04f 30ff 	mov.w	r0, #4294967295
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b166:	b112      	cbz	r2, 800b16e <_raise_r+0x1e>
 800b168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b16c:	b94b      	cbnz	r3, 800b182 <_raise_r+0x32>
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 f830 	bl	800b1d4 <_getpid_r>
 800b174:	462a      	mov	r2, r5
 800b176:	4601      	mov	r1, r0
 800b178:	4620      	mov	r0, r4
 800b17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b17e:	f000 b817 	b.w	800b1b0 <_kill_r>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d00a      	beq.n	800b19c <_raise_r+0x4c>
 800b186:	1c59      	adds	r1, r3, #1
 800b188:	d103      	bne.n	800b192 <_raise_r+0x42>
 800b18a:	2316      	movs	r3, #22
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	2001      	movs	r0, #1
 800b190:	e7e7      	b.n	800b162 <_raise_r+0x12>
 800b192:	2400      	movs	r4, #0
 800b194:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b198:	4628      	mov	r0, r5
 800b19a:	4798      	blx	r3
 800b19c:	2000      	movs	r0, #0
 800b19e:	e7e0      	b.n	800b162 <_raise_r+0x12>

0800b1a0 <raise>:
 800b1a0:	4b02      	ldr	r3, [pc, #8]	; (800b1ac <raise+0xc>)
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f7ff bfd3 	b.w	800b150 <_raise_r>
 800b1aa:	bf00      	nop
 800b1ac:	20000064 	.word	0x20000064

0800b1b0 <_kill_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4d07      	ldr	r5, [pc, #28]	; (800b1d0 <_kill_r+0x20>)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	602b      	str	r3, [r5, #0]
 800b1be:	f7f7 f9e7 	bl	8002590 <_kill>
 800b1c2:	1c43      	adds	r3, r0, #1
 800b1c4:	d102      	bne.n	800b1cc <_kill_r+0x1c>
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	b103      	cbz	r3, 800b1cc <_kill_r+0x1c>
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	bd38      	pop	{r3, r4, r5, pc}
 800b1ce:	bf00      	nop
 800b1d0:	2000064c 	.word	0x2000064c

0800b1d4 <_getpid_r>:
 800b1d4:	f7f7 b9d4 	b.w	8002580 <_getpid>

0800b1d8 <__swhatbuf_r>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e0:	2900      	cmp	r1, #0
 800b1e2:	b096      	sub	sp, #88	; 0x58
 800b1e4:	4615      	mov	r5, r2
 800b1e6:	461e      	mov	r6, r3
 800b1e8:	da0d      	bge.n	800b206 <__swhatbuf_r+0x2e>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b1f0:	f04f 0100 	mov.w	r1, #0
 800b1f4:	bf0c      	ite	eq
 800b1f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b1fa:	2340      	movne	r3, #64	; 0x40
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	6031      	str	r1, [r6, #0]
 800b200:	602b      	str	r3, [r5, #0]
 800b202:	b016      	add	sp, #88	; 0x58
 800b204:	bd70      	pop	{r4, r5, r6, pc}
 800b206:	466a      	mov	r2, sp
 800b208:	f000 f848 	bl	800b29c <_fstat_r>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	dbec      	blt.n	800b1ea <__swhatbuf_r+0x12>
 800b210:	9901      	ldr	r1, [sp, #4]
 800b212:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b216:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b21a:	4259      	negs	r1, r3
 800b21c:	4159      	adcs	r1, r3
 800b21e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b222:	e7eb      	b.n	800b1fc <__swhatbuf_r+0x24>

0800b224 <__smakebuf_r>:
 800b224:	898b      	ldrh	r3, [r1, #12]
 800b226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b228:	079d      	lsls	r5, r3, #30
 800b22a:	4606      	mov	r6, r0
 800b22c:	460c      	mov	r4, r1
 800b22e:	d507      	bpl.n	800b240 <__smakebuf_r+0x1c>
 800b230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	6123      	str	r3, [r4, #16]
 800b238:	2301      	movs	r3, #1
 800b23a:	6163      	str	r3, [r4, #20]
 800b23c:	b002      	add	sp, #8
 800b23e:	bd70      	pop	{r4, r5, r6, pc}
 800b240:	ab01      	add	r3, sp, #4
 800b242:	466a      	mov	r2, sp
 800b244:	f7ff ffc8 	bl	800b1d8 <__swhatbuf_r>
 800b248:	9900      	ldr	r1, [sp, #0]
 800b24a:	4605      	mov	r5, r0
 800b24c:	4630      	mov	r0, r6
 800b24e:	f7fc ff79 	bl	8008144 <_malloc_r>
 800b252:	b948      	cbnz	r0, 800b268 <__smakebuf_r+0x44>
 800b254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b258:	059a      	lsls	r2, r3, #22
 800b25a:	d4ef      	bmi.n	800b23c <__smakebuf_r+0x18>
 800b25c:	f023 0303 	bic.w	r3, r3, #3
 800b260:	f043 0302 	orr.w	r3, r3, #2
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	e7e3      	b.n	800b230 <__smakebuf_r+0xc>
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	6020      	str	r0, [r4, #0]
 800b26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b270:	81a3      	strh	r3, [r4, #12]
 800b272:	9b00      	ldr	r3, [sp, #0]
 800b274:	6163      	str	r3, [r4, #20]
 800b276:	9b01      	ldr	r3, [sp, #4]
 800b278:	6120      	str	r0, [r4, #16]
 800b27a:	b15b      	cbz	r3, 800b294 <__smakebuf_r+0x70>
 800b27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b280:	4630      	mov	r0, r6
 800b282:	f000 f81d 	bl	800b2c0 <_isatty_r>
 800b286:	b128      	cbz	r0, 800b294 <__smakebuf_r+0x70>
 800b288:	89a3      	ldrh	r3, [r4, #12]
 800b28a:	f023 0303 	bic.w	r3, r3, #3
 800b28e:	f043 0301 	orr.w	r3, r3, #1
 800b292:	81a3      	strh	r3, [r4, #12]
 800b294:	89a3      	ldrh	r3, [r4, #12]
 800b296:	431d      	orrs	r5, r3
 800b298:	81a5      	strh	r5, [r4, #12]
 800b29a:	e7cf      	b.n	800b23c <__smakebuf_r+0x18>

0800b29c <_fstat_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4d07      	ldr	r5, [pc, #28]	; (800b2bc <_fstat_r+0x20>)
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	f7f7 f9d0 	bl	800264e <_fstat>
 800b2ae:	1c43      	adds	r3, r0, #1
 800b2b0:	d102      	bne.n	800b2b8 <_fstat_r+0x1c>
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	b103      	cbz	r3, 800b2b8 <_fstat_r+0x1c>
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ba:	bf00      	nop
 800b2bc:	2000064c 	.word	0x2000064c

0800b2c0 <_isatty_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4d06      	ldr	r5, [pc, #24]	; (800b2dc <_isatty_r+0x1c>)
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	602b      	str	r3, [r5, #0]
 800b2cc:	f7f7 f9cf 	bl	800266e <_isatty>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_isatty_r+0x1a>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_isatty_r+0x1a>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	2000064c 	.word	0x2000064c

0800b2e0 <atan2>:
 800b2e0:	f000 bb3e 	b.w	800b960 <__ieee754_atan2>

0800b2e4 <sqrt>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	ed2d 8b02 	vpush	{d8}
 800b2ea:	ec55 4b10 	vmov	r4, r5, d0
 800b2ee:	f000 f8d3 	bl	800b498 <__ieee754_sqrt>
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	eeb0 8a40 	vmov.f32	s16, s0
 800b2fe:	eef0 8a60 	vmov.f32	s17, s1
 800b302:	f7f5 fc2b 	bl	8000b5c <__aeabi_dcmpun>
 800b306:	b990      	cbnz	r0, 800b32e <sqrt+0x4a>
 800b308:	2200      	movs	r2, #0
 800b30a:	2300      	movs	r3, #0
 800b30c:	4620      	mov	r0, r4
 800b30e:	4629      	mov	r1, r5
 800b310:	f7f5 fbfc 	bl	8000b0c <__aeabi_dcmplt>
 800b314:	b158      	cbz	r0, 800b32e <sqrt+0x4a>
 800b316:	f7fb ffe9 	bl	80072ec <__errno>
 800b31a:	2321      	movs	r3, #33	; 0x21
 800b31c:	6003      	str	r3, [r0, #0]
 800b31e:	2200      	movs	r2, #0
 800b320:	2300      	movs	r3, #0
 800b322:	4610      	mov	r0, r2
 800b324:	4619      	mov	r1, r3
 800b326:	f7f5 faa9 	bl	800087c <__aeabi_ddiv>
 800b32a:	ec41 0b18 	vmov	d8, r0, r1
 800b32e:	eeb0 0a48 	vmov.f32	s0, s16
 800b332:	eef0 0a68 	vmov.f32	s1, s17
 800b336:	ecbd 8b02 	vpop	{d8}
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	0000      	movs	r0, r0
	...

0800b340 <cos>:
 800b340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b342:	ec53 2b10 	vmov	r2, r3, d0
 800b346:	4826      	ldr	r0, [pc, #152]	; (800b3e0 <cos+0xa0>)
 800b348:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b34c:	4281      	cmp	r1, r0
 800b34e:	dc06      	bgt.n	800b35e <cos+0x1e>
 800b350:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b3d8 <cos+0x98>
 800b354:	b005      	add	sp, #20
 800b356:	f85d eb04 	ldr.w	lr, [sp], #4
 800b35a:	f000 b979 	b.w	800b650 <__kernel_cos>
 800b35e:	4821      	ldr	r0, [pc, #132]	; (800b3e4 <cos+0xa4>)
 800b360:	4281      	cmp	r1, r0
 800b362:	dd09      	ble.n	800b378 <cos+0x38>
 800b364:	ee10 0a10 	vmov	r0, s0
 800b368:	4619      	mov	r1, r3
 800b36a:	f7f4 ffa5 	bl	80002b8 <__aeabi_dsub>
 800b36e:	ec41 0b10 	vmov	d0, r0, r1
 800b372:	b005      	add	sp, #20
 800b374:	f85d fb04 	ldr.w	pc, [sp], #4
 800b378:	4668      	mov	r0, sp
 800b37a:	f000 fbb9 	bl	800baf0 <__ieee754_rem_pio2>
 800b37e:	f000 0003 	and.w	r0, r0, #3
 800b382:	2801      	cmp	r0, #1
 800b384:	d00b      	beq.n	800b39e <cos+0x5e>
 800b386:	2802      	cmp	r0, #2
 800b388:	d016      	beq.n	800b3b8 <cos+0x78>
 800b38a:	b9e0      	cbnz	r0, 800b3c6 <cos+0x86>
 800b38c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b390:	ed9d 0b00 	vldr	d0, [sp]
 800b394:	f000 f95c 	bl	800b650 <__kernel_cos>
 800b398:	ec51 0b10 	vmov	r0, r1, d0
 800b39c:	e7e7      	b.n	800b36e <cos+0x2e>
 800b39e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3a2:	ed9d 0b00 	vldr	d0, [sp]
 800b3a6:	f000 fa1b 	bl	800b7e0 <__kernel_sin>
 800b3aa:	ec53 2b10 	vmov	r2, r3, d0
 800b3ae:	ee10 0a10 	vmov	r0, s0
 800b3b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b3b6:	e7da      	b.n	800b36e <cos+0x2e>
 800b3b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3bc:	ed9d 0b00 	vldr	d0, [sp]
 800b3c0:	f000 f946 	bl	800b650 <__kernel_cos>
 800b3c4:	e7f1      	b.n	800b3aa <cos+0x6a>
 800b3c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3ca:	ed9d 0b00 	vldr	d0, [sp]
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	f000 fa06 	bl	800b7e0 <__kernel_sin>
 800b3d4:	e7e0      	b.n	800b398 <cos+0x58>
 800b3d6:	bf00      	nop
	...
 800b3e0:	3fe921fb 	.word	0x3fe921fb
 800b3e4:	7fefffff 	.word	0x7fefffff

0800b3e8 <sin>:
 800b3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3ea:	ec53 2b10 	vmov	r2, r3, d0
 800b3ee:	4828      	ldr	r0, [pc, #160]	; (800b490 <sin+0xa8>)
 800b3f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b3f4:	4281      	cmp	r1, r0
 800b3f6:	dc07      	bgt.n	800b408 <sin+0x20>
 800b3f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b488 <sin+0xa0>
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	b005      	add	sp, #20
 800b400:	f85d eb04 	ldr.w	lr, [sp], #4
 800b404:	f000 b9ec 	b.w	800b7e0 <__kernel_sin>
 800b408:	4822      	ldr	r0, [pc, #136]	; (800b494 <sin+0xac>)
 800b40a:	4281      	cmp	r1, r0
 800b40c:	dd09      	ble.n	800b422 <sin+0x3a>
 800b40e:	ee10 0a10 	vmov	r0, s0
 800b412:	4619      	mov	r1, r3
 800b414:	f7f4 ff50 	bl	80002b8 <__aeabi_dsub>
 800b418:	ec41 0b10 	vmov	d0, r0, r1
 800b41c:	b005      	add	sp, #20
 800b41e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b422:	4668      	mov	r0, sp
 800b424:	f000 fb64 	bl	800baf0 <__ieee754_rem_pio2>
 800b428:	f000 0003 	and.w	r0, r0, #3
 800b42c:	2801      	cmp	r0, #1
 800b42e:	d00c      	beq.n	800b44a <sin+0x62>
 800b430:	2802      	cmp	r0, #2
 800b432:	d011      	beq.n	800b458 <sin+0x70>
 800b434:	b9f0      	cbnz	r0, 800b474 <sin+0x8c>
 800b436:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b43a:	ed9d 0b00 	vldr	d0, [sp]
 800b43e:	2001      	movs	r0, #1
 800b440:	f000 f9ce 	bl	800b7e0 <__kernel_sin>
 800b444:	ec51 0b10 	vmov	r0, r1, d0
 800b448:	e7e6      	b.n	800b418 <sin+0x30>
 800b44a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b44e:	ed9d 0b00 	vldr	d0, [sp]
 800b452:	f000 f8fd 	bl	800b650 <__kernel_cos>
 800b456:	e7f5      	b.n	800b444 <sin+0x5c>
 800b458:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b45c:	ed9d 0b00 	vldr	d0, [sp]
 800b460:	2001      	movs	r0, #1
 800b462:	f000 f9bd 	bl	800b7e0 <__kernel_sin>
 800b466:	ec53 2b10 	vmov	r2, r3, d0
 800b46a:	ee10 0a10 	vmov	r0, s0
 800b46e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b472:	e7d1      	b.n	800b418 <sin+0x30>
 800b474:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b478:	ed9d 0b00 	vldr	d0, [sp]
 800b47c:	f000 f8e8 	bl	800b650 <__kernel_cos>
 800b480:	e7f1      	b.n	800b466 <sin+0x7e>
 800b482:	bf00      	nop
 800b484:	f3af 8000 	nop.w
	...
 800b490:	3fe921fb 	.word	0x3fe921fb
 800b494:	7fefffff 	.word	0x7fefffff

0800b498 <__ieee754_sqrt>:
 800b498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	ec55 4b10 	vmov	r4, r5, d0
 800b4a0:	4e67      	ldr	r6, [pc, #412]	; (800b640 <__ieee754_sqrt+0x1a8>)
 800b4a2:	43ae      	bics	r6, r5
 800b4a4:	ee10 0a10 	vmov	r0, s0
 800b4a8:	ee10 2a10 	vmov	r2, s0
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	d10d      	bne.n	800b4ce <__ieee754_sqrt+0x36>
 800b4b2:	f7f5 f8b9 	bl	8000628 <__aeabi_dmul>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7f4 fefd 	bl	80002bc <__adddf3>
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	460d      	mov	r5, r1
 800b4c6:	ec45 4b10 	vmov	d0, r4, r5
 800b4ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ce:	2d00      	cmp	r5, #0
 800b4d0:	dc0b      	bgt.n	800b4ea <__ieee754_sqrt+0x52>
 800b4d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b4d6:	4326      	orrs	r6, r4
 800b4d8:	d0f5      	beq.n	800b4c6 <__ieee754_sqrt+0x2e>
 800b4da:	b135      	cbz	r5, 800b4ea <__ieee754_sqrt+0x52>
 800b4dc:	f7f4 feec 	bl	80002b8 <__aeabi_dsub>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	f7f5 f9ca 	bl	800087c <__aeabi_ddiv>
 800b4e8:	e7eb      	b.n	800b4c2 <__ieee754_sqrt+0x2a>
 800b4ea:	1509      	asrs	r1, r1, #20
 800b4ec:	f000 808d 	beq.w	800b60a <__ieee754_sqrt+0x172>
 800b4f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4f4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b4f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4fc:	07c9      	lsls	r1, r1, #31
 800b4fe:	bf5c      	itt	pl
 800b500:	005b      	lslpl	r3, r3, #1
 800b502:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b506:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b50a:	bf58      	it	pl
 800b50c:	0052      	lslpl	r2, r2, #1
 800b50e:	2500      	movs	r5, #0
 800b510:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b514:	1076      	asrs	r6, r6, #1
 800b516:	0052      	lsls	r2, r2, #1
 800b518:	f04f 0e16 	mov.w	lr, #22
 800b51c:	46ac      	mov	ip, r5
 800b51e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b522:	eb0c 0001 	add.w	r0, ip, r1
 800b526:	4298      	cmp	r0, r3
 800b528:	bfde      	ittt	le
 800b52a:	1a1b      	suble	r3, r3, r0
 800b52c:	eb00 0c01 	addle.w	ip, r0, r1
 800b530:	186d      	addle	r5, r5, r1
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	f1be 0e01 	subs.w	lr, lr, #1
 800b538:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b53c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b540:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b544:	d1ed      	bne.n	800b522 <__ieee754_sqrt+0x8a>
 800b546:	4674      	mov	r4, lr
 800b548:	2720      	movs	r7, #32
 800b54a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b54e:	4563      	cmp	r3, ip
 800b550:	eb01 000e 	add.w	r0, r1, lr
 800b554:	dc02      	bgt.n	800b55c <__ieee754_sqrt+0xc4>
 800b556:	d113      	bne.n	800b580 <__ieee754_sqrt+0xe8>
 800b558:	4290      	cmp	r0, r2
 800b55a:	d811      	bhi.n	800b580 <__ieee754_sqrt+0xe8>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	eb00 0e01 	add.w	lr, r0, r1
 800b562:	da57      	bge.n	800b614 <__ieee754_sqrt+0x17c>
 800b564:	f1be 0f00 	cmp.w	lr, #0
 800b568:	db54      	blt.n	800b614 <__ieee754_sqrt+0x17c>
 800b56a:	f10c 0801 	add.w	r8, ip, #1
 800b56e:	eba3 030c 	sub.w	r3, r3, ip
 800b572:	4290      	cmp	r0, r2
 800b574:	bf88      	it	hi
 800b576:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b57a:	1a12      	subs	r2, r2, r0
 800b57c:	440c      	add	r4, r1
 800b57e:	46c4      	mov	ip, r8
 800b580:	005b      	lsls	r3, r3, #1
 800b582:	3f01      	subs	r7, #1
 800b584:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b588:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b58c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b590:	d1dd      	bne.n	800b54e <__ieee754_sqrt+0xb6>
 800b592:	4313      	orrs	r3, r2
 800b594:	d01b      	beq.n	800b5ce <__ieee754_sqrt+0x136>
 800b596:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b644 <__ieee754_sqrt+0x1ac>
 800b59a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b648 <__ieee754_sqrt+0x1b0>
 800b59e:	e9da 0100 	ldrd	r0, r1, [sl]
 800b5a2:	e9db 2300 	ldrd	r2, r3, [fp]
 800b5a6:	f7f4 fe87 	bl	80002b8 <__aeabi_dsub>
 800b5aa:	e9da 8900 	ldrd	r8, r9, [sl]
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	f7f5 fab3 	bl	8000b20 <__aeabi_dcmple>
 800b5ba:	b140      	cbz	r0, 800b5ce <__ieee754_sqrt+0x136>
 800b5bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b5c0:	e9da 0100 	ldrd	r0, r1, [sl]
 800b5c4:	e9db 2300 	ldrd	r2, r3, [fp]
 800b5c8:	d126      	bne.n	800b618 <__ieee754_sqrt+0x180>
 800b5ca:	3501      	adds	r5, #1
 800b5cc:	463c      	mov	r4, r7
 800b5ce:	106a      	asrs	r2, r5, #1
 800b5d0:	0863      	lsrs	r3, r4, #1
 800b5d2:	07e9      	lsls	r1, r5, #31
 800b5d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b5d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b5dc:	bf48      	it	mi
 800b5de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b5e2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b5e6:	461c      	mov	r4, r3
 800b5e8:	e76d      	b.n	800b4c6 <__ieee754_sqrt+0x2e>
 800b5ea:	0ad3      	lsrs	r3, r2, #11
 800b5ec:	3815      	subs	r0, #21
 800b5ee:	0552      	lsls	r2, r2, #21
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d0fa      	beq.n	800b5ea <__ieee754_sqrt+0x152>
 800b5f4:	02dc      	lsls	r4, r3, #11
 800b5f6:	d50a      	bpl.n	800b60e <__ieee754_sqrt+0x176>
 800b5f8:	f1c1 0420 	rsb	r4, r1, #32
 800b5fc:	fa22 f404 	lsr.w	r4, r2, r4
 800b600:	1e4d      	subs	r5, r1, #1
 800b602:	408a      	lsls	r2, r1
 800b604:	4323      	orrs	r3, r4
 800b606:	1b41      	subs	r1, r0, r5
 800b608:	e772      	b.n	800b4f0 <__ieee754_sqrt+0x58>
 800b60a:	4608      	mov	r0, r1
 800b60c:	e7f0      	b.n	800b5f0 <__ieee754_sqrt+0x158>
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	3101      	adds	r1, #1
 800b612:	e7ef      	b.n	800b5f4 <__ieee754_sqrt+0x15c>
 800b614:	46e0      	mov	r8, ip
 800b616:	e7aa      	b.n	800b56e <__ieee754_sqrt+0xd6>
 800b618:	f7f4 fe50 	bl	80002bc <__adddf3>
 800b61c:	e9da 8900 	ldrd	r8, r9, [sl]
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	4640      	mov	r0, r8
 800b626:	4649      	mov	r1, r9
 800b628:	f7f5 fa70 	bl	8000b0c <__aeabi_dcmplt>
 800b62c:	b120      	cbz	r0, 800b638 <__ieee754_sqrt+0x1a0>
 800b62e:	1ca0      	adds	r0, r4, #2
 800b630:	bf08      	it	eq
 800b632:	3501      	addeq	r5, #1
 800b634:	3402      	adds	r4, #2
 800b636:	e7ca      	b.n	800b5ce <__ieee754_sqrt+0x136>
 800b638:	3401      	adds	r4, #1
 800b63a:	f024 0401 	bic.w	r4, r4, #1
 800b63e:	e7c6      	b.n	800b5ce <__ieee754_sqrt+0x136>
 800b640:	7ff00000 	.word	0x7ff00000
 800b644:	200001d8 	.word	0x200001d8
 800b648:	200001e0 	.word	0x200001e0
 800b64c:	00000000 	.word	0x00000000

0800b650 <__kernel_cos>:
 800b650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	ec57 6b10 	vmov	r6, r7, d0
 800b658:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b65c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b660:	ed8d 1b00 	vstr	d1, [sp]
 800b664:	da07      	bge.n	800b676 <__kernel_cos+0x26>
 800b666:	ee10 0a10 	vmov	r0, s0
 800b66a:	4639      	mov	r1, r7
 800b66c:	f7f5 fa8c 	bl	8000b88 <__aeabi_d2iz>
 800b670:	2800      	cmp	r0, #0
 800b672:	f000 8088 	beq.w	800b786 <__kernel_cos+0x136>
 800b676:	4632      	mov	r2, r6
 800b678:	463b      	mov	r3, r7
 800b67a:	4630      	mov	r0, r6
 800b67c:	4639      	mov	r1, r7
 800b67e:	f7f4 ffd3 	bl	8000628 <__aeabi_dmul>
 800b682:	4b51      	ldr	r3, [pc, #324]	; (800b7c8 <__kernel_cos+0x178>)
 800b684:	2200      	movs	r2, #0
 800b686:	4604      	mov	r4, r0
 800b688:	460d      	mov	r5, r1
 800b68a:	f7f4 ffcd 	bl	8000628 <__aeabi_dmul>
 800b68e:	a340      	add	r3, pc, #256	; (adr r3, 800b790 <__kernel_cos+0x140>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	4682      	mov	sl, r0
 800b696:	468b      	mov	fp, r1
 800b698:	4620      	mov	r0, r4
 800b69a:	4629      	mov	r1, r5
 800b69c:	f7f4 ffc4 	bl	8000628 <__aeabi_dmul>
 800b6a0:	a33d      	add	r3, pc, #244	; (adr r3, 800b798 <__kernel_cos+0x148>)
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f7f4 fe09 	bl	80002bc <__adddf3>
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	462b      	mov	r3, r5
 800b6ae:	f7f4 ffbb 	bl	8000628 <__aeabi_dmul>
 800b6b2:	a33b      	add	r3, pc, #236	; (adr r3, 800b7a0 <__kernel_cos+0x150>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7f4 fdfe 	bl	80002b8 <__aeabi_dsub>
 800b6bc:	4622      	mov	r2, r4
 800b6be:	462b      	mov	r3, r5
 800b6c0:	f7f4 ffb2 	bl	8000628 <__aeabi_dmul>
 800b6c4:	a338      	add	r3, pc, #224	; (adr r3, 800b7a8 <__kernel_cos+0x158>)
 800b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ca:	f7f4 fdf7 	bl	80002bc <__adddf3>
 800b6ce:	4622      	mov	r2, r4
 800b6d0:	462b      	mov	r3, r5
 800b6d2:	f7f4 ffa9 	bl	8000628 <__aeabi_dmul>
 800b6d6:	a336      	add	r3, pc, #216	; (adr r3, 800b7b0 <__kernel_cos+0x160>)
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	f7f4 fdec 	bl	80002b8 <__aeabi_dsub>
 800b6e0:	4622      	mov	r2, r4
 800b6e2:	462b      	mov	r3, r5
 800b6e4:	f7f4 ffa0 	bl	8000628 <__aeabi_dmul>
 800b6e8:	a333      	add	r3, pc, #204	; (adr r3, 800b7b8 <__kernel_cos+0x168>)
 800b6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ee:	f7f4 fde5 	bl	80002bc <__adddf3>
 800b6f2:	4622      	mov	r2, r4
 800b6f4:	462b      	mov	r3, r5
 800b6f6:	f7f4 ff97 	bl	8000628 <__aeabi_dmul>
 800b6fa:	4622      	mov	r2, r4
 800b6fc:	462b      	mov	r3, r5
 800b6fe:	f7f4 ff93 	bl	8000628 <__aeabi_dmul>
 800b702:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b706:	4604      	mov	r4, r0
 800b708:	460d      	mov	r5, r1
 800b70a:	4630      	mov	r0, r6
 800b70c:	4639      	mov	r1, r7
 800b70e:	f7f4 ff8b 	bl	8000628 <__aeabi_dmul>
 800b712:	460b      	mov	r3, r1
 800b714:	4602      	mov	r2, r0
 800b716:	4629      	mov	r1, r5
 800b718:	4620      	mov	r0, r4
 800b71a:	f7f4 fdcd 	bl	80002b8 <__aeabi_dsub>
 800b71e:	4b2b      	ldr	r3, [pc, #172]	; (800b7cc <__kernel_cos+0x17c>)
 800b720:	4598      	cmp	r8, r3
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	dc10      	bgt.n	800b74a <__kernel_cos+0xfa>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4650      	mov	r0, sl
 800b72e:	4659      	mov	r1, fp
 800b730:	f7f4 fdc2 	bl	80002b8 <__aeabi_dsub>
 800b734:	460b      	mov	r3, r1
 800b736:	4926      	ldr	r1, [pc, #152]	; (800b7d0 <__kernel_cos+0x180>)
 800b738:	4602      	mov	r2, r0
 800b73a:	2000      	movs	r0, #0
 800b73c:	f7f4 fdbc 	bl	80002b8 <__aeabi_dsub>
 800b740:	ec41 0b10 	vmov	d0, r0, r1
 800b744:	b003      	add	sp, #12
 800b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74a:	4b22      	ldr	r3, [pc, #136]	; (800b7d4 <__kernel_cos+0x184>)
 800b74c:	4920      	ldr	r1, [pc, #128]	; (800b7d0 <__kernel_cos+0x180>)
 800b74e:	4598      	cmp	r8, r3
 800b750:	bfcc      	ite	gt
 800b752:	4d21      	ldrgt	r5, [pc, #132]	; (800b7d8 <__kernel_cos+0x188>)
 800b754:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b758:	2400      	movs	r4, #0
 800b75a:	4622      	mov	r2, r4
 800b75c:	462b      	mov	r3, r5
 800b75e:	2000      	movs	r0, #0
 800b760:	f7f4 fdaa 	bl	80002b8 <__aeabi_dsub>
 800b764:	4622      	mov	r2, r4
 800b766:	4680      	mov	r8, r0
 800b768:	4689      	mov	r9, r1
 800b76a:	462b      	mov	r3, r5
 800b76c:	4650      	mov	r0, sl
 800b76e:	4659      	mov	r1, fp
 800b770:	f7f4 fda2 	bl	80002b8 <__aeabi_dsub>
 800b774:	4632      	mov	r2, r6
 800b776:	463b      	mov	r3, r7
 800b778:	f7f4 fd9e 	bl	80002b8 <__aeabi_dsub>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	4640      	mov	r0, r8
 800b782:	4649      	mov	r1, r9
 800b784:	e7da      	b.n	800b73c <__kernel_cos+0xec>
 800b786:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b7c0 <__kernel_cos+0x170>
 800b78a:	e7db      	b.n	800b744 <__kernel_cos+0xf4>
 800b78c:	f3af 8000 	nop.w
 800b790:	be8838d4 	.word	0xbe8838d4
 800b794:	bda8fae9 	.word	0xbda8fae9
 800b798:	bdb4b1c4 	.word	0xbdb4b1c4
 800b79c:	3e21ee9e 	.word	0x3e21ee9e
 800b7a0:	809c52ad 	.word	0x809c52ad
 800b7a4:	3e927e4f 	.word	0x3e927e4f
 800b7a8:	19cb1590 	.word	0x19cb1590
 800b7ac:	3efa01a0 	.word	0x3efa01a0
 800b7b0:	16c15177 	.word	0x16c15177
 800b7b4:	3f56c16c 	.word	0x3f56c16c
 800b7b8:	5555554c 	.word	0x5555554c
 800b7bc:	3fa55555 	.word	0x3fa55555
 800b7c0:	00000000 	.word	0x00000000
 800b7c4:	3ff00000 	.word	0x3ff00000
 800b7c8:	3fe00000 	.word	0x3fe00000
 800b7cc:	3fd33332 	.word	0x3fd33332
 800b7d0:	3ff00000 	.word	0x3ff00000
 800b7d4:	3fe90000 	.word	0x3fe90000
 800b7d8:	3fd20000 	.word	0x3fd20000
 800b7dc:	00000000 	.word	0x00000000

0800b7e0 <__kernel_sin>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	ed2d 8b04 	vpush	{d8-d9}
 800b7e8:	eeb0 8a41 	vmov.f32	s16, s2
 800b7ec:	eef0 8a61 	vmov.f32	s17, s3
 800b7f0:	ec55 4b10 	vmov	r4, r5, d0
 800b7f4:	b083      	sub	sp, #12
 800b7f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b7fe:	9001      	str	r0, [sp, #4]
 800b800:	da06      	bge.n	800b810 <__kernel_sin+0x30>
 800b802:	ee10 0a10 	vmov	r0, s0
 800b806:	4629      	mov	r1, r5
 800b808:	f7f5 f9be 	bl	8000b88 <__aeabi_d2iz>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d051      	beq.n	800b8b4 <__kernel_sin+0xd4>
 800b810:	4622      	mov	r2, r4
 800b812:	462b      	mov	r3, r5
 800b814:	4620      	mov	r0, r4
 800b816:	4629      	mov	r1, r5
 800b818:	f7f4 ff06 	bl	8000628 <__aeabi_dmul>
 800b81c:	4682      	mov	sl, r0
 800b81e:	468b      	mov	fp, r1
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	4620      	mov	r0, r4
 800b826:	4629      	mov	r1, r5
 800b828:	f7f4 fefe 	bl	8000628 <__aeabi_dmul>
 800b82c:	a341      	add	r3, pc, #260	; (adr r3, 800b934 <__kernel_sin+0x154>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	4680      	mov	r8, r0
 800b834:	4689      	mov	r9, r1
 800b836:	4650      	mov	r0, sl
 800b838:	4659      	mov	r1, fp
 800b83a:	f7f4 fef5 	bl	8000628 <__aeabi_dmul>
 800b83e:	a33f      	add	r3, pc, #252	; (adr r3, 800b93c <__kernel_sin+0x15c>)
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	f7f4 fd38 	bl	80002b8 <__aeabi_dsub>
 800b848:	4652      	mov	r2, sl
 800b84a:	465b      	mov	r3, fp
 800b84c:	f7f4 feec 	bl	8000628 <__aeabi_dmul>
 800b850:	a33c      	add	r3, pc, #240	; (adr r3, 800b944 <__kernel_sin+0x164>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fd31 	bl	80002bc <__adddf3>
 800b85a:	4652      	mov	r2, sl
 800b85c:	465b      	mov	r3, fp
 800b85e:	f7f4 fee3 	bl	8000628 <__aeabi_dmul>
 800b862:	a33a      	add	r3, pc, #232	; (adr r3, 800b94c <__kernel_sin+0x16c>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f7f4 fd26 	bl	80002b8 <__aeabi_dsub>
 800b86c:	4652      	mov	r2, sl
 800b86e:	465b      	mov	r3, fp
 800b870:	f7f4 feda 	bl	8000628 <__aeabi_dmul>
 800b874:	a337      	add	r3, pc, #220	; (adr r3, 800b954 <__kernel_sin+0x174>)
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	f7f4 fd1f 	bl	80002bc <__adddf3>
 800b87e:	9b01      	ldr	r3, [sp, #4]
 800b880:	4606      	mov	r6, r0
 800b882:	460f      	mov	r7, r1
 800b884:	b9eb      	cbnz	r3, 800b8c2 <__kernel_sin+0xe2>
 800b886:	4602      	mov	r2, r0
 800b888:	460b      	mov	r3, r1
 800b88a:	4650      	mov	r0, sl
 800b88c:	4659      	mov	r1, fp
 800b88e:	f7f4 fecb 	bl	8000628 <__aeabi_dmul>
 800b892:	a325      	add	r3, pc, #148	; (adr r3, 800b928 <__kernel_sin+0x148>)
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	f7f4 fd0e 	bl	80002b8 <__aeabi_dsub>
 800b89c:	4642      	mov	r2, r8
 800b89e:	464b      	mov	r3, r9
 800b8a0:	f7f4 fec2 	bl	8000628 <__aeabi_dmul>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	f7f4 fd06 	bl	80002bc <__adddf3>
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	460d      	mov	r5, r1
 800b8b4:	ec45 4b10 	vmov	d0, r4, r5
 800b8b8:	b003      	add	sp, #12
 800b8ba:	ecbd 8b04 	vpop	{d8-d9}
 800b8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c2:	4b1b      	ldr	r3, [pc, #108]	; (800b930 <__kernel_sin+0x150>)
 800b8c4:	ec51 0b18 	vmov	r0, r1, d8
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f7f4 fead 	bl	8000628 <__aeabi_dmul>
 800b8ce:	4632      	mov	r2, r6
 800b8d0:	ec41 0b19 	vmov	d9, r0, r1
 800b8d4:	463b      	mov	r3, r7
 800b8d6:	4640      	mov	r0, r8
 800b8d8:	4649      	mov	r1, r9
 800b8da:	f7f4 fea5 	bl	8000628 <__aeabi_dmul>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	ec51 0b19 	vmov	r0, r1, d9
 800b8e6:	f7f4 fce7 	bl	80002b8 <__aeabi_dsub>
 800b8ea:	4652      	mov	r2, sl
 800b8ec:	465b      	mov	r3, fp
 800b8ee:	f7f4 fe9b 	bl	8000628 <__aeabi_dmul>
 800b8f2:	ec53 2b18 	vmov	r2, r3, d8
 800b8f6:	f7f4 fcdf 	bl	80002b8 <__aeabi_dsub>
 800b8fa:	a30b      	add	r3, pc, #44	; (adr r3, 800b928 <__kernel_sin+0x148>)
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	4606      	mov	r6, r0
 800b902:	460f      	mov	r7, r1
 800b904:	4640      	mov	r0, r8
 800b906:	4649      	mov	r1, r9
 800b908:	f7f4 fe8e 	bl	8000628 <__aeabi_dmul>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	4630      	mov	r0, r6
 800b912:	4639      	mov	r1, r7
 800b914:	f7f4 fcd2 	bl	80002bc <__adddf3>
 800b918:	4602      	mov	r2, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	4620      	mov	r0, r4
 800b91e:	4629      	mov	r1, r5
 800b920:	f7f4 fcca 	bl	80002b8 <__aeabi_dsub>
 800b924:	e7c4      	b.n	800b8b0 <__kernel_sin+0xd0>
 800b926:	bf00      	nop
 800b928:	55555549 	.word	0x55555549
 800b92c:	3fc55555 	.word	0x3fc55555
 800b930:	3fe00000 	.word	0x3fe00000
 800b934:	5acfd57c 	.word	0x5acfd57c
 800b938:	3de5d93a 	.word	0x3de5d93a
 800b93c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b940:	3e5ae5e6 	.word	0x3e5ae5e6
 800b944:	57b1fe7d 	.word	0x57b1fe7d
 800b948:	3ec71de3 	.word	0x3ec71de3
 800b94c:	19c161d5 	.word	0x19c161d5
 800b950:	3f2a01a0 	.word	0x3f2a01a0
 800b954:	1110f8a6 	.word	0x1110f8a6
 800b958:	3f811111 	.word	0x3f811111
 800b95c:	00000000 	.word	0x00000000

0800b960 <__ieee754_atan2>:
 800b960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b964:	ec57 6b11 	vmov	r6, r7, d1
 800b968:	4273      	negs	r3, r6
 800b96a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800bae8 <__ieee754_atan2+0x188>
 800b96e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b972:	4333      	orrs	r3, r6
 800b974:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b978:	4543      	cmp	r3, r8
 800b97a:	ec51 0b10 	vmov	r0, r1, d0
 800b97e:	ee11 5a10 	vmov	r5, s2
 800b982:	d80a      	bhi.n	800b99a <__ieee754_atan2+0x3a>
 800b984:	4244      	negs	r4, r0
 800b986:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b98a:	4304      	orrs	r4, r0
 800b98c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b990:	4544      	cmp	r4, r8
 800b992:	ee10 9a10 	vmov	r9, s0
 800b996:	468e      	mov	lr, r1
 800b998:	d907      	bls.n	800b9aa <__ieee754_atan2+0x4a>
 800b99a:	4632      	mov	r2, r6
 800b99c:	463b      	mov	r3, r7
 800b99e:	f7f4 fc8d 	bl	80002bc <__adddf3>
 800b9a2:	ec41 0b10 	vmov	d0, r0, r1
 800b9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b9ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b9b2:	4334      	orrs	r4, r6
 800b9b4:	d103      	bne.n	800b9be <__ieee754_atan2+0x5e>
 800b9b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9ba:	f000 baa1 	b.w	800bf00 <atan>
 800b9be:	17bc      	asrs	r4, r7, #30
 800b9c0:	f004 0402 	and.w	r4, r4, #2
 800b9c4:	ea53 0909 	orrs.w	r9, r3, r9
 800b9c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b9cc:	d107      	bne.n	800b9de <__ieee754_atan2+0x7e>
 800b9ce:	2c02      	cmp	r4, #2
 800b9d0:	d05f      	beq.n	800ba92 <__ieee754_atan2+0x132>
 800b9d2:	2c03      	cmp	r4, #3
 800b9d4:	d1e5      	bne.n	800b9a2 <__ieee754_atan2+0x42>
 800b9d6:	a140      	add	r1, pc, #256	; (adr r1, 800bad8 <__ieee754_atan2+0x178>)
 800b9d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9dc:	e7e1      	b.n	800b9a2 <__ieee754_atan2+0x42>
 800b9de:	4315      	orrs	r5, r2
 800b9e0:	d106      	bne.n	800b9f0 <__ieee754_atan2+0x90>
 800b9e2:	f1be 0f00 	cmp.w	lr, #0
 800b9e6:	da5f      	bge.n	800baa8 <__ieee754_atan2+0x148>
 800b9e8:	a13d      	add	r1, pc, #244	; (adr r1, 800bae0 <__ieee754_atan2+0x180>)
 800b9ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9ee:	e7d8      	b.n	800b9a2 <__ieee754_atan2+0x42>
 800b9f0:	4542      	cmp	r2, r8
 800b9f2:	d10f      	bne.n	800ba14 <__ieee754_atan2+0xb4>
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b9fa:	d107      	bne.n	800ba0c <__ieee754_atan2+0xac>
 800b9fc:	2c02      	cmp	r4, #2
 800b9fe:	d84c      	bhi.n	800ba9a <__ieee754_atan2+0x13a>
 800ba00:	4b33      	ldr	r3, [pc, #204]	; (800bad0 <__ieee754_atan2+0x170>)
 800ba02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba0a:	e7ca      	b.n	800b9a2 <__ieee754_atan2+0x42>
 800ba0c:	2c02      	cmp	r4, #2
 800ba0e:	d848      	bhi.n	800baa2 <__ieee754_atan2+0x142>
 800ba10:	4b30      	ldr	r3, [pc, #192]	; (800bad4 <__ieee754_atan2+0x174>)
 800ba12:	e7f6      	b.n	800ba02 <__ieee754_atan2+0xa2>
 800ba14:	4543      	cmp	r3, r8
 800ba16:	d0e4      	beq.n	800b9e2 <__ieee754_atan2+0x82>
 800ba18:	1a9b      	subs	r3, r3, r2
 800ba1a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ba1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba22:	da1e      	bge.n	800ba62 <__ieee754_atan2+0x102>
 800ba24:	2f00      	cmp	r7, #0
 800ba26:	da01      	bge.n	800ba2c <__ieee754_atan2+0xcc>
 800ba28:	323c      	adds	r2, #60	; 0x3c
 800ba2a:	db1e      	blt.n	800ba6a <__ieee754_atan2+0x10a>
 800ba2c:	4632      	mov	r2, r6
 800ba2e:	463b      	mov	r3, r7
 800ba30:	f7f4 ff24 	bl	800087c <__aeabi_ddiv>
 800ba34:	ec41 0b10 	vmov	d0, r0, r1
 800ba38:	f000 fc02 	bl	800c240 <fabs>
 800ba3c:	f000 fa60 	bl	800bf00 <atan>
 800ba40:	ec51 0b10 	vmov	r0, r1, d0
 800ba44:	2c01      	cmp	r4, #1
 800ba46:	d013      	beq.n	800ba70 <__ieee754_atan2+0x110>
 800ba48:	2c02      	cmp	r4, #2
 800ba4a:	d015      	beq.n	800ba78 <__ieee754_atan2+0x118>
 800ba4c:	2c00      	cmp	r4, #0
 800ba4e:	d0a8      	beq.n	800b9a2 <__ieee754_atan2+0x42>
 800ba50:	a317      	add	r3, pc, #92	; (adr r3, 800bab0 <__ieee754_atan2+0x150>)
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f7f4 fc2f 	bl	80002b8 <__aeabi_dsub>
 800ba5a:	a317      	add	r3, pc, #92	; (adr r3, 800bab8 <__ieee754_atan2+0x158>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	e014      	b.n	800ba8c <__ieee754_atan2+0x12c>
 800ba62:	a117      	add	r1, pc, #92	; (adr r1, 800bac0 <__ieee754_atan2+0x160>)
 800ba64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba68:	e7ec      	b.n	800ba44 <__ieee754_atan2+0xe4>
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	e7e9      	b.n	800ba44 <__ieee754_atan2+0xe4>
 800ba70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba74:	4619      	mov	r1, r3
 800ba76:	e794      	b.n	800b9a2 <__ieee754_atan2+0x42>
 800ba78:	a30d      	add	r3, pc, #52	; (adr r3, 800bab0 <__ieee754_atan2+0x150>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	f7f4 fc1b 	bl	80002b8 <__aeabi_dsub>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	a10c      	add	r1, pc, #48	; (adr r1, 800bab8 <__ieee754_atan2+0x158>)
 800ba88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba8c:	f7f4 fc14 	bl	80002b8 <__aeabi_dsub>
 800ba90:	e787      	b.n	800b9a2 <__ieee754_atan2+0x42>
 800ba92:	a109      	add	r1, pc, #36	; (adr r1, 800bab8 <__ieee754_atan2+0x158>)
 800ba94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba98:	e783      	b.n	800b9a2 <__ieee754_atan2+0x42>
 800ba9a:	a10b      	add	r1, pc, #44	; (adr r1, 800bac8 <__ieee754_atan2+0x168>)
 800ba9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa0:	e77f      	b.n	800b9a2 <__ieee754_atan2+0x42>
 800baa2:	2000      	movs	r0, #0
 800baa4:	2100      	movs	r1, #0
 800baa6:	e77c      	b.n	800b9a2 <__ieee754_atan2+0x42>
 800baa8:	a105      	add	r1, pc, #20	; (adr r1, 800bac0 <__ieee754_atan2+0x160>)
 800baaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baae:	e778      	b.n	800b9a2 <__ieee754_atan2+0x42>
 800bab0:	33145c07 	.word	0x33145c07
 800bab4:	3ca1a626 	.word	0x3ca1a626
 800bab8:	54442d18 	.word	0x54442d18
 800babc:	400921fb 	.word	0x400921fb
 800bac0:	54442d18 	.word	0x54442d18
 800bac4:	3ff921fb 	.word	0x3ff921fb
 800bac8:	54442d18 	.word	0x54442d18
 800bacc:	3fe921fb 	.word	0x3fe921fb
 800bad0:	0800cfd8 	.word	0x0800cfd8
 800bad4:	0800cff0 	.word	0x0800cff0
 800bad8:	54442d18 	.word	0x54442d18
 800badc:	c00921fb 	.word	0xc00921fb
 800bae0:	54442d18 	.word	0x54442d18
 800bae4:	bff921fb 	.word	0xbff921fb
 800bae8:	7ff00000 	.word	0x7ff00000
 800baec:	00000000 	.word	0x00000000

0800baf0 <__ieee754_rem_pio2>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	ed2d 8b02 	vpush	{d8}
 800baf8:	ec55 4b10 	vmov	r4, r5, d0
 800bafc:	4bca      	ldr	r3, [pc, #808]	; (800be28 <__ieee754_rem_pio2+0x338>)
 800bafe:	b08b      	sub	sp, #44	; 0x2c
 800bb00:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bb04:	4598      	cmp	r8, r3
 800bb06:	4682      	mov	sl, r0
 800bb08:	9502      	str	r5, [sp, #8]
 800bb0a:	dc08      	bgt.n	800bb1e <__ieee754_rem_pio2+0x2e>
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2300      	movs	r3, #0
 800bb10:	ed80 0b00 	vstr	d0, [r0]
 800bb14:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bb18:	f04f 0b00 	mov.w	fp, #0
 800bb1c:	e028      	b.n	800bb70 <__ieee754_rem_pio2+0x80>
 800bb1e:	4bc3      	ldr	r3, [pc, #780]	; (800be2c <__ieee754_rem_pio2+0x33c>)
 800bb20:	4598      	cmp	r8, r3
 800bb22:	dc78      	bgt.n	800bc16 <__ieee754_rem_pio2+0x126>
 800bb24:	9b02      	ldr	r3, [sp, #8]
 800bb26:	4ec2      	ldr	r6, [pc, #776]	; (800be30 <__ieee754_rem_pio2+0x340>)
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	ee10 0a10 	vmov	r0, s0
 800bb2e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bdf0 <__ieee754_rem_pio2+0x300>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	4629      	mov	r1, r5
 800bb36:	dd39      	ble.n	800bbac <__ieee754_rem_pio2+0xbc>
 800bb38:	f7f4 fbbe 	bl	80002b8 <__aeabi_dsub>
 800bb3c:	45b0      	cmp	r8, r6
 800bb3e:	4604      	mov	r4, r0
 800bb40:	460d      	mov	r5, r1
 800bb42:	d01b      	beq.n	800bb7c <__ieee754_rem_pio2+0x8c>
 800bb44:	a3ac      	add	r3, pc, #688	; (adr r3, 800bdf8 <__ieee754_rem_pio2+0x308>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 fbb5 	bl	80002b8 <__aeabi_dsub>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	e9ca 2300 	strd	r2, r3, [sl]
 800bb56:	4620      	mov	r0, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	f7f4 fbad 	bl	80002b8 <__aeabi_dsub>
 800bb5e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bdf8 <__ieee754_rem_pio2+0x308>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	f7f4 fba8 	bl	80002b8 <__aeabi_dsub>
 800bb68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bb6c:	f04f 0b01 	mov.w	fp, #1
 800bb70:	4658      	mov	r0, fp
 800bb72:	b00b      	add	sp, #44	; 0x2c
 800bb74:	ecbd 8b02 	vpop	{d8}
 800bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7c:	a3a0      	add	r3, pc, #640	; (adr r3, 800be00 <__ieee754_rem_pio2+0x310>)
 800bb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb82:	f7f4 fb99 	bl	80002b8 <__aeabi_dsub>
 800bb86:	a3a0      	add	r3, pc, #640	; (adr r3, 800be08 <__ieee754_rem_pio2+0x318>)
 800bb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	460d      	mov	r5, r1
 800bb90:	f7f4 fb92 	bl	80002b8 <__aeabi_dsub>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	e9ca 2300 	strd	r2, r3, [sl]
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	4629      	mov	r1, r5
 800bba0:	f7f4 fb8a 	bl	80002b8 <__aeabi_dsub>
 800bba4:	a398      	add	r3, pc, #608	; (adr r3, 800be08 <__ieee754_rem_pio2+0x318>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	e7db      	b.n	800bb64 <__ieee754_rem_pio2+0x74>
 800bbac:	f7f4 fb86 	bl	80002bc <__adddf3>
 800bbb0:	45b0      	cmp	r8, r6
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	460d      	mov	r5, r1
 800bbb6:	d016      	beq.n	800bbe6 <__ieee754_rem_pio2+0xf6>
 800bbb8:	a38f      	add	r3, pc, #572	; (adr r3, 800bdf8 <__ieee754_rem_pio2+0x308>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fb7d 	bl	80002bc <__adddf3>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	e9ca 2300 	strd	r2, r3, [sl]
 800bbca:	4620      	mov	r0, r4
 800bbcc:	4629      	mov	r1, r5
 800bbce:	f7f4 fb73 	bl	80002b8 <__aeabi_dsub>
 800bbd2:	a389      	add	r3, pc, #548	; (adr r3, 800bdf8 <__ieee754_rem_pio2+0x308>)
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f7f4 fb70 	bl	80002bc <__adddf3>
 800bbdc:	f04f 3bff 	mov.w	fp, #4294967295
 800bbe0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bbe4:	e7c4      	b.n	800bb70 <__ieee754_rem_pio2+0x80>
 800bbe6:	a386      	add	r3, pc, #536	; (adr r3, 800be00 <__ieee754_rem_pio2+0x310>)
 800bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbec:	f7f4 fb66 	bl	80002bc <__adddf3>
 800bbf0:	a385      	add	r3, pc, #532	; (adr r3, 800be08 <__ieee754_rem_pio2+0x318>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	460d      	mov	r5, r1
 800bbfa:	f7f4 fb5f 	bl	80002bc <__adddf3>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	e9ca 2300 	strd	r2, r3, [sl]
 800bc06:	4620      	mov	r0, r4
 800bc08:	4629      	mov	r1, r5
 800bc0a:	f7f4 fb55 	bl	80002b8 <__aeabi_dsub>
 800bc0e:	a37e      	add	r3, pc, #504	; (adr r3, 800be08 <__ieee754_rem_pio2+0x318>)
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	e7e0      	b.n	800bbd8 <__ieee754_rem_pio2+0xe8>
 800bc16:	4b87      	ldr	r3, [pc, #540]	; (800be34 <__ieee754_rem_pio2+0x344>)
 800bc18:	4598      	cmp	r8, r3
 800bc1a:	f300 80d8 	bgt.w	800bdce <__ieee754_rem_pio2+0x2de>
 800bc1e:	f000 fb0f 	bl	800c240 <fabs>
 800bc22:	ec55 4b10 	vmov	r4, r5, d0
 800bc26:	ee10 0a10 	vmov	r0, s0
 800bc2a:	a379      	add	r3, pc, #484	; (adr r3, 800be10 <__ieee754_rem_pio2+0x320>)
 800bc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc30:	4629      	mov	r1, r5
 800bc32:	f7f4 fcf9 	bl	8000628 <__aeabi_dmul>
 800bc36:	4b80      	ldr	r3, [pc, #512]	; (800be38 <__ieee754_rem_pio2+0x348>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f7f4 fb3f 	bl	80002bc <__adddf3>
 800bc3e:	f7f4 ffa3 	bl	8000b88 <__aeabi_d2iz>
 800bc42:	4683      	mov	fp, r0
 800bc44:	f7f4 fc86 	bl	8000554 <__aeabi_i2d>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	ec43 2b18 	vmov	d8, r2, r3
 800bc50:	a367      	add	r3, pc, #412	; (adr r3, 800bdf0 <__ieee754_rem_pio2+0x300>)
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	f7f4 fce7 	bl	8000628 <__aeabi_dmul>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	4620      	mov	r0, r4
 800bc60:	4629      	mov	r1, r5
 800bc62:	f7f4 fb29 	bl	80002b8 <__aeabi_dsub>
 800bc66:	a364      	add	r3, pc, #400	; (adr r3, 800bdf8 <__ieee754_rem_pio2+0x308>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	ec51 0b18 	vmov	r0, r1, d8
 800bc74:	f7f4 fcd8 	bl	8000628 <__aeabi_dmul>
 800bc78:	f1bb 0f1f 	cmp.w	fp, #31
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	dc0d      	bgt.n	800bc9e <__ieee754_rem_pio2+0x1ae>
 800bc82:	4b6e      	ldr	r3, [pc, #440]	; (800be3c <__ieee754_rem_pio2+0x34c>)
 800bc84:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8c:	4543      	cmp	r3, r8
 800bc8e:	d006      	beq.n	800bc9e <__ieee754_rem_pio2+0x1ae>
 800bc90:	4622      	mov	r2, r4
 800bc92:	462b      	mov	r3, r5
 800bc94:	4630      	mov	r0, r6
 800bc96:	4639      	mov	r1, r7
 800bc98:	f7f4 fb0e 	bl	80002b8 <__aeabi_dsub>
 800bc9c:	e00e      	b.n	800bcbc <__ieee754_rem_pio2+0x1cc>
 800bc9e:	462b      	mov	r3, r5
 800bca0:	4622      	mov	r2, r4
 800bca2:	4630      	mov	r0, r6
 800bca4:	4639      	mov	r1, r7
 800bca6:	f7f4 fb07 	bl	80002b8 <__aeabi_dsub>
 800bcaa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bcae:	9303      	str	r3, [sp, #12]
 800bcb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bcb4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800bcb8:	2b10      	cmp	r3, #16
 800bcba:	dc02      	bgt.n	800bcc2 <__ieee754_rem_pio2+0x1d2>
 800bcbc:	e9ca 0100 	strd	r0, r1, [sl]
 800bcc0:	e039      	b.n	800bd36 <__ieee754_rem_pio2+0x246>
 800bcc2:	a34f      	add	r3, pc, #316	; (adr r3, 800be00 <__ieee754_rem_pio2+0x310>)
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	ec51 0b18 	vmov	r0, r1, d8
 800bccc:	f7f4 fcac 	bl	8000628 <__aeabi_dmul>
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	460d      	mov	r5, r1
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 faec 	bl	80002b8 <__aeabi_dsub>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4680      	mov	r8, r0
 800bce6:	4689      	mov	r9, r1
 800bce8:	4630      	mov	r0, r6
 800bcea:	4639      	mov	r1, r7
 800bcec:	f7f4 fae4 	bl	80002b8 <__aeabi_dsub>
 800bcf0:	4622      	mov	r2, r4
 800bcf2:	462b      	mov	r3, r5
 800bcf4:	f7f4 fae0 	bl	80002b8 <__aeabi_dsub>
 800bcf8:	a343      	add	r3, pc, #268	; (adr r3, 800be08 <__ieee754_rem_pio2+0x318>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	4604      	mov	r4, r0
 800bd00:	460d      	mov	r5, r1
 800bd02:	ec51 0b18 	vmov	r0, r1, d8
 800bd06:	f7f4 fc8f 	bl	8000628 <__aeabi_dmul>
 800bd0a:	4622      	mov	r2, r4
 800bd0c:	462b      	mov	r3, r5
 800bd0e:	f7f4 fad3 	bl	80002b8 <__aeabi_dsub>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	4604      	mov	r4, r0
 800bd18:	460d      	mov	r5, r1
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	f7f4 facb 	bl	80002b8 <__aeabi_dsub>
 800bd22:	9a03      	ldr	r2, [sp, #12]
 800bd24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	2b31      	cmp	r3, #49	; 0x31
 800bd2c:	dc24      	bgt.n	800bd78 <__ieee754_rem_pio2+0x288>
 800bd2e:	e9ca 0100 	strd	r0, r1, [sl]
 800bd32:	4646      	mov	r6, r8
 800bd34:	464f      	mov	r7, r9
 800bd36:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	4642      	mov	r2, r8
 800bd3e:	464b      	mov	r3, r9
 800bd40:	4639      	mov	r1, r7
 800bd42:	f7f4 fab9 	bl	80002b8 <__aeabi_dsub>
 800bd46:	462b      	mov	r3, r5
 800bd48:	4622      	mov	r2, r4
 800bd4a:	f7f4 fab5 	bl	80002b8 <__aeabi_dsub>
 800bd4e:	9b02      	ldr	r3, [sp, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bd56:	f6bf af0b 	bge.w	800bb70 <__ieee754_rem_pio2+0x80>
 800bd5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bd5e:	f8ca 3004 	str.w	r3, [sl, #4]
 800bd62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd66:	f8ca 8000 	str.w	r8, [sl]
 800bd6a:	f8ca 0008 	str.w	r0, [sl, #8]
 800bd6e:	f8ca 300c 	str.w	r3, [sl, #12]
 800bd72:	f1cb 0b00 	rsb	fp, fp, #0
 800bd76:	e6fb      	b.n	800bb70 <__ieee754_rem_pio2+0x80>
 800bd78:	a327      	add	r3, pc, #156	; (adr r3, 800be18 <__ieee754_rem_pio2+0x328>)
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	ec51 0b18 	vmov	r0, r1, d8
 800bd82:	f7f4 fc51 	bl	8000628 <__aeabi_dmul>
 800bd86:	4604      	mov	r4, r0
 800bd88:	460d      	mov	r5, r1
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4640      	mov	r0, r8
 800bd90:	4649      	mov	r1, r9
 800bd92:	f7f4 fa91 	bl	80002b8 <__aeabi_dsub>
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	460f      	mov	r7, r1
 800bd9e:	4640      	mov	r0, r8
 800bda0:	4649      	mov	r1, r9
 800bda2:	f7f4 fa89 	bl	80002b8 <__aeabi_dsub>
 800bda6:	4622      	mov	r2, r4
 800bda8:	462b      	mov	r3, r5
 800bdaa:	f7f4 fa85 	bl	80002b8 <__aeabi_dsub>
 800bdae:	a31c      	add	r3, pc, #112	; (adr r3, 800be20 <__ieee754_rem_pio2+0x330>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	ec51 0b18 	vmov	r0, r1, d8
 800bdbc:	f7f4 fc34 	bl	8000628 <__aeabi_dmul>
 800bdc0:	4622      	mov	r2, r4
 800bdc2:	462b      	mov	r3, r5
 800bdc4:	f7f4 fa78 	bl	80002b8 <__aeabi_dsub>
 800bdc8:	4604      	mov	r4, r0
 800bdca:	460d      	mov	r5, r1
 800bdcc:	e760      	b.n	800bc90 <__ieee754_rem_pio2+0x1a0>
 800bdce:	4b1c      	ldr	r3, [pc, #112]	; (800be40 <__ieee754_rem_pio2+0x350>)
 800bdd0:	4598      	cmp	r8, r3
 800bdd2:	dd37      	ble.n	800be44 <__ieee754_rem_pio2+0x354>
 800bdd4:	ee10 2a10 	vmov	r2, s0
 800bdd8:	462b      	mov	r3, r5
 800bdda:	4620      	mov	r0, r4
 800bddc:	4629      	mov	r1, r5
 800bdde:	f7f4 fa6b 	bl	80002b8 <__aeabi_dsub>
 800bde2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bde6:	e9ca 0100 	strd	r0, r1, [sl]
 800bdea:	e695      	b.n	800bb18 <__ieee754_rem_pio2+0x28>
 800bdec:	f3af 8000 	nop.w
 800bdf0:	54400000 	.word	0x54400000
 800bdf4:	3ff921fb 	.word	0x3ff921fb
 800bdf8:	1a626331 	.word	0x1a626331
 800bdfc:	3dd0b461 	.word	0x3dd0b461
 800be00:	1a600000 	.word	0x1a600000
 800be04:	3dd0b461 	.word	0x3dd0b461
 800be08:	2e037073 	.word	0x2e037073
 800be0c:	3ba3198a 	.word	0x3ba3198a
 800be10:	6dc9c883 	.word	0x6dc9c883
 800be14:	3fe45f30 	.word	0x3fe45f30
 800be18:	2e000000 	.word	0x2e000000
 800be1c:	3ba3198a 	.word	0x3ba3198a
 800be20:	252049c1 	.word	0x252049c1
 800be24:	397b839a 	.word	0x397b839a
 800be28:	3fe921fb 	.word	0x3fe921fb
 800be2c:	4002d97b 	.word	0x4002d97b
 800be30:	3ff921fb 	.word	0x3ff921fb
 800be34:	413921fb 	.word	0x413921fb
 800be38:	3fe00000 	.word	0x3fe00000
 800be3c:	0800d008 	.word	0x0800d008
 800be40:	7fefffff 	.word	0x7fefffff
 800be44:	ea4f 5628 	mov.w	r6, r8, asr #20
 800be48:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800be4c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800be50:	4620      	mov	r0, r4
 800be52:	460d      	mov	r5, r1
 800be54:	f7f4 fe98 	bl	8000b88 <__aeabi_d2iz>
 800be58:	f7f4 fb7c 	bl	8000554 <__aeabi_i2d>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4620      	mov	r0, r4
 800be62:	4629      	mov	r1, r5
 800be64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be68:	f7f4 fa26 	bl	80002b8 <__aeabi_dsub>
 800be6c:	4b21      	ldr	r3, [pc, #132]	; (800bef4 <__ieee754_rem_pio2+0x404>)
 800be6e:	2200      	movs	r2, #0
 800be70:	f7f4 fbda 	bl	8000628 <__aeabi_dmul>
 800be74:	460d      	mov	r5, r1
 800be76:	4604      	mov	r4, r0
 800be78:	f7f4 fe86 	bl	8000b88 <__aeabi_d2iz>
 800be7c:	f7f4 fb6a 	bl	8000554 <__aeabi_i2d>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4620      	mov	r0, r4
 800be86:	4629      	mov	r1, r5
 800be88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be8c:	f7f4 fa14 	bl	80002b8 <__aeabi_dsub>
 800be90:	4b18      	ldr	r3, [pc, #96]	; (800bef4 <__ieee754_rem_pio2+0x404>)
 800be92:	2200      	movs	r2, #0
 800be94:	f7f4 fbc8 	bl	8000628 <__aeabi_dmul>
 800be98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be9c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800bea0:	2703      	movs	r7, #3
 800bea2:	2400      	movs	r4, #0
 800bea4:	2500      	movs	r5, #0
 800bea6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800beaa:	4622      	mov	r2, r4
 800beac:	462b      	mov	r3, r5
 800beae:	46b9      	mov	r9, r7
 800beb0:	3f01      	subs	r7, #1
 800beb2:	f7f4 fe21 	bl	8000af8 <__aeabi_dcmpeq>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d1f5      	bne.n	800bea6 <__ieee754_rem_pio2+0x3b6>
 800beba:	4b0f      	ldr	r3, [pc, #60]	; (800bef8 <__ieee754_rem_pio2+0x408>)
 800bebc:	9301      	str	r3, [sp, #4]
 800bebe:	2302      	movs	r3, #2
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	4632      	mov	r2, r6
 800bec4:	464b      	mov	r3, r9
 800bec6:	4651      	mov	r1, sl
 800bec8:	a804      	add	r0, sp, #16
 800beca:	f000 f9c5 	bl	800c258 <__kernel_rem_pio2>
 800bece:	9b02      	ldr	r3, [sp, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	4683      	mov	fp, r0
 800bed4:	f6bf ae4c 	bge.w	800bb70 <__ieee754_rem_pio2+0x80>
 800bed8:	e9da 2100 	ldrd	r2, r1, [sl]
 800bedc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bee0:	e9ca 2300 	strd	r2, r3, [sl]
 800bee4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bee8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800beec:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bef0:	e73f      	b.n	800bd72 <__ieee754_rem_pio2+0x282>
 800bef2:	bf00      	nop
 800bef4:	41700000 	.word	0x41700000
 800bef8:	0800d088 	.word	0x0800d088
 800befc:	00000000 	.word	0x00000000

0800bf00 <atan>:
 800bf00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf04:	ec55 4b10 	vmov	r4, r5, d0
 800bf08:	4bc3      	ldr	r3, [pc, #780]	; (800c218 <atan+0x318>)
 800bf0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bf0e:	429e      	cmp	r6, r3
 800bf10:	46ab      	mov	fp, r5
 800bf12:	dd18      	ble.n	800bf46 <atan+0x46>
 800bf14:	4bc1      	ldr	r3, [pc, #772]	; (800c21c <atan+0x31c>)
 800bf16:	429e      	cmp	r6, r3
 800bf18:	dc01      	bgt.n	800bf1e <atan+0x1e>
 800bf1a:	d109      	bne.n	800bf30 <atan+0x30>
 800bf1c:	b144      	cbz	r4, 800bf30 <atan+0x30>
 800bf1e:	4622      	mov	r2, r4
 800bf20:	462b      	mov	r3, r5
 800bf22:	4620      	mov	r0, r4
 800bf24:	4629      	mov	r1, r5
 800bf26:	f7f4 f9c9 	bl	80002bc <__adddf3>
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	460d      	mov	r5, r1
 800bf2e:	e006      	b.n	800bf3e <atan+0x3e>
 800bf30:	f1bb 0f00 	cmp.w	fp, #0
 800bf34:	f300 8131 	bgt.w	800c19a <atan+0x29a>
 800bf38:	a59b      	add	r5, pc, #620	; (adr r5, 800c1a8 <atan+0x2a8>)
 800bf3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf3e:	ec45 4b10 	vmov	d0, r4, r5
 800bf42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf46:	4bb6      	ldr	r3, [pc, #728]	; (800c220 <atan+0x320>)
 800bf48:	429e      	cmp	r6, r3
 800bf4a:	dc14      	bgt.n	800bf76 <atan+0x76>
 800bf4c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bf50:	429e      	cmp	r6, r3
 800bf52:	dc0d      	bgt.n	800bf70 <atan+0x70>
 800bf54:	a396      	add	r3, pc, #600	; (adr r3, 800c1b0 <atan+0x2b0>)
 800bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5a:	ee10 0a10 	vmov	r0, s0
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 f9ac 	bl	80002bc <__adddf3>
 800bf64:	4baf      	ldr	r3, [pc, #700]	; (800c224 <atan+0x324>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	f7f4 fdee 	bl	8000b48 <__aeabi_dcmpgt>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d1e6      	bne.n	800bf3e <atan+0x3e>
 800bf70:	f04f 3aff 	mov.w	sl, #4294967295
 800bf74:	e02b      	b.n	800bfce <atan+0xce>
 800bf76:	f000 f963 	bl	800c240 <fabs>
 800bf7a:	4bab      	ldr	r3, [pc, #684]	; (800c228 <atan+0x328>)
 800bf7c:	429e      	cmp	r6, r3
 800bf7e:	ec55 4b10 	vmov	r4, r5, d0
 800bf82:	f300 80bf 	bgt.w	800c104 <atan+0x204>
 800bf86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bf8a:	429e      	cmp	r6, r3
 800bf8c:	f300 80a0 	bgt.w	800c0d0 <atan+0x1d0>
 800bf90:	ee10 2a10 	vmov	r2, s0
 800bf94:	ee10 0a10 	vmov	r0, s0
 800bf98:	462b      	mov	r3, r5
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	f7f4 f98e 	bl	80002bc <__adddf3>
 800bfa0:	4ba0      	ldr	r3, [pc, #640]	; (800c224 <atan+0x324>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f7f4 f988 	bl	80002b8 <__aeabi_dsub>
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	f7f4 f981 	bl	80002bc <__adddf3>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	f7f4 fc5b 	bl	800087c <__aeabi_ddiv>
 800bfc6:	f04f 0a00 	mov.w	sl, #0
 800bfca:	4604      	mov	r4, r0
 800bfcc:	460d      	mov	r5, r1
 800bfce:	4622      	mov	r2, r4
 800bfd0:	462b      	mov	r3, r5
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	4629      	mov	r1, r5
 800bfd6:	f7f4 fb27 	bl	8000628 <__aeabi_dmul>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	4680      	mov	r8, r0
 800bfe0:	4689      	mov	r9, r1
 800bfe2:	f7f4 fb21 	bl	8000628 <__aeabi_dmul>
 800bfe6:	a374      	add	r3, pc, #464	; (adr r3, 800c1b8 <atan+0x2b8>)
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	4606      	mov	r6, r0
 800bfee:	460f      	mov	r7, r1
 800bff0:	f7f4 fb1a 	bl	8000628 <__aeabi_dmul>
 800bff4:	a372      	add	r3, pc, #456	; (adr r3, 800c1c0 <atan+0x2c0>)
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	f7f4 f95f 	bl	80002bc <__adddf3>
 800bffe:	4632      	mov	r2, r6
 800c000:	463b      	mov	r3, r7
 800c002:	f7f4 fb11 	bl	8000628 <__aeabi_dmul>
 800c006:	a370      	add	r3, pc, #448	; (adr r3, 800c1c8 <atan+0x2c8>)
 800c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00c:	f7f4 f956 	bl	80002bc <__adddf3>
 800c010:	4632      	mov	r2, r6
 800c012:	463b      	mov	r3, r7
 800c014:	f7f4 fb08 	bl	8000628 <__aeabi_dmul>
 800c018:	a36d      	add	r3, pc, #436	; (adr r3, 800c1d0 <atan+0x2d0>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	f7f4 f94d 	bl	80002bc <__adddf3>
 800c022:	4632      	mov	r2, r6
 800c024:	463b      	mov	r3, r7
 800c026:	f7f4 faff 	bl	8000628 <__aeabi_dmul>
 800c02a:	a36b      	add	r3, pc, #428	; (adr r3, 800c1d8 <atan+0x2d8>)
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	f7f4 f944 	bl	80002bc <__adddf3>
 800c034:	4632      	mov	r2, r6
 800c036:	463b      	mov	r3, r7
 800c038:	f7f4 faf6 	bl	8000628 <__aeabi_dmul>
 800c03c:	a368      	add	r3, pc, #416	; (adr r3, 800c1e0 <atan+0x2e0>)
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	f7f4 f93b 	bl	80002bc <__adddf3>
 800c046:	4642      	mov	r2, r8
 800c048:	464b      	mov	r3, r9
 800c04a:	f7f4 faed 	bl	8000628 <__aeabi_dmul>
 800c04e:	a366      	add	r3, pc, #408	; (adr r3, 800c1e8 <atan+0x2e8>)
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	4680      	mov	r8, r0
 800c056:	4689      	mov	r9, r1
 800c058:	4630      	mov	r0, r6
 800c05a:	4639      	mov	r1, r7
 800c05c:	f7f4 fae4 	bl	8000628 <__aeabi_dmul>
 800c060:	a363      	add	r3, pc, #396	; (adr r3, 800c1f0 <atan+0x2f0>)
 800c062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c066:	f7f4 f927 	bl	80002b8 <__aeabi_dsub>
 800c06a:	4632      	mov	r2, r6
 800c06c:	463b      	mov	r3, r7
 800c06e:	f7f4 fadb 	bl	8000628 <__aeabi_dmul>
 800c072:	a361      	add	r3, pc, #388	; (adr r3, 800c1f8 <atan+0x2f8>)
 800c074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c078:	f7f4 f91e 	bl	80002b8 <__aeabi_dsub>
 800c07c:	4632      	mov	r2, r6
 800c07e:	463b      	mov	r3, r7
 800c080:	f7f4 fad2 	bl	8000628 <__aeabi_dmul>
 800c084:	a35e      	add	r3, pc, #376	; (adr r3, 800c200 <atan+0x300>)
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	f7f4 f915 	bl	80002b8 <__aeabi_dsub>
 800c08e:	4632      	mov	r2, r6
 800c090:	463b      	mov	r3, r7
 800c092:	f7f4 fac9 	bl	8000628 <__aeabi_dmul>
 800c096:	a35c      	add	r3, pc, #368	; (adr r3, 800c208 <atan+0x308>)
 800c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09c:	f7f4 f90c 	bl	80002b8 <__aeabi_dsub>
 800c0a0:	4632      	mov	r2, r6
 800c0a2:	463b      	mov	r3, r7
 800c0a4:	f7f4 fac0 	bl	8000628 <__aeabi_dmul>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4640      	mov	r0, r8
 800c0ae:	4649      	mov	r1, r9
 800c0b0:	f7f4 f904 	bl	80002bc <__adddf3>
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	462b      	mov	r3, r5
 800c0b8:	f7f4 fab6 	bl	8000628 <__aeabi_dmul>
 800c0bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	d14b      	bne.n	800c15e <atan+0x25e>
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	f7f4 f8f5 	bl	80002b8 <__aeabi_dsub>
 800c0ce:	e72c      	b.n	800bf2a <atan+0x2a>
 800c0d0:	ee10 0a10 	vmov	r0, s0
 800c0d4:	4b53      	ldr	r3, [pc, #332]	; (800c224 <atan+0x324>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	4629      	mov	r1, r5
 800c0da:	f7f4 f8ed 	bl	80002b8 <__aeabi_dsub>
 800c0de:	4b51      	ldr	r3, [pc, #324]	; (800c224 <atan+0x324>)
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	460f      	mov	r7, r1
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	f7f4 f8e7 	bl	80002bc <__adddf3>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	f7f4 fbc1 	bl	800087c <__aeabi_ddiv>
 800c0fa:	f04f 0a01 	mov.w	sl, #1
 800c0fe:	4604      	mov	r4, r0
 800c100:	460d      	mov	r5, r1
 800c102:	e764      	b.n	800bfce <atan+0xce>
 800c104:	4b49      	ldr	r3, [pc, #292]	; (800c22c <atan+0x32c>)
 800c106:	429e      	cmp	r6, r3
 800c108:	da1d      	bge.n	800c146 <atan+0x246>
 800c10a:	ee10 0a10 	vmov	r0, s0
 800c10e:	4b48      	ldr	r3, [pc, #288]	; (800c230 <atan+0x330>)
 800c110:	2200      	movs	r2, #0
 800c112:	4629      	mov	r1, r5
 800c114:	f7f4 f8d0 	bl	80002b8 <__aeabi_dsub>
 800c118:	4b45      	ldr	r3, [pc, #276]	; (800c230 <atan+0x330>)
 800c11a:	4606      	mov	r6, r0
 800c11c:	460f      	mov	r7, r1
 800c11e:	2200      	movs	r2, #0
 800c120:	4620      	mov	r0, r4
 800c122:	4629      	mov	r1, r5
 800c124:	f7f4 fa80 	bl	8000628 <__aeabi_dmul>
 800c128:	4b3e      	ldr	r3, [pc, #248]	; (800c224 <atan+0x324>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	f7f4 f8c6 	bl	80002bc <__adddf3>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4630      	mov	r0, r6
 800c136:	4639      	mov	r1, r7
 800c138:	f7f4 fba0 	bl	800087c <__aeabi_ddiv>
 800c13c:	f04f 0a02 	mov.w	sl, #2
 800c140:	4604      	mov	r4, r0
 800c142:	460d      	mov	r5, r1
 800c144:	e743      	b.n	800bfce <atan+0xce>
 800c146:	462b      	mov	r3, r5
 800c148:	ee10 2a10 	vmov	r2, s0
 800c14c:	4939      	ldr	r1, [pc, #228]	; (800c234 <atan+0x334>)
 800c14e:	2000      	movs	r0, #0
 800c150:	f7f4 fb94 	bl	800087c <__aeabi_ddiv>
 800c154:	f04f 0a03 	mov.w	sl, #3
 800c158:	4604      	mov	r4, r0
 800c15a:	460d      	mov	r5, r1
 800c15c:	e737      	b.n	800bfce <atan+0xce>
 800c15e:	4b36      	ldr	r3, [pc, #216]	; (800c238 <atan+0x338>)
 800c160:	4e36      	ldr	r6, [pc, #216]	; (800c23c <atan+0x33c>)
 800c162:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	f7f4 f8a5 	bl	80002b8 <__aeabi_dsub>
 800c16e:	4622      	mov	r2, r4
 800c170:	462b      	mov	r3, r5
 800c172:	f7f4 f8a1 	bl	80002b8 <__aeabi_dsub>
 800c176:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c182:	f7f4 f899 	bl	80002b8 <__aeabi_dsub>
 800c186:	f1bb 0f00 	cmp.w	fp, #0
 800c18a:	4604      	mov	r4, r0
 800c18c:	460d      	mov	r5, r1
 800c18e:	f6bf aed6 	bge.w	800bf3e <atan+0x3e>
 800c192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c196:	461d      	mov	r5, r3
 800c198:	e6d1      	b.n	800bf3e <atan+0x3e>
 800c19a:	a51d      	add	r5, pc, #116	; (adr r5, 800c210 <atan+0x310>)
 800c19c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1a0:	e6cd      	b.n	800bf3e <atan+0x3e>
 800c1a2:	bf00      	nop
 800c1a4:	f3af 8000 	nop.w
 800c1a8:	54442d18 	.word	0x54442d18
 800c1ac:	bff921fb 	.word	0xbff921fb
 800c1b0:	8800759c 	.word	0x8800759c
 800c1b4:	7e37e43c 	.word	0x7e37e43c
 800c1b8:	e322da11 	.word	0xe322da11
 800c1bc:	3f90ad3a 	.word	0x3f90ad3a
 800c1c0:	24760deb 	.word	0x24760deb
 800c1c4:	3fa97b4b 	.word	0x3fa97b4b
 800c1c8:	a0d03d51 	.word	0xa0d03d51
 800c1cc:	3fb10d66 	.word	0x3fb10d66
 800c1d0:	c54c206e 	.word	0xc54c206e
 800c1d4:	3fb745cd 	.word	0x3fb745cd
 800c1d8:	920083ff 	.word	0x920083ff
 800c1dc:	3fc24924 	.word	0x3fc24924
 800c1e0:	5555550d 	.word	0x5555550d
 800c1e4:	3fd55555 	.word	0x3fd55555
 800c1e8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c1ec:	bfa2b444 	.word	0xbfa2b444
 800c1f0:	52defd9a 	.word	0x52defd9a
 800c1f4:	3fadde2d 	.word	0x3fadde2d
 800c1f8:	af749a6d 	.word	0xaf749a6d
 800c1fc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c200:	fe231671 	.word	0xfe231671
 800c204:	3fbc71c6 	.word	0x3fbc71c6
 800c208:	9998ebc4 	.word	0x9998ebc4
 800c20c:	3fc99999 	.word	0x3fc99999
 800c210:	54442d18 	.word	0x54442d18
 800c214:	3ff921fb 	.word	0x3ff921fb
 800c218:	440fffff 	.word	0x440fffff
 800c21c:	7ff00000 	.word	0x7ff00000
 800c220:	3fdbffff 	.word	0x3fdbffff
 800c224:	3ff00000 	.word	0x3ff00000
 800c228:	3ff2ffff 	.word	0x3ff2ffff
 800c22c:	40038000 	.word	0x40038000
 800c230:	3ff80000 	.word	0x3ff80000
 800c234:	bff00000 	.word	0xbff00000
 800c238:	0800d1b0 	.word	0x0800d1b0
 800c23c:	0800d190 	.word	0x0800d190

0800c240 <fabs>:
 800c240:	ec51 0b10 	vmov	r0, r1, d0
 800c244:	ee10 2a10 	vmov	r2, s0
 800c248:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c24c:	ec43 2b10 	vmov	d0, r2, r3
 800c250:	4770      	bx	lr
 800c252:	0000      	movs	r0, r0
 800c254:	0000      	movs	r0, r0
	...

0800c258 <__kernel_rem_pio2>:
 800c258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c25c:	ed2d 8b02 	vpush	{d8}
 800c260:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c264:	f112 0f14 	cmn.w	r2, #20
 800c268:	9306      	str	r3, [sp, #24]
 800c26a:	9104      	str	r1, [sp, #16]
 800c26c:	4bc2      	ldr	r3, [pc, #776]	; (800c578 <__kernel_rem_pio2+0x320>)
 800c26e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c270:	9009      	str	r0, [sp, #36]	; 0x24
 800c272:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	9b06      	ldr	r3, [sp, #24]
 800c27a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c27e:	bfa8      	it	ge
 800c280:	1ed4      	subge	r4, r2, #3
 800c282:	9305      	str	r3, [sp, #20]
 800c284:	bfb2      	itee	lt
 800c286:	2400      	movlt	r4, #0
 800c288:	2318      	movge	r3, #24
 800c28a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c28e:	f06f 0317 	mvn.w	r3, #23
 800c292:	fb04 3303 	mla	r3, r4, r3, r3
 800c296:	eb03 0a02 	add.w	sl, r3, r2
 800c29a:	9b00      	ldr	r3, [sp, #0]
 800c29c:	9a05      	ldr	r2, [sp, #20]
 800c29e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800c568 <__kernel_rem_pio2+0x310>
 800c2a2:	eb03 0802 	add.w	r8, r3, r2
 800c2a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c2a8:	1aa7      	subs	r7, r4, r2
 800c2aa:	ae20      	add	r6, sp, #128	; 0x80
 800c2ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c2b0:	2500      	movs	r5, #0
 800c2b2:	4545      	cmp	r5, r8
 800c2b4:	dd13      	ble.n	800c2de <__kernel_rem_pio2+0x86>
 800c2b6:	9b06      	ldr	r3, [sp, #24]
 800c2b8:	aa20      	add	r2, sp, #128	; 0x80
 800c2ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c2be:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c2c2:	f04f 0800 	mov.w	r8, #0
 800c2c6:	9b00      	ldr	r3, [sp, #0]
 800c2c8:	4598      	cmp	r8, r3
 800c2ca:	dc31      	bgt.n	800c330 <__kernel_rem_pio2+0xd8>
 800c2cc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800c568 <__kernel_rem_pio2+0x310>
 800c2d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c2d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2d8:	462f      	mov	r7, r5
 800c2da:	2600      	movs	r6, #0
 800c2dc:	e01b      	b.n	800c316 <__kernel_rem_pio2+0xbe>
 800c2de:	42ef      	cmn	r7, r5
 800c2e0:	d407      	bmi.n	800c2f2 <__kernel_rem_pio2+0x9a>
 800c2e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c2e6:	f7f4 f935 	bl	8000554 <__aeabi_i2d>
 800c2ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c2ee:	3501      	adds	r5, #1
 800c2f0:	e7df      	b.n	800c2b2 <__kernel_rem_pio2+0x5a>
 800c2f2:	ec51 0b18 	vmov	r0, r1, d8
 800c2f6:	e7f8      	b.n	800c2ea <__kernel_rem_pio2+0x92>
 800c2f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c300:	f7f4 f992 	bl	8000628 <__aeabi_dmul>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c30c:	f7f3 ffd6 	bl	80002bc <__adddf3>
 800c310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c314:	3601      	adds	r6, #1
 800c316:	9b05      	ldr	r3, [sp, #20]
 800c318:	429e      	cmp	r6, r3
 800c31a:	f1a7 0708 	sub.w	r7, r7, #8
 800c31e:	ddeb      	ble.n	800c2f8 <__kernel_rem_pio2+0xa0>
 800c320:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c324:	f108 0801 	add.w	r8, r8, #1
 800c328:	ecab 7b02 	vstmia	fp!, {d7}
 800c32c:	3508      	adds	r5, #8
 800c32e:	e7ca      	b.n	800c2c6 <__kernel_rem_pio2+0x6e>
 800c330:	9b00      	ldr	r3, [sp, #0]
 800c332:	aa0c      	add	r2, sp, #48	; 0x30
 800c334:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c338:	930b      	str	r3, [sp, #44]	; 0x2c
 800c33a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c33c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c340:	9c00      	ldr	r4, [sp, #0]
 800c342:	930a      	str	r3, [sp, #40]	; 0x28
 800c344:	00e3      	lsls	r3, r4, #3
 800c346:	9308      	str	r3, [sp, #32]
 800c348:	ab98      	add	r3, sp, #608	; 0x260
 800c34a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c34e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c352:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800c356:	ab70      	add	r3, sp, #448	; 0x1c0
 800c358:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c35c:	46c3      	mov	fp, r8
 800c35e:	46a1      	mov	r9, r4
 800c360:	f1b9 0f00 	cmp.w	r9, #0
 800c364:	f1a5 0508 	sub.w	r5, r5, #8
 800c368:	dc77      	bgt.n	800c45a <__kernel_rem_pio2+0x202>
 800c36a:	ec47 6b10 	vmov	d0, r6, r7
 800c36e:	4650      	mov	r0, sl
 800c370:	f000 fac2 	bl	800c8f8 <scalbn>
 800c374:	ec57 6b10 	vmov	r6, r7, d0
 800c378:	2200      	movs	r2, #0
 800c37a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c37e:	ee10 0a10 	vmov	r0, s0
 800c382:	4639      	mov	r1, r7
 800c384:	f7f4 f950 	bl	8000628 <__aeabi_dmul>
 800c388:	ec41 0b10 	vmov	d0, r0, r1
 800c38c:	f000 fb34 	bl	800c9f8 <floor>
 800c390:	4b7a      	ldr	r3, [pc, #488]	; (800c57c <__kernel_rem_pio2+0x324>)
 800c392:	ec51 0b10 	vmov	r0, r1, d0
 800c396:	2200      	movs	r2, #0
 800c398:	f7f4 f946 	bl	8000628 <__aeabi_dmul>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	f7f3 ff88 	bl	80002b8 <__aeabi_dsub>
 800c3a8:	460f      	mov	r7, r1
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	f7f4 fbec 	bl	8000b88 <__aeabi_d2iz>
 800c3b0:	9002      	str	r0, [sp, #8]
 800c3b2:	f7f4 f8cf 	bl	8000554 <__aeabi_i2d>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4630      	mov	r0, r6
 800c3bc:	4639      	mov	r1, r7
 800c3be:	f7f3 ff7b 	bl	80002b8 <__aeabi_dsub>
 800c3c2:	f1ba 0f00 	cmp.w	sl, #0
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	460f      	mov	r7, r1
 800c3ca:	dd6d      	ble.n	800c4a8 <__kernel_rem_pio2+0x250>
 800c3cc:	1e61      	subs	r1, r4, #1
 800c3ce:	ab0c      	add	r3, sp, #48	; 0x30
 800c3d0:	9d02      	ldr	r5, [sp, #8]
 800c3d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3d6:	f1ca 0018 	rsb	r0, sl, #24
 800c3da:	fa43 f200 	asr.w	r2, r3, r0
 800c3de:	4415      	add	r5, r2
 800c3e0:	4082      	lsls	r2, r0
 800c3e2:	1a9b      	subs	r3, r3, r2
 800c3e4:	aa0c      	add	r2, sp, #48	; 0x30
 800c3e6:	9502      	str	r5, [sp, #8]
 800c3e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c3ec:	f1ca 0217 	rsb	r2, sl, #23
 800c3f0:	fa43 fb02 	asr.w	fp, r3, r2
 800c3f4:	f1bb 0f00 	cmp.w	fp, #0
 800c3f8:	dd65      	ble.n	800c4c6 <__kernel_rem_pio2+0x26e>
 800c3fa:	9b02      	ldr	r3, [sp, #8]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	3301      	adds	r3, #1
 800c400:	9302      	str	r3, [sp, #8]
 800c402:	4615      	mov	r5, r2
 800c404:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c408:	4294      	cmp	r4, r2
 800c40a:	f300 809f 	bgt.w	800c54c <__kernel_rem_pio2+0x2f4>
 800c40e:	f1ba 0f00 	cmp.w	sl, #0
 800c412:	dd07      	ble.n	800c424 <__kernel_rem_pio2+0x1cc>
 800c414:	f1ba 0f01 	cmp.w	sl, #1
 800c418:	f000 80c1 	beq.w	800c59e <__kernel_rem_pio2+0x346>
 800c41c:	f1ba 0f02 	cmp.w	sl, #2
 800c420:	f000 80c7 	beq.w	800c5b2 <__kernel_rem_pio2+0x35a>
 800c424:	f1bb 0f02 	cmp.w	fp, #2
 800c428:	d14d      	bne.n	800c4c6 <__kernel_rem_pio2+0x26e>
 800c42a:	4632      	mov	r2, r6
 800c42c:	463b      	mov	r3, r7
 800c42e:	4954      	ldr	r1, [pc, #336]	; (800c580 <__kernel_rem_pio2+0x328>)
 800c430:	2000      	movs	r0, #0
 800c432:	f7f3 ff41 	bl	80002b8 <__aeabi_dsub>
 800c436:	4606      	mov	r6, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	2d00      	cmp	r5, #0
 800c43c:	d043      	beq.n	800c4c6 <__kernel_rem_pio2+0x26e>
 800c43e:	4650      	mov	r0, sl
 800c440:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c570 <__kernel_rem_pio2+0x318>
 800c444:	f000 fa58 	bl	800c8f8 <scalbn>
 800c448:	4630      	mov	r0, r6
 800c44a:	4639      	mov	r1, r7
 800c44c:	ec53 2b10 	vmov	r2, r3, d0
 800c450:	f7f3 ff32 	bl	80002b8 <__aeabi_dsub>
 800c454:	4606      	mov	r6, r0
 800c456:	460f      	mov	r7, r1
 800c458:	e035      	b.n	800c4c6 <__kernel_rem_pio2+0x26e>
 800c45a:	4b4a      	ldr	r3, [pc, #296]	; (800c584 <__kernel_rem_pio2+0x32c>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	4630      	mov	r0, r6
 800c460:	4639      	mov	r1, r7
 800c462:	f7f4 f8e1 	bl	8000628 <__aeabi_dmul>
 800c466:	f7f4 fb8f 	bl	8000b88 <__aeabi_d2iz>
 800c46a:	f7f4 f873 	bl	8000554 <__aeabi_i2d>
 800c46e:	4602      	mov	r2, r0
 800c470:	460b      	mov	r3, r1
 800c472:	ec43 2b18 	vmov	d8, r2, r3
 800c476:	4b44      	ldr	r3, [pc, #272]	; (800c588 <__kernel_rem_pio2+0x330>)
 800c478:	2200      	movs	r2, #0
 800c47a:	f7f4 f8d5 	bl	8000628 <__aeabi_dmul>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	4630      	mov	r0, r6
 800c484:	4639      	mov	r1, r7
 800c486:	f7f3 ff17 	bl	80002b8 <__aeabi_dsub>
 800c48a:	f7f4 fb7d 	bl	8000b88 <__aeabi_d2iz>
 800c48e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c492:	f84b 0b04 	str.w	r0, [fp], #4
 800c496:	ec51 0b18 	vmov	r0, r1, d8
 800c49a:	f7f3 ff0f 	bl	80002bc <__adddf3>
 800c49e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460f      	mov	r7, r1
 800c4a6:	e75b      	b.n	800c360 <__kernel_rem_pio2+0x108>
 800c4a8:	d106      	bne.n	800c4b8 <__kernel_rem_pio2+0x260>
 800c4aa:	1e63      	subs	r3, r4, #1
 800c4ac:	aa0c      	add	r2, sp, #48	; 0x30
 800c4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4b2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800c4b6:	e79d      	b.n	800c3f4 <__kernel_rem_pio2+0x19c>
 800c4b8:	4b34      	ldr	r3, [pc, #208]	; (800c58c <__kernel_rem_pio2+0x334>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f7f4 fb3a 	bl	8000b34 <__aeabi_dcmpge>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d140      	bne.n	800c546 <__kernel_rem_pio2+0x2ee>
 800c4c4:	4683      	mov	fp, r0
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	f7f4 fb13 	bl	8000af8 <__aeabi_dcmpeq>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	f000 80c1 	beq.w	800c65a <__kernel_rem_pio2+0x402>
 800c4d8:	1e65      	subs	r5, r4, #1
 800c4da:	462b      	mov	r3, r5
 800c4dc:	2200      	movs	r2, #0
 800c4de:	9900      	ldr	r1, [sp, #0]
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	da6d      	bge.n	800c5c0 <__kernel_rem_pio2+0x368>
 800c4e4:	2a00      	cmp	r2, #0
 800c4e6:	f000 808a 	beq.w	800c5fe <__kernel_rem_pio2+0x3a6>
 800c4ea:	ab0c      	add	r3, sp, #48	; 0x30
 800c4ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800c4f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 80ae 	beq.w	800c656 <__kernel_rem_pio2+0x3fe>
 800c4fa:	4650      	mov	r0, sl
 800c4fc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c570 <__kernel_rem_pio2+0x318>
 800c500:	f000 f9fa 	bl	800c8f8 <scalbn>
 800c504:	1c6b      	adds	r3, r5, #1
 800c506:	00da      	lsls	r2, r3, #3
 800c508:	9205      	str	r2, [sp, #20]
 800c50a:	ec57 6b10 	vmov	r6, r7, d0
 800c50e:	aa70      	add	r2, sp, #448	; 0x1c0
 800c510:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800c584 <__kernel_rem_pio2+0x32c>
 800c514:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800c518:	462c      	mov	r4, r5
 800c51a:	f04f 0800 	mov.w	r8, #0
 800c51e:	2c00      	cmp	r4, #0
 800c520:	f280 80d4 	bge.w	800c6cc <__kernel_rem_pio2+0x474>
 800c524:	462c      	mov	r4, r5
 800c526:	2c00      	cmp	r4, #0
 800c528:	f2c0 8102 	blt.w	800c730 <__kernel_rem_pio2+0x4d8>
 800c52c:	4b18      	ldr	r3, [pc, #96]	; (800c590 <__kernel_rem_pio2+0x338>)
 800c52e:	461e      	mov	r6, r3
 800c530:	ab70      	add	r3, sp, #448	; 0x1c0
 800c532:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800c536:	1b2b      	subs	r3, r5, r4
 800c538:	f04f 0900 	mov.w	r9, #0
 800c53c:	f04f 0a00 	mov.w	sl, #0
 800c540:	2700      	movs	r7, #0
 800c542:	9306      	str	r3, [sp, #24]
 800c544:	e0e6      	b.n	800c714 <__kernel_rem_pio2+0x4bc>
 800c546:	f04f 0b02 	mov.w	fp, #2
 800c54a:	e756      	b.n	800c3fa <__kernel_rem_pio2+0x1a2>
 800c54c:	f8d8 3000 	ldr.w	r3, [r8]
 800c550:	bb05      	cbnz	r5, 800c594 <__kernel_rem_pio2+0x33c>
 800c552:	b123      	cbz	r3, 800c55e <__kernel_rem_pio2+0x306>
 800c554:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c558:	f8c8 3000 	str.w	r3, [r8]
 800c55c:	2301      	movs	r3, #1
 800c55e:	3201      	adds	r2, #1
 800c560:	f108 0804 	add.w	r8, r8, #4
 800c564:	461d      	mov	r5, r3
 800c566:	e74f      	b.n	800c408 <__kernel_rem_pio2+0x1b0>
	...
 800c574:	3ff00000 	.word	0x3ff00000
 800c578:	0800d210 	.word	0x0800d210
 800c57c:	40200000 	.word	0x40200000
 800c580:	3ff00000 	.word	0x3ff00000
 800c584:	3e700000 	.word	0x3e700000
 800c588:	41700000 	.word	0x41700000
 800c58c:	3fe00000 	.word	0x3fe00000
 800c590:	0800d1d0 	.word	0x0800d1d0
 800c594:	1acb      	subs	r3, r1, r3
 800c596:	f8c8 3000 	str.w	r3, [r8]
 800c59a:	462b      	mov	r3, r5
 800c59c:	e7df      	b.n	800c55e <__kernel_rem_pio2+0x306>
 800c59e:	1e62      	subs	r2, r4, #1
 800c5a0:	ab0c      	add	r3, sp, #48	; 0x30
 800c5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c5aa:	a90c      	add	r1, sp, #48	; 0x30
 800c5ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c5b0:	e738      	b.n	800c424 <__kernel_rem_pio2+0x1cc>
 800c5b2:	1e62      	subs	r2, r4, #1
 800c5b4:	ab0c      	add	r3, sp, #48	; 0x30
 800c5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c5be:	e7f4      	b.n	800c5aa <__kernel_rem_pio2+0x352>
 800c5c0:	a90c      	add	r1, sp, #48	; 0x30
 800c5c2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	430a      	orrs	r2, r1
 800c5ca:	e788      	b.n	800c4de <__kernel_rem_pio2+0x286>
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c5d2:	2900      	cmp	r1, #0
 800c5d4:	d0fa      	beq.n	800c5cc <__kernel_rem_pio2+0x374>
 800c5d6:	9a08      	ldr	r2, [sp, #32]
 800c5d8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800c5dc:	446a      	add	r2, sp
 800c5de:	3a98      	subs	r2, #152	; 0x98
 800c5e0:	9208      	str	r2, [sp, #32]
 800c5e2:	9a06      	ldr	r2, [sp, #24]
 800c5e4:	a920      	add	r1, sp, #128	; 0x80
 800c5e6:	18a2      	adds	r2, r4, r2
 800c5e8:	18e3      	adds	r3, r4, r3
 800c5ea:	f104 0801 	add.w	r8, r4, #1
 800c5ee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c5f2:	9302      	str	r3, [sp, #8]
 800c5f4:	9b02      	ldr	r3, [sp, #8]
 800c5f6:	4543      	cmp	r3, r8
 800c5f8:	da04      	bge.n	800c604 <__kernel_rem_pio2+0x3ac>
 800c5fa:	461c      	mov	r4, r3
 800c5fc:	e6a2      	b.n	800c344 <__kernel_rem_pio2+0xec>
 800c5fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c600:	2301      	movs	r3, #1
 800c602:	e7e4      	b.n	800c5ce <__kernel_rem_pio2+0x376>
 800c604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c606:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c60a:	f7f3 ffa3 	bl	8000554 <__aeabi_i2d>
 800c60e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c614:	46ab      	mov	fp, r5
 800c616:	461c      	mov	r4, r3
 800c618:	f04f 0900 	mov.w	r9, #0
 800c61c:	2600      	movs	r6, #0
 800c61e:	2700      	movs	r7, #0
 800c620:	9b05      	ldr	r3, [sp, #20]
 800c622:	4599      	cmp	r9, r3
 800c624:	dd06      	ble.n	800c634 <__kernel_rem_pio2+0x3dc>
 800c626:	9b08      	ldr	r3, [sp, #32]
 800c628:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c62c:	f108 0801 	add.w	r8, r8, #1
 800c630:	9308      	str	r3, [sp, #32]
 800c632:	e7df      	b.n	800c5f4 <__kernel_rem_pio2+0x39c>
 800c634:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c638:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c63c:	f7f3 fff4 	bl	8000628 <__aeabi_dmul>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4630      	mov	r0, r6
 800c646:	4639      	mov	r1, r7
 800c648:	f7f3 fe38 	bl	80002bc <__adddf3>
 800c64c:	f109 0901 	add.w	r9, r9, #1
 800c650:	4606      	mov	r6, r0
 800c652:	460f      	mov	r7, r1
 800c654:	e7e4      	b.n	800c620 <__kernel_rem_pio2+0x3c8>
 800c656:	3d01      	subs	r5, #1
 800c658:	e747      	b.n	800c4ea <__kernel_rem_pio2+0x292>
 800c65a:	ec47 6b10 	vmov	d0, r6, r7
 800c65e:	f1ca 0000 	rsb	r0, sl, #0
 800c662:	f000 f949 	bl	800c8f8 <scalbn>
 800c666:	ec57 6b10 	vmov	r6, r7, d0
 800c66a:	4ba0      	ldr	r3, [pc, #640]	; (800c8ec <__kernel_rem_pio2+0x694>)
 800c66c:	ee10 0a10 	vmov	r0, s0
 800c670:	2200      	movs	r2, #0
 800c672:	4639      	mov	r1, r7
 800c674:	f7f4 fa5e 	bl	8000b34 <__aeabi_dcmpge>
 800c678:	b1f8      	cbz	r0, 800c6ba <__kernel_rem_pio2+0x462>
 800c67a:	4b9d      	ldr	r3, [pc, #628]	; (800c8f0 <__kernel_rem_pio2+0x698>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	f7f3 ffd1 	bl	8000628 <__aeabi_dmul>
 800c686:	f7f4 fa7f 	bl	8000b88 <__aeabi_d2iz>
 800c68a:	4680      	mov	r8, r0
 800c68c:	f7f3 ff62 	bl	8000554 <__aeabi_i2d>
 800c690:	4b96      	ldr	r3, [pc, #600]	; (800c8ec <__kernel_rem_pio2+0x694>)
 800c692:	2200      	movs	r2, #0
 800c694:	f7f3 ffc8 	bl	8000628 <__aeabi_dmul>
 800c698:	460b      	mov	r3, r1
 800c69a:	4602      	mov	r2, r0
 800c69c:	4639      	mov	r1, r7
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f7f3 fe0a 	bl	80002b8 <__aeabi_dsub>
 800c6a4:	f7f4 fa70 	bl	8000b88 <__aeabi_d2iz>
 800c6a8:	1c65      	adds	r5, r4, #1
 800c6aa:	ab0c      	add	r3, sp, #48	; 0x30
 800c6ac:	f10a 0a18 	add.w	sl, sl, #24
 800c6b0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c6b4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c6b8:	e71f      	b.n	800c4fa <__kernel_rem_pio2+0x2a2>
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	4639      	mov	r1, r7
 800c6be:	f7f4 fa63 	bl	8000b88 <__aeabi_d2iz>
 800c6c2:	ab0c      	add	r3, sp, #48	; 0x30
 800c6c4:	4625      	mov	r5, r4
 800c6c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c6ca:	e716      	b.n	800c4fa <__kernel_rem_pio2+0x2a2>
 800c6cc:	ab0c      	add	r3, sp, #48	; 0x30
 800c6ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c6d2:	f7f3 ff3f 	bl	8000554 <__aeabi_i2d>
 800c6d6:	4632      	mov	r2, r6
 800c6d8:	463b      	mov	r3, r7
 800c6da:	f7f3 ffa5 	bl	8000628 <__aeabi_dmul>
 800c6de:	4642      	mov	r2, r8
 800c6e0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c6e4:	464b      	mov	r3, r9
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	4639      	mov	r1, r7
 800c6ea:	f7f3 ff9d 	bl	8000628 <__aeabi_dmul>
 800c6ee:	3c01      	subs	r4, #1
 800c6f0:	4606      	mov	r6, r0
 800c6f2:	460f      	mov	r7, r1
 800c6f4:	e713      	b.n	800c51e <__kernel_rem_pio2+0x2c6>
 800c6f6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c6fa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800c6fe:	f7f3 ff93 	bl	8000628 <__aeabi_dmul>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4648      	mov	r0, r9
 800c708:	4651      	mov	r1, sl
 800c70a:	f7f3 fdd7 	bl	80002bc <__adddf3>
 800c70e:	3701      	adds	r7, #1
 800c710:	4681      	mov	r9, r0
 800c712:	468a      	mov	sl, r1
 800c714:	9b00      	ldr	r3, [sp, #0]
 800c716:	429f      	cmp	r7, r3
 800c718:	dc02      	bgt.n	800c720 <__kernel_rem_pio2+0x4c8>
 800c71a:	9b06      	ldr	r3, [sp, #24]
 800c71c:	429f      	cmp	r7, r3
 800c71e:	ddea      	ble.n	800c6f6 <__kernel_rem_pio2+0x49e>
 800c720:	9a06      	ldr	r2, [sp, #24]
 800c722:	ab48      	add	r3, sp, #288	; 0x120
 800c724:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800c728:	e9c6 9a00 	strd	r9, sl, [r6]
 800c72c:	3c01      	subs	r4, #1
 800c72e:	e6fa      	b.n	800c526 <__kernel_rem_pio2+0x2ce>
 800c730:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c732:	2b02      	cmp	r3, #2
 800c734:	dc0b      	bgt.n	800c74e <__kernel_rem_pio2+0x4f6>
 800c736:	2b00      	cmp	r3, #0
 800c738:	dc39      	bgt.n	800c7ae <__kernel_rem_pio2+0x556>
 800c73a:	d05d      	beq.n	800c7f8 <__kernel_rem_pio2+0x5a0>
 800c73c:	9b02      	ldr	r3, [sp, #8]
 800c73e:	f003 0007 	and.w	r0, r3, #7
 800c742:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c746:	ecbd 8b02 	vpop	{d8}
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c750:	2b03      	cmp	r3, #3
 800c752:	d1f3      	bne.n	800c73c <__kernel_rem_pio2+0x4e4>
 800c754:	9b05      	ldr	r3, [sp, #20]
 800c756:	9500      	str	r5, [sp, #0]
 800c758:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c75c:	eb0d 0403 	add.w	r4, sp, r3
 800c760:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800c764:	46a2      	mov	sl, r4
 800c766:	9b00      	ldr	r3, [sp, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f1aa 0a08 	sub.w	sl, sl, #8
 800c76e:	dc69      	bgt.n	800c844 <__kernel_rem_pio2+0x5ec>
 800c770:	46aa      	mov	sl, r5
 800c772:	f1ba 0f01 	cmp.w	sl, #1
 800c776:	f1a4 0408 	sub.w	r4, r4, #8
 800c77a:	f300 8083 	bgt.w	800c884 <__kernel_rem_pio2+0x62c>
 800c77e:	9c05      	ldr	r4, [sp, #20]
 800c780:	ab48      	add	r3, sp, #288	; 0x120
 800c782:	441c      	add	r4, r3
 800c784:	2000      	movs	r0, #0
 800c786:	2100      	movs	r1, #0
 800c788:	2d01      	cmp	r5, #1
 800c78a:	f300 809a 	bgt.w	800c8c2 <__kernel_rem_pio2+0x66a>
 800c78e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800c792:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c796:	f1bb 0f00 	cmp.w	fp, #0
 800c79a:	f040 8098 	bne.w	800c8ce <__kernel_rem_pio2+0x676>
 800c79e:	9b04      	ldr	r3, [sp, #16]
 800c7a0:	e9c3 7800 	strd	r7, r8, [r3]
 800c7a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c7a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c7ac:	e7c6      	b.n	800c73c <__kernel_rem_pio2+0x4e4>
 800c7ae:	9e05      	ldr	r6, [sp, #20]
 800c7b0:	ab48      	add	r3, sp, #288	; 0x120
 800c7b2:	441e      	add	r6, r3
 800c7b4:	462c      	mov	r4, r5
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	2c00      	cmp	r4, #0
 800c7bc:	da33      	bge.n	800c826 <__kernel_rem_pio2+0x5ce>
 800c7be:	f1bb 0f00 	cmp.w	fp, #0
 800c7c2:	d036      	beq.n	800c832 <__kernel_rem_pio2+0x5da>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7ca:	9c04      	ldr	r4, [sp, #16]
 800c7cc:	e9c4 2300 	strd	r2, r3, [r4]
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c7d8:	f7f3 fd6e 	bl	80002b8 <__aeabi_dsub>
 800c7dc:	ae4a      	add	r6, sp, #296	; 0x128
 800c7de:	2401      	movs	r4, #1
 800c7e0:	42a5      	cmp	r5, r4
 800c7e2:	da29      	bge.n	800c838 <__kernel_rem_pio2+0x5e0>
 800c7e4:	f1bb 0f00 	cmp.w	fp, #0
 800c7e8:	d002      	beq.n	800c7f0 <__kernel_rem_pio2+0x598>
 800c7ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	9b04      	ldr	r3, [sp, #16]
 800c7f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c7f6:	e7a1      	b.n	800c73c <__kernel_rem_pio2+0x4e4>
 800c7f8:	9c05      	ldr	r4, [sp, #20]
 800c7fa:	ab48      	add	r3, sp, #288	; 0x120
 800c7fc:	441c      	add	r4, r3
 800c7fe:	2000      	movs	r0, #0
 800c800:	2100      	movs	r1, #0
 800c802:	2d00      	cmp	r5, #0
 800c804:	da09      	bge.n	800c81a <__kernel_rem_pio2+0x5c2>
 800c806:	f1bb 0f00 	cmp.w	fp, #0
 800c80a:	d002      	beq.n	800c812 <__kernel_rem_pio2+0x5ba>
 800c80c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c810:	4619      	mov	r1, r3
 800c812:	9b04      	ldr	r3, [sp, #16]
 800c814:	e9c3 0100 	strd	r0, r1, [r3]
 800c818:	e790      	b.n	800c73c <__kernel_rem_pio2+0x4e4>
 800c81a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c81e:	f7f3 fd4d 	bl	80002bc <__adddf3>
 800c822:	3d01      	subs	r5, #1
 800c824:	e7ed      	b.n	800c802 <__kernel_rem_pio2+0x5aa>
 800c826:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c82a:	f7f3 fd47 	bl	80002bc <__adddf3>
 800c82e:	3c01      	subs	r4, #1
 800c830:	e7c3      	b.n	800c7ba <__kernel_rem_pio2+0x562>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	e7c8      	b.n	800c7ca <__kernel_rem_pio2+0x572>
 800c838:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c83c:	f7f3 fd3e 	bl	80002bc <__adddf3>
 800c840:	3401      	adds	r4, #1
 800c842:	e7cd      	b.n	800c7e0 <__kernel_rem_pio2+0x588>
 800c844:	e9da 8900 	ldrd	r8, r9, [sl]
 800c848:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c84c:	9b00      	ldr	r3, [sp, #0]
 800c84e:	3b01      	subs	r3, #1
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	4632      	mov	r2, r6
 800c854:	463b      	mov	r3, r7
 800c856:	4640      	mov	r0, r8
 800c858:	4649      	mov	r1, r9
 800c85a:	f7f3 fd2f 	bl	80002bc <__adddf3>
 800c85e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f3 fd25 	bl	80002b8 <__aeabi_dsub>
 800c86e:	4632      	mov	r2, r6
 800c870:	463b      	mov	r3, r7
 800c872:	f7f3 fd23 	bl	80002bc <__adddf3>
 800c876:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c87a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c87e:	ed8a 7b00 	vstr	d7, [sl]
 800c882:	e770      	b.n	800c766 <__kernel_rem_pio2+0x50e>
 800c884:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c888:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c88c:	4640      	mov	r0, r8
 800c88e:	4632      	mov	r2, r6
 800c890:	463b      	mov	r3, r7
 800c892:	4649      	mov	r1, r9
 800c894:	f7f3 fd12 	bl	80002bc <__adddf3>
 800c898:	e9cd 0100 	strd	r0, r1, [sp]
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	f7f3 fd08 	bl	80002b8 <__aeabi_dsub>
 800c8a8:	4632      	mov	r2, r6
 800c8aa:	463b      	mov	r3, r7
 800c8ac:	f7f3 fd06 	bl	80002bc <__adddf3>
 800c8b0:	ed9d 7b00 	vldr	d7, [sp]
 800c8b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8b8:	ed84 7b00 	vstr	d7, [r4]
 800c8bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8c0:	e757      	b.n	800c772 <__kernel_rem_pio2+0x51a>
 800c8c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c8c6:	f7f3 fcf9 	bl	80002bc <__adddf3>
 800c8ca:	3d01      	subs	r5, #1
 800c8cc:	e75c      	b.n	800c788 <__kernel_rem_pio2+0x530>
 800c8ce:	9b04      	ldr	r3, [sp, #16]
 800c8d0:	9a04      	ldr	r2, [sp, #16]
 800c8d2:	601f      	str	r7, [r3, #0]
 800c8d4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c8d8:	605c      	str	r4, [r3, #4]
 800c8da:	609d      	str	r5, [r3, #8]
 800c8dc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c8e0:	60d3      	str	r3, [r2, #12]
 800c8e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8e6:	6110      	str	r0, [r2, #16]
 800c8e8:	6153      	str	r3, [r2, #20]
 800c8ea:	e727      	b.n	800c73c <__kernel_rem_pio2+0x4e4>
 800c8ec:	41700000 	.word	0x41700000
 800c8f0:	3e700000 	.word	0x3e700000
 800c8f4:	00000000 	.word	0x00000000

0800c8f8 <scalbn>:
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	ec55 4b10 	vmov	r4, r5, d0
 800c8fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c902:	4606      	mov	r6, r0
 800c904:	462b      	mov	r3, r5
 800c906:	b999      	cbnz	r1, 800c930 <scalbn+0x38>
 800c908:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c90c:	4323      	orrs	r3, r4
 800c90e:	d03f      	beq.n	800c990 <scalbn+0x98>
 800c910:	4b35      	ldr	r3, [pc, #212]	; (800c9e8 <scalbn+0xf0>)
 800c912:	4629      	mov	r1, r5
 800c914:	ee10 0a10 	vmov	r0, s0
 800c918:	2200      	movs	r2, #0
 800c91a:	f7f3 fe85 	bl	8000628 <__aeabi_dmul>
 800c91e:	4b33      	ldr	r3, [pc, #204]	; (800c9ec <scalbn+0xf4>)
 800c920:	429e      	cmp	r6, r3
 800c922:	4604      	mov	r4, r0
 800c924:	460d      	mov	r5, r1
 800c926:	da10      	bge.n	800c94a <scalbn+0x52>
 800c928:	a327      	add	r3, pc, #156	; (adr r3, 800c9c8 <scalbn+0xd0>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	e01f      	b.n	800c970 <scalbn+0x78>
 800c930:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c934:	4291      	cmp	r1, r2
 800c936:	d10c      	bne.n	800c952 <scalbn+0x5a>
 800c938:	ee10 2a10 	vmov	r2, s0
 800c93c:	4620      	mov	r0, r4
 800c93e:	4629      	mov	r1, r5
 800c940:	f7f3 fcbc 	bl	80002bc <__adddf3>
 800c944:	4604      	mov	r4, r0
 800c946:	460d      	mov	r5, r1
 800c948:	e022      	b.n	800c990 <scalbn+0x98>
 800c94a:	460b      	mov	r3, r1
 800c94c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c950:	3936      	subs	r1, #54	; 0x36
 800c952:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c956:	4296      	cmp	r6, r2
 800c958:	dd0d      	ble.n	800c976 <scalbn+0x7e>
 800c95a:	2d00      	cmp	r5, #0
 800c95c:	a11c      	add	r1, pc, #112	; (adr r1, 800c9d0 <scalbn+0xd8>)
 800c95e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c962:	da02      	bge.n	800c96a <scalbn+0x72>
 800c964:	a11c      	add	r1, pc, #112	; (adr r1, 800c9d8 <scalbn+0xe0>)
 800c966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c96a:	a319      	add	r3, pc, #100	; (adr r3, 800c9d0 <scalbn+0xd8>)
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	f7f3 fe5a 	bl	8000628 <__aeabi_dmul>
 800c974:	e7e6      	b.n	800c944 <scalbn+0x4c>
 800c976:	1872      	adds	r2, r6, r1
 800c978:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c97c:	428a      	cmp	r2, r1
 800c97e:	dcec      	bgt.n	800c95a <scalbn+0x62>
 800c980:	2a00      	cmp	r2, #0
 800c982:	dd08      	ble.n	800c996 <scalbn+0x9e>
 800c984:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c988:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c98c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c990:	ec45 4b10 	vmov	d0, r4, r5
 800c994:	bd70      	pop	{r4, r5, r6, pc}
 800c996:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c99a:	da08      	bge.n	800c9ae <scalbn+0xb6>
 800c99c:	2d00      	cmp	r5, #0
 800c99e:	a10a      	add	r1, pc, #40	; (adr r1, 800c9c8 <scalbn+0xd0>)
 800c9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9a4:	dac0      	bge.n	800c928 <scalbn+0x30>
 800c9a6:	a10e      	add	r1, pc, #56	; (adr r1, 800c9e0 <scalbn+0xe8>)
 800c9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ac:	e7bc      	b.n	800c928 <scalbn+0x30>
 800c9ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c9b2:	3236      	adds	r2, #54	; 0x36
 800c9b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c9b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c9bc:	4620      	mov	r0, r4
 800c9be:	4b0c      	ldr	r3, [pc, #48]	; (800c9f0 <scalbn+0xf8>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	e7d5      	b.n	800c970 <scalbn+0x78>
 800c9c4:	f3af 8000 	nop.w
 800c9c8:	c2f8f359 	.word	0xc2f8f359
 800c9cc:	01a56e1f 	.word	0x01a56e1f
 800c9d0:	8800759c 	.word	0x8800759c
 800c9d4:	7e37e43c 	.word	0x7e37e43c
 800c9d8:	8800759c 	.word	0x8800759c
 800c9dc:	fe37e43c 	.word	0xfe37e43c
 800c9e0:	c2f8f359 	.word	0xc2f8f359
 800c9e4:	81a56e1f 	.word	0x81a56e1f
 800c9e8:	43500000 	.word	0x43500000
 800c9ec:	ffff3cb0 	.word	0xffff3cb0
 800c9f0:	3c900000 	.word	0x3c900000
 800c9f4:	00000000 	.word	0x00000000

0800c9f8 <floor>:
 800c9f8:	ec51 0b10 	vmov	r0, r1, d0
 800c9fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca04:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800ca08:	2e13      	cmp	r6, #19
 800ca0a:	ee10 5a10 	vmov	r5, s0
 800ca0e:	ee10 8a10 	vmov	r8, s0
 800ca12:	460c      	mov	r4, r1
 800ca14:	dc31      	bgt.n	800ca7a <floor+0x82>
 800ca16:	2e00      	cmp	r6, #0
 800ca18:	da14      	bge.n	800ca44 <floor+0x4c>
 800ca1a:	a333      	add	r3, pc, #204	; (adr r3, 800cae8 <floor+0xf0>)
 800ca1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca20:	f7f3 fc4c 	bl	80002bc <__adddf3>
 800ca24:	2200      	movs	r2, #0
 800ca26:	2300      	movs	r3, #0
 800ca28:	f7f4 f88e 	bl	8000b48 <__aeabi_dcmpgt>
 800ca2c:	b138      	cbz	r0, 800ca3e <floor+0x46>
 800ca2e:	2c00      	cmp	r4, #0
 800ca30:	da53      	bge.n	800cada <floor+0xe2>
 800ca32:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ca36:	4325      	orrs	r5, r4
 800ca38:	d052      	beq.n	800cae0 <floor+0xe8>
 800ca3a:	4c2d      	ldr	r4, [pc, #180]	; (800caf0 <floor+0xf8>)
 800ca3c:	2500      	movs	r5, #0
 800ca3e:	4621      	mov	r1, r4
 800ca40:	4628      	mov	r0, r5
 800ca42:	e024      	b.n	800ca8e <floor+0x96>
 800ca44:	4f2b      	ldr	r7, [pc, #172]	; (800caf4 <floor+0xfc>)
 800ca46:	4137      	asrs	r7, r6
 800ca48:	ea01 0307 	and.w	r3, r1, r7
 800ca4c:	4303      	orrs	r3, r0
 800ca4e:	d01e      	beq.n	800ca8e <floor+0x96>
 800ca50:	a325      	add	r3, pc, #148	; (adr r3, 800cae8 <floor+0xf0>)
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	f7f3 fc31 	bl	80002bc <__adddf3>
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	f7f4 f873 	bl	8000b48 <__aeabi_dcmpgt>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	d0eb      	beq.n	800ca3e <floor+0x46>
 800ca66:	2c00      	cmp	r4, #0
 800ca68:	bfbe      	ittt	lt
 800ca6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ca6e:	4133      	asrlt	r3, r6
 800ca70:	18e4      	addlt	r4, r4, r3
 800ca72:	ea24 0407 	bic.w	r4, r4, r7
 800ca76:	2500      	movs	r5, #0
 800ca78:	e7e1      	b.n	800ca3e <floor+0x46>
 800ca7a:	2e33      	cmp	r6, #51	; 0x33
 800ca7c:	dd0b      	ble.n	800ca96 <floor+0x9e>
 800ca7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca82:	d104      	bne.n	800ca8e <floor+0x96>
 800ca84:	ee10 2a10 	vmov	r2, s0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	f7f3 fc17 	bl	80002bc <__adddf3>
 800ca8e:	ec41 0b10 	vmov	d0, r0, r1
 800ca92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca96:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ca9a:	f04f 37ff 	mov.w	r7, #4294967295
 800ca9e:	40df      	lsrs	r7, r3
 800caa0:	4238      	tst	r0, r7
 800caa2:	d0f4      	beq.n	800ca8e <floor+0x96>
 800caa4:	a310      	add	r3, pc, #64	; (adr r3, 800cae8 <floor+0xf0>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f7f3 fc07 	bl	80002bc <__adddf3>
 800caae:	2200      	movs	r2, #0
 800cab0:	2300      	movs	r3, #0
 800cab2:	f7f4 f849 	bl	8000b48 <__aeabi_dcmpgt>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	d0c1      	beq.n	800ca3e <floor+0x46>
 800caba:	2c00      	cmp	r4, #0
 800cabc:	da0a      	bge.n	800cad4 <floor+0xdc>
 800cabe:	2e14      	cmp	r6, #20
 800cac0:	d101      	bne.n	800cac6 <floor+0xce>
 800cac2:	3401      	adds	r4, #1
 800cac4:	e006      	b.n	800cad4 <floor+0xdc>
 800cac6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800caca:	2301      	movs	r3, #1
 800cacc:	40b3      	lsls	r3, r6
 800cace:	441d      	add	r5, r3
 800cad0:	45a8      	cmp	r8, r5
 800cad2:	d8f6      	bhi.n	800cac2 <floor+0xca>
 800cad4:	ea25 0507 	bic.w	r5, r5, r7
 800cad8:	e7b1      	b.n	800ca3e <floor+0x46>
 800cada:	2500      	movs	r5, #0
 800cadc:	462c      	mov	r4, r5
 800cade:	e7ae      	b.n	800ca3e <floor+0x46>
 800cae0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cae4:	e7ab      	b.n	800ca3e <floor+0x46>
 800cae6:	bf00      	nop
 800cae8:	8800759c 	.word	0x8800759c
 800caec:	7e37e43c 	.word	0x7e37e43c
 800caf0:	bff00000 	.word	0xbff00000
 800caf4:	000fffff 	.word	0x000fffff

0800caf8 <_init>:
 800caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafa:	bf00      	nop
 800cafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cafe:	bc08      	pop	{r3}
 800cb00:	469e      	mov	lr, r3
 800cb02:	4770      	bx	lr

0800cb04 <_fini>:
 800cb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb06:	bf00      	nop
 800cb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb0a:	bc08      	pop	{r3}
 800cb0c:	469e      	mov	lr, r3
 800cb0e:	4770      	bx	lr
